// Generated by Haxe 4.0.5+f5259a9eb
(function (global, undefined) {
    "use strict";

    if (global.setImmediate) {
        return;
    }

    var nextHandle = 1; // Spec says greater than zero
    var tasksByHandle = {};
    var currentlyRunningATask = false;
    var doc = global.document;
    var setImmediate;

    function addFromSetImmediateArguments(args) {
        tasksByHandle[nextHandle] = partiallyApplied.apply(undefined, args);
        return nextHandle++;
    }

    // This function accepts the same arguments as setImmediate, but
    // returns a function that requires no arguments.
    function partiallyApplied(handler) {
        var args = [].slice.call(arguments, 1);
        return function() {
            if (typeof handler === "function") {
                handler.apply(undefined, args);
            } else {
                (new Function("" + handler))();
            }
        };
    }

    function runIfPresent(handle) {
        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
        // So if we're currently running a task, we'll need to delay this invocation.
        if (currentlyRunningATask) {
            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
            // "too much recursion" error.
            setTimeout(partiallyApplied(runIfPresent, handle), 0);
        } else {
            var task = tasksByHandle[handle];
            if (task) {
                currentlyRunningATask = true;
                try {
                    task();
                } finally {
                    clearImmediate(handle);
                    currentlyRunningATask = false;
                }
            }
        }
    }

    function clearImmediate(handle) {
        delete tasksByHandle[handle];
    }

    function installNextTickImplementation() {
        setImmediate = function() {
            var handle = addFromSetImmediateArguments(arguments);
            process.nextTick(partiallyApplied(runIfPresent, handle));
            return handle;
        };
    }

    function canUsePostMessage() {
        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
        // where `global.postMessage` means something completely different and can't be used for this purpose.
        if (global.postMessage && !global.importScripts) {
            var postMessageIsAsynchronous = true;
            var oldOnMessage = global.onmessage;
            global.onmessage = function() {
                postMessageIsAsynchronous = false;
            };
            global.postMessage("", "*");
            global.onmessage = oldOnMessage;
            return postMessageIsAsynchronous;
        }
    }

    function installPostMessageImplementation() {
        // Installs an event handler on `global` for the `message` event: see
        // * https://developer.mozilla.org/en/DOM/window.postMessage
        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

        var messagePrefix = "setImmediate$" + Math.random() + "$";
        var onGlobalMessage = function(event) {
            if (event.source === global &&
                typeof event.data === "string" &&
                event.data.indexOf(messagePrefix) === 0) {
                runIfPresent(+event.data.slice(messagePrefix.length));
            }
        };

        if (global.addEventListener) {
            global.addEventListener("message", onGlobalMessage, false);
        } else {
            global.attachEvent("onmessage", onGlobalMessage);
        }

        setImmediate = function() {
            var handle = addFromSetImmediateArguments(arguments);
            global.postMessage(messagePrefix + handle, "*");
            return handle;
        };
    }

    function installMessageChannelImplementation() {
        var channel = new MessageChannel();
        channel.port1.onmessage = function(event) {
            var handle = event.data;
            runIfPresent(handle);
        };

        setImmediate = function() {
            var handle = addFromSetImmediateArguments(arguments);
            channel.port2.postMessage(handle);
            return handle;
        };
    }

    function installReadyStateChangeImplementation() {
        var html = doc.documentElement;
        setImmediate = function() {
            var handle = addFromSetImmediateArguments(arguments);
            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
            var script = doc.createElement("script");
            script.onreadystatechange = function () {
                runIfPresent(handle);
                script.onreadystatechange = null;
                html.removeChild(script);
                script = null;
            };
            html.appendChild(script);
            return handle;
        };
    }

    function installSetTimeoutImplementation() {
        setImmediate = function() {
            var handle = addFromSetImmediateArguments(arguments);
            setTimeout(partiallyApplied(runIfPresent, handle), 0);
            return handle;
        };
    }

    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

    // Don't get fooled by e.g. browserify environments.
    if ({}.toString.call(global.process) === "[object process]") {
        // For Node.js before 0.9
        installNextTickImplementation();

    } else if (canUsePostMessage()) {
        // For non-IE10 modern browsers
        installPostMessageImplementation();

    } else if (global.MessageChannel) {
        // For web workers, where supported
        installMessageChannelImplementation();

    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
        // For IE 6â€“8
        installReadyStateChangeImplementation();

    } else {
        // For older browsers
        installSetTimeoutImplementation();
    }

    attachTo.setImmediate = setImmediate;
    attachTo.clearImmediate = clearImmediate;
}(new Function("return this")()));

;(function ($hx_exports, $global) { "use strict";
$hx_exports["promhx"] = $hx_exports["promhx"] || {};
$hx_exports["kha"] = $hx_exports["kha"] || {};
$hx_exports["kha"]["input"] = $hx_exports["kha"]["input"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DateTools = function() { };
$hxClasses["DateTools"] = DateTools;
DateTools.__name__ = "DateTools";
DateTools.__format_get = function(d,e) {
	switch(e) {
	case "%":
		return "%";
	case "A":
		return DateTools.DAY_NAMES[d.getDay()];
	case "B":
		return DateTools.MONTH_NAMES[d.getMonth()];
	case "C":
		return StringTools.lpad(Std.string(d.getFullYear() / 100 | 0),"0",2);
	case "D":
		return DateTools.__format(d,"%m/%d/%y");
	case "F":
		return DateTools.__format(d,"%Y-%m-%d");
	case "I":case "l":
		var hour = d.getHours() % 12;
		return StringTools.lpad(Std.string(hour == 0 ? 12 : hour),e == "I" ? "0" : " ",2);
	case "M":
		return StringTools.lpad(Std.string(d.getMinutes()),"0",2);
	case "R":
		return DateTools.__format(d,"%H:%M");
	case "S":
		return StringTools.lpad(Std.string(d.getSeconds()),"0",2);
	case "T":
		return DateTools.__format(d,"%H:%M:%S");
	case "Y":
		return Std.string(d.getFullYear());
	case "a":
		return DateTools.DAY_SHORT_NAMES[d.getDay()];
	case "b":case "h":
		return DateTools.MONTH_SHORT_NAMES[d.getMonth()];
	case "d":
		return StringTools.lpad(Std.string(d.getDate()),"0",2);
	case "e":
		return Std.string(d.getDate());
	case "H":case "k":
		return StringTools.lpad(Std.string(d.getHours()),e == "H" ? "0" : " ",2);
	case "m":
		return StringTools.lpad(Std.string(d.getMonth() + 1),"0",2);
	case "n":
		return "\n";
	case "p":
		if(d.getHours() > 11) {
			return "PM";
		} else {
			return "AM";
		}
		break;
	case "r":
		return DateTools.__format(d,"%I:%M:%S %p");
	case "s":
		return Std.string(d.getTime() / 1000 | 0);
	case "t":
		return "\t";
	case "u":
		var t = d.getDay();
		if(t == 0) {
			return "7";
		} else if(t == null) {
			return "null";
		} else {
			return "" + t;
		}
		break;
	case "w":
		return Std.string(d.getDay());
	case "y":
		return StringTools.lpad(Std.string(d.getFullYear() % 100),"0",2);
	default:
		throw new js__$Boot_HaxeError("Date.format %" + e + "- not implemented yet.");
	}
};
DateTools.__format = function(d,f) {
	var r_b = "";
	var p = 0;
	while(true) {
		var np = f.indexOf("%",p);
		if(np < 0) {
			break;
		}
		var len = np - p;
		r_b += len == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len);
		r_b += Std.string(DateTools.__format_get(d,HxOverrides.substr(f,np + 1,1)));
		p = np + 2;
	}
	var len1 = f.length - p;
	r_b += len1 == null ? HxOverrides.substr(f,p,null) : HxOverrides.substr(f,p,len1);
	return r_b;
};
DateTools.format = function(d,f) {
	return DateTools.__format(d,f);
};
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedLeft: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return HxOverrides.substr(this.r.s,0,this.r.m.index);
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,split: function(s) {
		return s.replace(this.r,"#__delim__#").split("#__delim__#");
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.dateStr = function(date) {
	var m = date.getMonth() + 1;
	var d = date.getDate();
	var h = date.getHours();
	var mi = date.getMinutes();
	var s = date.getSeconds();
	return date.getFullYear() + "-" + (m < 10 ? "0" + m : "" + m) + "-" + (d < 10 ? "0" + d : "" + d) + " " + (h < 10 ? "0" + h : "" + h) + ":" + (mi < 10 ? "0" + mi : "" + mi) + ":" + (s < 10 ? "0" + s : "" + s);
};
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) a.push(i.next());
	return a;
};
Lambda.fold = function(it,f,first) {
	var x = $getIterator(it);
	while(x.hasNext()) first = f(x.next(),first);
	return first;
};
Lambda.indexOf = function(it,v) {
	var i = 0;
	var v2 = $getIterator(it);
	while(v2.hasNext()) {
		if(v == v2.next()) {
			return i;
		}
		++i;
	}
	return -1;
};
Lambda.find = function(it,f) {
	var v = $getIterator(it);
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var Main = function() {
	this.jetGuiInput = null;
	this.inputHandler = new banan_input_InputHandler(1);
	this.timeProvider = new banan_time_TimeProvider();
	this.renderSystem = new banan_render_RenderSystem(1);
	this.moduleManager = new banan_module_ModuleManager("viewer",null);
	this.moduleProvider = new banan_module_ModuleProvider(this.moduleManager,1);
	this.moduleManager.createModule(banan_display_DisplaySystem,0);
	this.moduleManager.createModule(ui2viewer_module_ViewerTooltipModule,1);
	this.moduleManager.createModule(banan_es_EntitySystem,1);
	this.moduleManager.createModule(banan_es_EntityDelayedDisposer,1);
	this.moduleManager.createModule(banan_display_NodeSystem,1);
	this.moduleManager.createModule(ui2viewer_module_MainModule,1);
	this.moduleManager.createModule(banan_resource_ResourceManager,1);
	this.moduleManager.addModule(new banan_render_render2_Render2Context("::shortName::::id::::primitive::::structure::",1));
	this.moduleManager.createModule(banan_font_FontModule,1);
	this.moduleManager.createModule(ui2viewer_module_ResourceSettingImpl,1);
	this.moduleManager.createModule(ui2viewer_module_FileSystemImpl,1);
	this.moduleManager.createModule(banan_load_LoadingProgressModule,1);
	this.moduleManager.createModule(jetgui_fn_GuiFunctionModule,1);
	this.moduleManager.createModule(ui2viewer_module_ViewerLangModule,1);
	this.moduleManager.createModule(ui2viewer_module_ViewerDeviceProfileResolver,1);
	this.moduleManager.addModule(this.renderSystem);
	this.moduleManager.addModule(new banan_time_TimeProviderModule(this.timeProvider,1));
	this.moduleManager.addModule(this.moduleProvider);
	this.moduleManager.addModule(this.inputHandler);
	this.moduleManager.createModule(banan_input_InputSystem,1);
	this.moduleManager.createModule(banan_backend_kha_input_KhaInput,1);
	this.moduleManager.createModule(banan_display_NodeLookModule,1);
	this.moduleManager.createModule(banan_filesystem_PreloadFileListModule,1);
	this.moduleManager.createModule(banan_notificator_NotificatorModule,1);
	this.moduleManager.addModule(new jetgui_JetGuiSystem(2,[]));
	banan_render_render2_node_NodeRenderer.DEBUG_DRAW_NODES = true;
	kha_input_Keyboard.get().notify($bind(this,this.handleKeyDown),$bind(this,this.handleKeyUp),null);
	this.preInitializeUpdateId = kha_Scheduler.addFrameTask($bind(this,this.preInitializeUpdate),0);
	this.timeProvider.updateServerTime(new Date().getTime() / 1000);
	banan_utils_PromhxEventLoop.init();
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	kha_System.start(new kha_SystemOptions("ui2viewer",1024,768,null,null),function(_) {
		new Main();
	});
};
Main.prototype = {
	moduleManager: null
	,renderSystem: null
	,timeProvider: null
	,inputHandler: null
	,moduleProvider: null
	,jetGuiInput: null
	,preInitializeUpdateId: null
	,preInitializeUpdate: function() {
		this.updateImpl();
		var _this = this.moduleManager;
		var tmp;
		if(_this.isInitialized) {
			if(_this.parent != null) {
				var _this1 = _this.parent;
				tmp = _this1.isInitialized && (_this1.parent == null || _this1.parent.get_isInitialized());
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			kha_Scheduler.removeFrameTask(this.preInitializeUpdateId);
			kha_Scheduler.addFrameTask($bind(this,this.update),0);
			kha_System.notifyOnFrames($bind(this,this.render));
		}
	}
	,update: function() {
		this.updateImpl();
	}
	,updateImpl: function() {
		this.timeProvider.update();
		banan_utils_PromhxEventLoop.update();
		banan_http_HttpBytes.update();
		var _this = this.moduleManager;
		var tmp;
		if(_this.isInitialized) {
			if(_this.parent != null) {
				var _this1 = _this.parent;
				tmp = _this1.isInitialized && (_this1.parent == null || _this1.parent.get_isInitialized());
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			if(this.jetGuiInput == null) {
				this.jetGuiInput = new jetguimodule_JetGuiInput(this.moduleProvider);
			}
			this.jetGuiInput.update();
		}
		if(this.inputHandler.moduleInfo.state == 3) {
			this.inputHandler.processInput();
		}
		this.moduleManager.prepareUpdate();
		this.moduleManager.update();
	}
	,render: function(framebufferList) {
		if(this.renderSystem.moduleInfo.state == 3) {
			this.renderSystem.render(framebufferList[0],true,false);
		}
	}
	,handleKeyDown: function(code) {
	}
	,handleKeyUp: function(code) {
		if(code == 78) {
			banan_render_render2_node_NodeRenderer.DEBUG_DRAW_NODES = !banan_render_render2_node_NodeRenderer.DEBUG_DRAW_NODES;
		}
	}
	,__class__: Main
};
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.lpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	l -= s.length;
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	buf_b += s == null ? "null" : "" + s;
	return buf_b;
};
StringTools.rpad = function(s,c,l) {
	if(c.length <= 0) {
		return s;
	}
	var buf_b = "";
	buf_b = "" + (s == null ? "null" : "" + s);
	while(buf_b.length < l) buf_b += c == null ? "null" : "" + c;
	return buf_b;
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = "_UInt.UInt_Impl_";
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.gte = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a >= b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	if(this1 < 0) {
		return 4294967296.0 + this1;
	} else {
		return this1 + 0.0;
	}
};
var _$UnicodeString_UnicodeString_$Impl_$ = {};
$hxClasses["_UnicodeString.UnicodeString_Impl_"] = _$UnicodeString_UnicodeString_$Impl_$;
_$UnicodeString_UnicodeString_$Impl_$.__name__ = "_UnicodeString.UnicodeString_Impl_";
_$UnicodeString_UnicodeString_$Impl_$.__properties__ = {get_length:"get_length"};
_$UnicodeString_UnicodeString_$Impl_$.charCodeAt = function(this1,index) {
	if(index < 0) {
		return null;
	}
	var unicodeOffset = 0;
	var nativeOffset = 0;
	while(nativeOffset < this1.length) {
		var index1 = nativeOffset++;
		var c = this1.charCodeAt(index1);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(index1 + 1) & 1023;
		}
		var c1 = c;
		if(unicodeOffset == index) {
			return c1;
		}
		if(c1 >= 65536) {
			++nativeOffset;
		}
		++unicodeOffset;
	}
	return null;
};
_$UnicodeString_UnicodeString_$Impl_$.get_length = function(this1) {
	var l = 0;
	var _g_offset = 0;
	while(_g_offset < this1.length) {
		var index = _g_offset++;
		var c = this1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | this1.charCodeAt(index + 1) & 1023;
		}
		if(c >= 65536) {
			++_g_offset;
		}
		++l;
	}
	return l;
};
var _$Xml_XmlType_$Impl_$ = {};
$hxClasses["_Xml.XmlType_Impl_"] = _$Xml_XmlType_$Impl_$;
_$Xml_XmlType_$Impl_$.__name__ = "_Xml.XmlType_Impl_";
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.attributeMap.keys();
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(child.nodeType));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		return HxOverrides.iter(_g);
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var banan_animation_IAnimation = function() { };
$hxClasses["banan.animation.IAnimation"] = banan_animation_IAnimation;
banan_animation_IAnimation.__name__ = "banan.animation.IAnimation";
banan_animation_IAnimation.__isInterface__ = true;
banan_animation_IAnimation.prototype = {
	update: null
	,isCompleted: null
	,__class__: banan_animation_IAnimation
};
var banan_animation_AnimatedFloat = function(easing) {
	this.easing = easing;
};
$hxClasses["banan.animation.AnimatedFloat"] = banan_animation_AnimatedFloat;
banan_animation_AnimatedFloat.__name__ = "banan.animation.AnimatedFloat";
banan_animation_AnimatedFloat.__interfaces__ = [banan_animation_IAnimation];
banan_animation_AnimatedFloat.animateLinear = function(from,to,range,rangeDuration) {
	if(from != to) {
		return new banan_animation_AnimatedFloat(new banan_animation_easing_Linear(from,to,rangeDuration * Math.abs(from - to) / range));
	}
	return null;
};
banan_animation_AnimatedFloat.prototype = {
	value: null
	,from: null
	,to: null
	,easing: null
	,update: function(dt) {
		this.easing.getValue(dt);
	}
	,isCompleted: function() {
		return this.easing.isCompleted();
	}
	,get_value: function() {
		return this.easing.getValue(0.0);
	}
	,get_from: function() {
		return this.easing.from;
	}
	,get_to: function() {
		return this.easing.to;
	}
	,__class__: banan_animation_AnimatedFloat
	,__properties__: {get_to:"get_to",get_from:"get_from",get_value:"get_value"}
};
var banan_animation_CallFunctionEasing = function(callback,easing) {
	this.callback = callback;
	this.easing = easing;
};
$hxClasses["banan.animation.CallFunctionEasing"] = banan_animation_CallFunctionEasing;
banan_animation_CallFunctionEasing.__name__ = "banan.animation.CallFunctionEasing";
banan_animation_CallFunctionEasing.__interfaces__ = [banan_animation_IAnimation];
banan_animation_CallFunctionEasing.prototype = {
	callback: null
	,easing: null
	,update: function(dt) {
		var value = this.easing.getValue(dt);
		this.callback(value);
	}
	,isCompleted: function() {
		return this.easing.isCompleted();
	}
	,__class__: banan_animation_CallFunctionEasing
};
var banan_animation_easing_PowerEasingFunction = function() { };
$hxClasses["banan.animation.easing.PowerEasingFunction"] = banan_animation_easing_PowerEasingFunction;
banan_animation_easing_PowerEasingFunction.__name__ = "banan.animation.easing.PowerEasingFunction";
banan_animation_easing_PowerEasingFunction.easeIn = function(v,power) {
	return Math.pow(v,power);
};
banan_animation_easing_PowerEasingFunction.easeOut = function(v,power) {
	return 1 - Math.pow(1 - v,power);
};
banan_animation_easing_PowerEasingFunction.easeInOut = function(v,power) {
	if(v < 0.5) {
		return Math.pow(v * 2,power) * 0.5;
	} else {
		return 1 - Math.pow((1 - v) * 2,power) * 0.5;
	}
};
var banan_animation_easing_CubicBezierEasingFunction = function(s,f,p1,p2) {
	this.bezier = new banan_math_Bezier(s,f,p1,p2);
};
$hxClasses["banan.animation.easing.CubicBezierEasingFunction"] = banan_animation_easing_CubicBezierEasingFunction;
banan_animation_easing_CubicBezierEasingFunction.__name__ = "banan.animation.easing.CubicBezierEasingFunction";
banan_animation_easing_CubicBezierEasingFunction.prototype = {
	bezier: null
	,easingFunction: function(t) {
		var _this = this.bezier;
		var result_y = NaN;
		var _g = _this.p2;
		if(_this.p1 == null) {
			if(_g == null) {
				result_y = (1 - t) * _this.s.y + t * _this.f.y;
			} else {
				var t2 = t * t;
				var not_t = 1 - t;
				var not_t_2 = not_t * not_t;
				result_y = not_t_2 * not_t * _this.s.y + 3 * not_t_2 * t * _this.p1.y + 3 * not_t * t2 * _this.p2.y + t2 * t * _this.f.y;
			}
		} else if(_g == null) {
			var not_t1 = 1 - t;
			result_y = not_t1 * not_t1 * _this.s.y + 2 * not_t1 * t * _this.p1.y + t * t * _this.f.y;
		} else {
			var t21 = t * t;
			var not_t2 = 1 - t;
			var not_t_21 = not_t2 * not_t2;
			result_y = not_t_21 * not_t2 * _this.s.y + 3 * not_t_21 * t * _this.p1.y + 3 * not_t2 * t21 * _this.p2.y + t21 * t * _this.f.y;
		}
		return result_y;
	}
	,__class__: banan_animation_easing_CubicBezierEasingFunction
};
var banan_animation_easing_Easing = function(from,to,duration,easeFunction) {
	this.from = from;
	this.to = to;
	this.change = this.to - this.from;
	this.time = 0.0;
	this.duration = duration;
	this.easeFunction = easeFunction;
	if(duration >= 0 ? duration < 1e-10 : duration > -1e-010) {
		this.duration = 1.0;
		this.time = 1.0;
	}
};
$hxClasses["banan.animation.easing.Easing"] = banan_animation_easing_Easing;
banan_animation_easing_Easing.__name__ = "banan.animation.easing.Easing";
banan_animation_easing_Easing.linear = function(v) {
	return v;
};
banan_animation_easing_Easing.quadraticIn = function(v) {
	return banan_animation_easing_PowerEasingFunction.easeIn(v,2);
};
banan_animation_easing_Easing.quadraticOut = function(v) {
	return banan_animation_easing_PowerEasingFunction.easeOut(v,2);
};
banan_animation_easing_Easing.quadraticInOut = function(v) {
	return banan_animation_easing_PowerEasingFunction.easeInOut(v,2);
};
banan_animation_easing_Easing.quarticIn = function(v) {
	return banan_animation_easing_PowerEasingFunction.easeIn(v,4);
};
banan_animation_easing_Easing.quarticOut = function(v) {
	return banan_animation_easing_PowerEasingFunction.easeOut(v,4);
};
banan_animation_easing_Easing.quarticInOut = function(v) {
	return banan_animation_easing_PowerEasingFunction.easeInOut(v,4);
};
banan_animation_easing_Easing.quinticIn = function(v) {
	return banan_animation_easing_PowerEasingFunction.easeIn(v,5);
};
banan_animation_easing_Easing.prototype = {
	from: null
	,to: null
	,duration: null
	,time: null
	,change: null
	,easeFunction: null
	,getValue: function(dt) {
		this.time += dt;
		if(this.time > this.duration) {
			this.time = this.duration;
		}
		return this.change * this.easeFunction(this.time / this.duration) + this.from;
	}
	,isCompleted: function() {
		return this.time >= this.duration;
	}
	,__class__: banan_animation_easing_Easing
};
var banan_animation_easing_Linear = function(from,to,duration) {
	banan_animation_easing_Easing.call(this,from,to,duration,banan_animation_easing_Easing.linear);
};
$hxClasses["banan.animation.easing.Linear"] = banan_animation_easing_Linear;
banan_animation_easing_Linear.__name__ = "banan.animation.easing.Linear";
banan_animation_easing_Linear.__super__ = banan_animation_easing_Easing;
banan_animation_easing_Linear.prototype = $extend(banan_animation_easing_Easing.prototype,{
	__class__: banan_animation_easing_Linear
});
var banan_animation_easing_QuadraticIn = function(from,to,duration) {
	banan_animation_easing_Easing.call(this,from,to,duration,banan_animation_easing_Easing.quadraticIn);
};
$hxClasses["banan.animation.easing.QuadraticIn"] = banan_animation_easing_QuadraticIn;
banan_animation_easing_QuadraticIn.__name__ = "banan.animation.easing.QuadraticIn";
banan_animation_easing_QuadraticIn.__super__ = banan_animation_easing_Easing;
banan_animation_easing_QuadraticIn.prototype = $extend(banan_animation_easing_Easing.prototype,{
	__class__: banan_animation_easing_QuadraticIn
});
var banan_animation_easing_QuadraticOut = function(from,to,duration) {
	banan_animation_easing_Easing.call(this,from,to,duration,banan_animation_easing_Easing.quadraticOut);
};
$hxClasses["banan.animation.easing.QuadraticOut"] = banan_animation_easing_QuadraticOut;
banan_animation_easing_QuadraticOut.__name__ = "banan.animation.easing.QuadraticOut";
banan_animation_easing_QuadraticOut.__super__ = banan_animation_easing_Easing;
banan_animation_easing_QuadraticOut.prototype = $extend(banan_animation_easing_Easing.prototype,{
	__class__: banan_animation_easing_QuadraticOut
});
var banan_animation_easing_QuadraticInOut = function(from,to,duration) {
	banan_animation_easing_Easing.call(this,from,to,duration,banan_animation_easing_Easing.quadraticInOut);
};
$hxClasses["banan.animation.easing.QuadraticInOut"] = banan_animation_easing_QuadraticInOut;
banan_animation_easing_QuadraticInOut.__name__ = "banan.animation.easing.QuadraticInOut";
banan_animation_easing_QuadraticInOut.__super__ = banan_animation_easing_Easing;
banan_animation_easing_QuadraticInOut.prototype = $extend(banan_animation_easing_Easing.prototype,{
	__class__: banan_animation_easing_QuadraticInOut
});
var banan_animation_easing_QuarticIn = function(from,to,duration) {
	banan_animation_easing_Easing.call(this,from,to,duration,banan_animation_easing_Easing.quarticIn);
};
$hxClasses["banan.animation.easing.QuarticIn"] = banan_animation_easing_QuarticIn;
banan_animation_easing_QuarticIn.__name__ = "banan.animation.easing.QuarticIn";
banan_animation_easing_QuarticIn.__super__ = banan_animation_easing_Easing;
banan_animation_easing_QuarticIn.prototype = $extend(banan_animation_easing_Easing.prototype,{
	__class__: banan_animation_easing_QuarticIn
});
var banan_animation_easing_QuarticOut = function(from,to,duration) {
	banan_animation_easing_Easing.call(this,from,to,duration,banan_animation_easing_Easing.quarticOut);
};
$hxClasses["banan.animation.easing.QuarticOut"] = banan_animation_easing_QuarticOut;
banan_animation_easing_QuarticOut.__name__ = "banan.animation.easing.QuarticOut";
banan_animation_easing_QuarticOut.__super__ = banan_animation_easing_Easing;
banan_animation_easing_QuarticOut.prototype = $extend(banan_animation_easing_Easing.prototype,{
	__class__: banan_animation_easing_QuarticOut
});
var banan_animation_easing_QuinticIn = function(from,to,duration) {
	banan_animation_easing_Easing.call(this,from,to,duration,banan_animation_easing_Easing.quinticIn);
};
$hxClasses["banan.animation.easing.QuinticIn"] = banan_animation_easing_QuinticIn;
banan_animation_easing_QuinticIn.__name__ = "banan.animation.easing.QuinticIn";
banan_animation_easing_QuinticIn.__super__ = banan_animation_easing_Easing;
banan_animation_easing_QuinticIn.prototype = $extend(banan_animation_easing_Easing.prototype,{
	__class__: banan_animation_easing_QuinticIn
});
var banan_animation_easing_CustomBezier = function(from,to,duration,p1x,p1y,p2x,p2y) {
	banan_animation_easing_Easing.call(this,from,to,duration,($_=new banan_animation_easing_CubicBezierEasingFunction(new banan_math_Point(0.0,0.0),new banan_math_Point(1.0,1.0),new banan_math_Point(p1x,p1y),new banan_math_Point(p2x,p2y)),$bind($_,$_.easingFunction)));
};
$hxClasses["banan.animation.easing.CustomBezier"] = banan_animation_easing_CustomBezier;
banan_animation_easing_CustomBezier.__name__ = "banan.animation.easing.CustomBezier";
banan_animation_easing_CustomBezier.__super__ = banan_animation_easing_Easing;
banan_animation_easing_CustomBezier.prototype = $extend(banan_animation_easing_Easing.prototype,{
	__class__: banan_animation_easing_CustomBezier
});
var banan_animation_easing_InBack = function(from,to,duration) {
	banan_animation_easing_CustomBezier.call(this,from,to,duration,0.36,0.0,0.66,-0.56);
};
$hxClasses["banan.animation.easing.InBack"] = banan_animation_easing_InBack;
banan_animation_easing_InBack.__name__ = "banan.animation.easing.InBack";
banan_animation_easing_InBack.__super__ = banan_animation_easing_CustomBezier;
banan_animation_easing_InBack.prototype = $extend(banan_animation_easing_CustomBezier.prototype,{
	__class__: banan_animation_easing_InBack
});
var banan_animation_easing_OutBack = function(from,to,duration) {
	banan_animation_easing_CustomBezier.call(this,from,to,duration,0.34,1.56,0.64,1.0);
};
$hxClasses["banan.animation.easing.OutBack"] = banan_animation_easing_OutBack;
banan_animation_easing_OutBack.__name__ = "banan.animation.easing.OutBack";
banan_animation_easing_OutBack.__super__ = banan_animation_easing_CustomBezier;
banan_animation_easing_OutBack.prototype = $extend(banan_animation_easing_CustomBezier.prototype,{
	__class__: banan_animation_easing_OutBack
});
var banan_animation_timeline_Curve = function(curveDef) {
	this.curveDef = curveDef;
	this.timeShift = 0.0;
	this.index = 0;
};
$hxClasses["banan.animation.timeline.Curve"] = banan_animation_timeline_Curve;
banan_animation_timeline_Curve.__name__ = "banan.animation.timeline.Curve";
banan_animation_timeline_Curve.prototype = {
	curveDef: null
	,timeShift: null
	,index: null
	,getValue: function(time) {
		var segments = this.curveDef.segments;
		while(this.index > 0 && time < segments[this.index].t0) this.index--;
		while(this.index < segments.length - 1 && time > segments[this.index].t1) this.index++;
		return segments[this.index].get(time);
	}
	,update: function(time) {
		this.apply(this.getValue(time + this.timeShift));
	}
	,apply: function(value) {
	}
	,__class__: banan_animation_timeline_Curve
};
var banan_animation_timeline_CurveDef = function(name) {
	this.lastKey = null;
	this.segments = [];
	this.name = name;
};
$hxClasses["banan.animation.timeline.CurveDef"] = banan_animation_timeline_CurveDef;
banan_animation_timeline_CurveDef.__name__ = "banan.animation.timeline.CurveDef";
banan_animation_timeline_CurveDef.prototype = {
	name: null
	,segments: null
	,lastKey: null
	,addKey: function(key) {
		if(!(key.name == this.name && key.value != null)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"CurveDef.hx:17","key.name == name && key.value != null",null));
		}
		if(this.lastKey == null && key.time > 0) {
			this.addKey(new banan_animation_timeline_TKeyframe(0,null,this.name,key.value,null,null,null));
		}
		if(this.lastKey != null) {
			this.segments.push(new banan_animation_timeline_Segment(this.lastKey.time,key.time,this.lastKey.value,key.value,this.lastKey.tanOut != null ? this.lastKey.tanOut : this.lastKey.tan != null ? this.lastKey.tan : 0,key.tanIn != null ? key.tanIn : key.tan != null ? key.tan : 0));
		}
		this.lastKey = key;
	}
	,addLastKey: function(length) {
		if(this.lastKey == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"CurveDef.hx:43","lastKey != null",null));
		}
		this.addKey(new banan_animation_timeline_TKeyframe(length,null,this.name,this.lastKey.value,null,null,null));
	}
	,hasKeys: function() {
		return this.lastKey != null;
	}
	,__class__: banan_animation_timeline_CurveDef
};
var banan_animation_timeline_EventDef = function(time,name) {
	this.time = time;
	this.name = name;
};
$hxClasses["banan.animation.timeline.EventDef"] = banan_animation_timeline_EventDef;
banan_animation_timeline_EventDef.__name__ = "banan.animation.timeline.EventDef";
banan_animation_timeline_EventDef.prototype = {
	time: null
	,name: null
	,__class__: banan_animation_timeline_EventDef
};
var banan_animation_timeline_JetCurve = function(element,curveDef) {
	banan_animation_timeline_Curve.call(this,curveDef);
	this.element = element;
	var entity = element.entity;
	var sThis = entity.__component__banan_display_NodeEdge;
	if(sThis == null) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(120,"JetCurve.hx:19","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
	}
	this.node = sThis;
};
$hxClasses["banan.animation.timeline.JetCurve"] = banan_animation_timeline_JetCurve;
banan_animation_timeline_JetCurve.__name__ = "banan.animation.timeline.JetCurve";
banan_animation_timeline_JetCurve.__super__ = banan_animation_timeline_Curve;
banan_animation_timeline_JetCurve.prototype = $extend(banan_animation_timeline_Curve.prototype,{
	element: null
	,node: null
	,__class__: banan_animation_timeline_JetCurve
});
var banan_animation_timeline_JetPositionXCurve = function(element,curveDef) {
	banan_animation_timeline_JetCurve.call(this,element,curveDef);
};
$hxClasses["banan.animation.timeline.JetPositionXCurve"] = banan_animation_timeline_JetPositionXCurve;
banan_animation_timeline_JetPositionXCurve.__name__ = "banan.animation.timeline.JetPositionXCurve";
banan_animation_timeline_JetPositionXCurve.__super__ = banan_animation_timeline_JetCurve;
banan_animation_timeline_JetPositionXCurve.prototype = $extend(banan_animation_timeline_JetCurve.prototype,{
	apply: function(value) {
		this.element.set_extraOffsetX(value);
	}
	,__class__: banan_animation_timeline_JetPositionXCurve
});
var banan_animation_timeline_JetPositionYCurve = function(element,curveDef) {
	banan_animation_timeline_JetCurve.call(this,element,curveDef);
};
$hxClasses["banan.animation.timeline.JetPositionYCurve"] = banan_animation_timeline_JetPositionYCurve;
banan_animation_timeline_JetPositionYCurve.__name__ = "banan.animation.timeline.JetPositionYCurve";
banan_animation_timeline_JetPositionYCurve.__super__ = banan_animation_timeline_JetCurve;
banan_animation_timeline_JetPositionYCurve.prototype = $extend(banan_animation_timeline_JetCurve.prototype,{
	apply: function(value) {
		this.element.set_extraOffsetY(value);
	}
	,__class__: banan_animation_timeline_JetPositionYCurve
});
var banan_animation_timeline_JetScaleCurve = function(element,curveDef) {
	banan_animation_timeline_JetCurve.call(this,element,curveDef);
};
$hxClasses["banan.animation.timeline.JetScaleCurve"] = banan_animation_timeline_JetScaleCurve;
banan_animation_timeline_JetScaleCurve.__name__ = "banan.animation.timeline.JetScaleCurve";
banan_animation_timeline_JetScaleCurve.__super__ = banan_animation_timeline_JetCurve;
banan_animation_timeline_JetScaleCurve.prototype = $extend(banan_animation_timeline_JetCurve.prototype,{
	apply: function(value) {
		var _this = this.node;
		if(_this.scaleX != value) {
			_this.scaleX = value;
			if(_this.globalTransformId != -1) {
				_this.invalidateTransform();
			}
		}
		var _this1 = this.node;
		if(_this1.scaleY != value) {
			_this1.scaleY = value;
			if(_this1.globalTransformId != -1) {
				_this1.invalidateTransform();
			}
		}
	}
	,__class__: banan_animation_timeline_JetScaleCurve
});
var banan_animation_timeline_JetScaleXCurve = function(element,curveDef) {
	banan_animation_timeline_JetCurve.call(this,element,curveDef);
};
$hxClasses["banan.animation.timeline.JetScaleXCurve"] = banan_animation_timeline_JetScaleXCurve;
banan_animation_timeline_JetScaleXCurve.__name__ = "banan.animation.timeline.JetScaleXCurve";
banan_animation_timeline_JetScaleXCurve.__super__ = banan_animation_timeline_JetCurve;
banan_animation_timeline_JetScaleXCurve.prototype = $extend(banan_animation_timeline_JetCurve.prototype,{
	apply: function(value) {
		var _this = this.node;
		if(_this.scaleX != value) {
			_this.scaleX = value;
			if(_this.globalTransformId != -1) {
				_this.invalidateTransform();
			}
		}
	}
	,__class__: banan_animation_timeline_JetScaleXCurve
});
var banan_animation_timeline_JetScaleYCurve = function(element,curveDef) {
	banan_animation_timeline_JetCurve.call(this,element,curveDef);
};
$hxClasses["banan.animation.timeline.JetScaleYCurve"] = banan_animation_timeline_JetScaleYCurve;
banan_animation_timeline_JetScaleYCurve.__name__ = "banan.animation.timeline.JetScaleYCurve";
banan_animation_timeline_JetScaleYCurve.__super__ = banan_animation_timeline_JetCurve;
banan_animation_timeline_JetScaleYCurve.prototype = $extend(banan_animation_timeline_JetCurve.prototype,{
	apply: function(value) {
		var _this = this.node;
		if(_this.scaleY != value) {
			_this.scaleY = value;
			if(_this.globalTransformId != -1) {
				_this.invalidateTransform();
			}
		}
	}
	,__class__: banan_animation_timeline_JetScaleYCurve
});
var banan_animation_timeline_JetAngleCurve = function(element,curveDef) {
	banan_animation_timeline_JetCurve.call(this,element,curveDef);
};
$hxClasses["banan.animation.timeline.JetAngleCurve"] = banan_animation_timeline_JetAngleCurve;
banan_animation_timeline_JetAngleCurve.__name__ = "banan.animation.timeline.JetAngleCurve";
banan_animation_timeline_JetAngleCurve.__super__ = banan_animation_timeline_JetCurve;
banan_animation_timeline_JetAngleCurve.prototype = $extend(banan_animation_timeline_JetCurve.prototype,{
	apply: function(value) {
		var _this = this.node;
		var value1 = value * 3.141592653589793 / 180;
		if(_this.angle != value1) {
			if(value1 == 0.0) {
				_this.angle = 0.0;
				_this.angleCos = 1.0;
				_this.angleSin = 0.0;
			} else {
				_this.angle = value1;
				_this.angleCos = Math.cos(value1);
				_this.angleSin = Math.sin(value1);
			}
			if(_this.globalTransformId != -1) {
				_this.invalidateTransform();
			}
		}
	}
	,__class__: banan_animation_timeline_JetAngleCurve
});
var banan_animation_timeline_JetOpacityCurve = function(element,curveDef) {
	banan_animation_timeline_JetCurve.call(this,element,curveDef);
};
$hxClasses["banan.animation.timeline.JetOpacityCurve"] = banan_animation_timeline_JetOpacityCurve;
banan_animation_timeline_JetOpacityCurve.__name__ = "banan.animation.timeline.JetOpacityCurve";
banan_animation_timeline_JetOpacityCurve.applyValueToNode = function(node,value) {
	node.addOpacityMod(value,banan_animation_timeline_JetOpacityCurve.modificatorName);
};
banan_animation_timeline_JetOpacityCurve.removeModificatorFromNode = function(node) {
	node.removeOpacityMod(banan_animation_timeline_JetOpacityCurve.modificatorName);
};
banan_animation_timeline_JetOpacityCurve.__super__ = banan_animation_timeline_JetCurve;
banan_animation_timeline_JetOpacityCurve.prototype = $extend(banan_animation_timeline_JetCurve.prototype,{
	apply: function(value) {
		banan_animation_timeline_JetOpacityCurve.applyValueToNode(this.node,value);
	}
	,__class__: banan_animation_timeline_JetOpacityCurve
});
var banan_animation_timeline_JetGlowCurve = function(element,curveDef) {
	banan_animation_timeline_JetCurve.call(this,element,curveDef);
};
$hxClasses["banan.animation.timeline.JetGlowCurve"] = banan_animation_timeline_JetGlowCurve;
banan_animation_timeline_JetGlowCurve.__name__ = "banan.animation.timeline.JetGlowCurve";
banan_animation_timeline_JetGlowCurve.__super__ = banan_animation_timeline_JetCurve;
banan_animation_timeline_JetGlowCurve.prototype = $extend(banan_animation_timeline_JetCurve.prototype,{
	apply: function(value) {
		var colorTransform = value < 0.01 ? null : banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([1.0,0.0,0.0,value,0.0,1.0,0.0,value,0.0,0.0,1.0,value]);
		var sThis = this.node._entity;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
		}
		banan_display_NodeLookHelper.setColorTransform(sThis,colorTransform);
	}
	,__class__: banan_animation_timeline_JetGlowCurve
});
var banan_animation_timeline_JetDarkenCurve = function(element,curveDef) {
	banan_animation_timeline_JetCurve.call(this,element,curveDef);
};
$hxClasses["banan.animation.timeline.JetDarkenCurve"] = banan_animation_timeline_JetDarkenCurve;
banan_animation_timeline_JetDarkenCurve.__name__ = "banan.animation.timeline.JetDarkenCurve";
banan_animation_timeline_JetDarkenCurve.__super__ = banan_animation_timeline_JetCurve;
banan_animation_timeline_JetDarkenCurve.prototype = $extend(banan_animation_timeline_JetCurve.prototype,{
	apply: function(value) {
		var value1 = 1.0 - value;
		var rgb = value1 < 0.0 ? 0.0 : value1 > 1.0 ? 1.0 : value1;
		var colorTransform = rgb > 0.99 ? null : banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([rgb,0.0,0.0,0.0,0.0,rgb,0.0,0.0,0.0,0.0,rgb,0.0]);
		var sThis = this.node._entity;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
		}
		banan_display_NodeLookHelper.setColorTransform(sThis,colorTransform);
	}
	,__class__: banan_animation_timeline_JetDarkenCurve
});
var banan_animation_timeline_JetWhitenCurve = function(element,curveDef) {
	banan_animation_timeline_JetCurve.call(this,element,curveDef);
};
$hxClasses["banan.animation.timeline.JetWhitenCurve"] = banan_animation_timeline_JetWhitenCurve;
banan_animation_timeline_JetWhitenCurve.__name__ = "banan.animation.timeline.JetWhitenCurve";
banan_animation_timeline_JetWhitenCurve.__super__ = banan_animation_timeline_JetCurve;
banan_animation_timeline_JetWhitenCurve.prototype = $extend(banan_animation_timeline_JetCurve.prototype,{
	apply: function(value) {
		var v = value < 0.0 ? 0.0 : value > 1.0 ? 1.0 : value;
		var colorTransform;
		if(v < 0.01) {
			colorTransform = null;
		} else {
			var opacity = v;
			if(opacity == null) {
				opacity = 1.0;
			}
			var invOpacity = 1.0 - opacity;
			colorTransform = banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([invOpacity,0.0,0.0,opacity,0.0,invOpacity,0.0,opacity,0.0,0.0,invOpacity,opacity]);
		}
		var sThis = this.node._entity;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
		}
		banan_display_NodeLookHelper.setColorTransform(sThis,colorTransform);
	}
	,__class__: banan_animation_timeline_JetWhitenCurve
});
var banan_animation_timeline_JetGhostifyCurve = function(element,curveDef) {
	banan_animation_timeline_JetCurve.call(this,element,curveDef);
};
$hxClasses["banan.animation.timeline.JetGhostifyCurve"] = banan_animation_timeline_JetGhostifyCurve;
banan_animation_timeline_JetGhostifyCurve.__name__ = "banan.animation.timeline.JetGhostifyCurve";
banan_animation_timeline_JetGhostifyCurve.__super__ = banan_animation_timeline_JetCurve;
banan_animation_timeline_JetGhostifyCurve.prototype = $extend(banan_animation_timeline_JetCurve.prototype,{
	apply: function(value) {
		var v = value < 0.0 ? 0.0 : value > 1.0 ? 1.0 : value;
		var colorTransform;
		if(v < 0.01) {
			colorTransform = null;
		} else {
			var colorFillOpacity = 0.8 * v;
			var glowValue = 0.5 * v;
			var i = 1.0 - colorFillOpacity;
			colorTransform = banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([i,0.0,0.0,colorFillOpacity + i * glowValue,0.0,i,0.0,colorFillOpacity + i * glowValue,0.0,0.0,i,colorFillOpacity + i * glowValue]);
		}
		var sThis = this.node._entity;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
		}
		banan_display_NodeLookHelper.setColorTransform(sThis,colorTransform);
	}
	,__class__: banan_animation_timeline_JetGhostifyCurve
});
var banan_animation_timeline_EElementSearchPolicy = $hxEnums["banan.animation.timeline.EElementSearchPolicy"] = { __ename__ : true, __constructs__ : ["All","First"]
	,All: {_hx_index:0,__enum__:"banan.animation.timeline.EElementSearchPolicy",toString:$estr}
	,First: {_hx_index:1,__enum__:"banan.animation.timeline.EElementSearchPolicy",toString:$estr}
};
banan_animation_timeline_EElementSearchPolicy.__empty_constructs__ = [banan_animation_timeline_EElementSearchPolicy.All,banan_animation_timeline_EElementSearchPolicy.First];
var banan_animation_timeline_TimelineAnimationBase = function(timelineDef,resetWith,eventCallbackMap,delay) {
	if(delay == null) {
		delay = 0;
	}
	if(resetWith == null) {
		resetWith = false;
	}
	var _gthis = this;
	this.length = timelineDef.length;
	this.eventList = timelineDef.eventList;
	this.eventCallbackMap = eventCallbackMap;
	var _this = timelineDef.curveList;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = _gthis.createCurves(_this[i]);
	}
	var _g2 = [];
	var _g11 = 0;
	while(_g11 < result.length) {
		var v = result[_g11];
		++_g11;
		if(v != null) {
			_g2.push(v);
		}
	}
	var _g3 = [];
	var e = $getIterator(_g2);
	while(e.hasNext()) {
		var x = $getIterator(e.next());
		while(x.hasNext()) _g3.push(x.next());
	}
	this.curveList = _g3;
	this.reset(delay);
	if(resetWith) {
		this.update(0);
	}
};
$hxClasses["banan.animation.timeline.TimelineAnimationBase"] = banan_animation_timeline_TimelineAnimationBase;
banan_animation_timeline_TimelineAnimationBase.__name__ = "banan.animation.timeline.TimelineAnimationBase";
banan_animation_timeline_TimelineAnimationBase.__interfaces__ = [banan_animation_IAnimation];
banan_animation_timeline_TimelineAnimationBase.prototype = {
	time: null
	,length: null
	,curveList: null
	,eventList: null
	,eventIndex: null
	,eventCallbackMap: null
	,update: function(dt) {
		this.time += dt;
		var _g = 0;
		var _g1 = this.curveList;
		while(_g < _g1.length) _g1[_g++].update(this.time);
		while(this.eventIndex < this.eventList.length && this.eventList[this.eventIndex].time < this.time) {
			var eventName = this.eventList[this.eventIndex++].name;
			var callback;
			if(this.eventCallbackMap != null) {
				var _this = this.eventCallbackMap;
				callback = __map_reserved[eventName] != null ? _this.getReserved(eventName) : _this.h[eventName];
			} else {
				callback = null;
			}
			if(callback != null) {
				callback();
			}
		}
	}
	,isCompleted: function() {
		return this.time > this.length;
	}
	,reset: function(delay) {
		if(delay == null) {
			delay = 0;
		}
		if(!(delay >= 0)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"TimelineAnimationBase.hx:61","delay >= 0",null));
		}
		this.time = -delay;
		this.eventIndex = 0;
	}
	,createCurves: function(scurveDef) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"TimelineAnimationBase.hx:67","",null));
	}
	,getTableDataString: function(dt) {
		var s = "";
		s = "time\t";
		var _this = this.curveList;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].curveDef.name;
		}
		s = "time\t" + result.join("\t");
		s += "\n";
		var t = 0.0;
		while(t < this.length + dt) {
			s += "" + t + "\t";
			var _this1 = this.curveList;
			var result1 = new Array(_this1.length);
			var _g2 = 0;
			var _g11 = _this1.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				result1[i1] = _this1[i1].getValue(t);
			}
			s += result1.join("\t");
			s += "\n";
			t += dt;
		}
		return s;
	}
	,__class__: banan_animation_timeline_TimelineAnimationBase
};
var banan_animation_timeline_JetTimelineAnimation = function(root,timelineDef,resetWith,eventCallbackMap,delay,searchPolicy) {
	if(searchPolicy == null) {
		searchPolicy = banan_animation_timeline_EElementSearchPolicy.First;
	}
	if(delay == null) {
		delay = 0;
	}
	if(resetWith == null) {
		resetWith = false;
	}
	this.paramRe = new EReg("\\((.*)\\)","");
	this.root = root;
	this.searchPolicy = searchPolicy;
	banan_animation_timeline_TimelineAnimationBase.call(this,timelineDef,resetWith,eventCallbackMap,delay);
};
$hxClasses["banan.animation.timeline.JetTimelineAnimation"] = banan_animation_timeline_JetTimelineAnimation;
banan_animation_timeline_JetTimelineAnimation.__name__ = "banan.animation.timeline.JetTimelineAnimation";
banan_animation_timeline_JetTimelineAnimation.__super__ = banan_animation_timeline_TimelineAnimationBase;
banan_animation_timeline_JetTimelineAnimation.prototype = $extend(banan_animation_timeline_TimelineAnimationBase.prototype,{
	root: null
	,searchPolicy: null
	,paramRe: null
	,createCurves: function(curveDef) {
		var name = curveDef.name;
		var params = null;
		if(this.paramRe.match(curveDef.name)) {
			params = this.paramRe.matched(1);
			name = this.paramRe.matchedLeft() + this.paramRe.matchedRight();
		}
		var timeShift = params != null ? parseFloat(params) : 0.0;
		var totalTimeShift = 0.0;
		var i = name.indexOf(".");
		var nodeName = name.substring(0,i);
		var propName = name.substring(i + 1);
		var elements = nodeName.length > 0 ? this.root.findById(nodeName) : this.root != null ? [this.root] : [];
		if(elements.length == 0) {
			return null;
		}
		if(this.searchPolicy._hx_index == 1) {
			elements = [elements[0]];
		}
		var result = new Array(elements.length);
		var _g = 0;
		var _g1 = elements.length;
		while(_g < _g1) {
			var i1 = _g++;
			var it = elements[i1];
			var curve;
			switch(propName.toLowerCase()) {
			case "angle":
				curve = new banan_animation_timeline_JetAngleCurve(it,curveDef);
				break;
			case "darken":
				curve = new banan_animation_timeline_JetDarkenCurve(it,curveDef);
				break;
			case "ghostify":
				curve = new banan_animation_timeline_JetGhostifyCurve(it,curveDef);
				break;
			case "glow":
				curve = new banan_animation_timeline_JetGlowCurve(it,curveDef);
				break;
			case "opacity":
				curve = new banan_animation_timeline_JetOpacityCurve(it,curveDef);
				break;
			case "scale":
				curve = new banan_animation_timeline_JetScaleCurve(it,curveDef);
				break;
			case "scalex":
				curve = new banan_animation_timeline_JetScaleXCurve(it,curveDef);
				break;
			case "scaley":
				curve = new banan_animation_timeline_JetScaleYCurve(it,curveDef);
				break;
			case "whiten":
				curve = new banan_animation_timeline_JetWhitenCurve(it,curveDef);
				break;
			case "x":
				curve = new banan_animation_timeline_JetPositionXCurve(it,curveDef);
				break;
			case "y":
				curve = new banan_animation_timeline_JetPositionYCurve(it,curveDef);
				break;
			default:
				throw new js__$Boot_HaxeError(banan_error_Error.e(122,"JetTimelineAnimation.hx:84","unknown animation property",{ propName : propName}));
			}
			curve.timeShift = totalTimeShift;
			totalTimeShift -= timeShift;
			result[i1] = curve;
		}
		return result;
	}
	,__class__: banan_animation_timeline_JetTimelineAnimation
});
var banan_animation_timeline_SplineBase = function() { };
$hxClasses["banan.animation.timeline.SplineBase"] = banan_animation_timeline_SplineBase;
banan_animation_timeline_SplineBase.__name__ = "banan.animation.timeline.SplineBase";
banan_animation_timeline_SplineBase.prototype = {
	t0: null
	,t1: null
	,x0: null
	,x1: null
	,a: null
	,b: null
	,c: null
	,d: null
	,reset: function(t0,t1,x0,x1,dx0,dx1) {
		this.t0 = t0;
		this.t1 = t1;
		this.x0 = x0;
		this.x1 = x1;
		this.a = x0;
		this.b = dx0 * (t1 - t0);
		this.c = 3 * (x1 - x0) - (2 * dx0 + dx1) * (t1 - t0);
		this.d = 2 * (x0 - x1) + (dx0 + dx1) * (t1 - t0);
	}
	,getAt: function(t) {
		var x;
		if(t >= this.t1) {
			x = this.x1;
		} else if(t <= this.t0) {
			x = this.x0;
		} else {
			var tt = (t - this.t0) / (this.t1 - this.t0);
			var tt2 = tt * tt;
			x = this.a + this.b * tt + this.c * tt2 + this.d * (tt * tt2);
		}
		return x;
	}
	,getDerivativeAt: function(t) {
		var d;
		if(t > this.t1 || t < this.t0 || this.t1 == this.t0) {
			d = 0;
		} else {
			var tt = (t - this.t0) / (this.t1 - this.t0);
			d = (this.b + 2 * this.c * tt + 3 * this.d * (tt * tt)) * (this.t1 - this.t0);
		}
		return d;
	}
	,__class__: banan_animation_timeline_SplineBase
};
var banan_animation_timeline_Segment = function(t0,t1,x0,x1,dx0,dx1) {
	this.reset(t0,t1,x0,x1,dx0,dx1);
};
$hxClasses["banan.animation.timeline.Segment"] = banan_animation_timeline_Segment;
banan_animation_timeline_Segment.__name__ = "banan.animation.timeline.Segment";
banan_animation_timeline_Segment.__super__ = banan_animation_timeline_SplineBase;
banan_animation_timeline_Segment.prototype = $extend(banan_animation_timeline_SplineBase.prototype,{
	get: function(t) {
		return this.getAt(t);
	}
	,__class__: banan_animation_timeline_Segment
});
var banan_animation_timeline_TKeyframe = function(time,event,name,value,tan,tanIn,tanOut) {
	this.time = time;
	this.event = event;
	this.name = name;
	this.value = value;
	this.tan = tan;
	this.tanIn = tanIn;
	this.tanOut = tanOut;
};
$hxClasses["banan.animation.timeline.TKeyframe"] = banan_animation_timeline_TKeyframe;
banan_animation_timeline_TKeyframe.__name__ = "banan.animation.timeline.TKeyframe";
banan_animation_timeline_TKeyframe.prototype = {
	time: null
	,event: null
	,name: null
	,value: null
	,tan: null
	,tanIn: null
	,tanOut: null
	,__class__: banan_animation_timeline_TKeyframe
};
var banan_animation_timeline_TimelineDef = function(keyframes,timeCoef) {
	this.eventList = [];
	this.curveList = [];
	this.length = 0;
	var _g = 0;
	while(_g < keyframes.length) {
		var kf = keyframes[_g];
		++_g;
		kf.time *= timeCoef;
		if(kf.tan != null) {
			kf.tan /= timeCoef;
		}
		if(kf.tanIn != null) {
			kf.tanIn /= timeCoef;
		}
		if(kf.tanOut != null) {
			kf.tanOut /= timeCoef;
		}
	}
	keyframes.sort(function(a,b) {
		if(a.time > b.time) {
			return 1;
		} else if(a.time < b.time) {
			return -1;
		} else {
			return 0;
		}
	});
	this.eventList = [];
	var curveMap = new haxe_ds_StringMap();
	var _g1 = 0;
	while(_g1 < keyframes.length) {
		var kf1 = keyframes[_g1];
		++_g1;
		var time = kf1.time;
		if(!(time >= 0)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"TimelineDef.hx:37","time >= 0",null));
		}
		if(time > this.length) {
			this.length = time;
		}
		if(kf1.event != null) {
			this.eventList.push(new banan_animation_timeline_EventDef(time,kf1.event));
		}
		if(kf1.name != null && kf1.value != null) {
			var name = kf1.name;
			var curve = __map_reserved[name] != null ? curveMap.getReserved(name) : curveMap.h[name];
			if(curve == null) {
				curve = new banan_animation_timeline_CurveDef(name);
				if(__map_reserved[name] != null) {
					curveMap.setReserved(name,curve);
				} else {
					curveMap.h[name] = curve;
				}
			}
			curve.addKey(kf1);
		}
	}
	var curve1 = new haxe_ds__$StringMap_StringMapIterator(curveMap,curveMap.arrayKeys());
	while(curve1.hasNext()) {
		var curve2 = curve1.next();
		if(curve2.hasKeys()) {
			curve2.addLastKey(this.length);
			this.curveList.push(curve2);
		}
	}
};
$hxClasses["banan.animation.timeline.TimelineDef"] = banan_animation_timeline_TimelineDef;
banan_animation_timeline_TimelineDef.__name__ = "banan.animation.timeline.TimelineDef";
banan_animation_timeline_TimelineDef.prototype = {
	length: null
	,curveList: null
	,eventList: null
	,__class__: banan_animation_timeline_TimelineDef
};
var banan_backend_IRenderSystem = function() { };
$hxClasses["banan.backend.IRenderSystem"] = banan_backend_IRenderSystem;
banan_backend_IRenderSystem.__name__ = "banan.backend.IRenderSystem";
banan_backend_IRenderSystem.__isInterface__ = true;
banan_backend_IRenderSystem.prototype = {
	rootList: null
	,__class__: banan_backend_IRenderSystem
};
var banan_backend_IScreenSizeProvider = function() { };
$hxClasses["banan.backend.IScreenSizeProvider"] = banan_backend_IScreenSizeProvider;
banan_backend_IScreenSizeProvider.__name__ = "banan.backend.IScreenSizeProvider";
banan_backend_IScreenSizeProvider.__isInterface__ = true;
banan_backend_IScreenSizeProvider.prototype = {
	dpi: null
	,resolutionScale: null
	,canvasSizeX: null
	,canvasSizeY: null
	,screenSizeX: null
	,screenSizeY: null
	,__class__: banan_backend_IScreenSizeProvider
};
var banan_backend_RenderRootEdge = function(renderList) {
	this.renderList = renderList;
	this.camera = new banan_camera_Camera();
};
$hxClasses["banan.backend.RenderRootEdge"] = banan_backend_RenderRootEdge;
banan_backend_RenderRootEdge.__name__ = "banan.backend.RenderRootEdge";
banan_backend_RenderRootEdge.prototype = {
	renderList: null
	,camera: null
	,__class__: banan_backend_RenderRootEdge
};
var banan_backend_input_IBInput = function() { };
$hxClasses["banan.backend.input.IBInput"] = banan_backend_input_IBInput;
banan_backend_input_IBInput.__name__ = "banan.backend.input.IBInput";
banan_backend_input_IBInput.__isInterface__ = true;
banan_backend_input_IBInput.prototype = {
	get_touches: null
	,isMouseOver: null
	,mouseX: null
	,mouseY: null
	,__class__: banan_backend_input_IBInput
	,__properties__: {get_touches:"get_touches"}
};
var banan_backend_input_Touch = function(touches) {
	this.prevY = 0;
	this.prevX = 0;
	this.y = 0;
	this.x = 0;
	this.wasActive = false;
	this.isActive = false;
	this.id = -1;
	this.touches = touches;
};
$hxClasses["banan.backend.input.Touch"] = banan_backend_input_Touch;
banan_backend_input_Touch.__name__ = "banan.backend.input.Touch";
banan_backend_input_Touch.prototype = {
	id: null
	,isActive: null
	,wasActive: null
	,x: null
	,y: null
	,prevX: null
	,prevY: null
	,get_dx: function() {
		return this.x - this.prevX;
	}
	,get_dy: function() {
		return this.y - this.prevY;
	}
	,touches: null
	,start: function(touchId,touchX,touchY) {
		if(this.touches.indexOf(this) < 0) {
			this.touches.push(this);
		}
		this.id = touchId;
		this.isActive = true;
		this.x = this.prevX = touchX;
		this.y = this.prevY = touchY;
	}
	,end: function() {
		this.isActive = false;
	}
	,move: function(touchX,touchY) {
		this.x = touchX;
		this.y = touchY;
	}
	,postUpdate: function() {
		this.wasActive = this.isActive;
		this.prevX = this.x;
		this.prevY = this.y;
	}
	,__class__: banan_backend_input_Touch
	,__properties__: {get_dy:"get_dy",get_dx:"get_dx"}
};
var kha__$Color_Color_$Impl_$ = {};
$hxClasses["kha._Color.Color_Impl_"] = kha__$Color_Color_$Impl_$;
kha__$Color_Color_$Impl_$.__name__ = "kha._Color.Color_Impl_";
kha__$Color_Color_$Impl_$.__properties__ = {set_value:"set_value",get_value:"get_value",set_A:"set_A",get_A:"get_A",set_B:"set_B",get_B:"get_B",set_G:"set_G",get_G:"get_G",set_R:"set_R",get_R:"get_R",set_Ab:"set_Ab",get_Ab:"get_Ab",set_Bb:"set_Bb",get_Bb:"get_Bb",set_Gb:"set_Gb",get_Gb:"get_Gb",set_Rb:"set_Rb",get_Rb:"get_Rb"};
kha__$Color_Color_$Impl_$.fromValue = function(value) {
	return kha__$Color_Color_$Impl_$._new(value);
};
kha__$Color_Color_$Impl_$.fromBytes = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return kha__$Color_Color_$Impl_$._new(a << 24 | r << 16 | g << 8 | b);
};
kha__$Color_Color_$Impl_$.fromFloats = function(r,g,b,a) {
	if(a == null) {
		a = 1;
	}
	return kha__$Color_Color_$Impl_$._new((a * 255 | 0) << 24 | (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0));
};
kha__$Color_Color_$Impl_$.fromString = function(value) {
	if((value.length == 7 || value.length == 9) && value.charCodeAt(0) == 35) {
		var colorValue = Std.parseInt("0x" + HxOverrides.substr(value,1,null));
		if(value.length == 7) {
			colorValue += -16777216;
		}
		return kha__$Color_Color_$Impl_$._new(colorValue | 0);
	} else {
		throw new js__$Boot_HaxeError("Invalid Color string: '" + value + "'");
	}
};
kha__$Color_Color_$Impl_$._new = function(value) {
	return value;
};
kha__$Color_Color_$Impl_$.get_value = function(this1) {
	return this1;
};
kha__$Color_Color_$Impl_$.set_value = function(this1,value) {
	this1 = value;
	return value;
};
kha__$Color_Color_$Impl_$.get_Rb = function(this1) {
	return (this1 & 16711680) >>> 16;
};
kha__$Color_Color_$Impl_$.get_Gb = function(this1) {
	return (this1 & 65280) >>> 8;
};
kha__$Color_Color_$Impl_$.get_Bb = function(this1) {
	return this1 & 255;
};
kha__$Color_Color_$Impl_$.get_Ab = function(this1) {
	return this1 >>> 24;
};
kha__$Color_Color_$Impl_$.set_Rb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | i << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Gb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | i << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.set_Bb = function(this1,i) {
	this1 = this1 >>> 24 << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | i;
	return i;
};
kha__$Color_Color_$Impl_$.set_Ab = function(this1,i) {
	this1 = i << 24 | (this1 & 16711680) >>> 16 << 16 | (this1 & 65280) >>> 8 << 8 | this1 & 255;
	return i;
};
kha__$Color_Color_$Impl_$.get_R = function(this1) {
	return ((this1 & 16711680) >>> 16) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_G = function(this1) {
	return ((this1 & 65280) >>> 8) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_B = function(this1) {
	return (this1 & 255) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.get_A = function(this1) {
	return (this1 >>> 24) * 0.00392156862745098;
};
kha__$Color_Color_$Impl_$.set_R = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (f * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_G = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (f * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_B = function(this1,f) {
	this1 = ((this1 >>> 24) * 0.00392156862745098 * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | (f * 255 | 0);
	return f;
};
kha__$Color_Color_$Impl_$.set_A = function(this1,f) {
	this1 = (f * 255 | 0) << 24 | (((this1 & 16711680) >>> 16) * 0.00392156862745098 * 255 | 0) << 16 | (((this1 & 65280) >>> 8) * 0.00392156862745098 * 255 | 0) << 8 | ((this1 & 255) * 0.00392156862745098 * 255 | 0);
	return f;
};
var banan_backend_kha_display__$Color_Color_$Impl_$ = {};
$hxClasses["banan.backend.kha.display._Color.Color_Impl_"] = banan_backend_kha_display__$Color_Color_$Impl_$;
banan_backend_kha_display__$Color_Color_$Impl_$.__name__ = "banan.backend.kha.display._Color.Color_Impl_";
banan_backend_kha_display__$Color_Color_$Impl_$._new = function(color) {
	return color;
};
banan_backend_kha_display__$Color_Color_$Impl_$.toString = function(this1) {
	return "#" + StringTools.hex(this1,8);
};
var banan_backend_kha_display_KhaImageCopier = function() { };
$hxClasses["banan.backend.kha.display.KhaImageCopier"] = banan_backend_kha_display_KhaImageCopier;
banan_backend_kha_display_KhaImageCopier.__name__ = "banan.backend.kha.display.KhaImageCopier";
banan_backend_kha_display_KhaImageCopier.initialize = function() {
	banan_backend_kha_display_KhaImageCopier.createPipelines();
	banan_backend_kha_display_KhaImageCopier.createBuffers();
	var iData = banan_backend_kha_display_KhaImageCopier.indexBuffer.lock();
	iData[0] = 0;
	iData[1] = 1;
	iData[2] = 2;
	iData[3] = 0;
	iData[4] = 2;
	iData[5] = 3;
	banan_backend_kha_display_KhaImageCopier.indexBuffer.unlock();
	banan_backend_kha_display_KhaImageCopier.initialized = true;
};
banan_backend_kha_display_KhaImageCopier.createPipelines = function() {
	banan_backend_kha_display_KhaImageCopier.structure = new kha_graphics4_VertexStructure();
	banan_backend_kha_display_KhaImageCopier.structure.add("vertexPosition",2);
	banan_backend_kha_display_KhaImageCopier.structure.add("texPosition",1);
	banan_backend_kha_display_KhaImageCopier.simplePipeline = new kha_graphics4_PipelineState();
	banan_backend_kha_display_KhaImageCopier.simplePipeline.vertexShader = kha_Shaders.simple_vert;
	banan_backend_kha_display_KhaImageCopier.simplePipeline.fragmentShader = kha_Shaders.simple_frag;
	banan_backend_kha_display_KhaImageCopier.simplePipeline.inputLayout = [banan_backend_kha_display_KhaImageCopier.structure];
	banan_backend_kha_display_KhaImageCopier.simplePipeline.blendOperation = 0;
	banan_backend_kha_display_KhaImageCopier.simplePipeline.alphaBlendOperation = 0;
	banan_backend_kha_display_KhaImageCopier.simplePipeline.blendSource = 1;
	banan_backend_kha_display_KhaImageCopier.simplePipeline.blendDestination = 2;
	banan_backend_kha_display_KhaImageCopier.simplePipeline.alphaBlendSource = 1;
	banan_backend_kha_display_KhaImageCopier.simplePipeline.alphaBlendDestination = 2;
	banan_backend_kha_display_KhaImageCopier.simplePipeline.compile();
	banan_backend_kha_display_KhaImageCopier.maskPipeline = new kha_graphics4_PipelineState();
	banan_backend_kha_display_KhaImageCopier.maskPipeline.vertexShader = kha_Shaders.simple_vert;
	banan_backend_kha_display_KhaImageCopier.maskPipeline.fragmentShader = kha_Shaders.simple_frag;
	banan_backend_kha_display_KhaImageCopier.maskPipeline.inputLayout = [banan_backend_kha_display_KhaImageCopier.structure];
	banan_backend_kha_display_KhaImageCopier.maskPipeline.blendOperation = 0;
	banan_backend_kha_display_KhaImageCopier.maskPipeline.alphaBlendOperation = 0;
	banan_backend_kha_display_KhaImageCopier.maskPipeline.blendSource = 2;
	banan_backend_kha_display_KhaImageCopier.maskPipeline.blendDestination = 3;
	banan_backend_kha_display_KhaImageCopier.maskPipeline.alphaBlendSource = 2;
	banan_backend_kha_display_KhaImageCopier.maskPipeline.alphaBlendDestination = 3;
	banan_backend_kha_display_KhaImageCopier.maskPipeline.compile();
};
banan_backend_kha_display_KhaImageCopier.createBuffers = function() {
	banan_backend_kha_display_KhaImageCopier.vertexBuffer = new kha_graphics4_VertexBuffer(4,banan_backend_kha_display_KhaImageCopier.structure,1);
	banan_backend_kha_display_KhaImageCopier.indexBuffer = new kha_graphics4_IndexBuffer(6,0);
};
banan_backend_kha_display_KhaImageCopier.simpleCopy = function(source,sourceRect,dest,destRect) {
	if(!banan_backend_kha_display_KhaImageCopier.initialized) {
		banan_backend_kha_display_KhaImageCopier.initialize();
		banan_backend_kha_display_KhaImageCopier.initialized = true;
	}
	banan_backend_kha_display_KhaImageCopier.beginRender(source,sourceRect,dest,destRect,banan_backend_kha_display_KhaImageCopier.simplePipeline);
	banan_backend_kha_display_KhaImageCopier.render(dest);
	banan_backend_kha_display_KhaImageCopier.endRender(dest,banan_backend_kha_display_KhaImageCopier.simplePipeline);
};
banan_backend_kha_display_KhaImageCopier.copyWithClamp = function(source,sourceRect,dest,destRect,clampSize) {
	if(clampSize == null) {
		clampSize = 1;
	}
	var newSourceRect = new banan_math_Rect();
	var newDestRect = new banan_math_Rect();
	if(source.get_realHeight() == sourceRect.height && source.get_realWidth() == sourceRect.width && sourceRect.x == 0 && sourceRect.y == 0) {
		newDestRect.setTo(destRect.x - clampSize,destRect.y - clampSize,destRect.width + clampSize * 2,destRect.height + clampSize * 2);
		newSourceRect.setTo(sourceRect.x - clampSize,sourceRect.y - clampSize,sourceRect.width + clampSize * 2,sourceRect.height + clampSize * 2);
		banan_backend_kha_display_KhaImageCopier.simpleCopy(source,newSourceRect,dest,newDestRect);
	} else {
		banan_backend_kha_display_KhaImageCopier.simpleCopy(source,sourceRect,dest,destRect);
		newSourceRect.setTo(sourceRect.x,sourceRect.y,sourceRect.width,clampSize);
		newDestRect.setTo(destRect.x,destRect.y - clampSize,destRect.width,clampSize);
		banan_backend_kha_display_KhaImageCopier.simpleCopy(source,newSourceRect,dest,newDestRect);
		newSourceRect.setTo(sourceRect.x,sourceRect.y + sourceRect.height - clampSize,sourceRect.width,clampSize);
		newDestRect.setTo(destRect.x,destRect.y + destRect.height,destRect.width,clampSize);
		banan_backend_kha_display_KhaImageCopier.simpleCopy(source,newSourceRect,dest,newDestRect);
		newSourceRect.setTo(sourceRect.x,sourceRect.y,clampSize,sourceRect.height);
		newDestRect.setTo(destRect.x - clampSize,destRect.y,clampSize,destRect.height);
		banan_backend_kha_display_KhaImageCopier.simpleCopy(source,newSourceRect,dest,newDestRect);
		newSourceRect.setTo(sourceRect.x + sourceRect.width - clampSize,sourceRect.y,clampSize,sourceRect.height);
		newDestRect.setTo(destRect.x + destRect.width,destRect.y,clampSize,destRect.height);
		banan_backend_kha_display_KhaImageCopier.simpleCopy(source,newSourceRect,dest,newDestRect);
	}
};
banan_backend_kha_display_KhaImageCopier.copyWithMask = function(source,sourceRect,mask,maskRect,dest,destRect) {
	banan_backend_kha_display_KhaImageCopier.simpleCopy(source,sourceRect,dest,destRect);
	banan_backend_kha_display_KhaImageCopier.beginRender(mask,maskRect,dest,destRect,banan_backend_kha_display_KhaImageCopier.maskPipeline);
	banan_backend_kha_display_KhaImageCopier.render(dest);
	banan_backend_kha_display_KhaImageCopier.endRender(dest,banan_backend_kha_display_KhaImageCopier.maskPipeline);
};
banan_backend_kha_display_KhaImageCopier.setVertices = function(vbData,rect) {
	vbData[0] = rect.x;
	vbData[1] = rect.y;
	vbData[2] = -5.0;
	vbData[5] = rect.x + rect.width;
	vbData[6] = rect.y;
	vbData[7] = -5.0;
	vbData[10] = rect.x + rect.width;
	vbData[11] = rect.y + rect.height;
	vbData[12] = -5.0;
	vbData[15] = rect.x;
	vbData[16] = rect.y + rect.height;
	vbData[17] = -5.0;
};
banan_backend_kha_display_KhaImageCopier.setUvs = function(vbData,source,rect) {
	vbData[3] = rect.x / source.get_width();
	vbData[4] = rect.y / source.get_height();
	vbData[8] = (rect.x + rect.width) / source.get_width();
	vbData[9] = rect.y / source.get_height();
	vbData[13] = (rect.x + rect.width) / source.get_width();
	vbData[14] = (rect.y + rect.height) / source.get_height();
	vbData[18] = rect.x / source.get_width();
	vbData[19] = (rect.y + rect.height) / source.get_height();
};
banan_backend_kha_display_KhaImageCopier.beginRender = function(source,sourceRect,dest,destRect,pipeline) {
	var vbData = banan_backend_kha_display_KhaImageCopier.vertexBuffer.lock();
	banan_backend_kha_display_KhaImageCopier.setVertices(vbData,destRect);
	banan_backend_kha_display_KhaImageCopier.setUvs(vbData,source,sourceRect);
	banan_backend_kha_display_KhaImageCopier.vertexBuffer.unlock();
	var right = dest.get_width();
	var top = dest.get_height();
	var mvp = new kha_math_FastMatrix4(2 / right,0,0,-right / right,0,2.0 / top,0,-top / top,0,0,-0.002000200020002,-1.0002000200020003,0,0,0,1);
	var g = dest.get_g4();
	var mvpID = pipeline.getConstantLocation("projectionMatrix");
	var sourceID = pipeline.getTextureUnit("tex");
	g.begin();
	g.setPipeline(pipeline);
	g.setVertexBuffer(banan_backend_kha_display_KhaImageCopier.vertexBuffer);
	g.setIndexBuffer(banan_backend_kha_display_KhaImageCopier.indexBuffer);
	g.setMatrix(mvpID,mvp);
	g.setTexture(sourceID,source);
	g.setTextureParameters(sourceID,2,2,1,1,0);
};
banan_backend_kha_display_KhaImageCopier.render = function(target) {
	target.get_g4().drawIndexedVertices();
};
banan_backend_kha_display_KhaImageCopier.endRender = function(target,pipeline) {
	var g = target.get_g4();
	g.setTexture(pipeline.getTextureUnit("tex"),null);
	g.end();
};
banan_backend_kha_display_KhaImageCopier.validateCopier = function() {
	if(!banan_backend_kha_display_KhaImageCopier.initialized) {
		banan_backend_kha_display_KhaImageCopier.initialize();
		banan_backend_kha_display_KhaImageCopier.initialized = true;
	}
};
var banan_module_Module = function(updatePriority) {
	this.updatePriority = -1;
	this.moduleInfo = this.makeModuleInfo();
	this.managerInitializedUpdateOnly = false;
	this.updatePriority = updatePriority;
};
$hxClasses["banan.module.Module"] = banan_module_Module;
banan_module_Module.__name__ = "banan.module.Module";
banan_module_Module.prototype = {
	moduleInfo: null
	,managerInitializedUpdateOnly: null
	,updatePriority: null
	,initialize: function() {
		this.moduleInfo.setInitialized();
	}
	,onInitialized: function() {
	}
	,update: function() {
	}
	,afterUpdate: function() {
	}
	,terminate: function() {
	}
	,makeModuleInfo: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"Module.hx:52","",null));
	}
	,__class__: banan_module_Module
};
var banan_backend_kha_input_KhaInput = function(updatePriority) {
	this._touches = [];
	this.mouseY = 0;
	this.mouseX = 0;
	this.isMouseOver = false;
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.backend.kha.input.KhaInput"] = banan_backend_kha_input_KhaInput;
banan_backend_kha_input_KhaInput.__name__ = "banan.backend.kha.input.KhaInput";
banan_backend_kha_input_KhaInput.__interfaces__ = [banan_backend_input_IBInput];
banan_backend_kha_input_KhaInput.__super__ = banan_module_Module;
banan_backend_kha_input_KhaInput.prototype = $extend(banan_module_Module.prototype,{
	isMouseOver: null
	,mouseX: null
	,mouseY: null
	,get_touches: function() {
		return this._touches;
	}
	,_touches: null
	,mouseHandler: null
	,surfaceHandler: null
	,surfaceMouseMoveHandler: null
	,renderSystem: null
	,initialize: function() {
		this.mouseHandler = this.getMouseHandler(this._touches);
		if(kha_input_Mouse.get() != null) {
			kha_input_Mouse.get().notify($bind(this,this.mouseUpDownHandler),$bind(this,this.mouseUpDownHandler),$bind(this,this.mouseMoveHandler),null,$bind(this,this.mouseLeaveHandler));
		}
		this.moduleInfo.setInitialized();
	}
	,onInitialized: function() {
		this.renderSystem.g2renderList.push($bind(this,this.g2render));
	}
	,terminate: function() {
		banan_basis_EitherHelper.fold(this.mouseHandler,function(it) {
			return it;
		},function(it1) {
			return it1;
		}).dispose();
		if(kha_input_Mouse.get() != null) {
			kha_input_Mouse.get().remove($bind(this,this.mouseUpDownHandler),$bind(this,this.mouseUpDownHandler),$bind(this,this.mouseMoveHandler),null,$bind(this,this.mouseLeaveHandler));
		}
	}
	,mouseLeaveHandler: function() {
		this.isMouseOver = false;
	}
	,mouseUpDownHandler: function(_,x,y) {
		this.mouseX = x;
		this.mouseY = y;
		this.isMouseOver = true;
	}
	,mouseMoveHandler: function(x,y,_,_1) {
		this.mouseX = x;
		this.mouseY = y;
		this.isMouseOver = true;
	}
	,afterUpdate: function() {
		var touchN = 0;
		while(touchN < this._touches.length) {
			while(touchN < this._touches.length && !this._touches[touchN].isActive) this._touches.splice(touchN,1);
			if(touchN < this._touches.length) {
				this._touches[touchN].postUpdate();
			}
			++touchN;
		}
	}
	,getMouseHandler: function(touches) {
		return banan_basis_EitherHelper.right(new banan_backend_kha_input_MouseHandler(touches));
	}
	,g2render: function(g2) {
		if(banan_backend_kha_input_KhaInput.DEBUG_DRAW_MULTITOUCH) {
			g2.begin(false);
			var _g = 0;
			var _g1 = this._touches;
			while(_g < _g1.length) {
				var touch = _g1[_g];
				++_g;
				g2.set_color(-1);
				g2.set_opacity(0.5);
				g2.fillRect(touch.x - 20,touch.y - 20,40,40);
				g2.set_color(-16777216);
				g2.set_opacity(1);
				g2.drawRect(touch.x - 20,touch.y - 20,40,40);
			}
			g2.end();
		}
	}
	,makeModuleInfo: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["banan.render.RenderSystem"] != null) {
			_g.setReserved("banan.render.RenderSystem","renderSystem");
		} else {
			_g.h["banan.render.RenderSystem"] = "renderSystem";
		}
		return new banan_module_ModuleInfo("banan.backend.kha.input.KhaInput",["banan.backend.input.IBInput"],[],_g,[]);
	}
	,__class__: banan_backend_kha_input_KhaInput
	,__properties__: {get_touches:"get_touches"}
});
var banan_backend_kha_input_MouseHandler = function(touches) {
	this.mouseY = 0;
	this.mouseX = 0;
	this.isMouseDown = false;
	this.mouseTouch = new banan_backend_input_Touch(touches);
	var mouse = kha_input_Mouse.get();
	if(mouse != null) {
		mouse.notify($bind(this,this.onMouseDown),$bind(this,this.onMouseUp),$bind(this,this.onMouseMove),null);
	}
};
$hxClasses["banan.backend.kha.input.MouseHandler"] = banan_backend_kha_input_MouseHandler;
banan_backend_kha_input_MouseHandler.__name__ = "banan.backend.kha.input.MouseHandler";
banan_backend_kha_input_MouseHandler.prototype = {
	isMouseDown: null
	,mouseX: null
	,mouseY: null
	,mouseTouch: null
	,dispose: function() {
		var mouse = kha_input_Mouse.get();
		if(mouse != null) {
			mouse.remove($bind(this,this.onMouseDown),$bind(this,this.onMouseUp),$bind(this,this.onMouseMove),null);
		}
	}
	,onMouseDown: function(button,x,y) {
		if(button != 0) {
			return;
		}
		this.isMouseDown = true;
		this.mouseTouch.start(banan_backend_kha_input_MouseHandler.TOUCH_ID0,x,y);
	}
	,onMouseUp: function(button,x,y) {
		this.isMouseDown = false;
		this.mouseTouch.end();
	}
	,onMouseMove: function(x,y,movementX,movementY) {
		this.mouseX = x;
		this.mouseY = y;
		this.mouseTouch.move(this.mouseX,this.mouseY);
	}
	,__class__: banan_backend_kha_input_MouseHandler
};
var banan_backend_kha_input_MouseHandlerWithMultitouchEmulation = function(touches) {
	this.keys = [];
	banan_backend_kha_input_MouseHandler.call(this,touches);
	this.mouseTouch2 = new banan_backend_input_Touch(touches);
	var keyboard = kha_input_Keyboard.get();
	if(keyboard != null) {
		keyboard.notify($bind(this,this.onKeyDown),$bind(this,this.onKeyUp));
	}
};
$hxClasses["banan.backend.kha.input.MouseHandlerWithMultitouchEmulation"] = banan_backend_kha_input_MouseHandlerWithMultitouchEmulation;
banan_backend_kha_input_MouseHandlerWithMultitouchEmulation.__name__ = "banan.backend.kha.input.MouseHandlerWithMultitouchEmulation";
banan_backend_kha_input_MouseHandlerWithMultitouchEmulation.__super__ = banan_backend_kha_input_MouseHandler;
banan_backend_kha_input_MouseHandlerWithMultitouchEmulation.prototype = $extend(banan_backend_kha_input_MouseHandler.prototype,{
	mouseTouch2: null
	,keys: null
	,dispose: function() {
		banan_backend_kha_input_MouseHandler.prototype.dispose.call(this);
		var keyboard = kha_input_Keyboard.get();
		if(keyboard != null) {
			keyboard.remove($bind(this,this.onKeyDown),$bind(this,this.onKeyUp),null);
		}
	}
	,onMouseDown: function(button,x,y) {
		banan_backend_kha_input_MouseHandler.prototype.onMouseDown.call(this,button,x,y);
		if(this.keys.length > 0) {
			this.mouseTouch2.start(banan_backend_kha_input_MouseHandlerWithMultitouchEmulation.TOUCH_ID1,this.mouseTouch2.x,this.mouseTouch2.y);
		}
	}
	,onMouseUp: function(button,x,y) {
		banan_backend_kha_input_MouseHandler.prototype.onMouseUp.call(this,button,x,y);
		this.mouseTouch2.end();
	}
	,onMouseMove: function(x,y,movementX,movementY) {
		var dx = x - this.mouseX;
		var dy = y - this.mouseY;
		if(this.keys.length == 0 || this.keys[this.keys.length - 1] == 16) {
			var centerX = Math.round((this.mouseTouch2.x + this.mouseTouch.x) / 2);
			var centerY = Math.round((this.mouseTouch2.y + this.mouseTouch.y) / 2);
			this.mouseTouch2.move(centerX - (x - centerX),centerY - (y - centerY));
		} else {
			this.mouseTouch2.move(this.mouseTouch2.x + dx,this.mouseTouch2.y + dy);
		}
		banan_backend_kha_input_MouseHandler.prototype.onMouseMove.call(this,x,y,movementX,movementY);
	}
	,onKeyDown: function(key) {
		if(key == 9 || key == 16) {
			if(this.keys.length == 0) {
				var centerX = Math.round(kha_System.windowWidth() / 2);
				var centerY = Math.round(kha_System.windowHeight() / 2);
				this.mouseTouch2.x = centerX - (this.mouseTouch.x - centerX);
				this.mouseTouch2.y = centerY - (this.mouseTouch.y - centerY);
			}
			if(this.keys.indexOf(key) < 0) {
				this.keys.push(key);
			}
			if(!this.mouseTouch2.isActive && this.isMouseDown) {
				this.mouseTouch2.start(banan_backend_kha_input_MouseHandlerWithMultitouchEmulation.TOUCH_ID1,this.mouseTouch2.x,this.mouseTouch2.y);
			}
		}
	}
	,onKeyUp: function(key) {
		HxOverrides.remove(this.keys,key);
		if(this.keys.length == 0) {
			this.mouseTouch2.end();
		}
	}
	,__class__: banan_backend_kha_input_MouseHandlerWithMultitouchEmulation
});
var banan_backend_kha_input_SurfaceHandler = function(touches) {
	this._myTouches = new haxe_ds_IntMap();
	this._touches = touches;
	var surface = kha_input_Surface.get();
	if(surface != null) {
		surface.notify($bind(this,this.onTouchStart),$bind(this,this.onTouchEnd),$bind(this,this.onTouchMove));
	}
};
$hxClasses["banan.backend.kha.input.SurfaceHandler"] = banan_backend_kha_input_SurfaceHandler;
banan_backend_kha_input_SurfaceHandler.__name__ = "banan.backend.kha.input.SurfaceHandler";
banan_backend_kha_input_SurfaceHandler.prototype = {
	_myTouches: null
	,_touches: null
	,dispose: function() {
		var surface = kha_input_Surface.get();
		if(surface != null) {
			surface.remove($bind(this,this.onTouchStart),$bind(this,this.onTouchEnd),$bind(this,this.onTouchMove));
		}
	}
	,getTouch: function(id) {
		if(!this._myTouches.h.hasOwnProperty(id)) {
			this._myTouches.h[id] = new banan_backend_input_Touch(this._touches);
		}
		return this._myTouches.h[id];
	}
	,onTouchStart: function(id,x,y) {
		this.getTouch(id).start(id,x,y);
	}
	,onTouchEnd: function(id,x,y) {
		this.getTouch(id).end();
	}
	,onTouchMove: function(id,x,y) {
		this.getTouch(id).move(x,y);
	}
	,__class__: banan_backend_kha_input_SurfaceHandler
};
var banan_basis__$AssetPath_AssetPath_$Impl_$ = {};
$hxClasses["banan.basis._AssetPath.AssetPath_Impl_"] = banan_basis__$AssetPath_AssetPath_$Impl_$;
banan_basis__$AssetPath_AssetPath_$Impl_$.__name__ = "banan.basis._AssetPath.AssetPath_Impl_";
banan_basis__$AssetPath_AssetPath_$Impl_$._new = function(str) {
	return str;
};
banan_basis__$AssetPath_AssetPath_$Impl_$.getPath = function(this1) {
	return this1;
};
banan_basis__$AssetPath_AssetPath_$Impl_$.fromJetAssetPath = function(jetAssetPath) {
	return jetAssetPath;
};
var banan_basis_DisposeState = $hxEnums["banan.basis.DisposeState"] = { __ename__ : true, __constructs__ : ["Initing","Inited","Disposing","Disposed"]
	,Initing: {_hx_index:0,__enum__:"banan.basis.DisposeState",toString:$estr}
	,Inited: {_hx_index:1,__enum__:"banan.basis.DisposeState",toString:$estr}
	,Disposing: {_hx_index:2,__enum__:"banan.basis.DisposeState",toString:$estr}
	,Disposed: {_hx_index:3,__enum__:"banan.basis.DisposeState",toString:$estr}
};
banan_basis_DisposeState.__empty_constructs__ = [banan_basis_DisposeState.Initing,banan_basis_DisposeState.Inited,banan_basis_DisposeState.Disposing,banan_basis_DisposeState.Disposed];
var banan_basis_Either = $hxEnums["banan.basis.Either"] = { __ename__ : true, __constructs__ : ["Left","Right"]
	,Left: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"banan.basis.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Right: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"banan.basis.Either",toString:$estr}; },$_.__params__ = ["v"],$_)
};
banan_basis_Either.__empty_constructs__ = [];
var banan_basis_EitherHelper = function() { };
$hxClasses["banan.basis.EitherHelper"] = banan_basis_EitherHelper;
banan_basis_EitherHelper.__name__ = "banan.basis.EitherHelper";
banan_basis_EitherHelper.left = function(it) {
	return banan_basis_Either.Left(it);
};
banan_basis_EitherHelper.right = function(it) {
	return banan_basis_Either.Right(it);
};
banan_basis_EitherHelper.from = function(l,r) {
	if(l == null && r == null) {
		return null;
	} else if(r != null) {
		return banan_basis_Either.Right(r);
	} else {
		return banan_basis_Either.Left(l);
	}
};
banan_basis_EitherHelper.isLeft = function(it) {
	switch(it._hx_index) {
	case 0:
		return true;
	case 1:
		return false;
	}
};
banan_basis_EitherHelper.isRight = function(it) {
	return !banan_basis_EitherHelper.isLeft(it);
};
banan_basis_EitherHelper.map = function(it,transform) {
	switch(it._hx_index) {
	case 0:
		return it;
	case 1:
		return banan_basis_Either.Right(transform(it.v));
	}
};
banan_basis_EitherHelper.mapLeft = function(it,transform) {
	switch(it._hx_index) {
	case 0:
		return banan_basis_Either.Left(transform(it.v));
	case 1:
		return it;
	}
};
banan_basis_EitherHelper.fold = function(it,ifLeft,ifRight) {
	switch(it._hx_index) {
	case 0:
		return ifLeft(it.v);
	case 1:
		return ifRight(it.v);
	}
};
banan_basis_EitherHelper.getLeft = function(it) {
	switch(it._hx_index) {
	case 0:
		return it.v;
	case 1:
		return null;
	}
};
banan_basis_EitherHelper.getRight = function(it) {
	switch(it._hx_index) {
	case 0:
		return null;
	case 1:
		return it.v;
	}
};
var banan_basis_Err = function(type,pos,parent,callStack,exceptionStack) {
	this._type = type;
	this.pos = pos;
	this.parent = parent;
	var tmp;
	if(callStack != null) {
		tmp = callStack;
	} else {
		try {
			tmp = haxe_CallStack.callStack();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			tmp = [];
		}
	}
	this.callStack = tmp;
	var tmp1;
	if(exceptionStack != null) {
		tmp1 = exceptionStack;
	} else {
		try {
			tmp1 = haxe_CallStack.exceptionStack();
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			tmp1 = [];
		}
	}
	this.exceptionStack = tmp1;
};
$hxClasses["banan.basis.Err"] = banan_basis_Err;
banan_basis_Err.__name__ = "banan.basis.Err";
banan_basis_Err.prototype = {
	get_type: function() {
		return this._type;
	}
	,pos: null
	,callStack: null
	,exceptionStack: null
	,parent: null
	,_type: null
	,convertType: function(convert) {
		this._type = convert(this._type);
		return this;
	}
	,toString: function() {
		var string = "Err @ " + this.pos + " ( #" + Std.string(this._type) + " )";
		var _g__value = this.parent;
		while(_g__value != null) {
			var value = _g__value;
			_g__value = null;
			string += " :: " + value.toString();
		}
		return string;
	}
	,__class__: banan_basis_Err
	,__properties__: {get_type:"get_type"}
};
var banan_basis__$Err_Stack_$Impl_$ = {};
$hxClasses["banan.basis._Err.Stack_Impl_"] = banan_basis__$Err_Stack_$Impl_$;
banan_basis__$Err_Stack_$Impl_$.__name__ = "banan.basis._Err.Stack_Impl_";
banan_basis__$Err_Stack_$Impl_$.toString = function(this1) {
	return haxe_CallStack.toString(this1);
};
var banan_basis_ExtendEnum = function(name,pos) {
	var thisT = this;
	this.type = banan_basis_ExtendEnum.getType(js_Boot.getClass(thisT));
	this.name = (name != null ? name + "_" : "") + pos.className + "_" + pos.lineNumber;
	this.type.register(thisT);
};
$hxClasses["banan.basis.ExtendEnum"] = banan_basis_ExtendEnum;
banan_basis_ExtendEnum.__name__ = "banan.basis.ExtendEnum";
banan_basis_ExtendEnum.getType = function(cls) {
	var name = cls.__name__;
	var _this = banan_basis_ExtendEnum.typeMap;
	var type = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(type == null) {
		type = new banan_basis_ExtendEnumType(cls,name);
		var _this1 = banan_basis_ExtendEnum.typeMap;
		if(__map_reserved[name] != null) {
			_this1.setReserved(name,type);
		} else {
			_this1.h[name] = type;
		}
	}
	return type;
};
banan_basis_ExtendEnum.setOrder = function(cls,order) {
	banan_basis_ExtendEnum.getType(cls).setOrder(order);
};
banan_basis_ExtendEnum.prototype = {
	type: null
	,name: null
	,toString: function() {
		return "" + this.type.name + ":" + this.name;
	}
	,__class__: banan_basis_ExtendEnum
};
var banan_basis_ExtendEnumType = function(cls,name) {
	this.hasOrder = false;
	this.all = [];
	this.cls = cls;
	this.name = name;
};
$hxClasses["banan.basis.ExtendEnumType"] = banan_basis_ExtendEnumType;
banan_basis_ExtendEnumType.__name__ = "banan.basis.ExtendEnumType";
banan_basis_ExtendEnumType.prototype = {
	cls: null
	,name: null
	,all: null
	,hasOrder: null
	,getByName: function(name) {
		var _g = 0;
		var _g1 = this.all;
		while(_g < _g1.length) {
			var value = _g1[_g];
			++_g;
			if(value.name == name) {
				return value;
			}
		}
		return null;
	}
	,register: function(value) {
		if(!(!this.hasOrder)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnum.hx:74","!hasOrder",null));
		}
		if(this.getByName(value.name) != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnum.hx:75","getByName(value.name) == null",null));
		}
		this.all.push(value);
	}
	,setOrder: function(order) {
		if(!(!this.hasOrder)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnum.hx:82","!hasOrder",null));
		}
		if(!this.isOrderValid(order)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnum.hx:83","isOrderValid(order)",null));
		}
		this.all = order;
		this.hasOrder = true;
	}
	,isOrderValid: function(order) {
		if(order.length != this.all.length) {
			return false;
		}
		var _g = 0;
		while(_g < order.length) if(this.all.indexOf(order[_g++]) < 0) {
			return false;
		}
		return true;
	}
	,__class__: banan_basis_ExtendEnumType
};
var banan_basis__$ExtendEnumMap_ExtendEnumMap_$Impl_$ = {};
$hxClasses["banan.basis._ExtendEnumMap.ExtendEnumMap_Impl_"] = banan_basis__$ExtendEnumMap_ExtendEnumMap_$Impl_$;
banan_basis__$ExtendEnumMap_ExtendEnumMap_$Impl_$.__name__ = "banan.basis._ExtendEnumMap.ExtendEnumMap_Impl_";
banan_basis__$ExtendEnumMap_ExtendEnumMap_$Impl_$._new = function(cls) {
	return new banan_basis_ExtendEnumMapImpl(cls);
};
banan_basis__$ExtendEnumMap_ExtendEnumMap_$Impl_$.set = function(this1,key,value) {
	if(key.type != this1.type) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:40","key.type == type",null));
	}
	var k = key.name;
	var _this = this1.map;
	if(__map_reserved[k] != null) {
		_this.setReserved(k,value);
	} else {
		_this.h[k] = value;
	}
	return value;
};
banan_basis__$ExtendEnumMap_ExtendEnumMap_$Impl_$.get = function(this1,key) {
	if(key.type != this1.type) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:47","key.type == type",null));
	}
	var key1 = key.name;
	var _this = this1.map;
	return __map_reserved[key1] != null ? _this.getReserved(key1) : _this.h[key1];
};
banan_basis__$ExtendEnumMap_ExtendEnumMap_$Impl_$.copy = function(this1) {
	var newMap = new banan_basis_ExtendEnumMapImpl(this1.type.cls);
	newMap.map = this1.map.copy();
	return newMap;
};
var banan_basis_ExtendEnumMapImpl = function(cls) {
	this.map = new haxe_ds_StringMap();
	this.type = banan_basis_ExtendEnum.getType(cls);
};
$hxClasses["banan.basis.ExtendEnumMapImpl"] = banan_basis_ExtendEnumMapImpl;
banan_basis_ExtendEnumMapImpl.__name__ = "banan.basis.ExtendEnumMapImpl";
banan_basis_ExtendEnumMapImpl.prototype = {
	type: null
	,map: null
	,set: function(key,value) {
		if(key.type != this.type) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:40","key.type == type",null));
		}
		var k = key.name;
		var _this = this.map;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,value);
		} else {
			_this.h[k] = value;
		}
		return value;
	}
	,get: function(key) {
		if(key.type != this.type) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:47","key.type == type",null));
		}
		var key1 = key.name;
		var _this = this.map;
		if(__map_reserved[key1] != null) {
			return _this.getReserved(key1);
		} else {
			return _this.h[key1];
		}
	}
	,exists: function(key) {
		if(key.type != this.type) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:53","key.type == type",null));
		}
		var key1 = key.name;
		var _this = this.map;
		if(__map_reserved[key1] != null) {
			return _this.existsReserved(key1);
		} else {
			return _this.h.hasOwnProperty(key1);
		}
	}
	,remove: function(key) {
		if(key.type != this.type) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:59","key.type == type",null));
		}
		return this.map.remove(key.name);
	}
	,keys: function() {
		var _gthis = this;
		return new banan_basis__$IteratorHelper_FilterIterator(HxOverrides.iter(this.type.all),function(k) {
			var key = k.name;
			var _this = _gthis.map;
			if(__map_reserved[key] != null) {
				return _this.existsReserved(key);
			} else {
				return _this.h.hasOwnProperty(key);
			}
		});
	}
	,iterator: function() {
		var _gthis = this;
		var _gthis1 = this;
		return new banan_basis__$IteratorHelper_TransformIterator(new banan_basis__$IteratorHelper_FilterIterator(HxOverrides.iter(this.type.all),function(k) {
			var key = k.name;
			var _this = _gthis1.map;
			if(__map_reserved[key] != null) {
				return _this.existsReserved(key);
			} else {
				return _this.h.hasOwnProperty(key);
			}
		}),function(k1) {
			var key1 = k1.name;
			var _this1 = _gthis.map;
			if(__map_reserved[key1] != null) {
				return _this1.getReserved(key1);
			} else {
				return _this1.h[key1];
			}
		});
	}
	,keyValueIterator: function() {
		var _gthis = this;
		var _gthis1 = this;
		return new banan_basis__$IteratorHelper_TransformIterator(new banan_basis__$IteratorHelper_FilterIterator(HxOverrides.iter(this.type.all),function(k) {
			var key = k.name;
			var _this = _gthis1.map;
			if(__map_reserved[key] != null) {
				return _this.existsReserved(key);
			} else {
				return _this.h.hasOwnProperty(key);
			}
		}),function(k1) {
			var key1 = k1.name;
			var _this1 = _gthis.map;
			return { key : k1, value : __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]};
		});
	}
	,copy: function() {
		var newMap = new banan_basis_ExtendEnumMapImpl(this.type.cls);
		newMap.map = this.map.copy();
		return newMap;
	}
	,toString: function() {
		return this.map.toString();
	}
	,clear: function() {
		var _this = this.map;
		_this.h = { };
		_this.rh = null;
	}
	,__class__: banan_basis_ExtendEnumMapImpl
};
var banan_basis__$HashSet_HashSet_$Impl_$ = {};
$hxClasses["banan.basis._HashSet.HashSet_Impl_"] = banan_basis__$HashSet_HashSet_$Impl_$;
banan_basis__$HashSet_HashSet_$Impl_$.__name__ = "banan.basis._HashSet.HashSet_Impl_";
banan_basis__$HashSet_HashSet_$Impl_$.has = function(this1,item) {
	return this1.exists(item);
};
banan_basis__$HashSet_HashSet_$Impl_$.push = function(this1,item) {
	this1.set(item,true);
};
banan_basis__$HashSet_HashSet_$Impl_$.remove = function(this1,item) {
	return this1.remove(item);
};
banan_basis__$HashSet_HashSet_$Impl_$.iterator = function(this1) {
	return this1.keys();
};
banan_basis__$HashSet_HashSet_$Impl_$.toIterable = function(this1) {
	return this1;
};
banan_basis__$HashSet_HashSet_$Impl_$.clear = function(this1) {
	this1.clear();
};
banan_basis__$HashSet_HashSet_$Impl_$.isEmpty = function(this1) {
	return !this1.keys().hasNext();
};
banan_basis__$HashSet_HashSet_$Impl_$.asArray = function(this1) {
	return banan_basis_IteratorHelper.toArray(this1.keys());
};
var banan_basis_IdSource = function(initId) {
	if(initId == null) {
		initId = 0;
	}
	this.initId = initId;
	this.next = initId;
};
$hxClasses["banan.basis.IdSource"] = banan_basis_IdSource;
banan_basis_IdSource.__name__ = "banan.basis.IdSource";
banan_basis_IdSource.prototype = {
	initId: null
	,get_id: function() {
		return this.next++;
	}
	,next: null
	,__class__: banan_basis_IdSource
	,__properties__: {get_id:"get_id"}
};
var banan_basis_IteratorHelper = function() { };
$hxClasses["banan.basis.IteratorHelper"] = banan_basis_IteratorHelper;
banan_basis_IteratorHelper.__name__ = "banan.basis.IteratorHelper";
banan_basis_IteratorHelper.empty = function() {
	return banan_basis_IteratorHelper.emptyIterator;
};
banan_basis_IteratorHelper.map = function(it,transform) {
	return new banan_basis__$IteratorHelper_TransformIterator(it,transform);
};
banan_basis_IteratorHelper.mapPair = function(it,transform) {
	return new banan_basis__$IteratorHelper_TransformIterator(it,function(pair) {
		return transform(pair.a,pair.b);
	});
};
banan_basis_IteratorHelper.mapTriple = function(it,transform) {
	return new banan_basis__$IteratorHelper_TransformIterator(it,function(triple) {
		return transform(triple.a,triple.b,triple.c);
	});
};
banan_basis_IteratorHelper.mapKeyVal = function(it,transform) {
	return new banan_basis__$IteratorHelper_TransformIterator(it,function(keyVal) {
		return transform(keyVal.key,keyVal.value);
	});
};
banan_basis_IteratorHelper.mapIndexed = function(it,transform) {
	var index = 0;
	return new banan_basis__$IteratorHelper_TransformIterator(it,function(t) {
		index += 1;
		return transform(index - 1,t);
	});
};
banan_basis_IteratorHelper.mapNotNull = function(it,transform) {
	return new banan_basis__$IteratorHelper_FilterIterator(new banan_basis__$IteratorHelper_TransformIterator(it,transform),function(it1) {
		return it1 != null;
	});
};
banan_basis_IteratorHelper.chainedPairs = function(it) {
	return new banan_basis__$IteratorHelper_ChainedPairIterator(it);
};
banan_basis_IteratorHelper.filter = function(it,predicate) {
	return new banan_basis__$IteratorHelper_FilterIterator(it,predicate);
};
banan_basis_IteratorHelper.filterNotNull = function(it) {
	return new banan_basis__$IteratorHelper_FilterIterator(it,function(it1) {
		return it1 != null;
	});
};
banan_basis_IteratorHelper.forEach = function(iterator,action) {
	while(iterator.hasNext()) action(iterator.next());
};
banan_basis_IteratorHelper.forEachKeyVal = function(it,action) {
	while(it.keys.hasNext()) {
		var key = it.keys.next();
		var keyVal = { value : it.map.get(key), key : key};
		action(keyVal.key,keyVal.value);
	}
};
banan_basis_IteratorHelper.forEachPair = function(it,action) {
	while(it.hasNext()) {
		var pair = it.next();
		action(pair.a,pair.b);
	}
};
banan_basis_IteratorHelper.fold = function(it,f,first) {
	while(it.hasNext()) first = f(it.next(),first);
	return first;
};
banan_basis_IteratorHelper.count = function(it,pred) {
	var n = 0;
	if(pred == null) {
		while(it.hasNext()) {
			it.next();
			++n;
		}
	} else {
		while(it.hasNext()) if(pred(it.next())) {
			++n;
		}
	}
	return n;
};
banan_basis_IteratorHelper.toArray = function(it) {
	var a = [];
	while(it.hasNext()) a.push(it.next());
	return a;
};
banan_basis_IteratorHelper.first = function(it) {
	if(it.hasNext()) {
		return it.next();
	} else {
		return null;
	}
};
banan_basis_IteratorHelper.find = function(it,predicate) {
	var needle = null;
	while(it.hasNext()) {
		var item = it.next();
		if(predicate(item)) {
			needle = item;
			break;
		}
	}
	return needle;
};
var banan_basis__$IteratorHelper_TransformIterator = function(src,transform) {
	this._src = src;
	this._transform = transform;
};
$hxClasses["banan.basis._IteratorHelper.TransformIterator"] = banan_basis__$IteratorHelper_TransformIterator;
banan_basis__$IteratorHelper_TransformIterator.__name__ = "banan.basis._IteratorHelper.TransformIterator";
banan_basis__$IteratorHelper_TransformIterator.prototype = {
	_src: null
	,_transform: null
	,hasNext: function() {
		return this._src.hasNext();
	}
	,next: function() {
		return this._transform(this._src.next());
	}
	,__class__: banan_basis__$IteratorHelper_TransformIterator
};
var banan_basis__$IteratorHelper_ChainedPairIterator = function(src) {
	this.first = true;
	this.a = null;
	this._src = src;
};
$hxClasses["banan.basis._IteratorHelper.ChainedPairIterator"] = banan_basis__$IteratorHelper_ChainedPairIterator;
banan_basis__$IteratorHelper_ChainedPairIterator.__name__ = "banan.basis._IteratorHelper.ChainedPairIterator";
banan_basis__$IteratorHelper_ChainedPairIterator.prototype = {
	_src: null
	,a: null
	,first: null
	,hasNext: function() {
		if(this.first && this._src.hasNext()) {
			this.a = this._src.next();
			this.first = false;
		}
		return this._src.hasNext();
	}
	,next: function() {
		var next = { a : this.a, b : this._src.next()};
		this.a = next.b;
		return next;
	}
	,__class__: banan_basis__$IteratorHelper_ChainedPairIterator
};
var banan_basis__$IteratorHelper_FilterIterator = function(src,predicate) {
	this.myNext = null;
	this._src = src;
	this._predicate = predicate;
};
$hxClasses["banan.basis._IteratorHelper.FilterIterator"] = banan_basis__$IteratorHelper_FilterIterator;
banan_basis__$IteratorHelper_FilterIterator.__name__ = "banan.basis._IteratorHelper.FilterIterator";
banan_basis__$IteratorHelper_FilterIterator.prototype = {
	_src: null
	,_predicate: null
	,myNext: null
	,hasNext: function() {
		this.myNext = null;
		while(this._src.hasNext()) {
			var srcNext = this._src.next();
			if(this._predicate(srcNext)) {
				this.myNext = srcNext;
				break;
			}
		}
		return this.myNext != null;
	}
	,next: function() {
		return this.myNext;
	}
	,__class__: banan_basis__$IteratorHelper_FilterIterator
};
var banan_basis__$May_May_$Impl_$ = {};
$hxClasses["banan.basis._May.May_Impl_"] = banan_basis__$May_May_$Impl_$;
banan_basis__$May_May_$Impl_$.__name__ = "banan.basis._May.May_Impl_";
banan_basis__$May_May_$Impl_$.__properties__ = {get_isNone:"get_isNone",get_isSome:"get_isSome"};
banan_basis__$May_May_$Impl_$.get_isSome = function(this1) {
	return this1 != null;
};
banan_basis__$May_May_$Impl_$.get_isNone = function(this1) {
	return this1 == null;
};
banan_basis__$May_May_$Impl_$._new = function(t) {
	return t;
};
banan_basis__$May_May_$Impl_$.unsafeUnwrap = function(this1) {
	return this1;
};
banan_basis__$May_May_$Impl_$.unwrapOr = function(this1,def) {
	if(this1 != null) {
		return this1;
	} else {
		return def;
	}
};
banan_basis__$May_May_$Impl_$.unwrapOrElse = function(this1,getDef) {
	if(this1 != null) {
		return this1;
	} else {
		return getDef();
	}
};
banan_basis__$May_May_$Impl_$.ifSome = function(this1,func) {
	if(this1 != null) {
		func(this1);
	}
	return this1;
};
banan_basis__$May_May_$Impl_$.ifNone = function(this1,func) {
	if(this1 == null) {
		func();
	}
	return this1;
};
banan_basis__$May_May_$Impl_$.map = function(this1,mapSome) {
	if(this1 != null) {
		return mapSome(this1);
	} else {
		return null;
	}
};
banan_basis__$May_May_$Impl_$.mapOr = function(this1,def,mapSome) {
	if(this1 != null) {
		return mapSome(this1);
	} else {
		return def;
	}
};
banan_basis__$May_May_$Impl_$.mapOrElse = function(this1,getDef,mapSome) {
	if(this1 != null) {
		return mapSome(this1);
	} else {
		return getDef();
	}
};
banan_basis__$May_May_$Impl_$.okOr = function(this1,err) {
	if(this1 != null) {
		return this1;
	} else {
		return err;
	}
};
banan_basis__$May_May_$Impl_$.okOrElse = function(this1,getErr) {
	if(this1 != null) {
		return this1;
	} else {
		return getErr();
	}
};
banan_basis__$May_May_$Impl_$.and = function(this1,may) {
	if(this1 != null) {
		return may;
	} else {
		return null;
	}
};
banan_basis__$May_May_$Impl_$.andThen = function(this1,mapSome) {
	if(this1 != null) {
		return mapSome(this1);
	} else {
		return null;
	}
};
banan_basis__$May_May_$Impl_$.or = function(this1,may) {
	if(this1 != null) {
		return this1;
	} else {
		return may;
	}
};
banan_basis__$May_May_$Impl_$.orElse = function(this1,getMay) {
	if(this1 != null) {
		return this1;
	} else {
		return getMay();
	}
};
banan_basis__$May_May_$Impl_$.take = function(this1) {
	var value = this1;
	this1 = null;
	return value;
};
banan_basis__$May_May_$Impl_$.iterator = function(this1) {
	return new banan_basis_MayIterator(this1);
};
banan_basis__$May_May_$Impl_$.castToMay = function(may) {
	return may;
};
banan_basis__$May_May_$Impl_$.from = function(may) {
	return may;
};
var banan_basis_MayIterator = function(may) {
	this._value = may;
};
$hxClasses["banan.basis.MayIterator"] = banan_basis_MayIterator;
banan_basis_MayIterator.__name__ = "banan.basis.MayIterator";
banan_basis_MayIterator.prototype = {
	_value: null
	,hasNext: function() {
		return this._value != null;
	}
	,next: function() {
		var value = this._value;
		this._value = null;
		return value;
	}
	,__class__: banan_basis_MayIterator
};
var banan_basis_NullHelper = function() { };
$hxClasses["banan.basis.NullHelper"] = banan_basis_NullHelper;
banan_basis_NullHelper.__name__ = "banan.basis.NullHelper";
banan_basis_NullHelper.or = function(a,b) {
	if(a != null) {
		return a;
	} else {
		return b;
	}
};
banan_basis_NullHelper.ifSome = function(it,action) {
	if(it != null) {
		action(it);
	}
	return it;
};
banan_basis_NullHelper.ifNone = function(it,action) {
	if(it == null) {
		action();
	}
	return it;
};
banan_basis_NullHelper.orProvide = function(it,getDefault) {
	if(it != null) {
		return it;
	} else {
		return getDefault();
	}
};
banan_basis_NullHelper.orThrow = function(it,typeCode,message,posInfos) {
	if(it != null) {
		return it;
	} else {
		throw new js__$Boot_HaxeError(banan_error_Error.e(typeCode,banan_error_Error.getShortPosition("" + posInfos.fileName + ":" + posInfos.lineNumber + ":"),message,null));
	}
};
banan_basis_NullHelper.isSome = function(it) {
	return it != null;
};
banan_basis_NullHelper.isNone = function(it) {
	return it == null;
};
banan_basis_NullHelper.mapSome = function(it,transform) {
	if(it != null) {
		return transform(it);
	} else {
		return null;
	}
};
banan_basis_NullHelper.filter = function(it,predicate) {
	if(it != null && predicate(it)) {
		return it;
	} else {
		return null;
	}
};
banan_basis_NullHelper.branch = function(it,ifSome,ifNone) {
	if(it != null) {
		return ifSome(it);
	} else {
		return ifNone();
	}
};
banan_basis_NullHelper.safeCall = function(fn) {
	try {
		return fn();
	} catch( _ ) {
		haxe_CallStack.lastException = _;
		return null;
	}
};
var banan_basis__$Result_Result_$Impl_$ = {};
$hxClasses["banan.basis._Result.Result_Impl_"] = banan_basis__$Result_Result_$Impl_$;
banan_basis__$Result_Result_$Impl_$.__name__ = "banan.basis._Result.Result_Impl_";
banan_basis__$Result_Result_$Impl_$.__properties__ = {get_err:"get_err",get_ok:"get_ok",get_isErr:"get_isErr",get_isOk:"get_isOk"};
banan_basis__$Result_Result_$Impl_$.get_isOk = function(this1) {
	return !((this1) instanceof banan_basis_Err);
};
banan_basis__$Result_Result_$Impl_$.get_isErr = function(this1) {
	return ((this1) instanceof banan_basis_Err);
};
banan_basis__$Result_Result_$Impl_$.get_ok = function(this1) {
	if(!((this1) instanceof banan_basis_Err)) {
		return this1;
	} else {
		return null;
	}
};
banan_basis__$Result_Result_$Impl_$.get_err = function(this1) {
	if(!((this1) instanceof banan_basis_Err)) {
		return null;
	} else {
		return this1;
	}
};
banan_basis__$Result_Result_$Impl_$._new = function(d) {
	return d;
};
banan_basis__$Result_Result_$Impl_$.unwrapOr = function(this1,def) {
	if(!((this1) instanceof banan_basis_Err)) {
		return this1;
	} else {
		return def;
	}
};
banan_basis__$Result_Result_$Impl_$.unwrapOrElse = function(this1,getDef) {
	if(!((this1) instanceof banan_basis_Err)) {
		return this1;
	} else {
		return getDef(this1._type);
	}
};
banan_basis__$Result_Result_$Impl_$.map = function(this1,mapOk) {
	if(!((this1) instanceof banan_basis_Err)) {
		return mapOk(this1);
	} else {
		return this1;
	}
};
banan_basis__$Result_Result_$Impl_$.mapErr = function(this1,mapErr) {
	if(!((this1) instanceof banan_basis_Err)) {
		return this1;
	} else {
		var _this = this1;
		_this._type = mapErr(_this._type);
		return _this;
	}
};
banan_basis__$Result_Result_$Impl_$.and = function(this1,result) {
	if(!((this1) instanceof banan_basis_Err)) {
		return result;
	} else {
		return this1;
	}
};
banan_basis__$Result_Result_$Impl_$.andThen = function(this1,mapResult) {
	if(!((this1) instanceof banan_basis_Err)) {
		return mapResult(this1);
	} else {
		return this1;
	}
};
banan_basis__$Result_Result_$Impl_$.or = function(this1,result) {
	if(!((this1) instanceof banan_basis_Err)) {
		return this1;
	} else {
		return result;
	}
};
banan_basis__$Result_Result_$Impl_$.orElse = function(this1,getResult) {
	if(!((this1) instanceof banan_basis_Err)) {
		return this1;
	} else {
		return getResult(this1._type);
	}
};
banan_basis__$Result_Result_$Impl_$.iterator = function(this1) {
	return new banan_basis_MayIterator(!((this1) instanceof banan_basis_Err) ? this1 : null);
};
banan_basis__$Result_Result_$Impl_$.__unsafeUnwrap = function(this1) {
	return this1;
};
banan_basis__$Result_Result_$Impl_$.__unsafeUnwrapErr = function(this1) {
	return this1;
};
banan_basis__$Result_Result_$Impl_$.fromErr = function(err) {
	return err;
};
banan_basis__$Result_Result_$Impl_$.fromOk = function(ok) {
	return ok;
};
var banan_basis_Tuple = function() { };
$hxClasses["banan.basis.Tuple"] = banan_basis_Tuple;
banan_basis_Tuple.__name__ = "banan.basis.Tuple";
banan_basis_Tuple.of2 = function(v1,v2) {
	return { a : v1, b : v2};
};
banan_basis_Tuple.of3 = function(v1,v2,v3) {
	return { a : v1, b : v2, c : v3};
};
var banan_basis_UtilHelper = function() { };
$hxClasses["banan.basis.UtilHelper"] = banan_basis_UtilHelper;
banan_basis_UtilHelper.__name__ = "banan.basis.UtilHelper";
banan_basis_UtilHelper.let = function(it,block) {
	return block(it);
};
banan_basis_UtilHelper.apply = function(it,block) {
	block(it);
	return it;
};
banan_basis_UtilHelper.applyTrue = function(it,block) {
	if(it) {
		block();
	}
	return it;
};
banan_basis_UtilHelper.letTrue = function(it,block) {
	if(it) {
		return block(it);
	} else {
		return null;
	}
};
banan_basis_UtilHelper.fold = function(it,ifTrue,ifFalse) {
	if(it) {
		return ifTrue();
	} else {
		return ifFalse();
	}
};
banan_basis_UtilHelper.takeIf = function(it,predicate) {
	if(predicate(it)) {
		return it;
	} else {
		return null;
	}
};
var banan_camera_Camera = function() {
	this.cameraScale = 1.0;
	this.cameraY = 0.0;
	this.cameraX = 0.0;
};
$hxClasses["banan.camera.Camera"] = banan_camera_Camera;
banan_camera_Camera.__name__ = "banan.camera.Camera";
banan_camera_Camera.prototype = {
	cameraX: null
	,cameraY: null
	,cameraScale: null
	,__class__: banan_camera_Camera
};
var banan_deviceprofile_DeviceProfileResolver = function(updatePriority) {
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.deviceprofile.DeviceProfileResolver"] = banan_deviceprofile_DeviceProfileResolver;
banan_deviceprofile_DeviceProfileResolver.__name__ = "banan.deviceprofile.DeviceProfileResolver";
banan_deviceprofile_DeviceProfileResolver.__interfaces__ = [banan_backend_IScreenSizeProvider];
banan_deviceprofile_DeviceProfileResolver.__super__ = banan_module_Module;
banan_deviceprofile_DeviceProfileResolver.prototype = $extend(banan_module_Module.prototype,{
	dpi: null
	,canvasSizeX: null
	,canvasSizeY: null
	,aspectRatio: null
	,screenSizeInch: null
	,deviceProfile: null
	,resolutionScale: null
	,textureScale: null
	,textureScaleFolder: null
	,screenSizeX: null
	,screenSizeY: null
	,initialize: function() {
		this.loadDeviceProfiles($bind(this,this.continueInitialize));
	}
	,update: function() {
		this.updateCanvasSize();
		this.updateScreenSize();
	}
	,loadDeviceProfiles: function(cb) {
		cb([{ name : "default", isUniversal : true, resolution : [{ scale : 0.5, minScreenHeight : 0}], textureScale : { factor : 1.0, folder : ""}}]);
	}
	,getScreenDpi: function() {
		return kha_Display.get_primary().get_pixelsPerInch();
	}
	,continueInitialize: function(deviceProfiles) {
		this.updateCanvasSize();
		this.dpi = this.getScreenDpi();
		var x = this.canvasSizeX;
		var y = this.canvasSizeY;
		this.screenSizeInch = Math.round(10 * Math.sqrt(x * x + y * y) / this.dpi) / 10;
		this.aspectRatio = Math.round(100 * Math.max(this.canvasSizeX / this.canvasSizeY,this.canvasSizeY / this.canvasSizeX)) / 100;
		haxe_Log.trace("Choosing profile for dpi: " + this.dpi + ", screenSize: " + this.canvasSizeX + "x" + this.canvasSizeY + " (" + this.screenSizeInch + "in) aspectRatio: " + this.aspectRatio,{ fileName : "banan/deviceprofile/DeviceProfileResolver.hx", lineNumber : 91, className : "banan.deviceprofile.DeviceProfileResolver", methodName : "continueInitialize"});
		var it = this.findProfile(deviceProfiles,this.dpi,this.canvasSizeY,this.screenSizeInch,this.aspectRatio);
		var message = "No profile found for dpi: " + this.dpi + ", screenSize: " + this.canvasSizeX + "x" + this.canvasSizeY + " (" + this.screenSizeInch + "in) aspectRatio: " + this.aspectRatio;
		if(it == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(135,banan_error_Error.getShortPosition("banan/deviceprofile/DeviceProfileResolver.hx" + ":" + 92 + ":"),message,null));
		}
		haxe_Log.trace("Found " + Std.string(it),{ fileName : "banan/deviceprofile/DeviceProfileResolver.hx", lineNumber : 94, className : "banan.deviceprofile.DeviceProfileResolver", methodName : "continueInitialize"});
		this.setDeviceProfile(it);
		this.updateScreenSize();
		haxe_Log.trace("Set resolutionScale: " + this.resolutionScale + ", screenWidth: " + this.screenSizeX + ", screenHeight: " + this.screenSizeY,{ fileName : "banan/deviceprofile/DeviceProfileResolver.hx", lineNumber : 98, className : "banan.deviceprofile.DeviceProfileResolver", methodName : "continueInitialize"});
		this.moduleInfo.setInitialized();
	}
	,updateCanvasSize: function() {
		this.canvasSizeX = kha_System.windowWidth();
		this.canvasSizeY = kha_System.windowHeight();
	}
	,updateScreenSize: function() {
		this.screenSizeX = Math.ceil(this.canvasSizeX / this.resolutionScale);
		this.screenSizeY = Math.ceil(this.canvasSizeY / this.resolutionScale);
	}
	,setDeviceProfile: function(deviceProfile) {
		this.deviceProfile = deviceProfile;
		this.resolutionScale = this.findMatchingResolution(deviceProfile,this.canvasSizeY).scale;
		var it = deviceProfile.textureScale;
		var a = it != null ? it.factor : null;
		this.textureScale = a != null ? a : 1.0;
		var it1 = deviceProfile.textureScale;
		this.textureScaleFolder = it1 != null ? it1.folder : null;
	}
	,findProfile: function(deviceProfiles,dpi,canvasHeight,displaySizeInch,aspectRatio) {
		var _gthis = this;
		var _g = [];
		var _g1 = 0;
		while(_g1 < deviceProfiles.length) {
			var v = deviceProfiles[_g1];
			++_g1;
			if(_gthis.validateProfile(v) && _gthis.findMatchingResolution(v,canvasHeight) != null) {
				_g.push(v);
			}
		}
		var result = null;
		var _g2 = 0;
		while(_g2 < _g.length) {
			var it = _g[_g2];
			++_g2;
			if(_gthis.isDeviceProfileMatch(it,dpi,displaySizeInch,aspectRatio)) {
				result = it;
				break;
			}
		}
		return result;
	}
	,isDeviceProfileMatch: function(deviceProfile,dpi,displaySizeInch,aspectRatio) {
		var result = true;
		if(deviceProfile.dpiMin != null) {
			result = dpi >= deviceProfile.dpiMin;
		}
		if(deviceProfile.dpiMax != null) {
			result = result && dpi <= deviceProfile.dpiMax;
		}
		if(deviceProfile.displaySizeInchMin != null) {
			result = result && displaySizeInch >= deviceProfile.displaySizeInchMin;
		}
		if(deviceProfile.displaySizeInchMax != null) {
			result = result && displaySizeInch <= deviceProfile.displaySizeInchMax;
		}
		if(deviceProfile.aspectRatioMin != null) {
			result = result && aspectRatio >= deviceProfile.aspectRatioMin;
		}
		if(deviceProfile.aspectRatioMax != null) {
			result = result && aspectRatio <= deviceProfile.aspectRatioMax;
		}
		return result;
	}
	,validateProfile: function(p) {
		var isValid = false;
		if(p.isUniversal == null) {
			p.isUniversal = false;
		}
		isValid = p.resolution != null && p.resolution.length > 0;
		if(isValid) {
			p.resolution.sort(function(r1,r2) {
				return r1.minScreenHeight - r2.minScreenHeight;
			});
		}
		return isValid;
	}
	,findMatchingResolution: function(profile,canvasHeight) {
		var _gthis = this;
		var a = profile.resolution;
		var result = null;
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var j = a.length - (_g++ + 1);
			if(_gthis.canvasSizeY >= a[j].minScreenHeight) {
				result = a[j];
				break;
			}
		}
		return result;
	}
	,sortByDpi: function(profiles) {
		var compareDpi = function(d1,d2) {
			if(d1 != null && d2 != null) {
				return d1 - d2;
			} else if(d1 != null) {
				return -1;
			} else if(d2 != null) {
				return 1;
			} else {
				return 0;
			}
		};
		profiles.sort(function(p1,p2) {
			var it = compareDpi(p1.dpiMin,p2.dpiMin);
			var it1 = it != 0 ? it : null;
			if(it1 != null) {
				return it1;
			} else {
				return compareDpi(p1.dpiMax,p2.dpiMax);
			}
		});
		return profiles;
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("banan.deviceprofile.DeviceProfileResolver",["banan.backend.IScreenSizeProvider"],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: banan_deviceprofile_DeviceProfileResolver
});
var banan_display_DisplayEdgeType = $hxEnums["banan.display.DisplayEdgeType"] = { __ename__ : true, __constructs__ : ["Custom","Image","Text","MultiImage","Multi","Fill","Mesh","Spine"]
	,Custom: {_hx_index:0,__enum__:"banan.display.DisplayEdgeType",toString:$estr}
	,Image: {_hx_index:1,__enum__:"banan.display.DisplayEdgeType",toString:$estr}
	,Text: {_hx_index:2,__enum__:"banan.display.DisplayEdgeType",toString:$estr}
	,MultiImage: {_hx_index:3,__enum__:"banan.display.DisplayEdgeType",toString:$estr}
	,Multi: {_hx_index:4,__enum__:"banan.display.DisplayEdgeType",toString:$estr}
	,Fill: {_hx_index:5,__enum__:"banan.display.DisplayEdgeType",toString:$estr}
	,Mesh: {_hx_index:6,__enum__:"banan.display.DisplayEdgeType",toString:$estr}
	,Spine: {_hx_index:7,__enum__:"banan.display.DisplayEdgeType",toString:$estr}
};
banan_display_DisplayEdgeType.__empty_constructs__ = [banan_display_DisplayEdgeType.Custom,banan_display_DisplayEdgeType.Image,banan_display_DisplayEdgeType.Text,banan_display_DisplayEdgeType.MultiImage,banan_display_DisplayEdgeType.Multi,banan_display_DisplayEdgeType.Fill,banan_display_DisplayEdgeType.Mesh,banan_display_DisplayEdgeType.Spine];
var banan_render_render2_node_NodeRenderable = function(render2Context) {
	if(render2Context != null) {
		this.batchEntry = new banan_render_render2_batch_BatchEntryExt(render2Context);
	}
	this.transformId = null;
	this.renderRGBAO = null;
};
$hxClasses["banan.render.render2.node.NodeRenderable"] = banan_render_render2_node_NodeRenderable;
banan_render_render2_node_NodeRenderable.__name__ = "banan.render.render2.node.NodeRenderable";
banan_render_render2_node_NodeRenderable.prototype = {
	batchEntry: null
	,transformId: null
	,renderRGBAO: null
	,setBatchThemeId: function(themeId) {
		this.batchEntry.themeId = themeId;
	}
	,muteDebug: function() {
		this.batchEntry.muteDebug = true;
	}
	,render: function(nodeEdge,ctx) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"NodeRenderable.hx:35","",null));
	}
	,matchTransformId: function(nodeEdge) {
		if(this.transformId != null) {
			return nodeEdge.globalTransformId == this.transformId;
		} else {
			return false;
		}
	}
	,matchRenderRGBAO: function(nodeEdge) {
		if(this.renderRGBAO != null) {
			return nodeEdge.renderRGBAO == this.renderRGBAO;
		} else {
			return false;
		}
	}
	,matchNodeEdge: function(nodeEdge) {
		var result = this.transformId != null && nodeEdge.globalTransformId == this.transformId && (this.renderRGBAO != null && nodeEdge.renderRGBAO == this.renderRGBAO);
		this.transformId = nodeEdge.globalTransformId;
		this.renderRGBAO = nodeEdge.renderRGBAO;
		return result;
	}
	,__class__: banan_render_render2_node_NodeRenderable
};
var banan_display_DisplayEdge = function(type,render2Context) {
	banan_render_render2_node_NodeRenderable.call(this,render2Context);
	this.type = type;
};
$hxClasses["banan.display.DisplayEdge"] = banan_display_DisplayEdge;
banan_display_DisplayEdge.__name__ = "banan.display.DisplayEdge";
banan_display_DisplayEdge.__super__ = banan_render_render2_node_NodeRenderable;
banan_display_DisplayEdge.prototype = $extend(banan_render_render2_node_NodeRenderable.prototype,{
	type: null
	,getHash: function() {
		return "NO_HASH";
	}
	,dispose: function() {
	}
	,isUpdatable: function() {
		return false;
	}
	,onEnterRenderList: function() {
	}
	,onStayInRenderList: function() {
	}
	,onLeaveRenderList: function() {
	}
	,asUpdatable: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"DisplayEdge.hx:60","not an updatable",null));
	}
	,asImage: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"DisplayEdge.hx:64","not an image",null));
	}
	,asText: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"DisplayEdge.hx:68","not a text",null));
	}
	,asMultiImage: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"DisplayEdge.hx:72","not a multiimage",null));
	}
	,asMulti: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"DisplayEdge.hx:76","not a multidisplay",null));
	}
	,asFill: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"DisplayEdge.hx:80","not a fill",null));
	}
	,asSpine: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"DisplayEdge.hx:84","not a spine",null));
	}
	,__class__: banan_display_DisplayEdge
});
var banan_display_DisplaySystem = function(updatePriority) {
	this.updatableDisplayList = [];
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.display.DisplaySystem"] = banan_display_DisplaySystem;
banan_display_DisplaySystem.__name__ = "banan.display.DisplaySystem";
banan_display_DisplaySystem.__super__ = banan_module_Module;
banan_display_DisplaySystem.prototype = $extend(banan_module_Module.prototype,{
	system: null
	,timeProvider: null
	,updatableDisplayList: null
	,initialize: function() {
		this.system.__systemLists.__onAdded__banan_display_DisplayEdge.add($bind(this,this.onDisplayEdgeAdded));
		this.system.__systemLists.__onRemoved__banan_display_DisplayEdge.add($bind(this,this.onDisplayEdgeDispose));
		this.moduleInfo.setInitialized();
	}
	,update: function() {
		var time = this.timeProvider.provider.appTime;
		var _g = 0;
		var _g1 = this.updatableDisplayList;
		while(_g < _g1.length) _g1[_g++].update(time);
	}
	,onDisplayEdgeAdded: function(entity,displayEdge) {
		if(displayEdge.isUpdatable()) {
			this.updatableDisplayList.push(displayEdge.asUpdatable());
		}
	}
	,onDisplayEdgeDispose: function(entity,displayEdge) {
		if(displayEdge.isUpdatable()) {
			banan_ds_ArrayHelper.swapRemove(this.updatableDisplayList,displayEdge.asUpdatable());
		}
		displayEdge.dispose();
	}
	,makeModuleInfo: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["banan.es.EntitySystem"] != null) {
			_g.setReserved("banan.es.EntitySystem","system");
		} else {
			_g.h["banan.es.EntitySystem"] = "system";
		}
		if(__map_reserved["banan.time.TimeProviderModule"] != null) {
			_g.setReserved("banan.time.TimeProviderModule","timeProvider");
		} else {
			_g.h["banan.time.TimeProviderModule"] = "timeProvider";
		}
		return new banan_module_ModuleInfo("banan.display.DisplaySystem",[],[],_g,["banan.es.EntitySystem"]);
	}
	,__class__: banan_display_DisplaySystem
});
var banan_display_EInteractMode = $hxEnums["banan.display.EInteractMode"] = { __ename__ : true, __constructs__ : ["None","Hover","Touch"]
	,None: {_hx_index:0,__enum__:"banan.display.EInteractMode",toString:$estr}
	,Hover: {_hx_index:1,__enum__:"banan.display.EInteractMode",toString:$estr}
	,Touch: {_hx_index:2,__enum__:"banan.display.EInteractMode",toString:$estr}
};
banan_display_EInteractMode.__empty_constructs__ = [banan_display_EInteractMode.None,banan_display_EInteractMode.Hover,banan_display_EInteractMode.Touch];
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = intf[_g++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var banan_display_ENodeRoot = function(name,pos) {
	banan_basis_ExtendEnum.call(this,name,pos);
};
$hxClasses["banan.display.ENodeRoot"] = banan_display_ENodeRoot;
banan_display_ENodeRoot.__name__ = "banan.display.ENodeRoot";
banan_display_ENodeRoot.__super__ = banan_basis_ExtendEnum;
banan_display_ENodeRoot.prototype = $extend(banan_basis_ExtendEnum.prototype,{
	__class__: banan_display_ENodeRoot
});
var banan_display_FillDisplayEdge = function(resourceManager,render2Context) {
	this.color = banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
	banan_display_DisplayEdge.call(this,banan_display_DisplayEdgeType.Fill,render2Context);
	this.render2Context = render2Context;
	this.fillImage = resourceManager.getFillImage(banan_backend_kha_display__$Color_Color_$Impl_$.WHITE);
	this.material = banan_render_render2_material_MaterialHelper.makeFillMaterial(render2Context.materialFactory,banan_render_render2_material_EPrimitiveType.Quad,null,this.fillImage.current.get_texture());
	this.token = new banan_resource_ResourceToken();
	this.bounds = banan_utils_Bounds.createImpossible();
	this.quad = new banan_render_Quad();
	this.fillImage.claim(this.token);
};
$hxClasses["banan.display.FillDisplayEdge"] = banan_display_FillDisplayEdge;
banan_display_FillDisplayEdge.__name__ = "banan.display.FillDisplayEdge";
banan_display_FillDisplayEdge.__super__ = banan_display_DisplayEdge;
banan_display_FillDisplayEdge.prototype = $extend(banan_display_DisplayEdge.prototype,{
	color: null
	,set_color: function(value) {
		if(this.color != value) {
			this.color = value;
			this.batchEntry.isDirty = true;
		}
		return this.color;
	}
	,render2Context: null
	,fillImage: null
	,material: null
	,token: null
	,bounds: null
	,quad: null
	,dispose: function() {
		this.fillImage.release(this.token);
	}
	,render: function(nodeEdge,ctx) {
		if(this.fillImage.current.get_texture().get_isLoaded()) {
			if(nodeEdge.globalTransformId == -1 || nodeEdge.parent != nodeEdge._globalTransformParent) {
				nodeEdge.validateGlobalTransformRecursively();
			}
			var p00 = nodeEdge._v00;
			var p10 = nodeEdge._v10;
			var p20 = nodeEdge._v20;
			var p01 = nodeEdge._v01;
			var p11 = nodeEdge._v11;
			var p21 = nodeEdge._v21;
			if(p21 == null) {
				p21 = 0.0;
			}
			if(p11 == null) {
				p11 = 1.0;
			}
			if(p01 == null) {
				p01 = 0.0;
			}
			if(p20 == null) {
				p20 = 0.0;
			}
			if(p10 == null) {
				p10 = 0.0;
			}
			if(p00 == null) {
				p00 = 1.0;
			}
			var transform_v00 = p00;
			var transform_v10 = p10;
			var transform_v20 = p20;
			var transform_v01 = p01;
			var transform_v11 = p11;
			var transform_v21 = p21;
			var tmp;
			var result = this.transformId != null && nodeEdge.globalTransformId == this.transformId && (this.renderRGBAO != null && nodeEdge.renderRGBAO == this.renderRGBAO);
			this.transformId = nodeEdge.globalTransformId;
			this.renderRGBAO = nodeEdge.renderRGBAO;
			if(!(!result)) {
				var _this = this.bounds;
				var left = _this.left;
				var top = _this.top;
				tmp = !(left == nodeEdge.areaX && top == nodeEdge.areaY && _this.right - left == nodeEdge.areaSizeX && _this.bottom - top == nodeEdge.areaSizeY);
			} else {
				tmp = true;
			}
			if(tmp) {
				this.batchEntry.isDirty = true;
				var _this1 = this.bounds;
				var x = nodeEdge.areaX;
				var y = nodeEdge.areaY;
				_this1.left = x;
				_this1.top = y;
				_this1.right = x + nodeEdge.areaSizeX;
				_this1.bottom = y + nodeEdge.areaSizeY;
			}
			var r = ((this.color & 16711680) >>> 16) * 0.00392156862745098 * nodeEdge.renderColorR;
			var g = ((this.color & 65280) >>> 8) * 0.00392156862745098 * nodeEdge.renderColorG;
			var b = (this.color & 255) * 0.00392156862745098 * nodeEdge.renderColorB;
			var a = (this.color >>> 24) * 0.00392156862745098 * nodeEdge.renderColorA;
			var o = nodeEdge.renderOpacity;
			var tx = this.fillImage.tx;
			var ty = this.fillImage.ty;
			var _this2 = this.quad;
			var x0 = this.bounds.left;
			var y0 = this.bounds.top;
			var x1 = this.bounds.right;
			var y1 = this.bounds.bottom;
			_this2.texture = this.material.texture;
			_this2.x0 = x0;
			_this2.y0 = y0;
			_this2.x1 = x1;
			_this2.y1 = y0;
			_this2.x2 = x1;
			_this2.y2 = y1;
			_this2.x3 = x0;
			_this2.y3 = y1;
			_this2.tx0 = tx + 1;
			_this2.ty0 = ty + 1;
			_this2.tx1 = tx + this.fillImage.tSizeX - 1;
			_this2.ty1 = ty + this.fillImage.tSizeY - 1;
			_this2.isNormalizedCalculated = false;
			var x2 = _this2.x0;
			var y2 = _this2.y0;
			var x3 = _this2.x1;
			var y3 = _this2.y1;
			var x4 = _this2.x2;
			var y4 = _this2.y2;
			var x5 = _this2.x3;
			var y5 = _this2.y3;
			_this2.x0 = transform_v00 * x2 + transform_v10 * y2 + transform_v20;
			_this2.y0 = transform_v01 * x2 + transform_v11 * y2 + transform_v21;
			_this2.x1 = transform_v00 * x3 + transform_v10 * y3 + transform_v20;
			_this2.y1 = transform_v01 * x3 + transform_v11 * y3 + transform_v21;
			_this2.x2 = transform_v00 * x4 + transform_v10 * y4 + transform_v20;
			_this2.y2 = transform_v01 * x4 + transform_v11 * y4 + transform_v21;
			_this2.x3 = transform_v00 * x5 + transform_v10 * y5 + transform_v20;
			_this2.y3 = transform_v01 * x5 + transform_v11 * y5 + transform_v21;
			var batchEntry = this.batchEntry;
			var quad = this.quad;
			var batch = ctx.renderer2.getBatchFor(this.material,6,batchEntry.themeId);
			if(batchEntry.check(batch,4,6)) {
				batchEntry.sync(batch,4,6);
			} else {
				batchEntry.isDirty = false;
			}
			var batch1 = batch;
			if(batchEntry.isDirty) {
				if(batch1._vertices == null) {
					batch1._vertices = batch1.vertexBuffer.lock();
					if(batch1.isDynamicIndices) {
						batch1._indices = batch1.indexBuffer.lock();
					}
				}
				var vbuff = batch1._vertices;
				var vfrom = batch1.vertexCount;
				if(!quad.isNormalizedCalculated) {
					quad.isNormalizedCalculated = true;
					quad.tx0_norm = quad.tx0 / quad.texture.sizeX;
					quad.tx1_norm = quad.tx1 / quad.texture.sizeX;
					quad.ty0_norm = quad.ty0 / quad.texture.sizeY;
					quad.ty1_norm = quad.ty1 / quad.texture.sizeY;
				}
				var tx0 = quad.tx0_norm;
				var ty0 = quad.ty0_norm;
				var tx1 = quad.tx1_norm;
				var ty1 = quad.ty1_norm;
				var a1 = a * o;
				var position = vfrom * 9;
				vbuff[position] = quad.x0;
				vbuff[position + 1] = quad.y0;
				vbuff[position + 2] = -5.0;
				vbuff[position + 3] = tx0;
				vbuff[position + 4] = ty0;
				vbuff[position + 5] = r;
				vbuff[position + 6] = g;
				vbuff[position + 7] = b;
				vbuff[position + 8] = a1;
				var position1 = (vfrom + 1) * 9;
				vbuff[position1] = quad.x1;
				vbuff[position1 + 1] = quad.y1;
				vbuff[position1 + 2] = -5.0;
				vbuff[position1 + 3] = tx1;
				vbuff[position1 + 4] = ty0;
				vbuff[position1 + 5] = r;
				vbuff[position1 + 6] = g;
				vbuff[position1 + 7] = b;
				vbuff[position1 + 8] = a1;
				var position2 = (vfrom + 2) * 9;
				vbuff[position2] = quad.x2;
				vbuff[position2 + 1] = quad.y2;
				vbuff[position2 + 2] = -5.0;
				vbuff[position2 + 3] = tx1;
				vbuff[position2 + 4] = ty1;
				vbuff[position2 + 5] = r;
				vbuff[position2 + 6] = g;
				vbuff[position2 + 7] = b;
				vbuff[position2 + 8] = a1;
				var position3 = (vfrom + 3) * 9;
				vbuff[position3] = quad.x3;
				vbuff[position3 + 1] = quad.y3;
				vbuff[position3 + 2] = -5.0;
				vbuff[position3 + 3] = tx0;
				vbuff[position3 + 4] = ty1;
				vbuff[position3 + 5] = r;
				vbuff[position3 + 6] = g;
				vbuff[position3 + 7] = b;
				vbuff[position3 + 8] = a1;
			}
			batchEntry.shiftCounters();
		}
	}
	,asFill: function() {
		return this;
	}
	,__class__: banan_display_FillDisplayEdge
	,__properties__: {set_color:"set_color"}
});
var banan_display_ImageDisplayEdge = function(render2Context,image,nineSlice,scaleMode) {
	this.token = new banan_resource_ResourceToken();
	this.quadCache = new banan_render_QuadCache();
	this.isInvalid = true;
	this.nodeAreaSizeY = NaN;
	this.nodeAreaSizeX = NaN;
	this.nodeAreaY = NaN;
	this.nodeAreaX = NaN;
	this.isFlipY = false;
	this.isFlipX = false;
	banan_display_DisplayEdge.call(this,banan_display_DisplayEdgeType.Image,render2Context);
	this.setImage(image,nineSlice);
	var v = scaleMode != null ? scaleMode : banan_display_ScaleMode.Exact;
	if(v != this.scaleMode) {
		this.scaleMode = v;
		this.invalidate();
	}
	this.material = banan_render_render2_material_MaterialHelper.makeDefaultMaterial(render2Context.materialFactory,banan_render_render2_material_EPrimitiveType.Quad);
	this.render2Context = render2Context;
};
$hxClasses["banan.display.ImageDisplayEdge"] = banan_display_ImageDisplayEdge;
banan_display_ImageDisplayEdge.__name__ = "banan.display.ImageDisplayEdge";
banan_display_ImageDisplayEdge.__super__ = banan_display_DisplayEdge;
banan_display_ImageDisplayEdge.prototype = $extend(banan_display_DisplayEdge.prototype,{
	scaleMode: null
	,isFlipX: null
	,isFlipY: null
	,nodeAreaX: null
	,nodeAreaY: null
	,nodeAreaSizeX: null
	,nodeAreaSizeY: null
	,image: null
	,nineSlice: null
	,material: null
	,render2Context: null
	,isInvalid: null
	,quadCache: null
	,token: null
	,setImage: function(newImage,newNineSlice) {
		if(this.image != newImage) {
			if(this.image != null) {
				this.image.currentChangedSig.remove($bind(this,this.invalidate));
				this.image.release(this.token);
			}
			this.image = newImage;
			if(this.image != null) {
				this.image.currentChangedSig.add($bind(this,this.invalidate));
				this.image.claim(this.token);
			}
			this.invalidate();
		}
		if(this.nineSlice != newNineSlice) {
			if(this.nineSlice != null) {
				this.nineSlice.release(this.token);
			}
			this.nineSlice = newNineSlice;
			if(this.nineSlice != null) {
				this.nineSlice.claim(this.token);
			}
			this.invalidate();
		}
	}
	,getHash: function() {
		if(this.image != null) {
			return "" + this.image.name + "_" + Std.string(this.image.current.get_texture().get_isLoaded());
		} else {
			return banan_display_DisplayEdge.prototype.getHash.call(this);
		}
	}
	,asImage: function() {
		return this;
	}
	,render: function(nodeEdge,ctx) {
		if(this.image != null && this.image.current.get_texture().get_isLoaded() && (this.nineSlice == null || this.nineSlice.get_isLoaded())) {
			if(nodeEdge.globalTransformId == -1 || nodeEdge.parent != nodeEdge._globalTransformParent) {
				nodeEdge.validateGlobalTransformRecursively();
			}
			var p00 = nodeEdge._v00;
			var p10 = nodeEdge._v10;
			var p20 = nodeEdge._v20;
			var p01 = nodeEdge._v01;
			var p11 = nodeEdge._v11;
			var p21 = nodeEdge._v21;
			if(p21 == null) {
				p21 = 0.0;
			}
			if(p11 == null) {
				p11 = 1.0;
			}
			if(p01 == null) {
				p01 = 0.0;
			}
			if(p20 == null) {
				p20 = 0.0;
			}
			if(p10 == null) {
				p10 = 0.0;
			}
			if(p00 == null) {
				p00 = 1.0;
			}
			var transform_v00 = p00;
			var transform_v10 = p10;
			var transform_v20 = p20;
			var transform_v01 = p01;
			var transform_v11 = p11;
			var transform_v21 = p21;
			var result = this.transformId != null && nodeEdge.globalTransformId == this.transformId && (this.renderRGBAO != null && nodeEdge.renderRGBAO == this.renderRGBAO);
			this.transformId = nodeEdge.globalTransformId;
			this.renderRGBAO = nodeEdge.renderRGBAO;
			if(!result) {
				this.invalidate();
			}
			var v = nodeEdge.areaX;
			if(v != this.nodeAreaX) {
				this.nodeAreaX = v;
				this.invalidate();
			}
			var v1 = nodeEdge.areaY;
			if(v1 != this.nodeAreaY) {
				this.nodeAreaY = v1;
				this.invalidate();
			}
			var v2 = nodeEdge.areaSizeX;
			if(v2 != this.nodeAreaSizeX) {
				this.nodeAreaSizeX = v2;
				this.invalidate();
			}
			var v3 = nodeEdge.areaSizeY;
			if(v3 != this.nodeAreaSizeY) {
				this.nodeAreaSizeY = v3;
				this.invalidate();
			}
			var _this = this.batchEntry;
			var test = this.isInvalid;
			if(test == null) {
				test = true;
			}
			_this.isDirty = _this.isDirty || test;
			if(this.isInvalid) {
				this.isInvalid = false;
				this.material.setTexture(this.image.current.get_texture());
				this.quadCache.quadCount = 0;
				if(this.nineSlice != null) {
					var _gthis = this;
					var image = this.image;
					var current = image.current;
					var nineSlice = this.nineSlice.data;
					var x0 = this.nodeAreaX;
					var x3 = x0 + this.nodeAreaSizeX;
					var x1 = x0 + nineSlice.left;
					var x2 = x3 - nineSlice.right;
					var y0 = this.nodeAreaY;
					var y3 = y0 + this.nodeAreaSizeY;
					var y1 = y0 + nineSlice.top;
					var y2 = y3 - nineSlice.bottom;
					var tx0 = current.tx;
					var tx3 = tx0 + current.tSizeX;
					var tx1 = tx0 + nineSlice.left * image.textureScale;
					var tx2 = tx3 - nineSlice.right * image.textureScale;
					var ty0 = current.ty;
					var ty3 = ty0 + current.tSizeY;
					var ty1 = ty0 + nineSlice.top * image.textureScale;
					var ty2 = ty3 - nineSlice.bottom * image.textureScale;
					if(x1 > x2) {
						x2 = x0 + nineSlice.left - nineSlice.left * (x1 - x2) / (nineSlice.left + nineSlice.right);
						x1 = x2;
						tx1 = tx0 + x1 - x0;
						tx2 = tx3 - (x3 - x2);
					}
					if(y1 > y2) {
						y2 = y0 + nineSlice.top - nineSlice.top * (y1 - y2) / (nineSlice.top + nineSlice.bottom);
						y1 = y2;
						ty1 = ty0 + y1 - y0;
						ty2 = ty3 - (y3 - y2);
					}
					var tileSizeX = tx2 - tx1;
					var tileSizeY = ty2 - ty1;
					if(this.isFlipX) {
						var left = x1 - x0;
						var right = x3 - x2;
						var t = x3;
						x3 = x0;
						x0 = t;
						x1 = t - left;
						x2 = x3 + right;
						tileSizeX = -tileSizeX;
					}
					if(this.isFlipY) {
						var top = y1 - y0;
						var bottom = y3 - y2;
						var t1 = y3;
						y3 = y0;
						y0 = t1;
						y1 = t1 - top;
						y2 = y3 + bottom;
						tileSizeY = -tileSizeY;
					}
					var p001 = transform_v00;
					var p101 = transform_v10;
					var p201 = transform_v20;
					var p011 = transform_v01;
					var p111 = transform_v11;
					var p211 = transform_v21;
					if(transform_v21 == null) {
						p211 = 0.0;
					}
					if(transform_v11 == null) {
						p111 = 1.0;
					}
					if(transform_v01 == null) {
						p011 = 0.0;
					}
					if(transform_v20 == null) {
						p201 = 0.0;
					}
					if(transform_v10 == null) {
						p101 = 0.0;
					}
					if(transform_v00 == null) {
						p001 = 1.0;
					}
					var t_v00 = p001;
					var t_v10 = p101;
					var t_v20 = p201;
					var t_v01 = p011;
					var t_v11 = p111;
					var t_v21 = p211;
					var _this1 = _gthis.quadCache;
					if(_this1.quadCount == _this1.quads.length) {
						_this1.quads[_this1.quadCount] = new banan_render_Quad();
					}
					var quad = _this1.quads[_this1.quadCount++];
					quad.texture = image.current.get_texture();
					quad.x0 = x0;
					quad.y0 = y0;
					quad.x1 = x1;
					quad.y1 = y0;
					quad.x2 = x1;
					quad.y2 = y1;
					quad.x3 = x0;
					quad.y3 = y1;
					quad.tx0 = tx0;
					quad.ty0 = ty0;
					quad.tx1 = tx1;
					quad.ty1 = ty1;
					quad.isNormalizedCalculated = false;
					var x = quad.x0;
					var y = quad.y0;
					var x4 = quad.x1;
					var y4 = quad.y1;
					var x5 = quad.x2;
					var y5 = quad.y2;
					var x6 = quad.x3;
					var y6 = quad.y3;
					quad.x0 = t_v00 * x + t_v10 * y + t_v20;
					quad.y0 = t_v01 * x + t_v11 * y + t_v21;
					quad.x1 = t_v00 * x4 + t_v10 * y4 + t_v20;
					quad.y1 = t_v01 * x4 + t_v11 * y4 + t_v21;
					quad.x2 = t_v00 * x5 + t_v10 * y5 + t_v20;
					quad.y2 = t_v01 * x5 + t_v11 * y5 + t_v21;
					quad.x3 = t_v00 * x6 + t_v10 * y6 + t_v20;
					quad.y3 = t_v01 * x6 + t_v11 * y6 + t_v21;
					var _this2 = _gthis.quadCache;
					if(_this2.quadCount == _this2.quads.length) {
						_this2.quads[_this2.quadCount] = new banan_render_Quad();
					}
					var quad1 = _this2.quads[_this2.quadCount++];
					quad1.texture = image.current.get_texture();
					quad1.x0 = x2;
					quad1.y0 = y0;
					quad1.x1 = x3;
					quad1.y1 = y0;
					quad1.x2 = x3;
					quad1.y2 = y1;
					quad1.x3 = x2;
					quad1.y3 = y1;
					quad1.tx0 = tx2;
					quad1.ty0 = ty0;
					quad1.tx1 = tx3;
					quad1.ty1 = ty1;
					quad1.isNormalizedCalculated = false;
					var x7 = quad1.x0;
					var y7 = quad1.y0;
					var x8 = quad1.x1;
					var y8 = quad1.y1;
					var x9 = quad1.x2;
					var y9 = quad1.y2;
					var x10 = quad1.x3;
					var y10 = quad1.y3;
					quad1.x0 = t_v00 * x7 + t_v10 * y7 + t_v20;
					quad1.y0 = t_v01 * x7 + t_v11 * y7 + t_v21;
					quad1.x1 = t_v00 * x8 + t_v10 * y8 + t_v20;
					quad1.y1 = t_v01 * x8 + t_v11 * y8 + t_v21;
					quad1.x2 = t_v00 * x9 + t_v10 * y9 + t_v20;
					quad1.y2 = t_v01 * x9 + t_v11 * y9 + t_v21;
					quad1.x3 = t_v00 * x10 + t_v10 * y10 + t_v20;
					quad1.y3 = t_v01 * x10 + t_v11 * y10 + t_v21;
					var _this3 = _gthis.quadCache;
					if(_this3.quadCount == _this3.quads.length) {
						_this3.quads[_this3.quadCount] = new banan_render_Quad();
					}
					var quad2 = _this3.quads[_this3.quadCount++];
					quad2.texture = image.current.get_texture();
					quad2.x0 = x0;
					quad2.y0 = y2;
					quad2.x1 = x1;
					quad2.y1 = y2;
					quad2.x2 = x1;
					quad2.y2 = y3;
					quad2.x3 = x0;
					quad2.y3 = y3;
					quad2.tx0 = tx0;
					quad2.ty0 = ty2;
					quad2.tx1 = tx1;
					quad2.ty1 = ty3;
					quad2.isNormalizedCalculated = false;
					var x11 = quad2.x0;
					var y11 = quad2.y0;
					var x12 = quad2.x1;
					var y12 = quad2.y1;
					var x13 = quad2.x2;
					var y13 = quad2.y2;
					var x14 = quad2.x3;
					var y14 = quad2.y3;
					quad2.x0 = t_v00 * x11 + t_v10 * y11 + t_v20;
					quad2.y0 = t_v01 * x11 + t_v11 * y11 + t_v21;
					quad2.x1 = t_v00 * x12 + t_v10 * y12 + t_v20;
					quad2.y1 = t_v01 * x12 + t_v11 * y12 + t_v21;
					quad2.x2 = t_v00 * x13 + t_v10 * y13 + t_v20;
					quad2.y2 = t_v01 * x13 + t_v11 * y13 + t_v21;
					quad2.x3 = t_v00 * x14 + t_v10 * y14 + t_v20;
					quad2.y3 = t_v01 * x14 + t_v11 * y14 + t_v21;
					var _this4 = _gthis.quadCache;
					if(_this4.quadCount == _this4.quads.length) {
						_this4.quads[_this4.quadCount] = new banan_render_Quad();
					}
					var quad3 = _this4.quads[_this4.quadCount++];
					quad3.texture = image.current.get_texture();
					quad3.x0 = x2;
					quad3.y0 = y2;
					quad3.x1 = x3;
					quad3.y1 = y2;
					quad3.x2 = x3;
					quad3.y2 = y3;
					quad3.x3 = x2;
					quad3.y3 = y3;
					quad3.tx0 = tx2;
					quad3.ty0 = ty2;
					quad3.tx1 = tx3;
					quad3.ty1 = ty3;
					quad3.isNormalizedCalculated = false;
					var x15 = quad3.x0;
					var y15 = quad3.y0;
					var x16 = quad3.x1;
					var y16 = quad3.y1;
					var x17 = quad3.x2;
					var y17 = quad3.y2;
					var x18 = quad3.x3;
					var y18 = quad3.y3;
					quad3.x0 = t_v00 * x15 + t_v10 * y15 + t_v20;
					quad3.y0 = t_v01 * x15 + t_v11 * y15 + t_v21;
					quad3.x1 = t_v00 * x16 + t_v10 * y16 + t_v20;
					quad3.y1 = t_v01 * x16 + t_v11 * y16 + t_v21;
					quad3.x2 = t_v00 * x17 + t_v10 * y17 + t_v20;
					quad3.y2 = t_v01 * x17 + t_v11 * y17 + t_v21;
					quad3.x3 = t_v00 * x18 + t_v10 * y18 + t_v20;
					quad3.y3 = t_v01 * x18 + t_v11 * y18 + t_v21;
					var y01 = y0;
					var y19 = y1;
					var ty11 = ty1;
					if(nineSlice.isTileTop) {
						var p = x1;
						while(tileSizeX > 0 && p <= x2 - tileSizeX || tileSizeX < 0 && p >= x2 - tileSizeX) {
							var x19 = p + tileSizeX;
							var _this5 = _gthis.quadCache;
							if(_this5.quadCount == _this5.quads.length) {
								_this5.quads[_this5.quadCount] = new banan_render_Quad();
							}
							var quad4 = _this5.quads[_this5.quadCount++];
							quad4.texture = image.current.get_texture();
							quad4.x0 = p;
							quad4.y0 = y01;
							quad4.x1 = x19;
							quad4.y1 = y01;
							quad4.x2 = x19;
							quad4.y2 = y19;
							quad4.x3 = p;
							quad4.y3 = y19;
							quad4.tx0 = tx1;
							quad4.ty0 = ty0;
							quad4.tx1 = tx2;
							quad4.ty1 = ty11;
							quad4.isNormalizedCalculated = false;
							var x20 = quad4.x0;
							var y20 = quad4.y0;
							var x21 = quad4.x1;
							var y21 = quad4.y1;
							var x22 = quad4.x2;
							var y22 = quad4.y2;
							var x23 = quad4.x3;
							var y23 = quad4.y3;
							quad4.x0 = t_v00 * x20 + t_v10 * y20 + t_v20;
							quad4.y0 = t_v01 * x20 + t_v11 * y20 + t_v21;
							quad4.x1 = t_v00 * x21 + t_v10 * y21 + t_v20;
							quad4.y1 = t_v01 * x21 + t_v11 * y21 + t_v21;
							quad4.x2 = t_v00 * x22 + t_v10 * y22 + t_v20;
							quad4.y2 = t_v01 * x22 + t_v11 * y22 + t_v21;
							quad4.x3 = t_v00 * x23 + t_v10 * y23 + t_v20;
							quad4.y3 = t_v01 * x23 + t_v11 * y23 + t_v21;
							p += tileSizeX;
						}
						if(Math.abs(x2 - p) > 0.) {
							var tx11 = tx1 + (x2 - p) * tileSizeX / Math.abs(tileSizeX);
							var _this6 = _gthis.quadCache;
							if(_this6.quadCount == _this6.quads.length) {
								_this6.quads[_this6.quadCount] = new banan_render_Quad();
							}
							var quad5 = _this6.quads[_this6.quadCount++];
							quad5.texture = image.current.get_texture();
							quad5.x0 = p;
							quad5.y0 = y01;
							quad5.x1 = x2;
							quad5.y1 = y01;
							quad5.x2 = x2;
							quad5.y2 = y19;
							quad5.x3 = p;
							quad5.y3 = y19;
							quad5.tx0 = tx1;
							quad5.ty0 = ty0;
							quad5.tx1 = tx11;
							quad5.ty1 = ty11;
							quad5.isNormalizedCalculated = false;
							var x24 = quad5.x0;
							var y24 = quad5.y0;
							var x25 = quad5.x1;
							var y25 = quad5.y1;
							var x26 = quad5.x2;
							var y26 = quad5.y2;
							var x27 = quad5.x3;
							var y27 = quad5.y3;
							quad5.x0 = t_v00 * x24 + t_v10 * y24 + t_v20;
							quad5.y0 = t_v01 * x24 + t_v11 * y24 + t_v21;
							quad5.x1 = t_v00 * x25 + t_v10 * y25 + t_v20;
							quad5.y1 = t_v01 * x25 + t_v11 * y25 + t_v21;
							quad5.x2 = t_v00 * x26 + t_v10 * y26 + t_v20;
							quad5.y2 = t_v01 * x26 + t_v11 * y26 + t_v21;
							quad5.x3 = t_v00 * x27 + t_v10 * y27 + t_v20;
							quad5.y3 = t_v01 * x27 + t_v11 * y27 + t_v21;
						}
					} else {
						var _this7 = _gthis.quadCache;
						if(_this7.quadCount == _this7.quads.length) {
							_this7.quads[_this7.quadCount] = new banan_render_Quad();
						}
						var quad6 = _this7.quads[_this7.quadCount++];
						quad6.texture = image.current.get_texture();
						quad6.x0 = x1;
						quad6.y0 = y01;
						quad6.x1 = x2;
						quad6.y1 = y01;
						quad6.x2 = x2;
						quad6.y2 = y19;
						quad6.x3 = x1;
						quad6.y3 = y19;
						quad6.tx0 = tx1;
						quad6.ty0 = ty0;
						quad6.tx1 = tx2;
						quad6.ty1 = ty11;
						quad6.isNormalizedCalculated = false;
						var x28 = quad6.x0;
						var y28 = quad6.y0;
						var x29 = quad6.x1;
						var y29 = quad6.y1;
						var x30 = quad6.x2;
						var y30 = quad6.y2;
						var x31 = quad6.x3;
						var y31 = quad6.y3;
						quad6.x0 = t_v00 * x28 + t_v10 * y28 + t_v20;
						quad6.y0 = t_v01 * x28 + t_v11 * y28 + t_v21;
						quad6.x1 = t_v00 * x29 + t_v10 * y29 + t_v20;
						quad6.y1 = t_v01 * x29 + t_v11 * y29 + t_v21;
						quad6.x2 = t_v00 * x30 + t_v10 * y30 + t_v20;
						quad6.y2 = t_v01 * x30 + t_v11 * y30 + t_v21;
						quad6.x3 = t_v00 * x31 + t_v10 * y31 + t_v20;
						quad6.y3 = t_v01 * x31 + t_v11 * y31 + t_v21;
					}
					var y02 = y2;
					var ty01 = ty2;
					var y110 = y3;
					if(nineSlice.isTileBottom) {
						var p1 = x1;
						while(tileSizeX > 0 && p1 <= x2 - tileSizeX || tileSizeX < 0 && p1 >= x2 - tileSizeX) {
							var x110 = p1 + tileSizeX;
							var _this8 = _gthis.quadCache;
							if(_this8.quadCount == _this8.quads.length) {
								_this8.quads[_this8.quadCount] = new banan_render_Quad();
							}
							var quad7 = _this8.quads[_this8.quadCount++];
							quad7.texture = image.current.get_texture();
							quad7.x0 = p1;
							quad7.y0 = y02;
							quad7.x1 = x110;
							quad7.y1 = y02;
							quad7.x2 = x110;
							quad7.y2 = y110;
							quad7.x3 = p1;
							quad7.y3 = y110;
							quad7.tx0 = tx1;
							quad7.ty0 = ty01;
							quad7.tx1 = tx2;
							quad7.ty1 = ty3;
							quad7.isNormalizedCalculated = false;
							var x32 = quad7.x0;
							var y32 = quad7.y0;
							var x33 = quad7.x1;
							var y33 = quad7.y1;
							var x34 = quad7.x2;
							var y34 = quad7.y2;
							var x35 = quad7.x3;
							var y35 = quad7.y3;
							quad7.x0 = t_v00 * x32 + t_v10 * y32 + t_v20;
							quad7.y0 = t_v01 * x32 + t_v11 * y32 + t_v21;
							quad7.x1 = t_v00 * x33 + t_v10 * y33 + t_v20;
							quad7.y1 = t_v01 * x33 + t_v11 * y33 + t_v21;
							quad7.x2 = t_v00 * x34 + t_v10 * y34 + t_v20;
							quad7.y2 = t_v01 * x34 + t_v11 * y34 + t_v21;
							quad7.x3 = t_v00 * x35 + t_v10 * y35 + t_v20;
							quad7.y3 = t_v01 * x35 + t_v11 * y35 + t_v21;
							p1 += tileSizeX;
						}
						if(Math.abs(x2 - p1) > 0.) {
							var tx12 = tx1 + (x2 - p1) * tileSizeX / Math.abs(tileSizeX);
							var _this9 = _gthis.quadCache;
							if(_this9.quadCount == _this9.quads.length) {
								_this9.quads[_this9.quadCount] = new banan_render_Quad();
							}
							var quad8 = _this9.quads[_this9.quadCount++];
							quad8.texture = image.current.get_texture();
							quad8.x0 = p1;
							quad8.y0 = y02;
							quad8.x1 = x2;
							quad8.y1 = y02;
							quad8.x2 = x2;
							quad8.y2 = y110;
							quad8.x3 = p1;
							quad8.y3 = y110;
							quad8.tx0 = tx1;
							quad8.ty0 = ty01;
							quad8.tx1 = tx12;
							quad8.ty1 = ty3;
							quad8.isNormalizedCalculated = false;
							var x36 = quad8.x0;
							var y36 = quad8.y0;
							var x37 = quad8.x1;
							var y37 = quad8.y1;
							var x38 = quad8.x2;
							var y38 = quad8.y2;
							var x39 = quad8.x3;
							var y39 = quad8.y3;
							quad8.x0 = t_v00 * x36 + t_v10 * y36 + t_v20;
							quad8.y0 = t_v01 * x36 + t_v11 * y36 + t_v21;
							quad8.x1 = t_v00 * x37 + t_v10 * y37 + t_v20;
							quad8.y1 = t_v01 * x37 + t_v11 * y37 + t_v21;
							quad8.x2 = t_v00 * x38 + t_v10 * y38 + t_v20;
							quad8.y2 = t_v01 * x38 + t_v11 * y38 + t_v21;
							quad8.x3 = t_v00 * x39 + t_v10 * y39 + t_v20;
							quad8.y3 = t_v01 * x39 + t_v11 * y39 + t_v21;
						}
					} else {
						var _this10 = _gthis.quadCache;
						if(_this10.quadCount == _this10.quads.length) {
							_this10.quads[_this10.quadCount] = new banan_render_Quad();
						}
						var quad9 = _this10.quads[_this10.quadCount++];
						quad9.texture = image.current.get_texture();
						quad9.x0 = x1;
						quad9.y0 = y02;
						quad9.x1 = x2;
						quad9.y1 = y02;
						quad9.x2 = x2;
						quad9.y2 = y110;
						quad9.x3 = x1;
						quad9.y3 = y110;
						quad9.tx0 = tx1;
						quad9.ty0 = ty01;
						quad9.tx1 = tx2;
						quad9.ty1 = ty3;
						quad9.isNormalizedCalculated = false;
						var x40 = quad9.x0;
						var y40 = quad9.y0;
						var x41 = quad9.x1;
						var y41 = quad9.y1;
						var x42 = quad9.x2;
						var y42 = quad9.y2;
						var x43 = quad9.x3;
						var y43 = quad9.y3;
						quad9.x0 = t_v00 * x40 + t_v10 * y40 + t_v20;
						quad9.y0 = t_v01 * x40 + t_v11 * y40 + t_v21;
						quad9.x1 = t_v00 * x41 + t_v10 * y41 + t_v20;
						quad9.y1 = t_v01 * x41 + t_v11 * y41 + t_v21;
						quad9.x2 = t_v00 * x42 + t_v10 * y42 + t_v20;
						quad9.y2 = t_v01 * x42 + t_v11 * y42 + t_v21;
						quad9.x3 = t_v00 * x43 + t_v10 * y43 + t_v20;
						quad9.y3 = t_v01 * x43 + t_v11 * y43 + t_v21;
					}
					var x01 = x0;
					var x111 = x1;
					var tx13 = tx1;
					if(nineSlice.isTileLeft) {
						var p2 = y1;
						while(tileSizeY > 0 && p2 <= y2 - tileSizeY || tileSizeY < 0 && p2 >= y2 - tileSizeY) {
							var y111 = p2 + tileSizeY;
							var _this11 = _gthis.quadCache;
							if(_this11.quadCount == _this11.quads.length) {
								_this11.quads[_this11.quadCount] = new banan_render_Quad();
							}
							var quad10 = _this11.quads[_this11.quadCount++];
							quad10.texture = image.current.get_texture();
							quad10.x0 = x01;
							quad10.y0 = p2;
							quad10.x1 = x111;
							quad10.y1 = p2;
							quad10.x2 = x111;
							quad10.y2 = y111;
							quad10.x3 = x01;
							quad10.y3 = y111;
							quad10.tx0 = tx0;
							quad10.ty0 = ty1;
							quad10.tx1 = tx13;
							quad10.ty1 = ty2;
							quad10.isNormalizedCalculated = false;
							var x44 = quad10.x0;
							var y44 = quad10.y0;
							var x45 = quad10.x1;
							var y45 = quad10.y1;
							var x46 = quad10.x2;
							var y46 = quad10.y2;
							var x47 = quad10.x3;
							var y47 = quad10.y3;
							quad10.x0 = t_v00 * x44 + t_v10 * y44 + t_v20;
							quad10.y0 = t_v01 * x44 + t_v11 * y44 + t_v21;
							quad10.x1 = t_v00 * x45 + t_v10 * y45 + t_v20;
							quad10.y1 = t_v01 * x45 + t_v11 * y45 + t_v21;
							quad10.x2 = t_v00 * x46 + t_v10 * y46 + t_v20;
							quad10.y2 = t_v01 * x46 + t_v11 * y46 + t_v21;
							quad10.x3 = t_v00 * x47 + t_v10 * y47 + t_v20;
							quad10.y3 = t_v01 * x47 + t_v11 * y47 + t_v21;
							p2 += tileSizeY;
						}
						if(Math.abs(y2 - p2) > 0.) {
							var ty12 = ty1 + (y2 - p2) * tileSizeY / Math.abs(tileSizeY);
							var _this12 = _gthis.quadCache;
							if(_this12.quadCount == _this12.quads.length) {
								_this12.quads[_this12.quadCount] = new banan_render_Quad();
							}
							var quad11 = _this12.quads[_this12.quadCount++];
							quad11.texture = image.current.get_texture();
							quad11.x0 = x01;
							quad11.y0 = p2;
							quad11.x1 = x111;
							quad11.y1 = p2;
							quad11.x2 = x111;
							quad11.y2 = y2;
							quad11.x3 = x01;
							quad11.y3 = y2;
							quad11.tx0 = tx0;
							quad11.ty0 = ty1;
							quad11.tx1 = tx13;
							quad11.ty1 = ty12;
							quad11.isNormalizedCalculated = false;
							var x48 = quad11.x0;
							var y48 = quad11.y0;
							var x49 = quad11.x1;
							var y49 = quad11.y1;
							var x50 = quad11.x2;
							var y50 = quad11.y2;
							var x51 = quad11.x3;
							var y51 = quad11.y3;
							quad11.x0 = t_v00 * x48 + t_v10 * y48 + t_v20;
							quad11.y0 = t_v01 * x48 + t_v11 * y48 + t_v21;
							quad11.x1 = t_v00 * x49 + t_v10 * y49 + t_v20;
							quad11.y1 = t_v01 * x49 + t_v11 * y49 + t_v21;
							quad11.x2 = t_v00 * x50 + t_v10 * y50 + t_v20;
							quad11.y2 = t_v01 * x50 + t_v11 * y50 + t_v21;
							quad11.x3 = t_v00 * x51 + t_v10 * y51 + t_v20;
							quad11.y3 = t_v01 * x51 + t_v11 * y51 + t_v21;
						}
					} else {
						var _this13 = _gthis.quadCache;
						if(_this13.quadCount == _this13.quads.length) {
							_this13.quads[_this13.quadCount] = new banan_render_Quad();
						}
						var quad12 = _this13.quads[_this13.quadCount++];
						quad12.texture = image.current.get_texture();
						quad12.x0 = x01;
						quad12.y0 = y1;
						quad12.x1 = x111;
						quad12.y1 = y1;
						quad12.x2 = x111;
						quad12.y2 = y2;
						quad12.x3 = x01;
						quad12.y3 = y2;
						quad12.tx0 = tx0;
						quad12.ty0 = ty1;
						quad12.tx1 = tx13;
						quad12.ty1 = ty2;
						quad12.isNormalizedCalculated = false;
						var x52 = quad12.x0;
						var y52 = quad12.y0;
						var x53 = quad12.x1;
						var y53 = quad12.y1;
						var x54 = quad12.x2;
						var y54 = quad12.y2;
						var x55 = quad12.x3;
						var y55 = quad12.y3;
						quad12.x0 = t_v00 * x52 + t_v10 * y52 + t_v20;
						quad12.y0 = t_v01 * x52 + t_v11 * y52 + t_v21;
						quad12.x1 = t_v00 * x53 + t_v10 * y53 + t_v20;
						quad12.y1 = t_v01 * x53 + t_v11 * y53 + t_v21;
						quad12.x2 = t_v00 * x54 + t_v10 * y54 + t_v20;
						quad12.y2 = t_v01 * x54 + t_v11 * y54 + t_v21;
						quad12.x3 = t_v00 * x55 + t_v10 * y55 + t_v20;
						quad12.y3 = t_v01 * x55 + t_v11 * y55 + t_v21;
					}
					var x02 = x2;
					var tx01 = tx2;
					var x112 = x3;
					if(nineSlice.isTileRight) {
						var p3 = y1;
						while(tileSizeY > 0 && p3 <= y2 - tileSizeY || tileSizeY < 0 && p3 >= y2 - tileSizeY) {
							var y112 = p3 + tileSizeY;
							var _this14 = _gthis.quadCache;
							if(_this14.quadCount == _this14.quads.length) {
								_this14.quads[_this14.quadCount] = new banan_render_Quad();
							}
							var quad13 = _this14.quads[_this14.quadCount++];
							quad13.texture = image.current.get_texture();
							quad13.x0 = x02;
							quad13.y0 = p3;
							quad13.x1 = x112;
							quad13.y1 = p3;
							quad13.x2 = x112;
							quad13.y2 = y112;
							quad13.x3 = x02;
							quad13.y3 = y112;
							quad13.tx0 = tx01;
							quad13.ty0 = ty1;
							quad13.tx1 = tx3;
							quad13.ty1 = ty2;
							quad13.isNormalizedCalculated = false;
							var x56 = quad13.x0;
							var y56 = quad13.y0;
							var x57 = quad13.x1;
							var y57 = quad13.y1;
							var x58 = quad13.x2;
							var y58 = quad13.y2;
							var x59 = quad13.x3;
							var y59 = quad13.y3;
							quad13.x0 = t_v00 * x56 + t_v10 * y56 + t_v20;
							quad13.y0 = t_v01 * x56 + t_v11 * y56 + t_v21;
							quad13.x1 = t_v00 * x57 + t_v10 * y57 + t_v20;
							quad13.y1 = t_v01 * x57 + t_v11 * y57 + t_v21;
							quad13.x2 = t_v00 * x58 + t_v10 * y58 + t_v20;
							quad13.y2 = t_v01 * x58 + t_v11 * y58 + t_v21;
							quad13.x3 = t_v00 * x59 + t_v10 * y59 + t_v20;
							quad13.y3 = t_v01 * x59 + t_v11 * y59 + t_v21;
							p3 += tileSizeY;
						}
						if(Math.abs(y2 - p3) > 0.) {
							var ty13 = ty1 + (y2 - p3) * tileSizeY / Math.abs(tileSizeY);
							var _this15 = _gthis.quadCache;
							if(_this15.quadCount == _this15.quads.length) {
								_this15.quads[_this15.quadCount] = new banan_render_Quad();
							}
							var quad14 = _this15.quads[_this15.quadCount++];
							quad14.texture = image.current.get_texture();
							quad14.x0 = x02;
							quad14.y0 = p3;
							quad14.x1 = x112;
							quad14.y1 = p3;
							quad14.x2 = x112;
							quad14.y2 = y2;
							quad14.x3 = x02;
							quad14.y3 = y2;
							quad14.tx0 = tx01;
							quad14.ty0 = ty1;
							quad14.tx1 = tx3;
							quad14.ty1 = ty13;
							quad14.isNormalizedCalculated = false;
							var x60 = quad14.x0;
							var y60 = quad14.y0;
							var x61 = quad14.x1;
							var y61 = quad14.y1;
							var x62 = quad14.x2;
							var y62 = quad14.y2;
							var x63 = quad14.x3;
							var y63 = quad14.y3;
							quad14.x0 = t_v00 * x60 + t_v10 * y60 + t_v20;
							quad14.y0 = t_v01 * x60 + t_v11 * y60 + t_v21;
							quad14.x1 = t_v00 * x61 + t_v10 * y61 + t_v20;
							quad14.y1 = t_v01 * x61 + t_v11 * y61 + t_v21;
							quad14.x2 = t_v00 * x62 + t_v10 * y62 + t_v20;
							quad14.y2 = t_v01 * x62 + t_v11 * y62 + t_v21;
							quad14.x3 = t_v00 * x63 + t_v10 * y63 + t_v20;
							quad14.y3 = t_v01 * x63 + t_v11 * y63 + t_v21;
						}
					} else {
						var _this16 = _gthis.quadCache;
						if(_this16.quadCount == _this16.quads.length) {
							_this16.quads[_this16.quadCount] = new banan_render_Quad();
						}
						var quad15 = _this16.quads[_this16.quadCount++];
						quad15.texture = image.current.get_texture();
						quad15.x0 = x02;
						quad15.y0 = y1;
						quad15.x1 = x112;
						quad15.y1 = y1;
						quad15.x2 = x112;
						quad15.y2 = y2;
						quad15.x3 = x02;
						quad15.y3 = y2;
						quad15.tx0 = tx01;
						quad15.ty0 = ty1;
						quad15.tx1 = tx3;
						quad15.ty1 = ty2;
						quad15.isNormalizedCalculated = false;
						var x64 = quad15.x0;
						var y64 = quad15.y0;
						var x65 = quad15.x1;
						var y65 = quad15.y1;
						var x66 = quad15.x2;
						var y66 = quad15.y2;
						var x67 = quad15.x3;
						var y67 = quad15.y3;
						quad15.x0 = t_v00 * x64 + t_v10 * y64 + t_v20;
						quad15.y0 = t_v01 * x64 + t_v11 * y64 + t_v21;
						quad15.x1 = t_v00 * x65 + t_v10 * y65 + t_v20;
						quad15.y1 = t_v01 * x65 + t_v11 * y65 + t_v21;
						quad15.x2 = t_v00 * x66 + t_v10 * y66 + t_v20;
						quad15.y2 = t_v01 * x66 + t_v11 * y66 + t_v21;
						quad15.x3 = t_v00 * x67 + t_v10 * y67 + t_v20;
						quad15.y3 = t_v01 * x67 + t_v11 * y67 + t_v21;
					}
					if(nineSlice.isDrawCenter) {
						if(nineSlice.isTileCenterY) {
							var p4 = y1;
							while(tileSizeY > 0 && p4 <= y2 - tileSizeY || tileSizeY < 0 && p4 >= y2 - tileSizeY) {
								var y03 = p4;
								var ty02 = ty1;
								var y113 = p4 + tileSizeY;
								var ty14 = ty2;
								if(nineSlice.isTileCenterX) {
									var p5 = x1;
									while(tileSizeX > 0 && p5 <= x2 - tileSizeX || tileSizeX < 0 && p5 >= x2 - tileSizeX) {
										var x113 = p5 + tileSizeX;
										var _this17 = _gthis.quadCache;
										if(_this17.quadCount == _this17.quads.length) {
											_this17.quads[_this17.quadCount] = new banan_render_Quad();
										}
										var quad16 = _this17.quads[_this17.quadCount++];
										quad16.texture = image.current.get_texture();
										quad16.x0 = p5;
										quad16.y0 = y03;
										quad16.x1 = x113;
										quad16.y1 = y03;
										quad16.x2 = x113;
										quad16.y2 = y113;
										quad16.x3 = p5;
										quad16.y3 = y113;
										quad16.tx0 = tx1;
										quad16.ty0 = ty02;
										quad16.tx1 = tx2;
										quad16.ty1 = ty14;
										quad16.isNormalizedCalculated = false;
										var x68 = quad16.x0;
										var y68 = quad16.y0;
										var x69 = quad16.x1;
										var y69 = quad16.y1;
										var x70 = quad16.x2;
										var y70 = quad16.y2;
										var x71 = quad16.x3;
										var y71 = quad16.y3;
										quad16.x0 = t_v00 * x68 + t_v10 * y68 + t_v20;
										quad16.y0 = t_v01 * x68 + t_v11 * y68 + t_v21;
										quad16.x1 = t_v00 * x69 + t_v10 * y69 + t_v20;
										quad16.y1 = t_v01 * x69 + t_v11 * y69 + t_v21;
										quad16.x2 = t_v00 * x70 + t_v10 * y70 + t_v20;
										quad16.y2 = t_v01 * x70 + t_v11 * y70 + t_v21;
										quad16.x3 = t_v00 * x71 + t_v10 * y71 + t_v20;
										quad16.y3 = t_v01 * x71 + t_v11 * y71 + t_v21;
										p5 += tileSizeX;
									}
									if(Math.abs(x2 - p5) > 0.) {
										var tx14 = tx1 + (x2 - p5) * tileSizeX / Math.abs(tileSizeX);
										var _this18 = _gthis.quadCache;
										if(_this18.quadCount == _this18.quads.length) {
											_this18.quads[_this18.quadCount] = new banan_render_Quad();
										}
										var quad17 = _this18.quads[_this18.quadCount++];
										quad17.texture = image.current.get_texture();
										quad17.x0 = p5;
										quad17.y0 = y03;
										quad17.x1 = x2;
										quad17.y1 = y03;
										quad17.x2 = x2;
										quad17.y2 = y113;
										quad17.x3 = p5;
										quad17.y3 = y113;
										quad17.tx0 = tx1;
										quad17.ty0 = ty02;
										quad17.tx1 = tx14;
										quad17.ty1 = ty14;
										quad17.isNormalizedCalculated = false;
										var x72 = quad17.x0;
										var y72 = quad17.y0;
										var x73 = quad17.x1;
										var y73 = quad17.y1;
										var x74 = quad17.x2;
										var y74 = quad17.y2;
										var x75 = quad17.x3;
										var y75 = quad17.y3;
										quad17.x0 = t_v00 * x72 + t_v10 * y72 + t_v20;
										quad17.y0 = t_v01 * x72 + t_v11 * y72 + t_v21;
										quad17.x1 = t_v00 * x73 + t_v10 * y73 + t_v20;
										quad17.y1 = t_v01 * x73 + t_v11 * y73 + t_v21;
										quad17.x2 = t_v00 * x74 + t_v10 * y74 + t_v20;
										quad17.y2 = t_v01 * x74 + t_v11 * y74 + t_v21;
										quad17.x3 = t_v00 * x75 + t_v10 * y75 + t_v20;
										quad17.y3 = t_v01 * x75 + t_v11 * y75 + t_v21;
									}
								} else {
									var _this19 = _gthis.quadCache;
									if(_this19.quadCount == _this19.quads.length) {
										_this19.quads[_this19.quadCount] = new banan_render_Quad();
									}
									var quad18 = _this19.quads[_this19.quadCount++];
									quad18.texture = image.current.get_texture();
									quad18.x0 = x1;
									quad18.y0 = y03;
									quad18.x1 = x2;
									quad18.y1 = y03;
									quad18.x2 = x2;
									quad18.y2 = y113;
									quad18.x3 = x1;
									quad18.y3 = y113;
									quad18.tx0 = tx1;
									quad18.ty0 = ty02;
									quad18.tx1 = tx2;
									quad18.ty1 = ty14;
									quad18.isNormalizedCalculated = false;
									var x76 = quad18.x0;
									var y76 = quad18.y0;
									var x77 = quad18.x1;
									var y77 = quad18.y1;
									var x78 = quad18.x2;
									var y78 = quad18.y2;
									var x79 = quad18.x3;
									var y79 = quad18.y3;
									quad18.x0 = t_v00 * x76 + t_v10 * y76 + t_v20;
									quad18.y0 = t_v01 * x76 + t_v11 * y76 + t_v21;
									quad18.x1 = t_v00 * x77 + t_v10 * y77 + t_v20;
									quad18.y1 = t_v01 * x77 + t_v11 * y77 + t_v21;
									quad18.x2 = t_v00 * x78 + t_v10 * y78 + t_v20;
									quad18.y2 = t_v01 * x78 + t_v11 * y78 + t_v21;
									quad18.x3 = t_v00 * x79 + t_v10 * y79 + t_v20;
									quad18.y3 = t_v01 * x79 + t_v11 * y79 + t_v21;
								}
								p4 += tileSizeY;
							}
							if(Math.abs(y2 - p4) > 0.) {
								var ty15 = ty1 + (y2 - p4) * tileSizeY / Math.abs(tileSizeY);
								var y04 = p4;
								var ty03 = ty1;
								var y114 = y2;
								if(nineSlice.isTileCenterX) {
									var p6 = x1;
									while(tileSizeX > 0 && p6 <= x2 - tileSizeX || tileSizeX < 0 && p6 >= x2 - tileSizeX) {
										var x114 = p6 + tileSizeX;
										var _this20 = _gthis.quadCache;
										if(_this20.quadCount == _this20.quads.length) {
											_this20.quads[_this20.quadCount] = new banan_render_Quad();
										}
										var quad19 = _this20.quads[_this20.quadCount++];
										quad19.texture = image.current.get_texture();
										quad19.x0 = p6;
										quad19.y0 = y04;
										quad19.x1 = x114;
										quad19.y1 = y04;
										quad19.x2 = x114;
										quad19.y2 = y114;
										quad19.x3 = p6;
										quad19.y3 = y114;
										quad19.tx0 = tx1;
										quad19.ty0 = ty03;
										quad19.tx1 = tx2;
										quad19.ty1 = ty15;
										quad19.isNormalizedCalculated = false;
										var x80 = quad19.x0;
										var y80 = quad19.y0;
										var x81 = quad19.x1;
										var y81 = quad19.y1;
										var x82 = quad19.x2;
										var y82 = quad19.y2;
										var x83 = quad19.x3;
										var y83 = quad19.y3;
										quad19.x0 = t_v00 * x80 + t_v10 * y80 + t_v20;
										quad19.y0 = t_v01 * x80 + t_v11 * y80 + t_v21;
										quad19.x1 = t_v00 * x81 + t_v10 * y81 + t_v20;
										quad19.y1 = t_v01 * x81 + t_v11 * y81 + t_v21;
										quad19.x2 = t_v00 * x82 + t_v10 * y82 + t_v20;
										quad19.y2 = t_v01 * x82 + t_v11 * y82 + t_v21;
										quad19.x3 = t_v00 * x83 + t_v10 * y83 + t_v20;
										quad19.y3 = t_v01 * x83 + t_v11 * y83 + t_v21;
										p6 += tileSizeX;
									}
									if(Math.abs(x2 - p6) > 0.) {
										var tx15 = tx1 + (x2 - p6) * tileSizeX / Math.abs(tileSizeX);
										var _this21 = _gthis.quadCache;
										if(_this21.quadCount == _this21.quads.length) {
											_this21.quads[_this21.quadCount] = new banan_render_Quad();
										}
										var quad20 = _this21.quads[_this21.quadCount++];
										quad20.texture = image.current.get_texture();
										quad20.x0 = p6;
										quad20.y0 = y04;
										quad20.x1 = x2;
										quad20.y1 = y04;
										quad20.x2 = x2;
										quad20.y2 = y114;
										quad20.x3 = p6;
										quad20.y3 = y114;
										quad20.tx0 = tx1;
										quad20.ty0 = ty03;
										quad20.tx1 = tx15;
										quad20.ty1 = ty15;
										quad20.isNormalizedCalculated = false;
										var x84 = quad20.x0;
										var y84 = quad20.y0;
										var x85 = quad20.x1;
										var y85 = quad20.y1;
										var x86 = quad20.x2;
										var y86 = quad20.y2;
										var x87 = quad20.x3;
										var y87 = quad20.y3;
										quad20.x0 = t_v00 * x84 + t_v10 * y84 + t_v20;
										quad20.y0 = t_v01 * x84 + t_v11 * y84 + t_v21;
										quad20.x1 = t_v00 * x85 + t_v10 * y85 + t_v20;
										quad20.y1 = t_v01 * x85 + t_v11 * y85 + t_v21;
										quad20.x2 = t_v00 * x86 + t_v10 * y86 + t_v20;
										quad20.y2 = t_v01 * x86 + t_v11 * y86 + t_v21;
										quad20.x3 = t_v00 * x87 + t_v10 * y87 + t_v20;
										quad20.y3 = t_v01 * x87 + t_v11 * y87 + t_v21;
									}
								} else {
									var _this22 = _gthis.quadCache;
									if(_this22.quadCount == _this22.quads.length) {
										_this22.quads[_this22.quadCount] = new banan_render_Quad();
									}
									var quad21 = _this22.quads[_this22.quadCount++];
									quad21.texture = image.current.get_texture();
									quad21.x0 = x1;
									quad21.y0 = y04;
									quad21.x1 = x2;
									quad21.y1 = y04;
									quad21.x2 = x2;
									quad21.y2 = y114;
									quad21.x3 = x1;
									quad21.y3 = y114;
									quad21.tx0 = tx1;
									quad21.ty0 = ty03;
									quad21.tx1 = tx2;
									quad21.ty1 = ty15;
									quad21.isNormalizedCalculated = false;
									var x88 = quad21.x0;
									var y88 = quad21.y0;
									var x89 = quad21.x1;
									var y89 = quad21.y1;
									var x90 = quad21.x2;
									var y90 = quad21.y2;
									var x91 = quad21.x3;
									var y91 = quad21.y3;
									quad21.x0 = t_v00 * x88 + t_v10 * y88 + t_v20;
									quad21.y0 = t_v01 * x88 + t_v11 * y88 + t_v21;
									quad21.x1 = t_v00 * x89 + t_v10 * y89 + t_v20;
									quad21.y1 = t_v01 * x89 + t_v11 * y89 + t_v21;
									quad21.x2 = t_v00 * x90 + t_v10 * y90 + t_v20;
									quad21.y2 = t_v01 * x90 + t_v11 * y90 + t_v21;
									quad21.x3 = t_v00 * x91 + t_v10 * y91 + t_v20;
									quad21.y3 = t_v01 * x91 + t_v11 * y91 + t_v21;
								}
							}
						} else {
							var y05 = y1;
							var ty04 = ty1;
							var y115 = y2;
							var ty16 = ty2;
							if(nineSlice.isTileCenterX) {
								var p7 = x1;
								while(tileSizeX > 0 && p7 <= x2 - tileSizeX || tileSizeX < 0 && p7 >= x2 - tileSizeX) {
									var x115 = p7 + tileSizeX;
									var _this23 = _gthis.quadCache;
									if(_this23.quadCount == _this23.quads.length) {
										_this23.quads[_this23.quadCount] = new banan_render_Quad();
									}
									var quad22 = _this23.quads[_this23.quadCount++];
									quad22.texture = image.current.get_texture();
									quad22.x0 = p7;
									quad22.y0 = y05;
									quad22.x1 = x115;
									quad22.y1 = y05;
									quad22.x2 = x115;
									quad22.y2 = y115;
									quad22.x3 = p7;
									quad22.y3 = y115;
									quad22.tx0 = tx1;
									quad22.ty0 = ty04;
									quad22.tx1 = tx2;
									quad22.ty1 = ty16;
									quad22.isNormalizedCalculated = false;
									var x92 = quad22.x0;
									var y92 = quad22.y0;
									var x93 = quad22.x1;
									var y93 = quad22.y1;
									var x94 = quad22.x2;
									var y94 = quad22.y2;
									var x95 = quad22.x3;
									var y95 = quad22.y3;
									quad22.x0 = t_v00 * x92 + t_v10 * y92 + t_v20;
									quad22.y0 = t_v01 * x92 + t_v11 * y92 + t_v21;
									quad22.x1 = t_v00 * x93 + t_v10 * y93 + t_v20;
									quad22.y1 = t_v01 * x93 + t_v11 * y93 + t_v21;
									quad22.x2 = t_v00 * x94 + t_v10 * y94 + t_v20;
									quad22.y2 = t_v01 * x94 + t_v11 * y94 + t_v21;
									quad22.x3 = t_v00 * x95 + t_v10 * y95 + t_v20;
									quad22.y3 = t_v01 * x95 + t_v11 * y95 + t_v21;
									p7 += tileSizeX;
								}
								if(Math.abs(x2 - p7) > 0.) {
									var tx16 = tx1 + (x2 - p7) * tileSizeX / Math.abs(tileSizeX);
									var _this24 = _gthis.quadCache;
									if(_this24.quadCount == _this24.quads.length) {
										_this24.quads[_this24.quadCount] = new banan_render_Quad();
									}
									var quad23 = _this24.quads[_this24.quadCount++];
									quad23.texture = image.current.get_texture();
									quad23.x0 = p7;
									quad23.y0 = y05;
									quad23.x1 = x2;
									quad23.y1 = y05;
									quad23.x2 = x2;
									quad23.y2 = y115;
									quad23.x3 = p7;
									quad23.y3 = y115;
									quad23.tx0 = tx1;
									quad23.ty0 = ty04;
									quad23.tx1 = tx16;
									quad23.ty1 = ty16;
									quad23.isNormalizedCalculated = false;
									var x96 = quad23.x0;
									var y96 = quad23.y0;
									var x97 = quad23.x1;
									var y97 = quad23.y1;
									var x98 = quad23.x2;
									var y98 = quad23.y2;
									var x99 = quad23.x3;
									var y99 = quad23.y3;
									quad23.x0 = t_v00 * x96 + t_v10 * y96 + t_v20;
									quad23.y0 = t_v01 * x96 + t_v11 * y96 + t_v21;
									quad23.x1 = t_v00 * x97 + t_v10 * y97 + t_v20;
									quad23.y1 = t_v01 * x97 + t_v11 * y97 + t_v21;
									quad23.x2 = t_v00 * x98 + t_v10 * y98 + t_v20;
									quad23.y2 = t_v01 * x98 + t_v11 * y98 + t_v21;
									quad23.x3 = t_v00 * x99 + t_v10 * y99 + t_v20;
									quad23.y3 = t_v01 * x99 + t_v11 * y99 + t_v21;
								}
							} else {
								var _this25 = _gthis.quadCache;
								if(_this25.quadCount == _this25.quads.length) {
									_this25.quads[_this25.quadCount] = new banan_render_Quad();
								}
								var quad24 = _this25.quads[_this25.quadCount++];
								quad24.texture = image.current.get_texture();
								quad24.x0 = x1;
								quad24.y0 = y05;
								quad24.x1 = x2;
								quad24.y1 = y05;
								quad24.x2 = x2;
								quad24.y2 = y115;
								quad24.x3 = x1;
								quad24.y3 = y115;
								quad24.tx0 = tx1;
								quad24.ty0 = ty04;
								quad24.tx1 = tx2;
								quad24.ty1 = ty16;
								quad24.isNormalizedCalculated = false;
								var x100 = quad24.x0;
								var y100 = quad24.y0;
								var x101 = quad24.x1;
								var y101 = quad24.y1;
								var x102 = quad24.x2;
								var y102 = quad24.y2;
								var x103 = quad24.x3;
								var y103 = quad24.y3;
								quad24.x0 = t_v00 * x100 + t_v10 * y100 + t_v20;
								quad24.y0 = t_v01 * x100 + t_v11 * y100 + t_v21;
								quad24.x1 = t_v00 * x101 + t_v10 * y101 + t_v20;
								quad24.y1 = t_v01 * x101 + t_v11 * y101 + t_v21;
								quad24.x2 = t_v00 * x102 + t_v10 * y102 + t_v20;
								quad24.y2 = t_v01 * x102 + t_v11 * y102 + t_v21;
								quad24.x3 = t_v00 * x103 + t_v10 * y103 + t_v20;
								quad24.y3 = t_v01 * x103 + t_v11 * y103 + t_v21;
							}
						}
					}
				} else {
					var image1 = this.image;
					var current1 = image1.current;
					var frameX = current1.tx;
					var frameY = current1.ty;
					var frameW = current1.tSizeX;
					var frameH = current1.tSizeY;
					var sourceX = current1.tx + image1.tOffsetX;
					var sourceY = current1.ty + image1.tOffsetY;
					var sourceW = image1.tImageSizeX;
					var sourceH = image1.tImageSizeY;
					var nodeX = this.nodeAreaX;
					var nodeY = this.nodeAreaY;
					var nodeW = this.nodeAreaSizeX;
					var nodeH = this.nodeAreaSizeY;
					if(this.isFlipX) {
						frameX += frameW;
						frameW = -frameW;
						sourceX += sourceW;
						sourceW = -sourceW;
					}
					if(this.isFlipY) {
						frameY += frameH;
						frameH = -frameH;
						sourceY += sourceH;
						sourceH = -sourceH;
					}
					switch(this.scaleMode._hx_index) {
					case 0:
						break;
					case 1:
						var a = sourceW / sourceH;
						var imgRatio = a >= 0 ? a : -a;
						if(nodeW / nodeH < imgRatio) {
							var oldNodeW = nodeW;
							nodeW = nodeH * imgRatio;
							nodeX += (oldNodeW - nodeW) / 2;
						} else {
							var oldNodeH = nodeH;
							nodeH = nodeW / imgRatio;
							nodeY += (oldNodeH - nodeH) / 2;
						}
						break;
					case 2:
						var nodeRatio = nodeW / nodeH;
						if(nodeRatio > sourceW / sourceH) {
							var oldImgRcH = sourceH;
							sourceH = sourceW / nodeRatio;
							sourceY += (oldImgRcH - sourceH) / 2;
							if(frameY + frameH > sourceY + sourceH) {
								frameH -= frameY + frameH - (sourceY + sourceH);
							}
							if(frameY < sourceY) {
								frameH -= sourceY - frameY;
								frameY = sourceY;
							}
						} else {
							var oldImgRcW = sourceW;
							sourceW = sourceH * nodeRatio;
							sourceX += (oldImgRcW - sourceW) / 2;
							if(frameX + frameW > sourceX + sourceW) {
								frameW -= frameX + frameW - (sourceX + sourceW);
							}
							if(frameX < sourceX) {
								frameW -= sourceX - frameX;
								frameX = sourceX;
							}
						}
						break;
					case 3:
						var a1 = sourceW / sourceH;
						var imgRatio1 = a1 >= 0 ? a1 : -a1;
						if(nodeW / nodeH > imgRatio1) {
							var oldNodeW1 = nodeW;
							nodeW = nodeH * imgRatio1;
							nodeX += (oldNodeW1 - nodeW) / 2;
						} else {
							var oldNodeH1 = nodeH;
							nodeH = nodeW / imgRatio1;
							nodeY += (oldNodeH1 - nodeH) / 2;
						}
						break;
					}
					var scaleX = nodeW / sourceW;
					var scaleY = nodeH / sourceH;
					var drawX = (frameX - sourceX) * scaleX + nodeX;
					var drawY = (frameY - sourceY) * scaleY + nodeY;
					var _this26 = this.quadCache;
					if(_this26.quadCount == _this26.quads.length) {
						_this26.quads[_this26.quadCount] = new banan_render_Quad();
					}
					var quad25 = _this26.quads[_this26.quadCount++];
					var x116 = drawX + frameW * scaleX;
					var y116 = drawY + frameH * scaleY;
					quad25.texture = image1.current.get_texture();
					quad25.x0 = drawX;
					quad25.y0 = drawY;
					quad25.x1 = x116;
					quad25.y1 = drawY;
					quad25.x2 = x116;
					quad25.y2 = y116;
					quad25.x3 = drawX;
					quad25.y3 = y116;
					quad25.tx0 = frameX;
					quad25.ty0 = frameY;
					quad25.tx1 = frameX + frameW;
					quad25.ty1 = frameY + frameH;
					quad25.isNormalizedCalculated = false;
					var x104 = quad25.x0;
					var y104 = quad25.y0;
					var x105 = quad25.x1;
					var y105 = quad25.y1;
					var x106 = quad25.x2;
					var y106 = quad25.y2;
					var x107 = quad25.x3;
					var y107 = quad25.y3;
					quad25.x0 = transform_v00 * x104 + transform_v10 * y104 + transform_v20;
					quad25.y0 = transform_v01 * x104 + transform_v11 * y104 + transform_v21;
					quad25.x1 = transform_v00 * x105 + transform_v10 * y105 + transform_v20;
					quad25.y1 = transform_v01 * x105 + transform_v11 * y105 + transform_v21;
					quad25.x2 = transform_v00 * x106 + transform_v10 * y106 + transform_v20;
					quad25.y2 = transform_v01 * x106 + transform_v11 * y106 + transform_v21;
					quad25.x3 = transform_v00 * x107 + transform_v10 * y107 + transform_v20;
					quad25.y3 = transform_v01 * x107 + transform_v11 * y107 + transform_v21;
				}
			}
			var batchEntry = this.batchEntry;
			var quadCache = this.quadCache;
			var gr = nodeEdge.renderColorR;
			var gg = nodeEdge.renderColorG;
			var gb = nodeEdge.renderColorB;
			var ga = nodeEdge.renderColorA;
			var go = nodeEdge.renderOpacity;
			var vertexCount = 4 * quadCache.quadCount;
			var indexCount = 6 * quadCache.quadCount;
			var batch = ctx.renderer2.getBatchFor(this.material,indexCount,batchEntry.themeId);
			if(batchEntry.check(batch,vertexCount,indexCount)) {
				batchEntry.sync(batch,vertexCount,indexCount);
			} else {
				batchEntry.isDirty = false;
			}
			var batch1 = batch;
			if(batchEntry.isDirty) {
				if(batch1._vertices == null) {
					batch1._vertices = batch1.vertexBuffer.lock();
					if(batch1.isDynamicIndices) {
						batch1._indices = batch1.indexBuffer.lock();
					}
				}
				var vbuff = batch1._vertices;
				var vpos = batch1.vertexCount;
				var _g = 0;
				var _g1 = quadCache.quadCount;
				while(_g < _g1) {
					var i = _g++;
					var quad26 = i < quadCache.quadCount ? quadCache.quads[i] : null;
					if(!quad26.isNormalizedCalculated) {
						quad26.isNormalizedCalculated = true;
						quad26.tx0_norm = quad26.tx0 / quad26.texture.sizeX;
						quad26.tx1_norm = quad26.tx1 / quad26.texture.sizeX;
						quad26.ty0_norm = quad26.ty0 / quad26.texture.sizeY;
						quad26.ty1_norm = quad26.ty1 / quad26.texture.sizeY;
					}
					var tx02 = quad26.tx0_norm;
					var ty05 = quad26.ty0_norm;
					var tx17 = quad26.tx1_norm;
					var ty17 = quad26.ty1_norm;
					var a2 = ga * go;
					var position = vpos * 9;
					vbuff[position] = quad26.x0;
					vbuff[position + 1] = quad26.y0;
					vbuff[position + 2] = -5.0;
					vbuff[position + 3] = tx02;
					vbuff[position + 4] = ty05;
					vbuff[position + 5] = gr;
					vbuff[position + 6] = gg;
					vbuff[position + 7] = gb;
					vbuff[position + 8] = a2;
					var position1 = (vpos + 1) * 9;
					vbuff[position1] = quad26.x1;
					vbuff[position1 + 1] = quad26.y1;
					vbuff[position1 + 2] = -5.0;
					vbuff[position1 + 3] = tx17;
					vbuff[position1 + 4] = ty05;
					vbuff[position1 + 5] = gr;
					vbuff[position1 + 6] = gg;
					vbuff[position1 + 7] = gb;
					vbuff[position1 + 8] = a2;
					var position2 = (vpos + 2) * 9;
					vbuff[position2] = quad26.x2;
					vbuff[position2 + 1] = quad26.y2;
					vbuff[position2 + 2] = -5.0;
					vbuff[position2 + 3] = tx17;
					vbuff[position2 + 4] = ty17;
					vbuff[position2 + 5] = gr;
					vbuff[position2 + 6] = gg;
					vbuff[position2 + 7] = gb;
					vbuff[position2 + 8] = a2;
					var position3 = (vpos + 3) * 9;
					vbuff[position3] = quad26.x3;
					vbuff[position3 + 1] = quad26.y3;
					vbuff[position3 + 2] = -5.0;
					vbuff[position3 + 3] = tx02;
					vbuff[position3 + 4] = ty17;
					vbuff[position3 + 5] = gr;
					vbuff[position3 + 6] = gg;
					vbuff[position3 + 7] = gb;
					vbuff[position3 + 8] = a2;
					vpos += 4;
				}
			}
			batchEntry.shiftCounters();
		}
	}
	,dispose: function() {
		this.setImage(null,null);
	}
	,invalidate: function() {
		this.isInvalid = true;
	}
	,set_scaleMode: function(v) {
		if(v != this.scaleMode) {
			this.scaleMode = v;
			this.invalidate();
		}
		return v;
	}
	,set_isFlipX: function(v) {
		if(v != this.isFlipX) {
			this.isFlipX = v;
			this.invalidate();
		}
		return v;
	}
	,set_isFlipY: function(v) {
		if(v != this.isFlipY) {
			this.isFlipY = v;
			this.invalidate();
		}
		return v;
	}
	,set_nodeAreaX: function(v) {
		if(v != this.nodeAreaX) {
			this.nodeAreaX = v;
			this.invalidate();
		}
		return v;
	}
	,set_nodeAreaY: function(v) {
		if(v != this.nodeAreaY) {
			this.nodeAreaY = v;
			this.invalidate();
		}
		return v;
	}
	,set_nodeAreaSizeX: function(v) {
		if(v != this.nodeAreaSizeX) {
			this.nodeAreaSizeX = v;
			this.invalidate();
		}
		return v;
	}
	,set_nodeAreaSizeY: function(v) {
		if(v != this.nodeAreaSizeY) {
			this.nodeAreaSizeY = v;
			this.invalidate();
		}
		return v;
	}
	,__class__: banan_display_ImageDisplayEdge
	,__properties__: {set_nodeAreaSizeY:"set_nodeAreaSizeY",set_nodeAreaSizeX:"set_nodeAreaSizeX",set_nodeAreaY:"set_nodeAreaY",set_nodeAreaX:"set_nodeAreaX",set_isFlipY:"set_isFlipY",set_isFlipX:"set_isFlipX",set_scaleMode:"set_scaleMode"}
});
var banan_utils_modifiable_ModifiableBase = function(baseValue,valueImpl) {
	this.modificators = [];
	this.baseValue = baseValue;
	this.setValueImpl(valueImpl);
};
$hxClasses["banan.utils.modifiable.ModifiableBase"] = banan_utils_modifiable_ModifiableBase;
banan_utils_modifiable_ModifiableBase.__name__ = "banan.utils.modifiable.ModifiableBase";
banan_utils_modifiable_ModifiableBase.prototype = {
	modificators: null
	,baseValue: null
	,valueImpl: null
	,get_value: function() {
		return this.valueImpl.get_value();
	}
	,setValueImpl: function(valueImpl) {
		this.valueImpl = valueImpl;
		this.validate();
	}
	,enableModificator: function(name) {
		var result = null;
		var _g = 0;
		var _g1 = this.modificators;
		while(_g < _g1.length) {
			var modificator = _g1[_g];
			++_g;
			if(modificator.name == name) {
				result = modificator;
				break;
			}
		}
		var modificator1 = result;
		if(modificator1 != null) {
			modificator1.isEnabled = true;
			this.validate();
		}
	}
	,disableModificator: function(name) {
		var result = null;
		var _g = 0;
		var _g1 = this.modificators;
		while(_g < _g1.length) {
			var modificator = _g1[_g];
			++_g;
			if(modificator.name == name) {
				result = modificator;
				break;
			}
		}
		var modificator1 = result;
		if(modificator1 != null) {
			modificator1.isEnabled = false;
			this.validate();
		}
	}
	,hasModificator: function(name) {
		var result = null;
		var _g = 0;
		var _g1 = this.modificators;
		while(_g < _g1.length) {
			var modificator = _g1[_g];
			++_g;
			if(modificator.name == name) {
				result = modificator;
				break;
			}
		}
		return result != null;
	}
	,addModificatorInternal: function(name,value,canChange,incCounter) {
		if(incCounter == null) {
			incCounter = true;
		}
		if(canChange == null) {
			canChange = true;
		}
		var result = null;
		var _g = 0;
		var _g1 = this.modificators;
		while(_g < _g1.length) {
			var modificator = _g1[_g];
			++_g;
			if(modificator.name == name) {
				result = modificator;
				break;
			}
		}
		var modificator1 = result;
		if(modificator1 == null) {
			this.modificators.push(new banan_utils_modifiable_Modificator(name,value));
		} else {
			if(canChange) {
				modificator1.value = value;
			} else if(!this.isEqual(modificator1.value,value)) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ModifiableBase.hx:69","isEqual(modificator.value, value)",{ name : name, value : value}));
			}
			if(incCounter) {
				modificator1.counter++;
			}
		}
		this.validate();
	}
	,removeModificatorInternal: function(name,mustExist) {
		if(mustExist == null) {
			mustExist = false;
		}
		var result = null;
		var _g = 0;
		var _g1 = this.modificators;
		while(_g < _g1.length) {
			var modificator = _g1[_g];
			++_g;
			if(modificator.name == name) {
				result = modificator;
				break;
			}
		}
		var modificator1 = result;
		if(modificator1 != null) {
			modificator1.counter--;
			if(modificator1.counter <= 0) {
				HxOverrides.remove(this.modificators,modificator1);
				this.validate();
			}
		} else if(!(!mustExist)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ModifiableBase.hx:92","!mustExist" + ": " + ("name: " + name),null));
		}
	}
	,getModificator: function(name) {
		var result = null;
		var _g = 0;
		var _g1 = this.modificators;
		while(_g < _g1.length) {
			var modificator = _g1[_g];
			++_g;
			if(modificator.name == name) {
				result = modificator;
				break;
			}
		}
		return result;
	}
	,validate: function() {
		this.valueImpl.set_value(this.calculateActualValue());
	}
	,calculateActualValue: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"ModifiableBase.hx:114","",null));
	}
	,isEqual: function(a,b) {
		return a == b;
	}
	,__class__: banan_utils_modifiable_ModifiableBase
	,__properties__: {get_value:"get_value"}
};
var banan_utils_modifiable_MergeModifiable = function(baseValue,valueImpl) {
	banan_utils_modifiable_ModifiableBase.call(this,baseValue,valueImpl);
};
$hxClasses["banan.utils.modifiable.MergeModifiable"] = banan_utils_modifiable_MergeModifiable;
banan_utils_modifiable_MergeModifiable.__name__ = "banan.utils.modifiable.MergeModifiable";
banan_utils_modifiable_MergeModifiable.__super__ = banan_utils_modifiable_ModifiableBase;
banan_utils_modifiable_MergeModifiable.prototype = $extend(banan_utils_modifiable_ModifiableBase.prototype,{
	addCommonModificator: function(value) {
		this.addModificator("common",value,false);
	}
	,addModificator: function(name,value,incCounter) {
		if(incCounter == null) {
			incCounter = true;
		}
		this.addModificatorInternal(name,value,true,incCounter);
	}
	,removeModificator: function(name) {
		this.removeModificatorInternal(name);
	}
	,calculateActualValue: function() {
		var actualValue = this.baseValue;
		var _g = 0;
		var _g1 = this.modificators;
		while(_g < _g1.length) {
			var modificator = _g1[_g];
			++_g;
			if(modificator.isEnabled) {
				actualValue = this.merge(actualValue,modificator.value);
			}
		}
		return actualValue;
	}
	,merge: function(currentValue,nextValue) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"MergeModifiable.hx:33","",null));
	}
	,__class__: banan_utils_modifiable_MergeModifiable
});
var banan_display_InteractModeMergeModifiable = function() {
	banan_utils_modifiable_MergeModifiable.call(this,banan_display_EInteractMode.Touch,new banan_utils_modifiable_value_SimpleValue());
	this.addCommonModificator(banan_display_EInteractMode.None);
};
$hxClasses["banan.display.InteractModeMergeModifiable"] = banan_display_InteractModeMergeModifiable;
banan_display_InteractModeMergeModifiable.__name__ = "banan.display.InteractModeMergeModifiable";
banan_display_InteractModeMergeModifiable.__super__ = banan_utils_modifiable_MergeModifiable;
banan_display_InteractModeMergeModifiable.prototype = $extend(banan_utils_modifiable_MergeModifiable.prototype,{
	merge: function(currentValue,nextValue) {
		if(nextValue._hx_index <= currentValue._hx_index) {
			return nextValue;
		} else {
			return currentValue;
		}
	}
	,isEqual: function(a,b) {
		return a == b;
	}
	,__class__: banan_display_InteractModeMergeModifiable
});
var banan_display_IMesh = function() { };
$hxClasses["banan.display.IMesh"] = banan_display_IMesh;
banan_display_IMesh.__name__ = "banan.display.IMesh";
banan_display_IMesh.__isInterface__ = true;
banan_display_IMesh.prototype = {
	getImage: null
	,getBounds: null
	,getVertices: null
	,getIndices: null
	,getVertexCount: null
	,getIndexCount: null
	,getStateId: null
	,__class__: banan_display_IMesh
};
var banan_display_MeshDisplayEdge = function(render2Context,mesh) {
	this.token = new banan_resource_ResourceToken();
	banan_display_DisplayEdge.call(this,banan_display_DisplayEdgeType.Mesh,render2Context);
	this.mesh = mesh;
	this.claimedImage = null;
	this.ensureImageClaim();
	this.material = banan_render_render2_material_MaterialHelper.makeFillMaterial(render2Context.materialFactory,banan_render_render2_material_EPrimitiveType.Triangle);
	this.render2Context = render2Context;
};
$hxClasses["banan.display.MeshDisplayEdge"] = banan_display_MeshDisplayEdge;
banan_display_MeshDisplayEdge.__name__ = "banan.display.MeshDisplayEdge";
banan_display_MeshDisplayEdge.__super__ = banan_display_DisplayEdge;
banan_display_MeshDisplayEdge.prototype = $extend(banan_display_DisplayEdge.prototype,{
	token: null
	,mesh: null
	,meshStateId: null
	,claimedImage: null
	,material: null
	,render2Context: null
	,dispose: function() {
		banan_display_DisplayEdge.prototype.dispose.call(this);
		this.releaseClaimedImage();
	}
	,render: function(nodeEdge,ctx) {
		this.ensureImageClaim();
		if(this.claimedImage == null || !this.claimedImage.current.get_texture().get_isLoaded()) {
			return;
		}
		this.material.setTexture(this.claimedImage.current.get_texture());
		var vertices = this.mesh.getVertices();
		var indices = this.mesh.getIndices();
		var vertexCount = this.mesh.getVertexCount();
		var indexCount = this.mesh.getIndexCount();
		if(nodeEdge.globalTransformId == -1 || nodeEdge.parent != nodeEdge._globalTransformParent) {
			nodeEdge.validateGlobalTransformRecursively();
		}
		var p00 = nodeEdge._v00;
		var p10 = nodeEdge._v10;
		var p20 = nodeEdge._v20;
		var p01 = nodeEdge._v01;
		var p11 = nodeEdge._v11;
		var p21 = nodeEdge._v21;
		if(p21 == null) {
			p21 = 0.0;
		}
		if(p11 == null) {
			p11 = 1.0;
		}
		if(p01 == null) {
			p01 = 0.0;
		}
		if(p20 == null) {
			p20 = 0.0;
		}
		if(p10 == null) {
			p10 = 0.0;
		}
		if(p00 == null) {
			p00 = 1.0;
		}
		var transform_v00 = p00;
		var transform_v10 = p10;
		var transform_v20 = p20;
		var transform_v01 = p01;
		var transform_v11 = p11;
		var transform_v21 = p21;
		var meshStateId = this.mesh.getStateId();
		var _this = this.batchEntry;
		var result = this.transformId != null && nodeEdge.globalTransformId == this.transformId && (this.renderRGBAO != null && nodeEdge.renderRGBAO == this.renderRGBAO);
		this.transformId = nodeEdge.globalTransformId;
		this.renderRGBAO = nodeEdge.renderRGBAO;
		var test = !result || meshStateId != this.meshStateId;
		if(test == null) {
			test = true;
		}
		_this.isDirty = _this.isDirty || test;
		var _this1 = this.batchEntry;
		var batch = ctx.renderer2.getBatchFor(this.material,indexCount,_this1.themeId);
		if(_this1.check(batch,vertexCount,indexCount)) {
			_this1.sync(batch,vertexCount,indexCount);
		} else {
			_this1.isDirty = false;
		}
		var batch1 = batch;
		if(this.batchEntry.isDirty) {
			this.meshStateId = meshStateId;
			var vfrom = batch1.vertexCount;
			var ifrom = batch1.indexCount;
			if(batch1._vertices == null) {
				batch1._vertices = batch1.vertexBuffer.lock();
				if(batch1.isDynamicIndices) {
					batch1._indices = batch1.indexBuffer.lock();
				}
			}
			var batchVertices = batch1._vertices;
			var _g = 0;
			while(_g < vertexCount) {
				var i = _g++;
				var j = i << 3;
				var x = vertices[j];
				var y = vertices[j + 1];
				var r = vertices[j + 4] * nodeEdge.renderColorR;
				var g = vertices[j + 5] * nodeEdge.renderColorG;
				var b = vertices[j + 6] * nodeEdge.renderColorB;
				var a = vertices[j + 7] * nodeEdge.renderColorA * nodeEdge.renderOpacity;
				var position = (vfrom + i) * 9;
				batchVertices[position] = transform_v00 * x + transform_v10 * y + transform_v20;
				batchVertices[position + 1] = transform_v01 * x + transform_v11 * y + transform_v21;
				batchVertices[position + 2] = -5.0;
				batchVertices[position + 3] = vertices[j + 2];
				batchVertices[position + 4] = vertices[j + 3];
				batchVertices[position + 5] = r;
				batchVertices[position + 6] = g;
				batchVertices[position + 7] = b;
				batchVertices[position + 8] = a;
			}
			if(batch1._vertices == null) {
				batch1._vertices = batch1.vertexBuffer.lock();
				if(batch1.isDynamicIndices) {
					batch1._indices = batch1.indexBuffer.lock();
				}
			}
			var batchIndices = batch1._indices;
			var _g2 = 0;
			while(_g2 < indexCount) {
				var i1 = _g2++;
				batchIndices[ifrom + i1] = vfrom + indices[i1];
			}
		}
		this.batchEntry.shiftCounters();
	}
	,ensureImageClaim: function() {
		var image = this.mesh.getImage();
		if(this.claimedImage != image) {
			this.releaseClaimedImage();
			if(image != null) {
				image.claim(this.token);
				this.claimedImage = image;
			}
		}
	}
	,releaseClaimedImage: function() {
		if(this.claimedImage != null) {
			this.claimedImage.release(this.token);
			this.claimedImage = null;
		}
	}
	,__class__: banan_display_MeshDisplayEdge
});
var banan_display_UpdatableDisplayEdge = function(type,render2Context) {
	banan_display_DisplayEdge.call(this,type,render2Context);
};
$hxClasses["banan.display.UpdatableDisplayEdge"] = banan_display_UpdatableDisplayEdge;
banan_display_UpdatableDisplayEdge.__name__ = "banan.display.UpdatableDisplayEdge";
banan_display_UpdatableDisplayEdge.__super__ = banan_display_DisplayEdge;
banan_display_UpdatableDisplayEdge.prototype = $extend(banan_display_DisplayEdge.prototype,{
	update: function(time) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"UpdatableDisplayEdge.hx:9","",null));
	}
	,isUpdatable: function() {
		return true;
	}
	,asUpdatable: function() {
		return this;
	}
	,__class__: banan_display_UpdatableDisplayEdge
});
var banan_display_MultiDisplayEdge = function() {
	this.list = [];
	banan_display_UpdatableDisplayEdge.call(this,banan_display_DisplayEdgeType.Multi,null);
};
$hxClasses["banan.display.MultiDisplayEdge"] = banan_display_MultiDisplayEdge;
banan_display_MultiDisplayEdge.__name__ = "banan.display.MultiDisplayEdge";
banan_display_MultiDisplayEdge.__super__ = banan_display_UpdatableDisplayEdge;
banan_display_MultiDisplayEdge.prototype = $extend(banan_display_UpdatableDisplayEdge.prototype,{
	list: null
	,setList: function(newList) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var edge = _g1[_g];
			++_g;
			if(newList.indexOf(edge) < 0) {
				edge.dispose();
			}
		}
		this.list = newList;
	}
	,setBatchThemeId: function(themeId) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) _g1[_g++].setBatchThemeId(themeId);
	}
	,muteDebug: function() {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) _g1[_g++].muteDebug();
	}
	,render: function(nodeEdge,ctx) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) _g1[_g++].render(nodeEdge,ctx);
	}
	,update: function(time) {
		var _g = 0;
		var _g1 = this.list;
		while(_g < _g1.length) {
			var edge = _g1[_g];
			++_g;
			if(edge.isUpdatable()) {
				edge.asUpdatable().update(time);
			}
		}
	}
	,getHash: function() {
		var _this = this.list;
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			result[i] = _this[i].getHash();
		}
		return "multi_" + result.join("_");
	}
	,asMulti: function() {
		return this;
	}
	,dispose: function() {
		while(this.list.length > 0) this.list.pop().dispose();
	}
	,__class__: banan_display_MultiDisplayEdge
});
var banan_display_MultiImageDisplayEdge = function(render2Context) {
	banan_display_DisplayEdge.call(this,banan_display_DisplayEdgeType.MultiImage,render2Context);
	this.parts = [];
	this.partsLength = 0;
	this.stateId = 0;
	this.renderStateId = this.stateId;
	this.render2Context = render2Context;
	this.token = new banan_resource_ResourceToken();
	this.quad = new banan_render_Quad();
};
$hxClasses["banan.display.MultiImageDisplayEdge"] = banan_display_MultiImageDisplayEdge;
banan_display_MultiImageDisplayEdge.__name__ = "banan.display.MultiImageDisplayEdge";
banan_display_MultiImageDisplayEdge.__super__ = banan_display_DisplayEdge;
banan_display_MultiImageDisplayEdge.prototype = $extend(banan_display_DisplayEdge.prototype,{
	parts: null
	,partsLength: null
	,stateId: null
	,renderStateId: null
	,render2Context: null
	,token: null
	,quad: null
	,asMultiImage: function() {
		return this;
	}
	,resetParts: function() {
		this.partsLength = 0;
		this.stateId++;
	}
	,addPart: function(image,x,y,color,opacity) {
		var current = image.current;
		var material = banan_render_render2_material_MaterialHelper.makeDefaultMaterial(this.render2Context.materialFactory,banan_render_render2_material_EPrimitiveType.Quad,null,image.get_texture());
		if(this.parts[this.partsLength] != null) {
			var t = this.parts[this.partsLength];
			t.material = material;
			t.x = x;
			t.y = y;
			t.tx = current.tx;
			t.ty = current.ty;
			t.tSizeX = current.tSizeX;
			t.tSizeY = current.tSizeY;
			t.offsetX = image.tOffsetX * image.textureScale;
			t.offsetY = image.tOffsetY * image.textureScale;
			t.stSizeX = image.stSizeX;
			t.stSizeY = image.stSizeY;
			t.colorA = (color >>> 24) * 0.00392156862745098;
			t.colorR = ((color & 16711680) >>> 16) * 0.00392156862745098;
			t.colorG = ((color & 65280) >>> 8) * 0.00392156862745098;
			t.colorB = (color & 255) * 0.00392156862745098;
			t.opacity = opacity;
		} else {
			this.parts[this.partsLength] = { material : material, x : x, y : y, tx : current.tx, ty : current.ty, tSizeX : current.tSizeX, tSizeY : current.tSizeY, offsetX : image.tOffsetX * image.textureScale, offsetY : image.tOffsetY * image.textureScale, stSizeX : image.stSizeX, stSizeY : image.stSizeY, colorA : (color >>> 24) * 0.00392156862745098, colorR : ((color & 16711680) >>> 16) * 0.00392156862745098, colorG : ((color & 65280) >>> 8) * 0.00392156862745098, colorB : (color & 255) * 0.00392156862745098, opacity : opacity};
		}
		this.parts[this.partsLength++].material.texture.claim(this.token);
		this.stateId++;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.parts;
		while(_g < _g1.length) _g1[_g++].material.texture.release(this.token);
	}
	,render: function(nodeEdge,ctx) {
		if(nodeEdge.globalTransformId == -1 || nodeEdge.parent != nodeEdge._globalTransformParent) {
			nodeEdge.validateGlobalTransformRecursively();
		}
		var p00 = nodeEdge._v00;
		var p10 = nodeEdge._v10;
		var p20 = nodeEdge._v20;
		var p01 = nodeEdge._v01;
		var p11 = nodeEdge._v11;
		var p21 = nodeEdge._v21;
		if(p21 == null) {
			p21 = 0.0;
		}
		if(p11 == null) {
			p11 = 1.0;
		}
		if(p01 == null) {
			p01 = 0.0;
		}
		if(p20 == null) {
			p20 = 0.0;
		}
		if(p10 == null) {
			p10 = 0.0;
		}
		if(p00 == null) {
			p00 = 1.0;
		}
		var transform_v00 = p00;
		var transform_v10 = p10;
		var transform_v20 = p20;
		var transform_v01 = p01;
		var transform_v11 = p11;
		var transform_v21 = p21;
		var isStateIdChanged = this.renderStateId != this.stateId;
		this.renderStateId = this.stateId;
		var _this = this.batchEntry;
		_this._dirtyOnShift = false;
		_this.currentIdx = 0;
		var _this1 = this.batchEntry;
		var value;
		if(!isStateIdChanged) {
			var result = this.transformId != null && nodeEdge.globalTransformId == this.transformId && (this.renderRGBAO != null && nodeEdge.renderRGBAO == this.renderRGBAO);
			this.transformId = nodeEdge.globalTransformId;
			this.renderRGBAO = nodeEdge.renderRGBAO;
			value = !result;
		} else {
			value = true;
		}
		_this1._dirtyOnShift = _this1._dirtyOnShift || value;
		var _g = 0;
		var _g1 = this.partsLength;
		while(_g < _g1) {
			var part = this.parts[_g++];
			if(part.material.texture.get_isLoaded()) {
				var l = -part.offsetX + part.x;
				var t = -part.offsetY + part.y;
				var r = l + part.stSizeX;
				var b = t + part.stSizeY;
				var _this2 = this.quad;
				_this2.texture = part.material.texture;
				_this2.x0 = l;
				_this2.y0 = t;
				_this2.x1 = r;
				_this2.y1 = t;
				_this2.x2 = r;
				_this2.y2 = b;
				_this2.x3 = l;
				_this2.y3 = b;
				_this2.tx0 = part.tx;
				_this2.ty0 = part.ty;
				_this2.tx1 = part.tx + part.tSizeX;
				_this2.ty1 = part.ty + part.tSizeY;
				_this2.isNormalizedCalculated = false;
				var x = _this2.x0;
				var y = _this2.y0;
				var x1 = _this2.x1;
				var y1 = _this2.y1;
				var x2 = _this2.x2;
				var y2 = _this2.y2;
				var x3 = _this2.x3;
				var y3 = _this2.y3;
				_this2.x0 = transform_v00 * x + transform_v10 * y + transform_v20;
				_this2.y0 = transform_v01 * x + transform_v11 * y + transform_v21;
				_this2.x1 = transform_v00 * x1 + transform_v10 * y1 + transform_v20;
				_this2.y1 = transform_v01 * x1 + transform_v11 * y1 + transform_v21;
				_this2.x2 = transform_v00 * x2 + transform_v10 * y2 + transform_v20;
				_this2.y2 = transform_v01 * x2 + transform_v11 * y2 + transform_v21;
				_this2.x3 = transform_v00 * x3 + transform_v10 * y3 + transform_v20;
				_this2.y3 = transform_v01 * x3 + transform_v11 * y3 + transform_v21;
				var r1 = part.colorR * nodeEdge.renderColorR;
				var g = part.colorG * nodeEdge.renderColorG;
				var b1 = part.colorB * nodeEdge.renderColorB;
				var a = part.colorA * nodeEdge.renderColorA;
				var o = part.opacity * nodeEdge.renderOpacity;
				var renderer = ctx.renderer2;
				var material = part.material;
				var _this3 = this.batchEntry;
				if(_this3.ext == null) {
					_this3.ext = [_this3];
				}
				if(_this3.ext[_this3.currentIdx] == null) {
					var batchEntry = new banan_render_render2_batch_BatchEntry(_this3.render2Context.getDrawableId());
					batchEntry.themeId = _this3.themeId;
					_this3.ext[_this3.currentIdx] = batchEntry;
				}
				var result1 = _this3.ext[_this3.currentIdx++];
				var test = _this3._dirtyOnShift;
				if(test == null) {
					test = true;
				}
				result1.isDirty = result1.isDirty || test;
				var quad = this.quad;
				var batch = renderer.getBatchFor(material,6,result1.themeId);
				if(result1.check(batch,4,6)) {
					result1.sync(batch,4,6);
				} else {
					result1.isDirty = false;
				}
				var batch1 = batch;
				if(result1.isDirty) {
					if(batch1._vertices == null) {
						batch1._vertices = batch1.vertexBuffer.lock();
						if(batch1.isDynamicIndices) {
							batch1._indices = batch1.indexBuffer.lock();
						}
					}
					var vbuff = batch1._vertices;
					var vfrom = batch1.vertexCount;
					if(!quad.isNormalizedCalculated) {
						quad.isNormalizedCalculated = true;
						quad.tx0_norm = quad.tx0 / quad.texture.sizeX;
						quad.tx1_norm = quad.tx1 / quad.texture.sizeX;
						quad.ty0_norm = quad.ty0 / quad.texture.sizeY;
						quad.ty1_norm = quad.ty1 / quad.texture.sizeY;
					}
					var tx0 = quad.tx0_norm;
					var ty0 = quad.ty0_norm;
					var tx1 = quad.tx1_norm;
					var ty1 = quad.ty1_norm;
					var a1 = a * o;
					var position = vfrom * 9;
					vbuff[position] = quad.x0;
					vbuff[position + 1] = quad.y0;
					vbuff[position + 2] = -5.0;
					vbuff[position + 3] = tx0;
					vbuff[position + 4] = ty0;
					vbuff[position + 5] = r1;
					vbuff[position + 6] = g;
					vbuff[position + 7] = b1;
					vbuff[position + 8] = a1;
					var position1 = (vfrom + 1) * 9;
					vbuff[position1] = quad.x1;
					vbuff[position1 + 1] = quad.y1;
					vbuff[position1 + 2] = -5.0;
					vbuff[position1 + 3] = tx1;
					vbuff[position1 + 4] = ty0;
					vbuff[position1 + 5] = r1;
					vbuff[position1 + 6] = g;
					vbuff[position1 + 7] = b1;
					vbuff[position1 + 8] = a1;
					var position2 = (vfrom + 2) * 9;
					vbuff[position2] = quad.x2;
					vbuff[position2 + 1] = quad.y2;
					vbuff[position2 + 2] = -5.0;
					vbuff[position2 + 3] = tx1;
					vbuff[position2 + 4] = ty1;
					vbuff[position2 + 5] = r1;
					vbuff[position2 + 6] = g;
					vbuff[position2 + 7] = b1;
					vbuff[position2 + 8] = a1;
					var position3 = (vfrom + 3) * 9;
					vbuff[position3] = quad.x3;
					vbuff[position3 + 1] = quad.y3;
					vbuff[position3 + 2] = -5.0;
					vbuff[position3 + 3] = tx0;
					vbuff[position3 + 4] = ty1;
					vbuff[position3 + 5] = r1;
					vbuff[position3 + 6] = g;
					vbuff[position3 + 7] = b1;
					vbuff[position3 + 8] = a1;
				}
				result1.shiftCounters();
			}
		}
	}
	,__class__: banan_display_MultiImageDisplayEdge
});
var banan_display_NodeEdge = function() {
	this._globalTransformParent = null;
	this._v21 = 0.0;
	this._v11 = 1.0;
	this._v01 = 0.0;
	this._v20 = 0.0;
	this._v10 = 0.0;
	this._v00 = 1.0;
	this._isChildrenVisible = new banan_utils_modifiable_LockModifiable(true,new banan_utils_modifiable_value_SimpleValue());
	this._isVisible = new banan_utils_modifiable_LockModifiable(true,new banan_utils_modifiable_value_SimpleValue());
	this._entity = null;
	this._isBoundsValid = false;
	this._inverseTransform = new banan_math_Matrix3Storage();
	this._isInverseTransformValid = false;
	this.debugTextDisplay = null;
	this.debugStrength = 2.0;
	this.debugColor = banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
	this.isDebugDraw = false;
	this.globalTransformId = -1;
	this.lastChild = null;
	this.firstChild = null;
	this.prev = null;
	this.next = null;
	this.parent = null;
	this.isWillDisposeWithParent = true;
	this.isChildrenTouchable = new banan_utils_modifiable_LockModifiable(true,new banan_utils_modifiable_value_SimpleValue());
	this.interactMode = new banan_display_InteractModeMergeModifiable();
	this.disabledOpacityMods = new haxe_ds_StringMap();
	this.opacityMods = new haxe_ds_StringMap();
	this.exitIdx = -1;
	this.renderPass = -1;
	this.isFlushDelayed = false;
	this.isScissorChildren = false;
	this.areaSizeY = 0.0;
	this.areaSizeX = 0.0;
	this.areaY = 0.0;
	this.areaX = 0.0;
	this.angleSin = 0.0;
	this.angleCos = 1.0;
	this.angle = 0.0;
	this.scaleY = 1.0;
	this.scaleX = 1.0;
	this.pivotY = 0.0;
	this.pivotX = 0.0;
	this.y = 0.0;
	this.x = 0.0;
	this.color = banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
	var _gthis = this;
	this.renderColorA = (this.color >>> 24) * 0.00392156862745098;
	this.renderColorR = ((this.color & 16711680) >>> 16) * 0.00392156862745098;
	this.renderColorG = ((this.color & 65280) >>> 8) * 0.00392156862745098;
	this.renderColorB = (this.color & 255) * 0.00392156862745098;
	var this1 = this.parent;
	if(this1 != null) {
		_gthis.renderColorA *= this1.renderColorA;
		_gthis.renderColorR *= this1.renderColorR;
		_gthis.renderColorG *= this1.renderColorG;
		_gthis.renderColorB *= this1.renderColorB;
	}
	var a = this.renderColorA * this.renderOpacity;
	if(a == null) {
		a = 1;
	}
	this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
	var child = this.firstChild;
	while(child != null) {
		var nodeEdge = child;
		nodeEdge.renderColorA = (nodeEdge.color >>> 24) * 0.00392156862745098;
		nodeEdge.renderColorR = ((nodeEdge.color & 16711680) >>> 16) * 0.00392156862745098;
		nodeEdge.renderColorG = ((nodeEdge.color & 65280) >>> 8) * 0.00392156862745098;
		nodeEdge.renderColorB = (nodeEdge.color & 255) * 0.00392156862745098;
		var this2 = nodeEdge.parent;
		if(this2 != null) {
			nodeEdge.renderColorA *= this2.renderColorA;
			nodeEdge.renderColorR *= this2.renderColorR;
			nodeEdge.renderColorG *= this2.renderColorG;
			nodeEdge.renderColorB *= this2.renderColorB;
		}
		var a1 = nodeEdge.renderColorA * nodeEdge.renderOpacity;
		if(a1 == null) {
			a1 = 1;
		}
		nodeEdge.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,a1);
		var child1 = nodeEdge.firstChild;
		while(child1 != null) {
			var nodeEdge1 = child1;
			nodeEdge1.renderColorA = (nodeEdge1.color >>> 24) * 0.00392156862745098;
			nodeEdge1.renderColorR = ((nodeEdge1.color & 16711680) >>> 16) * 0.00392156862745098;
			nodeEdge1.renderColorG = ((nodeEdge1.color & 65280) >>> 8) * 0.00392156862745098;
			nodeEdge1.renderColorB = (nodeEdge1.color & 255) * 0.00392156862745098;
			var this3 = nodeEdge1.parent;
			if(this3 != null) {
				nodeEdge1.renderColorA *= this3.renderColorA;
				nodeEdge1.renderColorR *= this3.renderColorR;
				nodeEdge1.renderColorG *= this3.renderColorG;
				nodeEdge1.renderColorB *= this3.renderColorB;
			}
			var a2 = nodeEdge1.renderColorA * nodeEdge1.renderOpacity;
			if(a2 == null) {
				a2 = 1;
			}
			nodeEdge1.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge1.renderColorR,nodeEdge1.renderColorG,nodeEdge1.renderColorB,a2);
			var child2 = nodeEdge1.firstChild;
			while(child2 != null) {
				var nodeEdge2 = child2;
				nodeEdge2.recalcRenderColor(null,null);
				child2 = nodeEdge2.next;
			}
			child1 = nodeEdge1.next;
		}
		child = nodeEdge.next;
	}
	this.origOpacity = 1.0;
	this.modOpacity = this.origOpacity;
	var _g = new haxe_iterators_MapKeyValueIterator(this.opacityMods);
	while(_g.hasNext()) {
		var _g1 = _g.next();
		var name = _g1.key;
		var value = _g1.value;
		var _this = this.disabledOpacityMods;
		if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
			this.modOpacity *= value;
		}
	}
	this.renderOpacity = this.modOpacity;
	var this4 = this.parent;
	if(this4 != null) {
		this.renderOpacity *= this4.renderOpacity;
	}
	var a3 = this.renderColorA * this.renderOpacity;
	if(a3 == null) {
		a3 = 1;
	}
	this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a3);
	var child3 = this.firstChild;
	while(child3 != null) {
		var nodeEdge3 = child3;
		nodeEdge3.renderOpacity = nodeEdge3.modOpacity;
		var this5 = nodeEdge3.parent;
		if(this5 != null) {
			nodeEdge3.renderOpacity *= this5.renderOpacity;
		}
		var a4 = nodeEdge3.renderColorA * nodeEdge3.renderOpacity;
		if(a4 == null) {
			a4 = 1;
		}
		nodeEdge3.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge3.renderColorR,nodeEdge3.renderColorG,nodeEdge3.renderColorB,a4);
		var child4 = nodeEdge3.firstChild;
		while(child4 != null) {
			var nodeEdge4 = child4;
			nodeEdge4.renderOpacity = nodeEdge4.modOpacity;
			var this6 = nodeEdge4.parent;
			if(this6 != null) {
				nodeEdge4.renderOpacity *= this6.renderOpacity;
			}
			var a5 = nodeEdge4.renderColorA * nodeEdge4.renderOpacity;
			if(a5 == null) {
				a5 = 1;
			}
			nodeEdge4.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge4.renderColorR,nodeEdge4.renderColorG,nodeEdge4.renderColorB,a5);
			var child5 = nodeEdge4.firstChild;
			while(child5 != null) {
				var nodeEdge5 = child5;
				nodeEdge5.recalcRenderOpacity(null,null);
				child5 = nodeEdge5.next;
			}
			child4 = nodeEdge4.next;
		}
		child3 = nodeEdge3.next;
	}
};
$hxClasses["banan.display.NodeEdge"] = banan_display_NodeEdge;
banan_display_NodeEdge.__name__ = "banan.display.NodeEdge";
banan_display_NodeEdge.prototype = {
	x: null
	,y: null
	,pivotX: null
	,pivotY: null
	,scaleX: null
	,scaleY: null
	,angle: null
	,angleCos: null
	,angleSin: null
	,areaX: null
	,areaY: null
	,areaSizeX: null
	,areaSizeY: null
	,renderScissorIndex: null
	,isScissorChildren: null
	,isFlushDelayed: null
	,isRenderFlushDelayed: null
	,renderPass: null
	,exitIdx: null
	,postEffectPipeline: null
	,color: null
	,renderColorA: null
	,renderColorR: null
	,renderColorG: null
	,renderColorB: null
	,set_color: function(value) {
		this.color = value;
		var _gthis = this;
		this.renderColorA = (this.color >>> 24) * 0.00392156862745098;
		this.renderColorR = ((this.color & 16711680) >>> 16) * 0.00392156862745098;
		this.renderColorG = ((this.color & 65280) >>> 8) * 0.00392156862745098;
		this.renderColorB = (this.color & 255) * 0.00392156862745098;
		var this1 = this.parent;
		if(this1 != null) {
			_gthis.renderColorA *= this1.renderColorA;
			_gthis.renderColorR *= this1.renderColorR;
			_gthis.renderColorG *= this1.renderColorG;
			_gthis.renderColorB *= this1.renderColorB;
		}
		var a = this.renderColorA * this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
		var child = this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			nodeEdge.renderColorA = (nodeEdge.color >>> 24) * 0.00392156862745098;
			nodeEdge.renderColorR = ((nodeEdge.color & 16711680) >>> 16) * 0.00392156862745098;
			nodeEdge.renderColorG = ((nodeEdge.color & 65280) >>> 8) * 0.00392156862745098;
			nodeEdge.renderColorB = (nodeEdge.color & 255) * 0.00392156862745098;
			var this2 = nodeEdge.parent;
			if(this2 != null) {
				nodeEdge.renderColorA *= this2.renderColorA;
				nodeEdge.renderColorR *= this2.renderColorR;
				nodeEdge.renderColorG *= this2.renderColorG;
				nodeEdge.renderColorB *= this2.renderColorB;
			}
			var a1 = nodeEdge.renderColorA * nodeEdge.renderOpacity;
			if(a1 == null) {
				a1 = 1;
			}
			nodeEdge.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,a1);
			var child1 = nodeEdge.firstChild;
			while(child1 != null) {
				var nodeEdge1 = child1;
				nodeEdge1.renderColorA = (nodeEdge1.color >>> 24) * 0.00392156862745098;
				nodeEdge1.renderColorR = ((nodeEdge1.color & 16711680) >>> 16) * 0.00392156862745098;
				nodeEdge1.renderColorG = ((nodeEdge1.color & 65280) >>> 8) * 0.00392156862745098;
				nodeEdge1.renderColorB = (nodeEdge1.color & 255) * 0.00392156862745098;
				var this3 = nodeEdge1.parent;
				if(this3 != null) {
					nodeEdge1.renderColorA *= this3.renderColorA;
					nodeEdge1.renderColorR *= this3.renderColorR;
					nodeEdge1.renderColorG *= this3.renderColorG;
					nodeEdge1.renderColorB *= this3.renderColorB;
				}
				var a2 = nodeEdge1.renderColorA * nodeEdge1.renderOpacity;
				if(a2 == null) {
					a2 = 1;
				}
				nodeEdge1.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge1.renderColorR,nodeEdge1.renderColorG,nodeEdge1.renderColorB,a2);
				var child2 = nodeEdge1.firstChild;
				while(child2 != null) {
					var nodeEdge2 = child2;
					nodeEdge2.recalcRenderColor(null,null);
					child2 = nodeEdge2.next;
				}
				child1 = nodeEdge1.next;
			}
			child = nodeEdge.next;
		}
		return value;
	}
	,recalcRenderColor: function(supress,deep) {
		if(deep == null) {
			deep = true;
		}
		if(supress == null) {
			supress = false;
		}
		var _gthis = this;
		this.renderColorA = (this.color >>> 24) * 0.00392156862745098;
		this.renderColorR = ((this.color & 16711680) >>> 16) * 0.00392156862745098;
		this.renderColorG = ((this.color & 65280) >>> 8) * 0.00392156862745098;
		this.renderColorB = (this.color & 255) * 0.00392156862745098;
		if(!supress) {
			var this1 = this.parent;
			if(this1 != null) {
				_gthis.renderColorA *= this1.renderColorA;
				_gthis.renderColorR *= this1.renderColorR;
				_gthis.renderColorG *= this1.renderColorG;
				_gthis.renderColorB *= this1.renderColorB;
			}
		}
		var a = this.renderColorA * this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
		if(deep) {
			var child = this.firstChild;
			while(child != null) {
				var nodeEdge = child;
				nodeEdge.recalcRenderColor(null,null);
				child = nodeEdge.next;
			}
		}
	}
	,renderOpacity: null
	,origOpacity: null
	,modOpacity: null
	,opacityMods: null
	,disabledOpacityMods: null
	,addOpacityMod: function(value,name) {
		var _this = this.opacityMods;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,value);
		} else {
			_this.h[name] = value;
		}
		this.modOpacity = this.origOpacity;
		var _g = new haxe_iterators_MapKeyValueIterator(this.opacityMods);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var name1 = _g1.key;
			var value1 = _g1.value;
			var _this1 = this.disabledOpacityMods;
			if(!(__map_reserved[name1] != null ? _this1.existsReserved(name1) : _this1.h.hasOwnProperty(name1))) {
				this.modOpacity *= value1;
			}
		}
		this.renderOpacity = this.modOpacity;
		var this1 = this.parent;
		if(this1 != null) {
			this.renderOpacity *= this1.renderOpacity;
		}
		var a = this.renderColorA * this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
		var child = this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			nodeEdge.renderOpacity = nodeEdge.modOpacity;
			var this2 = nodeEdge.parent;
			if(this2 != null) {
				nodeEdge.renderOpacity *= this2.renderOpacity;
			}
			var a1 = nodeEdge.renderColorA * nodeEdge.renderOpacity;
			if(a1 == null) {
				a1 = 1;
			}
			nodeEdge.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,a1);
			var child1 = nodeEdge.firstChild;
			while(child1 != null) {
				var nodeEdge1 = child1;
				nodeEdge1.renderOpacity = nodeEdge1.modOpacity;
				var this3 = nodeEdge1.parent;
				if(this3 != null) {
					nodeEdge1.renderOpacity *= this3.renderOpacity;
				}
				var a2 = nodeEdge1.renderColorA * nodeEdge1.renderOpacity;
				if(a2 == null) {
					a2 = 1;
				}
				nodeEdge1.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge1.renderColorR,nodeEdge1.renderColorG,nodeEdge1.renderColorB,a2);
				var child2 = nodeEdge1.firstChild;
				while(child2 != null) {
					var nodeEdge2 = child2;
					nodeEdge2.recalcRenderOpacity(null,null);
					child2 = nodeEdge2.next;
				}
				child1 = nodeEdge1.next;
			}
			child = nodeEdge.next;
		}
	}
	,removeOpacityMod: function(name) {
		this.opacityMods.remove(name);
		this.modOpacity = this.origOpacity;
		var _g = new haxe_iterators_MapKeyValueIterator(this.opacityMods);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var name1 = _g1.key;
			var value = _g1.value;
			var _this = this.disabledOpacityMods;
			if(!(__map_reserved[name1] != null ? _this.existsReserved(name1) : _this.h.hasOwnProperty(name1))) {
				this.modOpacity *= value;
			}
		}
		this.renderOpacity = this.modOpacity;
		var this1 = this.parent;
		if(this1 != null) {
			this.renderOpacity *= this1.renderOpacity;
		}
		var a = this.renderColorA * this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
		var child = this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			nodeEdge.renderOpacity = nodeEdge.modOpacity;
			var this2 = nodeEdge.parent;
			if(this2 != null) {
				nodeEdge.renderOpacity *= this2.renderOpacity;
			}
			var a1 = nodeEdge.renderColorA * nodeEdge.renderOpacity;
			if(a1 == null) {
				a1 = 1;
			}
			nodeEdge.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,a1);
			var child1 = nodeEdge.firstChild;
			while(child1 != null) {
				var nodeEdge1 = child1;
				nodeEdge1.renderOpacity = nodeEdge1.modOpacity;
				var this3 = nodeEdge1.parent;
				if(this3 != null) {
					nodeEdge1.renderOpacity *= this3.renderOpacity;
				}
				var a2 = nodeEdge1.renderColorA * nodeEdge1.renderOpacity;
				if(a2 == null) {
					a2 = 1;
				}
				nodeEdge1.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge1.renderColorR,nodeEdge1.renderColorG,nodeEdge1.renderColorB,a2);
				var child2 = nodeEdge1.firstChild;
				while(child2 != null) {
					var nodeEdge2 = child2;
					nodeEdge2.recalcRenderOpacity(null,null);
					child2 = nodeEdge2.next;
				}
				child1 = nodeEdge1.next;
			}
			child = nodeEdge.next;
		}
	}
	,getOpacityMod: function(name) {
		var _this = this.opacityMods;
		var a = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(a != null) {
			return a;
		} else {
			return 1.0;
		}
	}
	,enableOpacityMod: function(name) {
		var _this = this.disabledOpacityMods;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,true);
		} else {
			_this.h[name] = true;
		}
		this.modOpacity = this.origOpacity;
		var _g = new haxe_iterators_MapKeyValueIterator(this.opacityMods);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var name1 = _g1.key;
			var value = _g1.value;
			var _this1 = this.disabledOpacityMods;
			if(!(__map_reserved[name1] != null ? _this1.existsReserved(name1) : _this1.h.hasOwnProperty(name1))) {
				this.modOpacity *= value;
			}
		}
		this.renderOpacity = this.modOpacity;
		var this1 = this.parent;
		if(this1 != null) {
			this.renderOpacity *= this1.renderOpacity;
		}
		var a = this.renderColorA * this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
		var child = this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			nodeEdge.renderOpacity = nodeEdge.modOpacity;
			var this2 = nodeEdge.parent;
			if(this2 != null) {
				nodeEdge.renderOpacity *= this2.renderOpacity;
			}
			var a1 = nodeEdge.renderColorA * nodeEdge.renderOpacity;
			if(a1 == null) {
				a1 = 1;
			}
			nodeEdge.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,a1);
			var child1 = nodeEdge.firstChild;
			while(child1 != null) {
				var nodeEdge1 = child1;
				nodeEdge1.renderOpacity = nodeEdge1.modOpacity;
				var this3 = nodeEdge1.parent;
				if(this3 != null) {
					nodeEdge1.renderOpacity *= this3.renderOpacity;
				}
				var a2 = nodeEdge1.renderColorA * nodeEdge1.renderOpacity;
				if(a2 == null) {
					a2 = 1;
				}
				nodeEdge1.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge1.renderColorR,nodeEdge1.renderColorG,nodeEdge1.renderColorB,a2);
				var child2 = nodeEdge1.firstChild;
				while(child2 != null) {
					var nodeEdge2 = child2;
					nodeEdge2.recalcRenderOpacity(null,null);
					child2 = nodeEdge2.next;
				}
				child1 = nodeEdge1.next;
			}
			child = nodeEdge.next;
		}
	}
	,disableOpacityMod: function(name) {
		this.disabledOpacityMods.remove(name);
		this.modOpacity = this.origOpacity;
		var _g = new haxe_iterators_MapKeyValueIterator(this.opacityMods);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var name1 = _g1.key;
			var value = _g1.value;
			var _this = this.disabledOpacityMods;
			if(!(__map_reserved[name1] != null ? _this.existsReserved(name1) : _this.h.hasOwnProperty(name1))) {
				this.modOpacity *= value;
			}
		}
		this.renderOpacity = this.modOpacity;
		var this1 = this.parent;
		if(this1 != null) {
			this.renderOpacity *= this1.renderOpacity;
		}
		var a = this.renderColorA * this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
		var child = this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			nodeEdge.renderOpacity = nodeEdge.modOpacity;
			var this2 = nodeEdge.parent;
			if(this2 != null) {
				nodeEdge.renderOpacity *= this2.renderOpacity;
			}
			var a1 = nodeEdge.renderColorA * nodeEdge.renderOpacity;
			if(a1 == null) {
				a1 = 1;
			}
			nodeEdge.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,a1);
			var child1 = nodeEdge.firstChild;
			while(child1 != null) {
				var nodeEdge1 = child1;
				nodeEdge1.renderOpacity = nodeEdge1.modOpacity;
				var this3 = nodeEdge1.parent;
				if(this3 != null) {
					nodeEdge1.renderOpacity *= this3.renderOpacity;
				}
				var a2 = nodeEdge1.renderColorA * nodeEdge1.renderOpacity;
				if(a2 == null) {
					a2 = 1;
				}
				nodeEdge1.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge1.renderColorR,nodeEdge1.renderColorG,nodeEdge1.renderColorB,a2);
				var child2 = nodeEdge1.firstChild;
				while(child2 != null) {
					var nodeEdge2 = child2;
					nodeEdge2.recalcRenderOpacity(null,null);
					child2 = nodeEdge2.next;
				}
				child1 = nodeEdge1.next;
			}
			child = nodeEdge.next;
		}
	}
	,get_opacity: function() {
		return this.modOpacity;
	}
	,set_opacity: function(value) {
		this.origOpacity = value;
		this.modOpacity = this.origOpacity;
		var _g = new haxe_iterators_MapKeyValueIterator(this.opacityMods);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var name = _g1.key;
			var value1 = _g1.value;
			var _this = this.disabledOpacityMods;
			if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
				this.modOpacity *= value1;
			}
		}
		this.renderOpacity = this.modOpacity;
		var this1 = this.parent;
		if(this1 != null) {
			this.renderOpacity *= this1.renderOpacity;
		}
		var a = this.renderColorA * this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
		var child = this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			nodeEdge.renderOpacity = nodeEdge.modOpacity;
			var this2 = nodeEdge.parent;
			if(this2 != null) {
				nodeEdge.renderOpacity *= this2.renderOpacity;
			}
			var a1 = nodeEdge.renderColorA * nodeEdge.renderOpacity;
			if(a1 == null) {
				a1 = 1;
			}
			nodeEdge.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,a1);
			var child1 = nodeEdge.firstChild;
			while(child1 != null) {
				var nodeEdge1 = child1;
				nodeEdge1.renderOpacity = nodeEdge1.modOpacity;
				var this3 = nodeEdge1.parent;
				if(this3 != null) {
					nodeEdge1.renderOpacity *= this3.renderOpacity;
				}
				var a2 = nodeEdge1.renderColorA * nodeEdge1.renderOpacity;
				if(a2 == null) {
					a2 = 1;
				}
				nodeEdge1.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge1.renderColorR,nodeEdge1.renderColorG,nodeEdge1.renderColorB,a2);
				var child2 = nodeEdge1.firstChild;
				while(child2 != null) {
					var nodeEdge2 = child2;
					nodeEdge2.recalcRenderOpacity(null,null);
					child2 = nodeEdge2.next;
				}
				child1 = nodeEdge1.next;
			}
			child = nodeEdge.next;
		}
		return this.modOpacity;
	}
	,recalcModOpacity: function() {
		this.modOpacity = this.origOpacity;
		var _g = new haxe_iterators_MapKeyValueIterator(this.opacityMods);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var name = _g1.key;
			var value = _g1.value;
			var _this = this.disabledOpacityMods;
			if(!(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name))) {
				this.modOpacity *= value;
			}
		}
		this.renderOpacity = this.modOpacity;
		var this1 = this.parent;
		if(this1 != null) {
			this.renderOpacity *= this1.renderOpacity;
		}
		var a = this.renderColorA * this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
		var child = this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			nodeEdge.renderOpacity = nodeEdge.modOpacity;
			var this2 = nodeEdge.parent;
			if(this2 != null) {
				nodeEdge.renderOpacity *= this2.renderOpacity;
			}
			var a1 = nodeEdge.renderColorA * nodeEdge.renderOpacity;
			if(a1 == null) {
				a1 = 1;
			}
			nodeEdge.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,a1);
			var child1 = nodeEdge.firstChild;
			while(child1 != null) {
				var nodeEdge1 = child1;
				nodeEdge1.renderOpacity = nodeEdge1.modOpacity;
				var this3 = nodeEdge1.parent;
				if(this3 != null) {
					nodeEdge1.renderOpacity *= this3.renderOpacity;
				}
				var a2 = nodeEdge1.renderColorA * nodeEdge1.renderOpacity;
				if(a2 == null) {
					a2 = 1;
				}
				nodeEdge1.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge1.renderColorR,nodeEdge1.renderColorG,nodeEdge1.renderColorB,a2);
				var child2 = nodeEdge1.firstChild;
				while(child2 != null) {
					var nodeEdge2 = child2;
					nodeEdge2.recalcRenderOpacity(null,null);
					child2 = nodeEdge2.next;
				}
				child1 = nodeEdge1.next;
			}
			child = nodeEdge.next;
		}
		return this.modOpacity;
	}
	,recalcRenderOpacity: function(supress,deep) {
		if(deep == null) {
			deep = true;
		}
		if(supress == null) {
			supress = false;
		}
		this.renderOpacity = this.modOpacity;
		if(!supress) {
			var this1 = this.parent;
			if(this1 != null) {
				this.renderOpacity *= this1.renderOpacity;
			}
		}
		var a = this.renderColorA * this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
		if(deep) {
			var child = this.firstChild;
			while(child != null) {
				var nodeEdge = child;
				nodeEdge.recalcRenderOpacity(null,null);
				child = nodeEdge.next;
			}
		}
	}
	,recalcRenderRGBAO: function() {
		var a = this.renderColorA * this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
	}
	,renderRGBAO: null
	,interactMode: null
	,isChildrenTouchable: null
	,isWillDisposeWithParent: null
	,parent: null
	,next: null
	,prev: null
	,firstChild: null
	,lastChild: null
	,globalTransformId: null
	,isDebugDraw: null
	,debugColor: null
	,debugStrength: null
	,debugTextDisplay: null
	,_isInverseTransformValid: null
	,_inverseTransform: null
	,_isBoundsValid: null
	,_boundsTop: null
	,_boundsBottom: null
	,_boundsLeft: null
	,_boundsRight: null
	,_entity: null
	,_isVisible: null
	,_isChildrenVisible: null
	,_v00: null
	,_v10: null
	,_v20: null
	,_v01: null
	,_v11: null
	,_v21: null
	,_globalTransformParent: null
	,getEntity: function() {
		var sThis = this._entity;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
		}
		return sThis;
	}
	,isEntityDisposed: function() {
		return this._entity == null;
	}
	,isVisibleDeep: function() {
		var current = this;
		var result = null;
		while(result == null && current != null) {
			var sThis = current._entity;
			if(sThis == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
			}
			result = sThis.__component__banan_backend_RenderRootEdge;
			current = current.parent;
		}
		var isVisible = result != null && (this._isVisible.valueImpl.get_value() && this.scaleX != 0.0 && this.scaleY != 0.0);
		var current1 = this;
		while(isVisible && current1.parent != null) {
			var parent = current1.parent;
			isVisible = isVisible && (parent._isChildrenVisible.valueImpl.get_value() && parent.scaleX != 0.0 && parent.scaleY != 0.0);
			current1 = parent;
		}
		return isVisible;
	}
	,bakeTransform: function(v00,v01,v10,v11,v20,v21) {
		var scaleX = 0.0;
		var scaleY = 0.0;
		if(v01 == 0) {
			scaleX = v00;
		} else {
			scaleX = Math.sqrt(v00 * v00 + v01 * v01);
		}
		if(v10 == 0) {
			scaleY = v11;
		} else {
			scaleY = Math.sqrt(v10 * v10 + v11 * v11);
		}
		if(this.scaleX != scaleX) {
			this.scaleX = scaleX;
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
		if(this.scaleY != scaleY) {
			this.scaleY = scaleY;
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
		var angle = Math.atan2(v11,v10) - Math.PI * 0.5;
		if(angle != this.angle) {
			if(this.angle != angle) {
				if(angle == 0.0) {
					this.angle = 0.0;
					this.angleCos = 1.0;
					this.angleSin = 0.0;
				} else {
					this.angle = angle;
					this.angleCos = Math.cos(angle);
					this.angleSin = Math.sin(angle);
				}
				if(this.globalTransformId != -1) {
					this.invalidateTransform();
				}
			}
		}
		if(this.x != v20) {
			this.x = v20;
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
		if(this.y != v21) {
			this.y = v21;
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
		if(this.pivotX != 0.0) {
			this.pivotX = 0.0;
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
		if(this.pivotY != 0.0) {
			this.pivotY = 0.0;
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
	}
	,onRemoved: function() {
		this.renderOpacity = this.modOpacity;
		var this1 = this.parent;
		if(this1 != null) {
			this.renderOpacity *= this1.renderOpacity;
		}
		var a = this.renderColorA * this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
		var _gthis = this;
		this.renderColorA = (this.color >>> 24) * 0.00392156862745098;
		this.renderColorR = ((this.color & 16711680) >>> 16) * 0.00392156862745098;
		this.renderColorG = ((this.color & 65280) >>> 8) * 0.00392156862745098;
		this.renderColorB = (this.color & 255) * 0.00392156862745098;
		var this2 = this.parent;
		if(this2 != null) {
			_gthis.renderColorA *= this2.renderColorA;
			_gthis.renderColorR *= this2.renderColorR;
			_gthis.renderColorG *= this2.renderColorG;
			_gthis.renderColorB *= this2.renderColorB;
		}
		var a1 = this.renderColorA * this.renderOpacity;
		if(a1 == null) {
			a1 = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a1);
		var child = this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			nodeEdge.onRemoved();
			child = nodeEdge.next;
		}
	}
	,onAdded: function() {
		this.invalidateTransform();
		this.renderOpacity = this.modOpacity;
		var this1 = this.parent;
		if(this1 != null) {
			this.renderOpacity *= this1.renderOpacity;
		}
		var a = this.renderColorA * this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a);
		var _gthis = this;
		this.renderColorA = (this.color >>> 24) * 0.00392156862745098;
		this.renderColorR = ((this.color & 16711680) >>> 16) * 0.00392156862745098;
		this.renderColorG = ((this.color & 65280) >>> 8) * 0.00392156862745098;
		this.renderColorB = (this.color & 255) * 0.00392156862745098;
		var this2 = this.parent;
		if(this2 != null) {
			_gthis.renderColorA *= this2.renderColorA;
			_gthis.renderColorR *= this2.renderColorR;
			_gthis.renderColorG *= this2.renderColorG;
			_gthis.renderColorB *= this2.renderColorB;
		}
		var a1 = this.renderColorA * this.renderOpacity;
		if(a1 == null) {
			a1 = 1;
		}
		this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(this.renderColorR,this.renderColorG,this.renderColorB,a1);
		var child = this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			nodeEdge.onAdded();
			child = nodeEdge.next;
		}
	}
	,removeFromParent: function() {
		if(this.parent != null) {
			var _this = this.parent;
			if(this.parent != _this) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:636","child.parent == this",null));
			}
			if(_this.firstChild == this) {
				_this.firstChild = this.next;
			}
			if(_this.lastChild == this) {
				_this.lastChild = this.prev;
			}
			if(this.next != null) {
				this.next.prev = this.prev;
			}
			if(this.prev != null) {
				this.prev.next = this.next;
			}
			this.parent = null;
			this.next = null;
			this.prev = null;
			this.onRemoved();
		}
	}
	,addChild: function(child) {
		if(child.parent != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:443","child.parent.isNone",null));
		}
		child.parent = this;
		if(this.lastChild != null) {
			child.prev = this.lastChild;
			this.lastChild.next = child;
		} else {
			this.firstChild = child;
		}
		this.lastChild = child;
		child.onAdded();
	}
	,addFirstChild: function(child) {
		if(child.parent != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:460","child.parent.isNone",null));
		}
		child.parent = this;
		if(this.firstChild != null) {
			child.next = this.firstChild;
			this.firstChild.prev = child;
		} else {
			this.lastChild = child;
		}
		this.firstChild = child;
		child.onAdded();
	}
	,addChildAtPosition: function(child,position) {
		if(this.firstChild == null) {
			child.parent = this;
			child.next = null;
			child.prev = null;
			this.firstChild = this.lastChild = child;
			child.onAdded();
		} else if(position == 0) {
			if(child.parent != null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:460","child.parent.isNone",null));
			}
			child.parent = this;
			if(this.firstChild != null) {
				child.next = this.firstChild;
				this.firstChild.prev = child;
			} else {
				this.lastChild = child;
			}
			this.firstChild = child;
			child.onAdded();
		} else {
			var current = this.firstChild;
			var i = 0;
			while(i < position - 1) {
				var sThis = current.next;
				if(sThis == null) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:494","",null));
				}
				current = sThis;
				++i;
			}
			if(child.parent != null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:529","child.parent.isNone",null));
			}
			if(current.parent != this) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:530","after.parent == this",null));
			}
			child.parent = this;
			child.prev = current;
			child.next = current.next;
			current.next = child;
			if(child.next != null) {
				child.next.prev = child;
			} else {
				this.lastChild = child;
			}
			child.onAdded();
		}
	}
	,addChildBefore: function(child,before) {
		if(child.parent != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:504","child.parent.isNone",null));
		}
		if(before.parent != this) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:505","before.parent == this",null));
		}
		child.parent = this;
		child.next = before;
		child.prev = before.prev;
		before.prev = child;
		if(child.prev != null) {
			child.prev.next = child;
		} else {
			this.firstChild = child;
		}
		child.onAdded();
	}
	,addChildAfter: function(child,after) {
		if(child.parent != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:529","child.parent.isNone",null));
		}
		if(after.parent != this) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:530","after.parent == this",null));
		}
		child.parent = this;
		child.prev = after;
		child.next = after.next;
		after.next = child;
		if(child.next != null) {
			child.next.prev = child;
		} else {
			this.lastChild = child;
		}
		child.onAdded();
	}
	,getChildIndex: function(child) {
		if(child.parent != this) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:549","child.parent == this",null));
		}
		var n = 0;
		var sThis = this.firstChild;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:552","",null));
		}
		var current = sThis;
		while(current != child) {
			++n;
			var sThis1 = current.next;
			if(sThis1 == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:555","",null));
			}
			current = sThis1;
		}
		return n;
	}
	,swapBackward: function(child) {
		if(child.parent != this) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:562","child.parent == this",null));
		}
		var p = child.prev;
		var n = child.next;
		if(p != null) {
			var pp = p.prev;
			if(pp != null) {
				pp.next = child;
				child.prev = pp;
			} else {
				child.prev = null;
				this.firstChild = child;
			}
			child.next = p;
			p.prev = child;
			if(n != null) {
				p.next = n;
				n.prev = p;
			} else {
				p.next = null;
				this.lastChild = p;
			}
		}
	}
	,swapForward: function(child) {
		if(child.parent != this) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:599","child.parent == this",null));
		}
		var p = child.prev;
		var n = child.next;
		if(n != null) {
			var nn = n.next;
			if(nn != null) {
				child.next = nn;
				nn.prev = child;
			} else {
				child.next = null;
				this.lastChild = child;
			}
			n.next = child;
			child.prev = n;
			if(p != null) {
				p.next = n;
				n.prev = p;
			} else {
				n.prev = null;
				this.firstChild = n;
			}
		}
	}
	,removeChild: function(child) {
		if(child.parent != this) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:636","child.parent == this",null));
		}
		if(this.firstChild == child) {
			this.firstChild = child.next;
		}
		if(this.lastChild == child) {
			this.lastChild = child.prev;
		}
		if(child.next != null) {
			child.next.prev = child.prev;
		}
		if(child.prev != null) {
			child.prev.next = child.next;
		}
		child.parent = null;
		child.next = null;
		child.prev = null;
		child.onRemoved();
	}
	,removeChildren: function() {
		var child = this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			var nextChild = nodeEdge.next;
			nodeEdge.parent = null;
			nodeEdge.next = null;
			nodeEdge.prev = null;
			nodeEdge.onRemoved();
			child = nextChild;
		}
		this.firstChild = null;
		this.lastChild = null;
	}
	,iterateChildren: function(callback) {
		var child = this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			callback(nodeEdge);
			child = nodeEdge.next;
		}
	}
	,iterateTree: function(enterCallback,exitCallback,isBackward,getGoInside) {
		var into = true;
		var nodeEdge = this;
		while(true) {
			if(into) {
				if(!enterCallback(nodeEdge)) {
					break;
				}
			}
			var first = getGoInside(nodeEdge) ? isBackward ? nodeEdge.lastChild : nodeEdge.firstChild : null;
			if(into && first != null) {
				nodeEdge = first;
			} else {
				if(!exitCallback(nodeEdge) || nodeEdge == this) {
					break;
				}
				var next = isBackward ? nodeEdge.prev : nodeEdge.next;
				if(next != null) {
					into = true;
					nodeEdge = next;
				} else {
					into = false;
					var sThis = nodeEdge.parent;
					if(sThis == null) {
						throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:721","",null));
					}
					nodeEdge = sThis;
				}
			}
		}
	}
	,getIsVisible: function() {
		if(this._isVisible.valueImpl.get_value() && this.scaleX != 0.0) {
			return this.scaleY != 0.0;
		} else {
			return false;
		}
	}
	,getIsVisibleModifiable: function() {
		return this._isVisible;
	}
	,getIsChildrenVisible: function() {
		if(this._isChildrenVisible.valueImpl.get_value() && this.scaleX != 0.0) {
			return this.scaleY != 0.0;
		} else {
			return false;
		}
	}
	,getIsChildrenVisibleModifiable: function() {
		return this._isChildrenVisible;
	}
	,set_x: function(value) {
		if(this.x != value) {
			this.x = value;
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
		return value;
	}
	,set_y: function(value) {
		if(this.y != value) {
			this.y = value;
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
		return value;
	}
	,set_pivotX: function(value) {
		if(this.pivotX != value) {
			this.pivotX = value;
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
		return value;
	}
	,set_pivotY: function(value) {
		if(this.pivotY != value) {
			this.pivotY = value;
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
		return value;
	}
	,set_scaleX: function(value) {
		if(this.scaleX != value) {
			this.scaleX = value;
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
		return value;
	}
	,set_scaleY: function(value) {
		if(this.scaleY != value) {
			this.scaleY = value;
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
		return value;
	}
	,set_angle: function(value) {
		if(this.angle != value) {
			if(value == 0.0) {
				this.angle = 0.0;
				this.angleCos = 1.0;
				this.angleSin = 0.0;
			} else {
				this.angle = value;
				this.angleCos = Math.cos(value);
				this.angleSin = Math.sin(value);
			}
			if(this.globalTransformId != -1) {
				this.invalidateTransform();
			}
		}
		return value;
	}
	,invalidateTransform: function() {
		this.globalTransformId = -1;
		this._isInverseTransformValid = false;
		this._isBoundsValid = false;
		var _g__current;
		var _g__into = true;
		var _g__next = null;
		var _g__isDone = false;
		var _g__nodeEdge = this;
		var _g__rootParent = this.parent;
		var newNext = null;
		while(newNext == null) {
			if(_g__into) {
				newNext = _g__nodeEdge;
			}
			var firstChild = _g__nodeEdge.firstChild;
			if(_g__into && firstChild != null) {
				_g__nodeEdge = firstChild;
			} else {
				var nextSibling = _g__nodeEdge.next;
				if(_g__nodeEdge.parent == _g__rootParent) {
					_g__isDone = true;
					break;
				} else if(nextSibling != null) {
					_g__into = true;
					_g__nodeEdge = nextSibling;
				} else {
					_g__into = false;
					_g__nodeEdge = _g__nodeEdge.parent;
				}
			}
		}
		_g__next = newNext;
		while(_g__next != null) {
			var sThis = _g__next;
			if(sThis == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:911","",null));
			}
			_g__current = sThis;
			if(_g__isDone) {
				_g__next = null;
			} else {
				var newNext1 = null;
				while(newNext1 == null) {
					if(_g__into) {
						newNext1 = _g__nodeEdge;
					}
					var firstChild1 = _g__nodeEdge.firstChild;
					if(_g__into && firstChild1 != null) {
						_g__nodeEdge = firstChild1;
					} else {
						var nextSibling1 = _g__nodeEdge.next;
						if(_g__nodeEdge.parent == _g__rootParent) {
							_g__isDone = true;
							break;
						} else if(nextSibling1 != null) {
							_g__into = true;
							_g__nodeEdge = nextSibling1;
						} else {
							_g__into = false;
							_g__nodeEdge = _g__nodeEdge.parent;
						}
					}
				}
				_g__next = newNext1;
			}
			_g__current.globalTransformId = -1;
			_g__current._isInverseTransformValid = false;
			_g__current._isBoundsValid = false;
		}
	}
	,validateGlobalBounds: function() {
		this._isBoundsValid = true;
		var x = this.areaX;
		var y = this.areaY;
		var sizeX = this.areaSizeX;
		var sizeY = this.areaSizeY;
		var transform_m00 = 1;
		var transform_m10 = 0;
		var transform_m20 = 0;
		var transform_m01 = 0;
		var transform_m11 = 1;
		var transform_m21 = 0;
		if(this.globalTransformId == -1 || this.parent != this._globalTransformParent) {
			this.validateGlobalTransformRecursively();
		}
		var p00 = this._v00;
		var p10 = this._v10;
		var p20 = this._v20;
		var p01 = this._v01;
		var p11 = this._v11;
		var p21 = this._v21;
		if(p21 == null) {
			p21 = 0.0;
		}
		if(p11 == null) {
			p11 = 1.0;
		}
		if(p01 == null) {
			p01 = 0.0;
		}
		if(p20 == null) {
			p20 = 0.0;
		}
		if(p10 == null) {
			p10 = 0.0;
		}
		if(p00 == null) {
			p00 = 1.0;
		}
		transform_m00 = p00;
		transform_m10 = p10;
		transform_m20 = p20;
		transform_m01 = p01;
		transform_m11 = p11;
		transform_m21 = p21;
		var w = 0.0 * x + 0.0 * y + 1.0;
		var resultX = (transform_m00 * x + transform_m10 * y + transform_m20) / w;
		var resultY = (transform_m01 * x + transform_m11 * y + transform_m21) / w;
		var x1 = x + sizeX;
		var w1 = 0.0 * x1 + 0.0 * y + 1.0;
		var resultX1 = (transform_m00 * x1 + transform_m10 * y + transform_m20) / w1;
		var resultY1 = (transform_m01 * x1 + transform_m11 * y + transform_m21) / w1;
		var x2 = x + sizeX;
		var y1 = y + sizeY;
		var w2 = 0.0 * x2 + 0.0 * y1 + 1.0;
		var resultX2 = (transform_m00 * x2 + transform_m10 * y1 + transform_m20) / w2;
		var resultY2 = (transform_m01 * x2 + transform_m11 * y1 + transform_m21) / w2;
		var y2 = y + sizeY;
		var w3 = 0.0 * x + 0.0 * y2 + 1.0;
		var resultX3 = (transform_m00 * x + transform_m10 * y2 + transform_m20) / w3;
		var resultY3 = (transform_m01 * x + transform_m11 * y2 + transform_m21) / w3;
		var b = resultX2 < resultX3 ? resultX2 : resultX3;
		var b1 = resultX1 < b ? resultX1 : b;
		var left = resultX < b1 ? resultX : b1;
		var b2 = resultY2 < resultY3 ? resultY2 : resultY3;
		var b3 = resultY1 < b2 ? resultY1 : b2;
		var top = resultY < b3 ? resultY : b3;
		var b4 = resultX2 > resultX3 ? resultX2 : resultX3;
		var b5 = resultX1 > b4 ? resultX1 : b4;
		var b6 = resultY2 > resultY3 ? resultY2 : resultY3;
		var b7 = resultY1 > b6 ? resultY1 : b6;
		var rectangle_x = left;
		var rectangle_y = top;
		this._boundsLeft = rectangle_x;
		this._boundsRight = rectangle_x + ((resultX > b5 ? resultX : b5) - left);
		this._boundsTop = rectangle_y;
		this._boundsBottom = rectangle_y + ((resultY > b7 ? resultY : b7) - top);
	}
	,validateInverseTransform: function() {
		this._isInverseTransformValid = true;
		if(this.globalTransformId == -1 || this.parent != this._globalTransformParent) {
			this.validateGlobalTransformRecursively();
		}
		var p00 = this._v00;
		var p10 = this._v10;
		var p20 = this._v20;
		var p01 = this._v01;
		var p11 = this._v11;
		var p21 = this._v21;
		if(p21 == null) {
			p21 = 0.0;
		}
		if(p11 == null) {
			p11 = 1.0;
		}
		if(p01 == null) {
			p01 = 0.0;
		}
		if(p20 == null) {
			p20 = 0.0;
		}
		if(p10 == null) {
			p10 = 0.0;
		}
		if(p00 == null) {
			p00 = 1.0;
		}
		var _this_v00 = p00;
		var _this_v10 = p10;
		var _this_v20 = p20;
		var _this_v01 = p01;
		var _this_v11 = p11;
		var _this_v21 = p21;
		var c00 = _this_v11 - _this_v21 * 0.0;
		var c01 = _this_v10 - _this_v20 * 0.0;
		var c02 = _this_v10 * _this_v21 - _this_v20 * _this_v11;
		var det = _this_v00 * c00 - _this_v01 * c01 + 0.0 * c02;
		if(det == 0.0) {
			det = 5e-324;
		}
		if(!(Math.abs(det) > 0.0)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Matrix3.hx:94","Math.abs(det) > 0.0" + ": " + "determinant equals zero",{ "det" : det}));
		}
		var _this = this._inverseTransform;
		_this.m00 = c00 / det;
		_this.m10 = -c01 / det;
		_this.m20 = c02 / det;
		_this.m01 = -(_this_v01 - _this_v21 * 0.0) / det;
		_this.m11 = (_this_v00 - _this_v20 * 0.0) / det;
		_this.m21 = -(_this_v00 * _this_v21 - _this_v20 * _this_v01) / det;
		_this.m02 = (_this_v01 * 0.0 - _this_v11 * 0.0) / det;
		_this.m12 = -(_this_v00 * 0.0 - _this_v10 * 0.0) / det;
		_this.m22 = (_this_v00 * _this_v11 - _this_v10 * _this_v01) / det;
	}
	,validateGlobalTransformRecursively: function() {
		var invalidRoot = this;
		while(true) {
			var parent = invalidRoot.parent;
			if(parent == null || parent.globalTransformId != -1) {
				break;
			}
			invalidRoot = parent;
		}
		var global_v00 = 1.0;
		var global_v10 = 0.0;
		var global_v20 = 0.0;
		var global_v01 = 0.0;
		var global_v11 = 1.0;
		var global_v21 = 0.0;
		if(invalidRoot.parent == null) {
			global_v00 = 1.0;
			global_v10 = 0.0;
			global_v20 = 0.0;
			global_v01 = 0.0;
			global_v11 = 1.0;
			global_v21 = 0.0;
		} else {
			var parent1 = invalidRoot.parent;
			var p00 = parent1._v00;
			var p10 = parent1._v10;
			var p20 = parent1._v20;
			var p01 = parent1._v01;
			var p11 = parent1._v11;
			var p21 = parent1._v21;
			if(p21 == null) {
				p21 = 0.0;
			}
			if(p11 == null) {
				p11 = 1.0;
			}
			if(p01 == null) {
				p01 = 0.0;
			}
			if(p20 == null) {
				p20 = 0.0;
			}
			if(p10 == null) {
				p10 = 0.0;
			}
			if(p00 == null) {
				p00 = 1.0;
			}
			global_v00 = p00;
			global_v10 = p10;
			global_v20 = p20;
			global_v01 = p01;
			global_v11 = p11;
			global_v21 = p21;
		}
		var x = invalidRoot.x;
		var y = invalidRoot.y;
		var pivotX = invalidRoot.pivotX;
		var pivotY = invalidRoot.pivotY;
		var scaleX = invalidRoot.scaleX;
		var scaleY = invalidRoot.scaleY;
		var angle = invalidRoot.angle;
		var angleCos = invalidRoot.angleCos;
		var angleSin = invalidRoot.angleSin;
		if(angleSin == null) {
			angleSin = 0.0;
		}
		if(angleCos == null) {
			angleCos = 1.0;
		}
		if(angle == null) {
			angle = 0.0;
		}
		if(scaleY == null) {
			scaleY = 1.0;
		}
		if(scaleX == null) {
			scaleX = 1.0;
		}
		if(pivotY == null) {
			pivotY = 0.0;
		}
		if(pivotX == null) {
			pivotX = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		var local_x = x;
		var local_y = y;
		var local_pivotX = pivotX;
		var local_pivotY = pivotY;
		var local_scaleX = scaleX;
		var local_scaleY = scaleY;
		var local_angleCos = angleCos;
		var local_angleSin = angleSin;
		if(angle == 0) {
			var v20 = local_scaleX * -local_pivotX + local_x;
			var v21 = local_scaleY * -local_pivotY + local_y;
			var p001 = local_scaleX;
			var p201 = v20;
			var p111 = local_scaleY;
			var p211 = v21;
			if(v21 == null) {
				p211 = 0.0;
			}
			if(local_scaleY == null) {
				p111 = 1.0;
			}
			if(v20 == null) {
				p201 = 0.0;
			}
			if(local_scaleX == null) {
				p001 = 1.0;
			}
			var local_v00 = p001;
			var local_v20 = p201;
			var local_v11 = p111;
			var local_v21 = p211;
			var p002 = global_v00;
			var p101 = global_v10;
			var p202 = global_v20;
			var p011 = global_v01;
			var p112 = global_v11;
			var p212 = global_v21;
			if(p212 == null) {
				p212 = 0.0;
			}
			if(p112 == null) {
				p112 = 1.0;
			}
			if(p011 == null) {
				p011 = 0.0;
			}
			if(p202 == null) {
				p202 = 0.0;
			}
			if(p101 == null) {
				p101 = 0.0;
			}
			if(p002 == null) {
				p002 = 1.0;
			}
			var _this_v00 = p002;
			var _this_v10 = p101;
			var _this_v01 = p011;
			var _this_v11 = p112;
			var p003 = _this_v00 * local_v00;
			var p102 = _this_v10 * local_v11;
			var p203 = _this_v00 * local_v20 + _this_v10 * local_v21 + p202;
			var p012 = _this_v01 * local_v00;
			var p113 = _this_v11 * local_v11;
			var p213 = _this_v01 * local_v20 + _this_v11 * local_v21 + p212;
			if(p213 == null) {
				p213 = 0.0;
			}
			if(p113 == null) {
				p113 = 1.0;
			}
			if(p012 == null) {
				p012 = 0.0;
			}
			if(p203 == null) {
				p203 = 0.0;
			}
			if(p102 == null) {
				p102 = 0.0;
			}
			if(p003 == null) {
				p003 = 1.0;
			}
			global_v00 = p003;
			global_v10 = p102;
			global_v20 = p203;
			global_v01 = p012;
			global_v11 = p113;
			global_v21 = p213;
		} else {
			var v00 = local_angleCos * local_scaleX;
			var v10 = -local_angleSin * local_scaleY;
			var v201 = v00 * -local_pivotX + v10 * -local_pivotY + local_x;
			var v01 = local_angleSin * local_scaleX;
			var v11 = local_angleCos * local_scaleY;
			var v211 = v01 * -local_pivotX + v11 * -local_pivotY + local_y;
			var p004 = v00;
			var p103 = v10;
			var p204 = v201;
			var p013 = v01;
			var p114 = v11;
			var p214 = v211;
			if(v211 == null) {
				p214 = 0.0;
			}
			if(v11 == null) {
				p114 = 1.0;
			}
			if(v01 == null) {
				p013 = 0.0;
			}
			if(v201 == null) {
				p204 = 0.0;
			}
			if(v10 == null) {
				p103 = 0.0;
			}
			if(v00 == null) {
				p004 = 1.0;
			}
			var local_v001 = p004;
			var local_v10 = p103;
			var local_v201 = p204;
			var local_v01 = p013;
			var local_v111 = p114;
			var local_v211 = p214;
			var p005 = global_v00;
			var p104 = global_v10;
			var p205 = global_v20;
			var p014 = global_v01;
			var p115 = global_v11;
			var p215 = global_v21;
			if(p215 == null) {
				p215 = 0.0;
			}
			if(p115 == null) {
				p115 = 1.0;
			}
			if(p014 == null) {
				p014 = 0.0;
			}
			if(p205 == null) {
				p205 = 0.0;
			}
			if(p104 == null) {
				p104 = 0.0;
			}
			if(p005 == null) {
				p005 = 1.0;
			}
			var _this_v001 = p005;
			var _this_v101 = p104;
			var _this_v011 = p014;
			var _this_v111 = p115;
			var p006 = _this_v001 * local_v001 + _this_v101 * local_v01;
			var p105 = _this_v001 * local_v10 + _this_v101 * local_v111;
			var p206 = _this_v001 * local_v201 + _this_v101 * local_v211 + p205;
			var p015 = _this_v011 * local_v001 + _this_v111 * local_v01;
			var p116 = _this_v011 * local_v10 + _this_v111 * local_v111;
			var p216 = _this_v011 * local_v201 + _this_v111 * local_v211 + p215;
			if(p216 == null) {
				p216 = 0.0;
			}
			if(p116 == null) {
				p116 = 1.0;
			}
			if(p015 == null) {
				p015 = 0.0;
			}
			if(p206 == null) {
				p206 = 0.0;
			}
			if(p105 == null) {
				p105 = 0.0;
			}
			if(p006 == null) {
				p006 = 1.0;
			}
			global_v00 = p006;
			global_v10 = p105;
			global_v20 = p206;
			global_v01 = p015;
			global_v11 = p116;
			global_v21 = p216;
		}
		invalidRoot._v00 = global_v00;
		invalidRoot._v10 = global_v10;
		invalidRoot._v20 = global_v20;
		invalidRoot._v01 = global_v01;
		invalidRoot._v11 = global_v11;
		invalidRoot._v21 = global_v21;
		invalidRoot.globalTransformId = banan_display_NodeEdge.nextGlobalTransformId++;
		invalidRoot._globalTransformParent = invalidRoot.parent;
		var _g__current;
		var root = invalidRoot;
		var _g__into = true;
		var _g__next = null;
		var _g__isDone = false;
		var _g__nodeEdge = root;
		var _g__rootParent = root.parent;
		var newNext = null;
		while(newNext == null) {
			if(_g__into) {
				newNext = _g__nodeEdge;
			}
			var firstChild = _g__nodeEdge.firstChild;
			if(_g__into && firstChild != null) {
				_g__nodeEdge = firstChild;
			} else {
				var nextSibling = _g__nodeEdge.next;
				if(_g__nodeEdge.parent == _g__rootParent) {
					_g__isDone = true;
					break;
				} else if(nextSibling != null) {
					_g__into = true;
					_g__nodeEdge = nextSibling;
				} else {
					_g__into = false;
					_g__nodeEdge = _g__nodeEdge.parent;
				}
			}
		}
		_g__next = newNext;
		while(_g__next != null) {
			var sThis = _g__next;
			if(sThis == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:911","",null));
			}
			_g__current = sThis;
			if(_g__isDone) {
				_g__next = null;
			} else {
				var newNext1 = null;
				while(newNext1 == null) {
					if(_g__into) {
						newNext1 = _g__nodeEdge;
					}
					var firstChild1 = _g__nodeEdge.firstChild;
					if(_g__into && firstChild1 != null) {
						_g__nodeEdge = firstChild1;
					} else {
						var nextSibling1 = _g__nodeEdge.next;
						if(_g__nodeEdge.parent == _g__rootParent) {
							_g__isDone = true;
							break;
						} else if(nextSibling1 != null) {
							_g__into = true;
							_g__nodeEdge = nextSibling1;
						} else {
							_g__into = false;
							_g__nodeEdge = _g__nodeEdge.parent;
						}
					}
				}
				_g__next = newNext1;
			}
			var global_v001 = 1.0;
			var global_v101 = 0.0;
			var global_v201 = 0.0;
			var global_v011 = 0.0;
			var global_v111 = 1.0;
			var global_v211 = 0.0;
			if(_g__current.parent == null) {
				global_v001 = 1.0;
				global_v101 = 0.0;
				global_v201 = 0.0;
				global_v011 = 0.0;
				global_v111 = 1.0;
				global_v211 = 0.0;
			} else {
				var parent2 = _g__current.parent;
				var p007 = parent2._v00;
				var p106 = parent2._v10;
				var p207 = parent2._v20;
				var p016 = parent2._v01;
				var p117 = parent2._v11;
				var p217 = parent2._v21;
				if(p217 == null) {
					p217 = 0.0;
				}
				if(p117 == null) {
					p117 = 1.0;
				}
				if(p016 == null) {
					p016 = 0.0;
				}
				if(p207 == null) {
					p207 = 0.0;
				}
				if(p106 == null) {
					p106 = 0.0;
				}
				if(p007 == null) {
					p007 = 1.0;
				}
				global_v001 = p007;
				global_v101 = p106;
				global_v201 = p207;
				global_v011 = p016;
				global_v111 = p117;
				global_v211 = p217;
			}
			var x1 = _g__current.x;
			var y1 = _g__current.y;
			var pivotX1 = _g__current.pivotX;
			var pivotY1 = _g__current.pivotY;
			var scaleX1 = _g__current.scaleX;
			var scaleY1 = _g__current.scaleY;
			var angle1 = _g__current.angle;
			var angleCos1 = _g__current.angleCos;
			var angleSin1 = _g__current.angleSin;
			if(angleSin1 == null) {
				angleSin1 = 0.0;
			}
			if(angleCos1 == null) {
				angleCos1 = 1.0;
			}
			if(angle1 == null) {
				angle1 = 0.0;
			}
			if(scaleY1 == null) {
				scaleY1 = 1.0;
			}
			if(scaleX1 == null) {
				scaleX1 = 1.0;
			}
			if(pivotY1 == null) {
				pivotY1 = 0.0;
			}
			if(pivotX1 == null) {
				pivotX1 = 0.0;
			}
			if(y1 == null) {
				y1 = 0.0;
			}
			if(x1 == null) {
				x1 = 0.0;
			}
			var local_x1 = x1;
			var local_y1 = y1;
			var local_pivotX1 = pivotX1;
			var local_pivotY1 = pivotY1;
			var local_scaleX1 = scaleX1;
			var local_scaleY1 = scaleY1;
			var local_angleCos1 = angleCos1;
			var local_angleSin1 = angleSin1;
			if(angle1 == 0) {
				var v202 = local_scaleX1 * -local_pivotX1 + local_x1;
				var v212 = local_scaleY1 * -local_pivotY1 + local_y1;
				var p008 = local_scaleX1;
				var p208 = v202;
				var p118 = local_scaleY1;
				var p218 = v212;
				if(v212 == null) {
					p218 = 0.0;
				}
				if(local_scaleY1 == null) {
					p118 = 1.0;
				}
				if(v202 == null) {
					p208 = 0.0;
				}
				if(local_scaleX1 == null) {
					p008 = 1.0;
				}
				var local_v002 = p008;
				var local_v202 = p208;
				var local_v112 = p118;
				var local_v212 = p218;
				var p009 = global_v001;
				var p107 = global_v101;
				var p209 = global_v201;
				var p017 = global_v011;
				var p119 = global_v111;
				var p219 = global_v211;
				if(p219 == null) {
					p219 = 0.0;
				}
				if(p119 == null) {
					p119 = 1.0;
				}
				if(p017 == null) {
					p017 = 0.0;
				}
				if(p209 == null) {
					p209 = 0.0;
				}
				if(p107 == null) {
					p107 = 0.0;
				}
				if(p009 == null) {
					p009 = 1.0;
				}
				var _this_v002 = p009;
				var _this_v102 = p107;
				var _this_v012 = p017;
				var _this_v112 = p119;
				var p0010 = _this_v002 * local_v002;
				var p108 = _this_v102 * local_v112;
				var p2010 = _this_v002 * local_v202 + _this_v102 * local_v212 + p209;
				var p018 = _this_v012 * local_v002;
				var p1110 = _this_v112 * local_v112;
				var p2110 = _this_v012 * local_v202 + _this_v112 * local_v212 + p219;
				if(p2110 == null) {
					p2110 = 0.0;
				}
				if(p1110 == null) {
					p1110 = 1.0;
				}
				if(p018 == null) {
					p018 = 0.0;
				}
				if(p2010 == null) {
					p2010 = 0.0;
				}
				if(p108 == null) {
					p108 = 0.0;
				}
				if(p0010 == null) {
					p0010 = 1.0;
				}
				global_v001 = p0010;
				global_v101 = p108;
				global_v201 = p2010;
				global_v011 = p018;
				global_v111 = p1110;
				global_v211 = p2110;
			} else {
				var v001 = local_angleCos1 * local_scaleX1;
				var v101 = -local_angleSin1 * local_scaleY1;
				var v203 = v001 * -local_pivotX1 + v101 * -local_pivotY1 + local_x1;
				var v011 = local_angleSin1 * local_scaleX1;
				var v111 = local_angleCos1 * local_scaleY1;
				var v213 = v011 * -local_pivotX1 + v111 * -local_pivotY1 + local_y1;
				var p0011 = v001;
				var p109 = v101;
				var p2011 = v203;
				var p019 = v011;
				var p1111 = v111;
				var p2111 = v213;
				if(v213 == null) {
					p2111 = 0.0;
				}
				if(v111 == null) {
					p1111 = 1.0;
				}
				if(v011 == null) {
					p019 = 0.0;
				}
				if(v203 == null) {
					p2011 = 0.0;
				}
				if(v101 == null) {
					p109 = 0.0;
				}
				if(v001 == null) {
					p0011 = 1.0;
				}
				var local_v003 = p0011;
				var local_v101 = p109;
				var local_v203 = p2011;
				var local_v011 = p019;
				var local_v113 = p1111;
				var local_v213 = p2111;
				var p0012 = global_v001;
				var p1010 = global_v101;
				var p2012 = global_v201;
				var p0110 = global_v011;
				var p1112 = global_v111;
				var p2112 = global_v211;
				if(p2112 == null) {
					p2112 = 0.0;
				}
				if(p1112 == null) {
					p1112 = 1.0;
				}
				if(p0110 == null) {
					p0110 = 0.0;
				}
				if(p2012 == null) {
					p2012 = 0.0;
				}
				if(p1010 == null) {
					p1010 = 0.0;
				}
				if(p0012 == null) {
					p0012 = 1.0;
				}
				var _this_v003 = p0012;
				var _this_v103 = p1010;
				var _this_v013 = p0110;
				var _this_v113 = p1112;
				var p0013 = _this_v003 * local_v003 + _this_v103 * local_v011;
				var p1011 = _this_v003 * local_v101 + _this_v103 * local_v113;
				var p2013 = _this_v003 * local_v203 + _this_v103 * local_v213 + p2012;
				var p0111 = _this_v013 * local_v003 + _this_v113 * local_v011;
				var p1113 = _this_v013 * local_v101 + _this_v113 * local_v113;
				var p2113 = _this_v013 * local_v203 + _this_v113 * local_v213 + p2112;
				if(p2113 == null) {
					p2113 = 0.0;
				}
				if(p1113 == null) {
					p1113 = 1.0;
				}
				if(p0111 == null) {
					p0111 = 0.0;
				}
				if(p2013 == null) {
					p2013 = 0.0;
				}
				if(p1011 == null) {
					p1011 = 0.0;
				}
				if(p0013 == null) {
					p0013 = 1.0;
				}
				global_v001 = p0013;
				global_v101 = p1011;
				global_v201 = p2013;
				global_v011 = p0111;
				global_v111 = p1113;
				global_v211 = p2113;
			}
			_g__current._v00 = global_v001;
			_g__current._v10 = global_v101;
			_g__current._v20 = global_v201;
			_g__current._v01 = global_v011;
			_g__current._v11 = global_v111;
			_g__current._v21 = global_v211;
			_g__current.globalTransformId = banan_display_NodeEdge.nextGlobalTransformId++;
			_g__current._globalTransformParent = _g__current.parent;
		}
	}
	,validateGlobalTransform: function() {
		var global_v00 = 1.0;
		var global_v10 = 0.0;
		var global_v20 = 0.0;
		var global_v01 = 0.0;
		var global_v11 = 1.0;
		var global_v21 = 0.0;
		if(this.parent == null) {
			global_v00 = 1.0;
			global_v10 = 0.0;
			global_v20 = 0.0;
			global_v01 = 0.0;
			global_v11 = 1.0;
			global_v21 = 0.0;
		} else {
			var parent = this.parent;
			var p00 = parent._v00;
			var p10 = parent._v10;
			var p20 = parent._v20;
			var p01 = parent._v01;
			var p11 = parent._v11;
			var p21 = parent._v21;
			if(p21 == null) {
				p21 = 0.0;
			}
			if(p11 == null) {
				p11 = 1.0;
			}
			if(p01 == null) {
				p01 = 0.0;
			}
			if(p20 == null) {
				p20 = 0.0;
			}
			if(p10 == null) {
				p10 = 0.0;
			}
			if(p00 == null) {
				p00 = 1.0;
			}
			global_v00 = p00;
			global_v10 = p10;
			global_v20 = p20;
			global_v01 = p01;
			global_v11 = p11;
			global_v21 = p21;
		}
		var x = this.x;
		var y = this.y;
		var pivotX = this.pivotX;
		var pivotY = this.pivotY;
		var scaleX = this.scaleX;
		var scaleY = this.scaleY;
		var angle = this.angle;
		var angleCos = this.angleCos;
		var angleSin = this.angleSin;
		if(angleSin == null) {
			angleSin = 0.0;
		}
		if(angleCos == null) {
			angleCos = 1.0;
		}
		if(angle == null) {
			angle = 0.0;
		}
		if(scaleY == null) {
			scaleY = 1.0;
		}
		if(scaleX == null) {
			scaleX = 1.0;
		}
		if(pivotY == null) {
			pivotY = 0.0;
		}
		if(pivotX == null) {
			pivotX = 0.0;
		}
		if(y == null) {
			y = 0.0;
		}
		if(x == null) {
			x = 0.0;
		}
		var local_x = x;
		var local_y = y;
		var local_pivotX = pivotX;
		var local_pivotY = pivotY;
		var local_scaleX = scaleX;
		var local_scaleY = scaleY;
		var local_angleCos = angleCos;
		var local_angleSin = angleSin;
		if(angle == 0) {
			var v20 = local_scaleX * -local_pivotX + local_x;
			var v21 = local_scaleY * -local_pivotY + local_y;
			var p001 = local_scaleX;
			var p201 = v20;
			var p111 = local_scaleY;
			var p211 = v21;
			if(v21 == null) {
				p211 = 0.0;
			}
			if(local_scaleY == null) {
				p111 = 1.0;
			}
			if(v20 == null) {
				p201 = 0.0;
			}
			if(local_scaleX == null) {
				p001 = 1.0;
			}
			var local_v00 = p001;
			var local_v20 = p201;
			var local_v11 = p111;
			var local_v21 = p211;
			var p002 = global_v00;
			var p101 = global_v10;
			var p202 = global_v20;
			var p011 = global_v01;
			var p112 = global_v11;
			var p212 = global_v21;
			if(p212 == null) {
				p212 = 0.0;
			}
			if(p112 == null) {
				p112 = 1.0;
			}
			if(p011 == null) {
				p011 = 0.0;
			}
			if(p202 == null) {
				p202 = 0.0;
			}
			if(p101 == null) {
				p101 = 0.0;
			}
			if(p002 == null) {
				p002 = 1.0;
			}
			var _this_v00 = p002;
			var _this_v10 = p101;
			var _this_v01 = p011;
			var _this_v11 = p112;
			var p003 = _this_v00 * local_v00;
			var p102 = _this_v10 * local_v11;
			var p203 = _this_v00 * local_v20 + _this_v10 * local_v21 + p202;
			var p012 = _this_v01 * local_v00;
			var p113 = _this_v11 * local_v11;
			var p213 = _this_v01 * local_v20 + _this_v11 * local_v21 + p212;
			if(p213 == null) {
				p213 = 0.0;
			}
			if(p113 == null) {
				p113 = 1.0;
			}
			if(p012 == null) {
				p012 = 0.0;
			}
			if(p203 == null) {
				p203 = 0.0;
			}
			if(p102 == null) {
				p102 = 0.0;
			}
			if(p003 == null) {
				p003 = 1.0;
			}
			global_v00 = p003;
			global_v10 = p102;
			global_v20 = p203;
			global_v01 = p012;
			global_v11 = p113;
			global_v21 = p213;
		} else {
			var v00 = local_angleCos * local_scaleX;
			var v10 = -local_angleSin * local_scaleY;
			var v201 = v00 * -local_pivotX + v10 * -local_pivotY + local_x;
			var v01 = local_angleSin * local_scaleX;
			var v11 = local_angleCos * local_scaleY;
			var v211 = v01 * -local_pivotX + v11 * -local_pivotY + local_y;
			var p004 = v00;
			var p103 = v10;
			var p204 = v201;
			var p013 = v01;
			var p114 = v11;
			var p214 = v211;
			if(v211 == null) {
				p214 = 0.0;
			}
			if(v11 == null) {
				p114 = 1.0;
			}
			if(v01 == null) {
				p013 = 0.0;
			}
			if(v201 == null) {
				p204 = 0.0;
			}
			if(v10 == null) {
				p103 = 0.0;
			}
			if(v00 == null) {
				p004 = 1.0;
			}
			var local_v001 = p004;
			var local_v10 = p103;
			var local_v201 = p204;
			var local_v01 = p013;
			var local_v111 = p114;
			var local_v211 = p214;
			var p005 = global_v00;
			var p104 = global_v10;
			var p205 = global_v20;
			var p014 = global_v01;
			var p115 = global_v11;
			var p215 = global_v21;
			if(p215 == null) {
				p215 = 0.0;
			}
			if(p115 == null) {
				p115 = 1.0;
			}
			if(p014 == null) {
				p014 = 0.0;
			}
			if(p205 == null) {
				p205 = 0.0;
			}
			if(p104 == null) {
				p104 = 0.0;
			}
			if(p005 == null) {
				p005 = 1.0;
			}
			var _this_v001 = p005;
			var _this_v101 = p104;
			var _this_v011 = p014;
			var _this_v111 = p115;
			var p006 = _this_v001 * local_v001 + _this_v101 * local_v01;
			var p105 = _this_v001 * local_v10 + _this_v101 * local_v111;
			var p206 = _this_v001 * local_v201 + _this_v101 * local_v211 + p205;
			var p015 = _this_v011 * local_v001 + _this_v111 * local_v01;
			var p116 = _this_v011 * local_v10 + _this_v111 * local_v111;
			var p216 = _this_v011 * local_v201 + _this_v111 * local_v211 + p215;
			if(p216 == null) {
				p216 = 0.0;
			}
			if(p116 == null) {
				p116 = 1.0;
			}
			if(p015 == null) {
				p015 = 0.0;
			}
			if(p206 == null) {
				p206 = 0.0;
			}
			if(p105 == null) {
				p105 = 0.0;
			}
			if(p006 == null) {
				p006 = 1.0;
			}
			global_v00 = p006;
			global_v10 = p105;
			global_v20 = p206;
			global_v01 = p015;
			global_v11 = p116;
			global_v21 = p216;
		}
		this._v00 = global_v00;
		this._v10 = global_v10;
		this._v20 = global_v20;
		this._v01 = global_v01;
		this._v11 = global_v11;
		this._v21 = global_v21;
		this.globalTransformId = banan_display_NodeEdge.nextGlobalTransformId++;
		this._globalTransformParent = this.parent;
	}
	,get__isGlobalTransformValid: function() {
		return this.globalTransformId != -1;
	}
	,set__isGlobalTransformValid: function(v) {
		this.globalTransformId = v ? banan_display_NodeEdge.nextGlobalTransformId++ : -1;
		return v;
	}
	,__class__: banan_display_NodeEdge
	,__properties__: {set__isGlobalTransformValid:"set__isGlobalTransformValid",get__isGlobalTransformValid:"get__isGlobalTransformValid",set_opacity:"set_opacity",get_opacity:"get_opacity",set_color:"set_color",set_angle:"set_angle",set_scaleY:"set_scaleY",set_scaleX:"set_scaleX",set_pivotY:"set_pivotY",set_pivotX:"set_pivotX",set_y:"set_y",set_x:"set_x"}
};
var banan_display__$NodeEdge_NodeTreeIterator = function(root,isBackward,getGoInside) {
	this._isDone = false;
	this._next = null;
	this._into = true;
	this._isBackward = isBackward;
	this._getGoInside = getGoInside;
	this._nodeEdge = root;
	this._rootParent = root.parent;
	if(this._isDone) {
		this._next = null;
	} else {
		var newNext = null;
		while(newNext == null) {
			if(this._into && !this._isBackward) {
				newNext = this._nodeEdge;
			}
			var firstChild = this._isBackward ? this._nodeEdge.lastChild : this._nodeEdge.firstChild;
			if(this._getGoInside != null && !this._getGoInside(this._nodeEdge)) {
				firstChild = null;
			}
			if(this._into && firstChild != null) {
				this._nodeEdge = firstChild;
			} else {
				if(this._isBackward) {
					newNext = this._nodeEdge;
				}
				var nextSibling = this._isBackward ? this._nodeEdge.prev : this._nodeEdge.next;
				if(this._nodeEdge.parent == this._rootParent) {
					this._isDone = true;
					break;
				} else if(nextSibling != null) {
					this._into = true;
					this._nodeEdge = nextSibling;
				} else {
					this._into = false;
					this._nodeEdge = this._nodeEdge.parent;
				}
			}
		}
		this._next = newNext;
	}
};
$hxClasses["banan.display._NodeEdge.NodeTreeIterator"] = banan_display__$NodeEdge_NodeTreeIterator;
banan_display__$NodeEdge_NodeTreeIterator.__name__ = "banan.display._NodeEdge.NodeTreeIterator";
banan_display__$NodeEdge_NodeTreeIterator.prototype = {
	_isBackward: null
	,_into: null
	,_nodeEdge: null
	,_rootParent: null
	,_getGoInside: null
	,_current: null
	,_next: null
	,_isDone: null
	,hasNext: function() {
		return this._next != null;
	}
	,next: function() {
		var sThis = this._next;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:911","",null));
		}
		this._current = sThis;
		if(this._isDone) {
			this._next = null;
		} else {
			var newNext = null;
			while(newNext == null) {
				if(this._into && !this._isBackward) {
					newNext = this._nodeEdge;
				}
				var firstChild = this._isBackward ? this._nodeEdge.lastChild : this._nodeEdge.firstChild;
				if(this._getGoInside != null && !this._getGoInside(this._nodeEdge)) {
					firstChild = null;
				}
				if(this._into && firstChild != null) {
					this._nodeEdge = firstChild;
				} else {
					if(this._isBackward) {
						newNext = this._nodeEdge;
					}
					var nextSibling = this._isBackward ? this._nodeEdge.prev : this._nodeEdge.next;
					if(this._nodeEdge.parent == this._rootParent) {
						this._isDone = true;
						break;
					} else if(nextSibling != null) {
						this._into = true;
						this._nodeEdge = nextSibling;
					} else {
						this._into = false;
						this._nodeEdge = this._nodeEdge.parent;
					}
				}
			}
			this._next = newNext;
		}
		return this._current;
	}
	,findNext: function() {
		if(this._isDone) {
			this._next = null;
		} else {
			var newNext = null;
			while(newNext == null) {
				if(this._into && !this._isBackward) {
					newNext = this._nodeEdge;
				}
				var firstChild = this._isBackward ? this._nodeEdge.lastChild : this._nodeEdge.firstChild;
				if(this._getGoInside != null && !this._getGoInside(this._nodeEdge)) {
					firstChild = null;
				}
				if(this._into && firstChild != null) {
					this._nodeEdge = firstChild;
				} else {
					if(this._isBackward) {
						newNext = this._nodeEdge;
					}
					var nextSibling = this._isBackward ? this._nodeEdge.prev : this._nodeEdge.next;
					if(this._nodeEdge.parent == this._rootParent) {
						this._isDone = true;
						break;
					} else if(nextSibling != null) {
						this._into = true;
						this._nodeEdge = nextSibling;
					} else {
						this._into = false;
						this._nodeEdge = this._nodeEdge.parent;
					}
				}
			}
			this._next = newNext;
		}
	}
	,__class__: banan_display__$NodeEdge_NodeTreeIterator
};
var banan_display__$NodeEdge_ParentIterator = function(e) {
	this.nextParent = null;
	this.e = e;
};
$hxClasses["banan.display._NodeEdge.ParentIterator"] = banan_display__$NodeEdge_ParentIterator;
banan_display__$NodeEdge_ParentIterator.__name__ = "banan.display._NodeEdge.ParentIterator";
banan_display__$NodeEdge_ParentIterator.prototype = {
	e: null
	,nextParent: null
	,hasNext: function() {
		var it = this.e.parent;
		this.nextParent = it != null ? it.parent : null;
		return this.nextParent != null;
	}
	,next: function() {
		var it = this.nextParent;
		if(it == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(null,banan_error_Error.getShortPosition("banan/display/NodeEdge.hx" + ":" + 978 + ":"),"Iterator contract is broken: next() must not be called if hasNext() != true",null));
		}
		this.e = it;
		return this.e;
	}
	,__class__: banan_display__$NodeEdge_ParentIterator
};
var banan_display_NodeEdgeChildrenSorter = function() {
	this.target = null;
	this.localFakeHead = new banan_display_NodeEdge();
	this.localFakeTail = new banan_display_NodeEdge();
	this.globalFakeHead = new banan_display_NodeEdge();
	this.globalFakeTail = new banan_display_NodeEdge();
};
$hxClasses["banan.display.NodeEdgeChildrenSorter"] = banan_display_NodeEdgeChildrenSorter;
banan_display_NodeEdgeChildrenSorter.__name__ = "banan.display.NodeEdgeChildrenSorter";
banan_display_NodeEdgeChildrenSorter.prototype = {
	localFakeHead: null
	,localFakeTail: null
	,globalFakeHead: null
	,globalFakeTail: null
	,target: null
	,lastAdded: null
	,startSorting: function(target,from,to) {
		if(this.target != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdgeChildrenSorter.hx:30","this.target == null",null));
		}
		this.target = target;
		this.lastAdded = null;
		if(from != null) {
			if(from.parent != target) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdgeChildrenSorter.hx:36","from.parent == target",null));
			}
			var child = this.localFakeHead;
			if(child.parent != null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:529","child.parent.isNone",null));
			}
			if(from.parent != target) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:530","after.parent == this",null));
			}
			child.parent = target;
			child.prev = from;
			child.next = from.next;
			from.next = child;
			if(child.next != null) {
				child.next.prev = child;
			} else {
				target.lastChild = child;
			}
			child.onAdded();
		} else {
			var child1 = this.localFakeHead;
			if(child1.parent != null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:460","child.parent.isNone",null));
			}
			child1.parent = target;
			if(target.firstChild != null) {
				child1.next = target.firstChild;
				target.firstChild.prev = child1;
			} else {
				target.lastChild = child1;
			}
			target.firstChild = child1;
			child1.onAdded();
		}
		if(to != null) {
			if(to.parent != target) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdgeChildrenSorter.hx:44","to.parent == target",null));
			}
			var child2 = this.localFakeTail;
			if(child2.parent != null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:504","child.parent.isNone",null));
			}
			if(to.parent != target) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:505","before.parent == this",null));
			}
			child2.parent = target;
			child2.next = to;
			child2.prev = to.prev;
			to.prev = child2;
			if(child2.prev != null) {
				child2.prev.next = child2;
			} else {
				target.firstChild = child2;
			}
			child2.onAdded();
		} else {
			var child3 = this.localFakeTail;
			if(child3.parent != null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:443","child.parent.isNone",null));
			}
			child3.parent = target;
			if(target.lastChild != null) {
				child3.prev = target.lastChild;
				target.lastChild.next = child3;
			} else {
				target.firstChild = child3;
			}
			target.lastChild = child3;
			child3.onAdded();
		}
		this.lastAdded = this.localFakeHead;
		var child4 = this.globalFakeHead;
		if(child4.parent != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:460","child.parent.isNone",null));
		}
		child4.parent = target;
		if(target.firstChild != null) {
			child4.next = target.firstChild;
			target.firstChild.prev = child4;
		} else {
			target.lastChild = child4;
		}
		target.firstChild = child4;
		child4.onAdded();
		var child5 = this.globalFakeTail;
		if(child5.parent != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:443","child.parent.isNone",null));
		}
		child5.parent = target;
		if(target.lastChild != null) {
			child5.prev = target.lastChild;
			target.lastChild.next = child5;
		} else {
			target.firstChild = child5;
		}
		target.lastChild = child5;
		child5.onAdded();
	}
	,endSorting: function() {
		var node = this.localFakeTail;
		while(node != this.lastAdded) {
			var prevNode = node.prev;
			var _this = this.target;
			if(node.parent != _this) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:636","child.parent == this",null));
			}
			if(_this.firstChild == node) {
				_this.firstChild = node.next;
			}
			if(_this.lastChild == node) {
				_this.lastChild = node.prev;
			}
			if(node.next != null) {
				node.next.prev = node.prev;
			}
			if(node.prev != null) {
				node.prev.next = node.next;
			}
			node.parent = null;
			node.next = null;
			node.prev = null;
			node.onRemoved();
			node = prevNode;
		}
		var _this1 = this.target;
		var child = this.localFakeHead;
		if(child.parent != _this1) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:636","child.parent == this",null));
		}
		if(_this1.firstChild == child) {
			_this1.firstChild = child.next;
		}
		if(_this1.lastChild == child) {
			_this1.lastChild = child.prev;
		}
		if(child.next != null) {
			child.next.prev = child.prev;
		}
		if(child.prev != null) {
			child.prev.next = child.next;
		}
		child.parent = null;
		child.next = null;
		child.prev = null;
		child.onRemoved();
		var _this2 = this.target;
		var child1 = this.globalFakeHead;
		if(child1.parent != _this2) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:636","child.parent == this",null));
		}
		if(_this2.firstChild == child1) {
			_this2.firstChild = child1.next;
		}
		if(_this2.lastChild == child1) {
			_this2.lastChild = child1.prev;
		}
		if(child1.next != null) {
			child1.next.prev = child1.prev;
		}
		if(child1.prev != null) {
			child1.prev.next = child1.next;
		}
		child1.parent = null;
		child1.next = null;
		child1.prev = null;
		child1.onRemoved();
		var _this3 = this.target;
		var child2 = this.globalFakeTail;
		if(child2.parent != _this3) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:636","child.parent == this",null));
		}
		if(_this3.firstChild == child2) {
			_this3.firstChild = child2.next;
		}
		if(_this3.lastChild == child2) {
			_this3.lastChild = child2.prev;
		}
		if(child2.next != null) {
			child2.next.prev = child2.prev;
		}
		if(child2.prev != null) {
			child2.prev.next = child2.next;
		}
		child2.parent = null;
		child2.next = null;
		child2.prev = null;
		child2.onRemoved();
		this.target = null;
	}
	,addChild: function(child) {
		if(this.lastAdded != child) {
			if(child.parent == null) {
				var after = this.lastAdded;
				child.parent = this.target;
				child.onAdded();
				var tmp = after.next;
				after.next = child;
				child.prev = after;
				child.next = tmp;
				tmp.prev = child;
				this.lastAdded = child;
			} else if(child.parent == this.target) {
				var after1 = this.lastAdded;
				child.prev.next = child.next;
				child.next.prev = child.prev;
				var tmp1 = after1.next;
				after1.next = child;
				child.prev = after1;
				child.next = tmp1;
				tmp1.prev = child;
				this.lastAdded = child;
			}
		}
	}
	,addAfter: function(after,node) {
		node.parent = this.target;
		node.onAdded();
		var tmp = after.next;
		after.next = node;
		node.prev = after;
		node.next = tmp;
		tmp.prev = node;
		this.lastAdded = node;
	}
	,swapAfter: function(after,node) {
		node.prev.next = node.next;
		node.next.prev = node.prev;
		var tmp = after.next;
		after.next = node;
		node.prev = after;
		node.next = tmp;
		tmp.prev = node;
		this.lastAdded = node;
	}
	,performInsertion: function(after,node) {
		var tmp = after.next;
		after.next = node;
		node.prev = after;
		node.next = tmp;
		tmp.prev = node;
		this.lastAdded = node;
	}
	,__class__: banan_display_NodeEdgeChildrenSorter
};
var banan_display_NodeEdgeMacro = function() { };
$hxClasses["banan.display.NodeEdgeMacro"] = banan_display_NodeEdgeMacro;
banan_display_NodeEdgeMacro.__name__ = "banan.display.NodeEdgeMacro";
var banan_display_NodeLookEdge = function() {
	this.outlineRequests = [];
	this.colorTransformRequest = null;
	this.isChanged = true;
};
$hxClasses["banan.display.NodeLookEdge"] = banan_display_NodeLookEdge;
banan_display_NodeLookEdge.__name__ = "banan.display.NodeLookEdge";
banan_display_NodeLookEdge.prototype = {
	outlineRequests: null
	,colorTransformRequest: null
	,xRayConfigRequest: null
	,isChanged: null
	,addOutline: function(color) {
		this.outlineRequests.unshift(color);
		this.isChanged = true;
	}
	,removeOutline: function(color) {
		var _gthis = this;
		var result = null;
		var _g = 0;
		var _g1 = this.outlineRequests;
		while(_g < _g1.length) {
			var it = _g1[_g];
			++_g;
			if(it == color) {
				result = it;
				break;
			}
		}
		var it1 = result;
		if(it1 != null) {
			HxOverrides.remove(_gthis.outlineRequests,it1);
		}
		this.isChanged = true;
	}
	,setColorTransform: function(colorTransform) {
		this.colorTransformRequest = colorTransform;
		this.isChanged = true;
	}
	,setXRayConfig: function(xRayConfig) {
		this.xRayConfigRequest = xRayConfig;
		this.isChanged = true;
	}
	,isEmpty: function() {
		if(!this.isChanged && this.outlineRequests.length == 0 && this.colorTransformRequest == null) {
			return this.xRayConfigRequest == null;
		} else {
			return false;
		}
	}
	,__class__: banan_display_NodeLookEdge
};
var banan_display_NodeLookHelper = function() { };
$hxClasses["banan.display.NodeLookHelper"] = banan_display_NodeLookHelper;
banan_display_NodeLookHelper.__name__ = "banan.display.NodeLookHelper";
banan_display_NodeLookHelper.addOutline = function(entity,color) {
	banan_display_NodeLookHelper.ensureNodeLookEdge(entity).addOutline(color);
};
banan_display_NodeLookHelper.removeOutline = function(entity,color) {
	banan_display_NodeLookHelper.ensureNodeLookEdge(entity).removeOutline(color);
};
banan_display_NodeLookHelper.setColorTransform = function(entity,colorTransform) {
	banan_display_NodeLookHelper.ensureNodeLookEdge(entity).setColorTransform(colorTransform);
};
banan_display_NodeLookHelper.setXRayConfig = function(entity,xRayConfig) {
	banan_display_NodeLookHelper.ensureNodeLookEdge(entity).setXRayConfig(xRayConfig);
};
banan_display_NodeLookHelper.ensureNodeLookEdge = function(entity) {
	var nodeLookEdge = entity.__component__banan_display_NodeLookEdge;
	if(nodeLookEdge == null) {
		nodeLookEdge = new banan_display_NodeLookEdge();
		if(entity.disposeState == banan_basis_DisposeState.Inited) {
			nodeLookEdge = entity.__add__banan_display_NodeLookEdge(nodeLookEdge);
		}
	}
	return nodeLookEdge;
};
var banan_render_posteffect_PostEffectPipeline = function(render2Context,resourceManager,timeProvider) {
	banan_render_render2_node_NodeRenderable.call(this,render2Context);
	this.batchEntry.themeId = render2Context.getBatchThemeId(banan_render_render2_batch_EBatchTheme.PostEffect);
	this.isValidating = false;
	this.copier = new banan_render_EntityCopier(render2Context,resourceManager);
	this.postEffects = [];
	this.quad = new banan_render_Quad();
	this.material = banan_render_render2_material_MaterialHelper.makeDefaultMaterial(render2Context.materialFactory,banan_render_render2_material_EPrimitiveType.Quad);
	this.context = new banan_render_posteffect_PostEffectContext();
	this.context.render2Context = render2Context;
	this.context.resourceManager = resourceManager;
	this.context.timeProvider = timeProvider;
};
$hxClasses["banan.render.posteffect.PostEffectPipeline"] = banan_render_posteffect_PostEffectPipeline;
banan_render_posteffect_PostEffectPipeline.__name__ = "banan.render.posteffect.PostEffectPipeline";
banan_render_posteffect_PostEffectPipeline.__super__ = banan_render_render2_node_NodeRenderable;
banan_render_posteffect_PostEffectPipeline.prototype = $extend(banan_render_render2_node_NodeRenderable.prototype,{
	isValidating: null
	,copier: null
	,postEffects: null
	,quad: null
	,material: null
	,context: null
	,dispose: function() {
		var _g = 0;
		var _g1 = this.postEffects;
		while(_g < _g1.length) _g1[_g++].dispose();
		this.postEffects.length = 0;
		this.copier.disposeRenderTarget();
	}
	,isEmpty: function() {
		return this.postEffects.length == 0;
	}
	,clearRemoved: function() {
		var i = this.postEffects.length;
		while(i > 0) {
			var ii = i - 1;
			var effect = this.postEffects[ii];
			if(effect.isRemoved()) {
				if(i == this.postEffects.length) {
					this.batchEntry.isDirty = true;
				}
				HxOverrides.remove(this.postEffects,effect);
				effect.dispose();
				var it = this.postEffects[ii];
				if(it != null) {
					it.invalidate();
				}
			}
			--i;
		}
	}
	,validate: function(renderList) {
		this.isValidating = true;
		var extraSize = Lambda.fold(this.postEffects,function(effect,result) {
			if(effect.extraSize > result) {
				return effect.extraSize;
			} else {
				return result;
			}
		},0);
		this.copier.setExtraSize(extraSize);
		this.copier.setRenderList(renderList);
		var isCopierValidated = this.copier.validate(false);
		this.context.image = this.copier.rt;
		this.context.bounds = this.copier.bounds;
		var _this = this.context.globalToNode;
		var m = this.copier.globalToNode;
		_this._00 = m._00;
		_this._10 = m._10;
		_this._20 = m._20;
		_this._30 = m._30;
		_this._01 = m._01;
		_this._11 = m._11;
		_this._21 = m._21;
		_this._31 = m._31;
		_this._02 = m._02;
		_this._12 = m._12;
		_this._22 = m._22;
		_this._32 = m._32;
		_this._03 = m._03;
		_this._13 = m._13;
		_this._23 = m._23;
		_this._33 = m._33;
		var isPipelineValidated = isCopierValidated;
		var _this1 = this.batchEntry;
		_this1._dirtyOnShift = false;
		_this1.currentIdx = 1;
		var _g = 0;
		var _g1 = this.postEffects;
		while(_g < _g1.length) {
			var effect1 = _g1[_g];
			++_g;
			if(isPipelineValidated) {
				effect1.invalidate();
			}
			var _this2 = this.batchEntry;
			if(_this2.ext == null) {
				_this2.ext = [_this2];
			}
			if(_this2.ext[_this2.currentIdx] == null) {
				var batchEntry = new banan_render_render2_batch_BatchEntry(_this2.render2Context.getDrawableId());
				batchEntry.themeId = _this2.themeId;
				_this2.ext[_this2.currentIdx] = batchEntry;
			}
			var result1 = _this2.ext[_this2.currentIdx++];
			var test = _this2._dirtyOnShift;
			if(test == null) {
				test = true;
			}
			result1.isDirty = result1.isDirty || test;
			isPipelineValidated = effect1.validate(result1) || isPipelineValidated;
			this.context.image = effect1.outImage;
		}
		var _this3 = this.batchEntry;
		var test1 = isPipelineValidated;
		if(test1 == null) {
			test1 = true;
		}
		_this3.isDirty = _this3.isDirty || test1;
		this.isValidating = false;
	}
	,render: function(nodeEdge,ctx) {
		if(nodeEdge.globalTransformId == -1 || nodeEdge.parent != nodeEdge._globalTransformParent) {
			nodeEdge.validateGlobalTransformRecursively();
		}
		var p00 = nodeEdge._v00;
		var p10 = nodeEdge._v10;
		var p20 = nodeEdge._v20;
		var p01 = nodeEdge._v01;
		var p11 = nodeEdge._v11;
		var p21 = nodeEdge._v21;
		if(p21 == null) {
			p21 = 0.0;
		}
		if(p11 == null) {
			p11 = 1.0;
		}
		if(p01 == null) {
			p01 = 0.0;
		}
		if(p20 == null) {
			p20 = 0.0;
		}
		if(p10 == null) {
			p10 = 0.0;
		}
		if(p00 == null) {
			p00 = 1.0;
		}
		var transform_v00 = p00;
		var transform_v10 = p10;
		var transform_v20 = p20;
		var transform_v01 = p01;
		var transform_v11 = p11;
		var transform_v21 = p21;
		var _this = this.batchEntry;
		var result = this.transformId != null && nodeEdge.globalTransformId == this.transformId && (this.renderRGBAO != null && nodeEdge.renderRGBAO == this.renderRGBAO);
		this.transformId = nodeEdge.globalTransformId;
		this.renderRGBAO = nodeEdge.renderRGBAO;
		var test = !result;
		if(test == null) {
			test = true;
		}
		_this.isDirty = _this.isDirty || test;
		var image = this.context.image;
		var bounds = this.context.bounds;
		var x0 = Math.floor(bounds.left);
		var y0 = Math.floor(bounds.top);
		var x1 = Math.ceil(bounds.right);
		var y1 = Math.ceil(bounds.bottom);
		this.material.setTexture(image.data);
		var _this1 = this.quad;
		var tx1 = Math.ceil(bounds.right) - Math.floor(bounds.left);
		var ty1 = Math.ceil(bounds.bottom) - Math.floor(bounds.top);
		_this1.texture = image.data;
		_this1.x0 = x0;
		_this1.y0 = y0;
		_this1.x1 = x1;
		_this1.y1 = y0;
		_this1.x2 = x1;
		_this1.y2 = y1;
		_this1.x3 = x0;
		_this1.y3 = y1;
		_this1.tx0 = 0.0;
		_this1.ty0 = 0.0;
		_this1.tx1 = tx1;
		_this1.ty1 = ty1;
		_this1.isNormalizedCalculated = false;
		var x = _this1.x0;
		var y = _this1.y0;
		var x2 = _this1.x1;
		var y2 = _this1.y1;
		var x3 = _this1.x2;
		var y3 = _this1.y2;
		var x4 = _this1.x3;
		var y4 = _this1.y3;
		_this1.x0 = transform_v00 * x + transform_v10 * y + transform_v20;
		_this1.y0 = transform_v01 * x + transform_v11 * y + transform_v21;
		_this1.x1 = transform_v00 * x2 + transform_v10 * y2 + transform_v20;
		_this1.y1 = transform_v01 * x2 + transform_v11 * y2 + transform_v21;
		_this1.x2 = transform_v00 * x3 + transform_v10 * y3 + transform_v20;
		_this1.y2 = transform_v01 * x3 + transform_v11 * y3 + transform_v21;
		_this1.x3 = transform_v00 * x4 + transform_v10 * y4 + transform_v20;
		_this1.y3 = transform_v01 * x4 + transform_v11 * y4 + transform_v21;
		var batchEntry = this.batchEntry;
		var quad = this.quad;
		var gr = nodeEdge.renderColorR;
		var gg = nodeEdge.renderColorG;
		var gb = nodeEdge.renderColorB;
		var ga = nodeEdge.renderColorA;
		var go = nodeEdge.renderOpacity;
		var batch = ctx.renderer2.getBatchFor(this.material,6,batchEntry.themeId);
		if(batchEntry.check(batch,4,6)) {
			batchEntry.sync(batch,4,6);
		} else {
			batchEntry.isDirty = false;
		}
		var batch1 = batch;
		if(batchEntry.isDirty) {
			if(batch1._vertices == null) {
				batch1._vertices = batch1.vertexBuffer.lock();
				if(batch1.isDynamicIndices) {
					batch1._indices = batch1.indexBuffer.lock();
				}
			}
			var vbuff = batch1._vertices;
			var vfrom = batch1.vertexCount;
			if(!quad.isNormalizedCalculated) {
				quad.isNormalizedCalculated = true;
				quad.tx0_norm = quad.tx0 / quad.texture.sizeX;
				quad.tx1_norm = quad.tx1 / quad.texture.sizeX;
				quad.ty0_norm = quad.ty0 / quad.texture.sizeY;
				quad.ty1_norm = quad.ty1 / quad.texture.sizeY;
			}
			var tx0 = quad.tx0_norm;
			var ty0 = quad.ty0_norm;
			var tx11 = quad.tx1_norm;
			var ty11 = quad.ty1_norm;
			var a = ga * go;
			var position = vfrom * 9;
			vbuff[position] = quad.x0;
			vbuff[position + 1] = quad.y0;
			vbuff[position + 2] = -5.0;
			vbuff[position + 3] = tx0;
			vbuff[position + 4] = ty0;
			vbuff[position + 5] = gr;
			vbuff[position + 6] = gg;
			vbuff[position + 7] = gb;
			vbuff[position + 8] = a;
			var position1 = (vfrom + 1) * 9;
			vbuff[position1] = quad.x1;
			vbuff[position1 + 1] = quad.y1;
			vbuff[position1 + 2] = -5.0;
			vbuff[position1 + 3] = tx11;
			vbuff[position1 + 4] = ty0;
			vbuff[position1 + 5] = gr;
			vbuff[position1 + 6] = gg;
			vbuff[position1 + 7] = gb;
			vbuff[position1 + 8] = a;
			var position2 = (vfrom + 2) * 9;
			vbuff[position2] = quad.x2;
			vbuff[position2 + 1] = quad.y2;
			vbuff[position2 + 2] = -5.0;
			vbuff[position2 + 3] = tx11;
			vbuff[position2 + 4] = ty11;
			vbuff[position2 + 5] = gr;
			vbuff[position2 + 6] = gg;
			vbuff[position2 + 7] = gb;
			vbuff[position2 + 8] = a;
			var position3 = (vfrom + 3) * 9;
			vbuff[position3] = quad.x3;
			vbuff[position3 + 1] = quad.y3;
			vbuff[position3 + 2] = -5.0;
			vbuff[position3 + 3] = tx0;
			vbuff[position3 + 4] = ty11;
			vbuff[position3 + 5] = gr;
			vbuff[position3 + 6] = gg;
			vbuff[position3 + 7] = gb;
			vbuff[position3 + 8] = a;
		}
		batchEntry.shiftCounters();
	}
	,addEffect: function(effect) {
		var _gthis = this;
		if(this.getEffect(effect.type) == null) {
			var a = _gthis.postEffects;
			var insertedAt = null;
			var idx = effect.type;
			var _g = 0;
			var _g1 = a.length;
			while(_g < _g1) {
				var i = _g++;
				if(a[i].type > idx) {
					a.splice(i,0,effect);
					insertedAt = i;
					break;
				}
			}
			if(insertedAt == null) {
				insertedAt = a.length;
				a.push(effect);
			}
			effect.setContext(_gthis.context);
		}
		return effect;
	}
	,getEffect: function(type) {
		var result = null;
		var _g = 0;
		var _g1 = this.postEffects;
		while(_g < _g1.length) {
			var it = _g1[_g];
			++_g;
			if(it.type == type) {
				result = it;
				break;
			}
		}
		return result;
	}
	,__class__: banan_render_posteffect_PostEffectPipeline
});
var banan_display_NodeLookPipeline = function(render2Context,resourceManager,timeProvider) {
	banan_render_posteffect_PostEffectPipeline.call(this,render2Context,resourceManager,timeProvider);
	this.outlineEffect = new banan_render_posteffect_OutlinePostEffect();
	this.colorTransformEffect = new banan_render_posteffect_ColorTransformPostEffect();
	this.xRayEffect = new banan_render_posteffect_XRayPostEffect();
};
$hxClasses["banan.display.NodeLookPipeline"] = banan_display_NodeLookPipeline;
banan_display_NodeLookPipeline.__name__ = "banan.display.NodeLookPipeline";
banan_display_NodeLookPipeline.__super__ = banan_render_posteffect_PostEffectPipeline;
banan_display_NodeLookPipeline.prototype = $extend(banan_render_posteffect_PostEffectPipeline.prototype,{
	outlineEffect: null
	,colorTransformEffect: null
	,xRayEffect: null
	,processNodeLookRequests: function(nodeLookEdge) {
		this.addEffect(this.outlineEffect).configure(nodeLookEdge.outlineRequests[0],0.2);
		this.addEffect(this.colorTransformEffect).configure(nodeLookEdge.colorTransformRequest);
		this.addEffect(this.xRayEffect).configure(nodeLookEdge.xRayConfigRequest);
	}
	,__class__: banan_display_NodeLookPipeline
});
var banan_display_NodeLookModule = function(updatePriority) {
	this.opacityAnimations = new haxe_ds_ObjectMap();
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.display.NodeLookModule"] = banan_display_NodeLookModule;
banan_display_NodeLookModule.__name__ = "banan.display.NodeLookModule";
banan_display_NodeLookModule.__super__ = banan_module_Module;
banan_display_NodeLookModule.prototype = $extend(banan_module_Module.prototype,{
	opacityAnimations: null
	,timeProvider: null
	,render2Context: null
	,resourceManager: null
	,system: null
	,update: function() {
		this.processNodeLookRequests();
		this.processOpacityAnimations();
	}
	,addInvisiblity: function(entity,name,incCounter) {
		var nodeEdge = entity.__component__banan_display_NodeEdge;
		if(nodeEdge != null) {
			nodeEdge._isVisible.lock(name,false,incCounter);
			nodeEdge._isChildrenVisible.lock(name,false,incCounter);
			nodeEdge.interactMode.addModificator(name,banan_display_EInteractMode.None,incCounter);
			nodeEdge.isChildrenTouchable.lock(name,false,incCounter);
		}
	}
	,removeInvisiblity: function(entity,name) {
		var nodeEdge = entity.__component__banan_display_NodeEdge;
		if(nodeEdge != null) {
			nodeEdge._isVisible.unlock(name);
			nodeEdge._isChildrenVisible.unlock(name);
			nodeEdge.interactMode.removeModificator(name);
			nodeEdge.isChildrenTouchable.unlock(name);
		}
	}
	,hasInvisiblity: function(entity,name) {
		var nodeEdge = entity.__component__banan_display_NodeEdge;
		if(nodeEdge != null) {
			return nodeEdge._isVisible.hasModificator(name);
		}
		return false;
	}
	,addOpacity: function(entity,name,value,incCounter,duration) {
		if(incCounter == null) {
			incCounter = false;
		}
		this.changeOpacity(entity,name,value,duration);
	}
	,removeOpacity: function(entity,name,duration) {
		this.changeOpacity(entity,name,1.0,duration);
	}
	,processNodeLookRequests: function() {
		var _gthis = this;
		var nodeLookEdgeRemoveList = [];
		var list = this.system.__systemLists.__list__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge;
		var i = list.length;
		while(--i >= 0) {
			var entity = list[i];
			var nodeLookEdge = entity.__component__banan_display_NodeLookEdge;
			if(nodeLookEdge.isChanged) {
				_gthis.ensurePipeline(entity.__component__banan_display_NodeEdge).processNodeLookRequests(nodeLookEdge);
				nodeLookEdge.isChanged = false;
				if(nodeLookEdge.isEmpty()) {
					nodeLookEdgeRemoveList.push(entity);
				}
			}
		}
		while(nodeLookEdgeRemoveList.length != 0) nodeLookEdgeRemoveList.pop().__dispose__banan_display_NodeLookEdge();
	}
	,processOpacityAnimations: function() {
		var _g = new haxe_iterators_MapKeyValueIterator(this.opacityAnimations);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var object = _g1.key;
			var animation = _g1.value;
			animation.update(this.timeProvider.provider.dt);
			if(animation.isCompleted()) {
				this.opacityAnimations.remove(object);
			}
		}
	}
	,changeOpacity: function(entity,name,to,duration) {
		var nodeEdge = entity.__component__banan_display_NodeEdge;
		if(nodeEdge != null) {
			if(duration != null) {
				var from = nodeEdge.getOpacityMod(name);
				this.opacityAnimations.remove(entity);
				var v = new banan_animation_CallFunctionEasing(function(value) {
					nodeEdge.addOpacityMod(value,name);
					return;
				},new banan_animation_easing_Linear(from,to,duration));
				this.opacityAnimations.set(entity,v);
			} else {
				nodeEdge.addOpacityMod(to,name);
			}
		}
	}
	,ensurePipeline: function(nodeEdge) {
		var _gthis = this;
		var it = nodeEdge.postEffectPipeline;
		var pipeline = it != null ? it : nodeEdge.postEffectPipeline = new banan_display_NodeLookPipeline(_gthis.render2Context,_gthis.resourceManager,_gthis.timeProvider);
		return ((pipeline) instanceof banan_display_NodeLookPipeline) ? pipeline : null;
	}
	,makeModuleInfo: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["banan.time.TimeProviderModule"] != null) {
			_g.setReserved("banan.time.TimeProviderModule","timeProvider");
		} else {
			_g.h["banan.time.TimeProviderModule"] = "timeProvider";
		}
		if(__map_reserved["banan.render.render2.Render2Context"] != null) {
			_g.setReserved("banan.render.render2.Render2Context","render2Context");
		} else {
			_g.h["banan.render.render2.Render2Context"] = "render2Context";
		}
		if(__map_reserved["banan.resource.ResourceManager"] != null) {
			_g.setReserved("banan.resource.ResourceManager","resourceManager");
		} else {
			_g.h["banan.resource.ResourceManager"] = "resourceManager";
		}
		if(__map_reserved["banan.es.EntitySystem"] != null) {
			_g.setReserved("banan.es.EntitySystem","system");
		} else {
			_g.h["banan.es.EntitySystem"] = "system";
		}
		return new banan_module_ModuleInfo("banan.display.NodeLookModule",[],[],_g,[]);
	}
	,__class__: banan_display_NodeLookModule
});
var banan_render_ERenderRoot = function(name,pos) {
	banan_basis_ExtendEnum.call(this,name,pos);
};
$hxClasses["banan.render.ERenderRoot"] = banan_render_ERenderRoot;
banan_render_ERenderRoot.__name__ = "banan.render.ERenderRoot";
banan_render_ERenderRoot.__super__ = banan_basis_ExtendEnum;
banan_render_ERenderRoot.prototype = $extend(banan_basis_ExtendEnum.prototype,{
	__class__: banan_render_ERenderRoot
});
var banan_display_NodeSystem = function(updatePriority) {
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.display.NodeSystem"] = banan_display_NodeSystem;
banan_display_NodeSystem.__name__ = "banan.display.NodeSystem";
banan_display_NodeSystem.__super__ = banan_module_Module;
banan_display_NodeSystem.prototype = $extend(banan_module_Module.prototype,{
	root: null
	,nodeRootMap: null
	,entitySystem: null
	,renderSystem: null
	,entityDisposer: null
	,initialize: function() {
		var _gthis = this;
		this.nodeRootMap = new banan_basis_ExtendEnumMapImpl(banan_display_ENodeRoot);
		this.entitySystem.__systemLists.__onAdded__banan_display_NodeEdge.add($bind(this,this.handleNodeEdgeAdded));
		this.entitySystem.__systemLists.__onRemoved__banan_display_NodeEdge.add($bind(this,this.handleNodeEdgeDispose));
		var list = this.entitySystem.__systemLists.__list__Some_banan_display_NodeEdge;
		var i = list.length;
		while(--i >= 0) {
			var entity = list[i];
			_gthis.handleNodeEdgeAdded(entity,entity.__component__banan_display_NodeEdge);
		}
		this.root = this.entitySystem.createEntity("nodeRoot");
		this.root.__add__banan_display_NodeEdge(new banan_display_NodeEdge());
		this.root.__add__banan_backend_RenderRootEdge(new banan_backend_RenderRootEdge(new banan_render_renderlist_GuiRenderList()));
		this.renderSystem.addRoot(banan_display_NodeSystem.rootType,this.root);
		this.moduleInfo.setInitialized();
	}
	,addRoot: function(rootType,root) {
		var this1 = this.nodeRootMap;
		if(rootType.type != this1.type) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:40","key.type == type",null));
		}
		var k = rootType.name;
		var _this = this1.map;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,root);
		} else {
			_this.h[k] = root;
		}
		this.updateRoots();
	}
	,removeRoot: function(rootType) {
		var _this = this.nodeRootMap;
		if(rootType.type != _this.type) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:59","key.type == type",null));
		}
		_this.map.remove(rootType.name);
		this.updateRoots();
	}
	,updateRoots: function() {
		var sorter = new banan_display_NodeEdgeChildrenSorter();
		var entity = this.root;
		var sThis = entity.__component__banan_display_NodeEdge;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeSystem.hx:57","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
		}
		sorter.startSorting(sThis);
		var _this = this.nodeRootMap;
		var _gthis = _this;
		var _gthis1 = _this;
		var subRoot = new banan_basis__$IteratorHelper_TransformIterator(new banan_basis__$IteratorHelper_FilterIterator(HxOverrides.iter(_this.type.all),function(k) {
			var key = k.name;
			var _this1 = _gthis1.map;
			if(__map_reserved[key] != null) {
				return _this1.existsReserved(key);
			} else {
				return _this1.h.hasOwnProperty(key);
			}
		}),function(k1) {
			var key1 = k1.name;
			var _this2 = _gthis.map;
			if(__map_reserved[key1] != null) {
				return _this2.getReserved(key1);
			} else {
				return _this2.h[key1];
			}
		});
		while(subRoot.hasNext()) {
			var entity1 = subRoot.next();
			var sThis1 = entity1.__component__banan_display_NodeEdge;
			if(sThis1 == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeSystem.hx:59","Unwrap edge error. Entity: " + entity1.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
			}
			sorter.addChild(sThis1);
		}
		sorter.endSorting();
	}
	,handleNodeEdgeAdded: function(entity,nodeEdge) {
		nodeEdge._entity = entity;
	}
	,handleNodeEdgeDispose: function(entity,nodeEdge) {
		var nextNodeEdge = nodeEdge.firstChild;
		while(nextNodeEdge != null) {
			var childNodeEdge = nextNodeEdge;
			nextNodeEdge = childNodeEdge.next;
			if(childNodeEdge.isWillDisposeWithParent) {
				var sThis = childNodeEdge._entity;
				if(sThis == null) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
				}
				this.entityDisposer.syncDisposeEntity(sThis);
			}
		}
		var child = nodeEdge.firstChild;
		while(child != null) {
			var nodeEdge1 = child;
			var nextChild = nodeEdge1.next;
			nodeEdge1.parent = null;
			nodeEdge1.next = null;
			nodeEdge1.prev = null;
			nodeEdge1.onRemoved();
			child = nextChild;
		}
		nodeEdge.firstChild = null;
		nodeEdge.lastChild = null;
		if(nodeEdge.parent != null) {
			var _this = nodeEdge.parent;
			if(nodeEdge.parent != _this) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:636","child.parent == this",null));
			}
			if(_this.firstChild == nodeEdge) {
				_this.firstChild = nodeEdge.next;
			}
			if(_this.lastChild == nodeEdge) {
				_this.lastChild = nodeEdge.prev;
			}
			if(nodeEdge.next != null) {
				nodeEdge.next.prev = nodeEdge.prev;
			}
			if(nodeEdge.prev != null) {
				nodeEdge.prev.next = nodeEdge.next;
			}
			nodeEdge.parent = null;
			nodeEdge.next = null;
			nodeEdge.prev = null;
			nodeEdge.onRemoved();
		}
		nodeEdge._entity = null;
	}
	,makeModuleInfo: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["banan.es.EntitySystem"] != null) {
			_g.setReserved("banan.es.EntitySystem","entitySystem");
		} else {
			_g.h["banan.es.EntitySystem"] = "entitySystem";
		}
		if(__map_reserved["banan.render.RenderSystem"] != null) {
			_g.setReserved("banan.render.RenderSystem","renderSystem");
		} else {
			_g.h["banan.render.RenderSystem"] = "renderSystem";
		}
		if(__map_reserved["banan.es.EntityDelayedDisposer"] != null) {
			_g.setReserved("banan.es.EntityDelayedDisposer","entityDisposer");
		} else {
			_g.h["banan.es.EntityDelayedDisposer"] = "entityDisposer";
		}
		return new banan_module_ModuleInfo("banan.display.NodeSystem",[],[],_g,["banan.es.EntitySystem","banan.render.RenderSystem"]);
	}
	,__class__: banan_display_NodeSystem
});
var banan_display_ScaleMode = $hxEnums["banan.display.ScaleMode"] = { __ename__ : true, __constructs__ : ["Exact","CoverDrawOverflow","CoverHideOverflow","Contain"]
	,Exact: {_hx_index:0,__enum__:"banan.display.ScaleMode",toString:$estr}
	,CoverDrawOverflow: {_hx_index:1,__enum__:"banan.display.ScaleMode",toString:$estr}
	,CoverHideOverflow: {_hx_index:2,__enum__:"banan.display.ScaleMode",toString:$estr}
	,Contain: {_hx_index:3,__enum__:"banan.display.ScaleMode",toString:$estr}
};
banan_display_ScaleMode.__empty_constructs__ = [banan_display_ScaleMode.Exact,banan_display_ScaleMode.CoverDrawOverflow,banan_display_ScaleMode.CoverHideOverflow,banan_display_ScaleMode.Contain];
var banan_display__$SpineDisplayEdge_WaitSpineAnimation = function() {
	this.isAnimationEnded = false;
};
$hxClasses["banan.display._SpineDisplayEdge.WaitSpineAnimation"] = banan_display__$SpineDisplayEdge_WaitSpineAnimation;
banan_display__$SpineDisplayEdge_WaitSpineAnimation.__name__ = "banan.display._SpineDisplayEdge.WaitSpineAnimation";
banan_display__$SpineDisplayEdge_WaitSpineAnimation.__interfaces__ = [banan_animation_IAnimation];
banan_display__$SpineDisplayEdge_WaitSpineAnimation.prototype = {
	isAnimationEnded: null
	,update: function(_) {
	}
	,isCompleted: function() {
		return this.isAnimationEnded;
	}
	,onSpineAnimationCb: function(event) {
		switch(event._hx_index) {
		case 2:case 3:case 6:case 7:
			this.isAnimationEnded = true;
			break;
		default:
		}
	}
	,__class__: banan_display__$SpineDisplayEdge_WaitSpineAnimation
};
var banan_display_SpineDisplayEdge = function(render2Context,entity,fps,resource) {
	if(fps == null) {
		fps = 16.0;
	}
	banan_display_UpdatableDisplayEdge.call(this,banan_display_DisplayEdgeType.Spine,render2Context);
	this.isFlipX = false;
	this.isFlipY = false;
	this.entity = entity;
	this.player = new banan_spine_display_animation2_SpinePlayer2(fps);
	this.spineBb = new banan_utils_Bounds();
	this.customBb = null;
	this.hbbVertices = [];
	this.material = render2Context.materialFactory.initializeMaterial(new banan_render_render2_material_Material(),banan_render_render2_material_EShaderType.Spine,banan_render_render2_material_EPrimitiveType.Triangle);
	this.render2Context = render2Context;
	this.player.setResource(resource);
};
$hxClasses["banan.display.SpineDisplayEdge"] = banan_display_SpineDisplayEdge;
banan_display_SpineDisplayEdge.__name__ = "banan.display.SpineDisplayEdge";
banan_display_SpineDisplayEdge.__super__ = banan_display_UpdatableDisplayEdge;
banan_display_SpineDisplayEdge.prototype = $extend(banan_display_UpdatableDisplayEdge.prototype,{
	isFlipX: null
	,isFlipY: null
	,entity: null
	,player: null
	,spineBb: null
	,customBb: null
	,hbbVertices: null
	,material: null
	,render2Context: null
	,dispose: function() {
		this.setResource(null);
	}
	,asSpine: function() {
		return this;
	}
	,addMix: function(from,to,duration) {
		this.player.addMix(from,to,duration);
	}
	,setDefaultMix: function(value) {
		this.player.setDefaultMix(value);
	}
	,setResource: function(newResource) {
		this.player.setResource(newResource);
	}
	,setCustomBb: function(x,y,w,h) {
		if(this.customBb == null) {
			this.customBb = new banan_utils_Bounds();
		}
		var _this = this.customBb;
		_this.left = x;
		_this.top = y;
		_this.right = x + w;
		_this.bottom = y + h;
		this.validateNodeEdgeArea();
	}
	,setAnimation: function(name,loopCount,position,cb) {
		if(position == null) {
			position = 0.0;
		}
		this.player.setAnimation(name,loopCount,position,this.formCbs(cb));
	}
	,addAnimation: function(name,loopCount,delay,cb) {
		this.player.addAnimation(name,loopCount,delay,this.formCbs(cb));
	}
	,waitAddAnimation: function(name,loopCount,delay) {
		var it = new banan_display__$SpineDisplayEdge_WaitSpineAnimation();
		this.addAnimation(name,loopCount,delay,$bind(it,it.onSpineAnimationCb));
		return it;
	}
	,waitSetAnimation: function(name,loopCount,position) {
		var it = new banan_display__$SpineDisplayEdge_WaitSpineAnimation();
		this.setAnimation(name,loopCount,position,$bind(it,it.onSpineAnimationCb));
		return it;
	}
	,update: function(time) {
		this.player.update(time);
	}
	,render: function(nodeEdge,ctx) {
		var renderer = ctx.renderer2;
		if(nodeEdge.globalTransformId == -1 || nodeEdge.parent != nodeEdge._globalTransformParent) {
			nodeEdge.validateGlobalTransformRecursively();
		}
		var p00 = nodeEdge._v00;
		var p10 = nodeEdge._v10;
		var p20 = nodeEdge._v20;
		var p01 = nodeEdge._v01;
		var p11 = nodeEdge._v11;
		var p21 = nodeEdge._v21;
		if(p21 == null) {
			p21 = 0.0;
		}
		if(p11 == null) {
			p11 = 1.0;
		}
		if(p01 == null) {
			p01 = 0.0;
		}
		if(p20 == null) {
			p20 = 0.0;
		}
		if(p10 == null) {
			p10 = 0.0;
		}
		if(p00 == null) {
			p00 = 1.0;
		}
		var tr_v00 = p00;
		var tr_v11 = p11;
		var r = nodeEdge.renderColorR;
		var g = nodeEdge.renderColorG;
		var b = nodeEdge.renderColorB;
		var a = nodeEdge.renderColorA * nodeEdge.renderOpacity;
		this.player.setScale(tr_v00 * (this.isFlipX ? -1.0 : 1.0),tr_v11 * (this.isFlipY ? -1.0 : 1.0));
		var drawOrder = this.player.getDrawOrder();
		var _this = this.batchEntry;
		_this._dirtyOnShift = false;
		_this.currentIdx = 0;
		this.batchEntry._dirtyOnShift = true;
		var a1 = this.customBb;
		var bb = a1 != null ? a1 : this.spineBb;
		var localX = bb.left;
		var localY = bb.top;
		if(this.isFlipX) {
			localX += bb.right - bb.left;
		}
		if(this.isFlipY) {
			localY += bb.bottom - bb.top;
		}
		banan_spine_display_SpineRenderHelper.renderDrawOrder(renderer,this.material,this.batchEntry,drawOrder,tr_v00 * localX + p10 * localY + p20,p01 * localX + tr_v11 * localY + p21,r,g,b,a);
	}
	,formCbs: function(cb) {
		var _gthis = this;
		var it = cb != null ? [$bind(_gthis,_gthis.onSpineAnimationCb),cb] : null;
		if(it != null) {
			return it;
		} else {
			return [$bind(_gthis,_gthis.onSpineAnimationCb)];
		}
	}
	,onSpineAnimationCb: function(event) {
		var _gthis = this;
		if(event._hx_index == 0) {
			this.spineBb.toImpossible();
			var it = this.player.calculateBbVertices(this.hbbVertices);
			if(it != null) {
				var _g = 0;
				while(_g < it) {
					var j = _g++ << 1;
					_gthis.spineBb.includeXy(_gthis.hbbVertices[j],_gthis.hbbVertices[j + 1]);
				}
			}
			this.validateNodeEdgeArea();
		}
	}
	,validateNodeEdgeArea: function() {
		var entity = this.entity;
		var sThis = entity.__component__banan_display_NodeEdge;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"SpineDisplayEdge.hx:193","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
		}
		var nodeEdge = sThis;
		var a = this.customBb;
		var bb = a != null ? a : this.spineBb;
		nodeEdge._isBoundsValid = false;
		nodeEdge.areaX = bb.left;
		nodeEdge._isBoundsValid = false;
		nodeEdge.areaY = bb.top;
		nodeEdge._isBoundsValid = false;
		nodeEdge.areaSizeX = bb.right - bb.left;
		nodeEdge._isBoundsValid = false;
		nodeEdge.areaSizeY = bb.bottom - bb.top;
	}
	,__class__: banan_display_SpineDisplayEdge
});
var banan_display_TextDisplayEdge = function(render2Context,font,text,fontSize,hAlign,vAlign,wrap) {
	if(fontSize == null) {
		fontSize = 10;
	}
	if(text == null) {
		text = "";
	}
	this.sizeY = 1000000.0;
	this.sizeX = 1000000.0;
	this.nodeGlobalTransformId = -1;
	this.shadowQuadCache = new banan_render_QuadCache();
	this.charQuadCache = new banan_render_QuadCache();
	this.token = new banan_resource_ResourceToken();
	this.isValidating = false;
	this.textDesigner = null;
	this.isResizeToNodeY = true;
	this.isResizeToNodeX = true;
	this.isSdfOverride = false;
	this.maxVisibleChars = null;
	this.isHideOverflowY = false;
	this.isHideOverflowX = false;
	this.lineHeight = 1.0;
	this.paddingBottom = 0;
	this.paddingTop = 0;
	this.paddingRight = 0;
	this.paddingLeft = 0;
	this.shadowOffsetY = -1;
	this.shadowOffsetX = -1;
	this.isShadow = false;
	banan_display_DisplayEdge.call(this,banan_display_DisplayEdgeType.Text,render2Context);
	this.set_text(text);
	if(font != this._font) {
		if(this._font != null) {
			this._font.texture.currentChangedSig.remove($bind(this,this.invalidate));
			this._font.texture.release(this.token);
		}
		this._font = font;
		if(this._font != null) {
			this._font.texture.currentChangedSig.add($bind(this,this.invalidate));
			this._font.texture.claim(this.token);
		}
		this.invalidate();
	}
	this.set_fontSize(fontSize);
	this.set_hAlign(hAlign != null ? hAlign : banan_display_TextHAlign.Left);
	this.set_vAlign(vAlign != null ? vAlign : banan_display_TextVAlign.Top);
	this.set_wrap(wrap != null ? wrap : banan_display_TextWrap.None);
	this.set_color(banan_backend_kha_display__$Color_Color_$Impl_$.WHITE);
	this.set_shadowColor(kha__$Color_Color_$Impl_$.fromFloats(0,0,0,0.5));
	this.material = banan_render_render2_material_MaterialHelper.makeDefaultMaterial(render2Context.materialFactory,banan_render_render2_material_EPrimitiveType.Quad);
	this.render2Context = render2Context;
};
$hxClasses["banan.display.TextDisplayEdge"] = banan_display_TextDisplayEdge;
banan_display_TextDisplayEdge.__name__ = "banan.display.TextDisplayEdge";
banan_display_TextDisplayEdge.__super__ = banan_display_DisplayEdge;
banan_display_TextDisplayEdge.prototype = $extend(banan_display_DisplayEdge.prototype,{
	color: null
	,colorA: null
	,colorR: null
	,colorG: null
	,colorB: null
	,isShadow: null
	,shadowOffsetX: null
	,shadowOffsetY: null
	,shadowColor: null
	,shadowColorA: null
	,shadowColorR: null
	,shadowColorG: null
	,shadowColorB: null
	,paddingLeft: null
	,paddingRight: null
	,paddingTop: null
	,paddingBottom: null
	,text: null
	,fontSize: null
	,lineHeight: null
	,hAlign: null
	,vAlign: null
	,wrap: null
	,isHideOverflowX: null
	,isHideOverflowY: null
	,maxVisibleChars: null
	,isSdfOverride: null
	,sdfParametersScale: null
	,sdfThickness: null
	,sdfAntialiasing: null
	,isResizeToNodeX: null
	,isResizeToNodeY: null
	,textDesigner: null
	,isValidating: null
	,token: null
	,_font: null
	,charQuadCache: null
	,shadowQuadCache: null
	,nodeGlobalTransformId: null
	,lastOffsetX: null
	,lastOffsetY: null
	,lastShadowOffsetX: null
	,lastShadowOffsetY: null
	,material: null
	,render2Context: null
	,sizeX: null
	,sizeY: null
	,get_font: function() {
		return this._font;
	}
	,set_font: function(value) {
		if(value != this._font) {
			if(this._font != null) {
				this._font.texture.currentChangedSig.remove($bind(this,this.invalidate));
				this._font.texture.release(this.token);
			}
			this._font = value;
			if(this._font != null) {
				this._font.texture.currentChangedSig.add($bind(this,this.invalidate));
				this._font.texture.claim(this.token);
			}
			this.invalidate();
		}
		return this._font;
	}
	,getTextDesigner: function() {
		if(this.textDesigner == null) {
			this.isValidating = true;
			this.textDesigner = banan_font_TextDesigner.get(this.text,this.hAlign,this.vAlign,this.wrap,this.isHideOverflowX,this.isHideOverflowY,this._font,this.fontSize,this.lineHeight,this.sizeX,this.sizeY);
			this.isValidating = false;
		}
		return this.textDesigner;
	}
	,validate: function() {
		this.getTextDesigner();
	}
	,asText: function() {
		return this;
	}
	,dispose: function() {
		var value = null;
		if(value != this._font) {
			if(this._font != null) {
				this._font.texture.currentChangedSig.remove($bind(this,this.invalidate));
				this._font.texture.release(this.token);
			}
			this._font = value;
			if(this._font != null) {
				this._font.texture.currentChangedSig.add($bind(this,this.invalidate));
				this._font.texture.claim(this.token);
			}
			this.invalidate();
		}
		if(this.textDesigner != null) {
			this.textDesigner.dispose();
			this.textDesigner = null;
		}
	}
	,render: function(nodeEdge,ctx) {
		this.renderImpl(nodeEdge,ctx,nodeEdge.renderColorA,nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,nodeEdge.renderOpacity);
	}
	,resizeToNode: function(nodeEdge) {
		if(this.isResizeToNodeX) {
			var v = nodeEdge.areaSizeX - this.paddingLeft - this.paddingRight;
			if(this.sizeX != v) {
				this.invalidate();
			}
			this.sizeX = v;
		}
		if(this.isResizeToNodeY) {
			var v1 = nodeEdge.areaSizeY - this.paddingTop - this.paddingBottom;
			if(this.sizeY != v1) {
				this.invalidate();
			}
			this.sizeY = v1;
		}
	}
	,renderImpl: function(nodeEdge,ctx,colorA,colorR,colorG,colorB,opacity,dx,dy) {
		if(dy == null) {
			dy = 0.0;
		}
		if(dx == null) {
			dx = 0.0;
		}
		if(nodeEdge.globalTransformId == -1 || nodeEdge.parent != nodeEdge._globalTransformParent) {
			nodeEdge.validateGlobalTransformRecursively();
		}
		var p00 = nodeEdge._v00;
		var p10 = nodeEdge._v10;
		var p20 = nodeEdge._v20;
		var p01 = nodeEdge._v01;
		var p11 = nodeEdge._v11;
		var p21 = nodeEdge._v21;
		if(p21 == null) {
			p21 = 0.0;
		}
		if(p11 == null) {
			p11 = 1.0;
		}
		if(p01 == null) {
			p01 = 0.0;
		}
		if(p20 == null) {
			p20 = 0.0;
		}
		if(p10 == null) {
			p10 = 0.0;
		}
		if(p00 == null) {
			p00 = 1.0;
		}
		var transform_v00 = p00;
		var transform_v10 = p10;
		var transform_v20 = p20;
		var transform_v01 = p01;
		var transform_v11 = p11;
		var transform_v21 = p21;
		var result = this.transformId != null && nodeEdge.globalTransformId == this.transformId && (this.renderRGBAO != null && nodeEdge.renderRGBAO == this.renderRGBAO);
		this.transformId = nodeEdge.globalTransformId;
		this.renderRGBAO = nodeEdge.renderRGBAO;
		var isChanged = !result;
		this.resizeToNode(nodeEdge);
		var textDesigner = this.getTextDesigner();
		var offsetX = nodeEdge.areaX + this.paddingLeft + dx;
		var offsetY = nodeEdge.areaY + this.paddingTop + dy;
		if(!this.isResizeToNodeX) {
			var offsetX1;
			switch(this.hAlign._hx_index) {
			case 0:
				offsetX1 = 0;
				break;
			case 1:
				offsetX1 = nodeEdge.areaSizeX - this.sizeX;
				break;
			case 2:
				offsetX1 = Math.round((nodeEdge.areaSizeX - this.sizeX) / 2);
				break;
			}
			offsetX += offsetX1;
		}
		if(!this.isResizeToNodeY) {
			var offsetY1;
			switch(this.vAlign._hx_index) {
			case 0:
				offsetY1 = 0;
				break;
			case 1:
				offsetY1 = nodeEdge.areaSizeY - this.sizeY;
				break;
			case 2:
				offsetY1 = Math.round((nodeEdge.areaSizeY - this.sizeY) / 2);
				break;
			}
			offsetY += offsetY1;
		}
		if(this.shadowOffsetX != this.lastShadowOffsetX || this.shadowOffsetY != this.lastShadowOffsetY) {
			this.lastShadowOffsetX = this.shadowOffsetX;
			this.lastShadowOffsetY = this.shadowOffsetY;
			this.shadowQuadCache.quadCount = 0;
		}
		if(offsetX != this.lastOffsetX || offsetY != this.lastOffsetY || this.nodeGlobalTransformId != nodeEdge.globalTransformId) {
			this.lastOffsetX = offsetX;
			this.lastOffsetY = offsetY;
			this.nodeGlobalTransformId = nodeEdge.globalTransformId;
			this.charQuadCache.quadCount = 0;
			this.shadowQuadCache.quadCount = 0;
		}
		if(this._font.texture.current.get_texture().get_isLoaded()) {
			this.material = this.material.setTexture(this._font.texture.current.get_texture());
			var placedChars = textDesigner.placed;
			var a = placedChars.length;
			var a1 = this.maxVisibleChars;
			var b = a1 != null ? a1 : 2147483647;
			var len = a < b ? a : b;
			if(this.charQuadCache.quadCount == 0) {
				isChanged = true;
				var _g = 0;
				var _g1 = len;
				while(_g < _g1) {
					var placedChar = placedChars[_g++];
					var cache = this.charQuadCache;
					var image = this._font.texture;
					var charData = placedChar.charData;
					var l = placedChar.x + offsetX;
					var t = placedChar.y + offsetY;
					var r = placedChar.x + placedChar.sizeX + offsetX;
					var b1 = placedChar.y + placedChar.sizeY + offsetY;
					var current = image.current;
					var tx_l = current.tx + charData.x * current.tSizeX / image.sizeX;
					var ty_t = current.ty + charData.y * current.tSizeY / image.sizeY;
					var tx_r = current.tx + (charData.x + charData.sizeX) * current.tSizeX / image.sizeX;
					var ty_b = current.ty + (charData.y + charData.sizeY) * current.tSizeY / image.sizeY;
					if(cache.quadCount == cache.quads.length) {
						cache.quads[cache.quadCount] = new banan_render_Quad();
					}
					var quad = cache.quads[cache.quadCount++];
					quad.texture = current.get_texture();
					quad.x0 = l;
					quad.y0 = t;
					quad.x1 = r;
					quad.y1 = t;
					quad.x2 = r;
					quad.y2 = b1;
					quad.x3 = l;
					quad.y3 = b1;
					quad.tx0 = tx_l;
					quad.ty0 = ty_t;
					quad.tx1 = tx_r;
					quad.ty1 = ty_b;
					quad.isNormalizedCalculated = false;
					var x = quad.x0;
					var y = quad.y0;
					var x1 = quad.x1;
					var y1 = quad.y1;
					var x2 = quad.x2;
					var y2 = quad.y2;
					var x3 = quad.x3;
					var y3 = quad.y3;
					quad.x0 = transform_v00 * x + transform_v10 * y + transform_v20;
					quad.y0 = transform_v01 * x + transform_v11 * y + transform_v21;
					quad.x1 = transform_v00 * x1 + transform_v10 * y1 + transform_v20;
					quad.y1 = transform_v01 * x1 + transform_v11 * y1 + transform_v21;
					quad.x2 = transform_v00 * x2 + transform_v10 * y2 + transform_v20;
					quad.y2 = transform_v01 * x2 + transform_v11 * y2 + transform_v21;
					quad.x3 = transform_v00 * x3 + transform_v10 * y3 + transform_v20;
					quad.y3 = transform_v01 * x3 + transform_v11 * y3 + transform_v21;
				}
			}
			if(this.isShadow && this.shadowQuadCache.quadCount == 0) {
				isChanged = true;
				var _g2 = 0;
				var _g11 = len;
				while(_g2 < _g11) {
					var placedChar1 = placedChars[_g2++];
					var cache1 = this.shadowQuadCache;
					var x4 = offsetX + this.shadowOffsetX;
					var y4 = offsetY + this.shadowOffsetY;
					var image1 = this._font.texture;
					var charData1 = placedChar1.charData;
					var l1 = placedChar1.x + x4;
					var t1 = placedChar1.y + y4;
					var r1 = placedChar1.x + placedChar1.sizeX + x4;
					var b2 = placedChar1.y + placedChar1.sizeY + y4;
					var current1 = image1.current;
					var tx_l1 = current1.tx + charData1.x * current1.tSizeX / image1.sizeX;
					var ty_t1 = current1.ty + charData1.y * current1.tSizeY / image1.sizeY;
					var tx_r1 = current1.tx + (charData1.x + charData1.sizeX) * current1.tSizeX / image1.sizeX;
					var ty_b1 = current1.ty + (charData1.y + charData1.sizeY) * current1.tSizeY / image1.sizeY;
					if(cache1.quadCount == cache1.quads.length) {
						cache1.quads[cache1.quadCount] = new banan_render_Quad();
					}
					var quad1 = cache1.quads[cache1.quadCount++];
					quad1.texture = current1.get_texture();
					quad1.x0 = l1;
					quad1.y0 = t1;
					quad1.x1 = r1;
					quad1.y1 = t1;
					quad1.x2 = r1;
					quad1.y2 = b2;
					quad1.x3 = l1;
					quad1.y3 = b2;
					quad1.tx0 = tx_l1;
					quad1.ty0 = ty_t1;
					quad1.tx1 = tx_r1;
					quad1.ty1 = ty_b1;
					quad1.isNormalizedCalculated = false;
					var x5 = quad1.x0;
					var y5 = quad1.y0;
					var x6 = quad1.x1;
					var y6 = quad1.y1;
					var x7 = quad1.x2;
					var y7 = quad1.y2;
					var x8 = quad1.x3;
					var y8 = quad1.y3;
					quad1.x0 = transform_v00 * x5 + transform_v10 * y5 + transform_v20;
					quad1.y0 = transform_v01 * x5 + transform_v11 * y5 + transform_v21;
					quad1.x1 = transform_v00 * x6 + transform_v10 * y6 + transform_v20;
					quad1.y1 = transform_v01 * x6 + transform_v11 * y6 + transform_v21;
					quad1.x2 = transform_v00 * x7 + transform_v10 * y7 + transform_v20;
					quad1.y2 = transform_v01 * x7 + transform_v11 * y7 + transform_v21;
					quad1.x3 = transform_v00 * x8 + transform_v10 * y8 + transform_v20;
					quad1.y3 = transform_v01 * x8 + transform_v11 * y8 + transform_v21;
				}
			}
			var sa = colorA * this.shadowColorA;
			var sr = colorR * this.shadowColorR;
			var sg = colorG * this.shadowColorG;
			var sb = colorB * this.shadowColorB;
			var a2 = colorA * this.colorA;
			var r2 = colorR * this.colorR;
			var g = colorG * this.colorG;
			var b3 = colorB * this.colorB;
			var _this = this.batchEntry;
			_this._dirtyOnShift = false;
			_this.currentIdx = 0;
			var _this1 = this.batchEntry;
			_this1._dirtyOnShift = _this1._dirtyOnShift || isChanged;
			if(this.isShadow) {
				var renderer = ctx.renderer2;
				var material = this.material;
				var _this2 = this.batchEntry;
				if(_this2.ext == null) {
					_this2.ext = [_this2];
				}
				if(_this2.ext[_this2.currentIdx] == null) {
					var batchEntry = new banan_render_render2_batch_BatchEntry(_this2.render2Context.getDrawableId());
					batchEntry.themeId = _this2.themeId;
					_this2.ext[_this2.currentIdx] = batchEntry;
				}
				var result1 = _this2.ext[_this2.currentIdx++];
				var test = _this2._dirtyOnShift;
				if(test == null) {
					test = true;
				}
				result1.isDirty = result1.isDirty || test;
				var quadCache = this.shadowQuadCache;
				var vertexCount = 4 * quadCache.quadCount;
				var indexCount = 6 * quadCache.quadCount;
				var batch = renderer.getBatchFor(material,indexCount,result1.themeId);
				if(result1.check(batch,vertexCount,indexCount)) {
					result1.sync(batch,vertexCount,indexCount);
				} else {
					result1.isDirty = false;
				}
				var batch1 = batch;
				if(result1.isDirty) {
					if(batch1._vertices == null) {
						batch1._vertices = batch1.vertexBuffer.lock();
						if(batch1.isDynamicIndices) {
							batch1._indices = batch1.indexBuffer.lock();
						}
					}
					var vbuff = batch1._vertices;
					var vpos = batch1.vertexCount;
					var _g3 = 0;
					var _g12 = quadCache.quadCount;
					while(_g3 < _g12) {
						var i = _g3++;
						var quad2 = i < quadCache.quadCount ? quadCache.quads[i] : null;
						if(!quad2.isNormalizedCalculated) {
							quad2.isNormalizedCalculated = true;
							quad2.tx0_norm = quad2.tx0 / quad2.texture.sizeX;
							quad2.tx1_norm = quad2.tx1 / quad2.texture.sizeX;
							quad2.ty0_norm = quad2.ty0 / quad2.texture.sizeY;
							quad2.ty1_norm = quad2.ty1 / quad2.texture.sizeY;
						}
						var tx0 = quad2.tx0_norm;
						var ty0 = quad2.ty0_norm;
						var tx1 = quad2.tx1_norm;
						var ty1 = quad2.ty1_norm;
						var a3 = sa * opacity;
						var position = vpos * 9;
						vbuff[position] = quad2.x0;
						vbuff[position + 1] = quad2.y0;
						vbuff[position + 2] = -5.0;
						vbuff[position + 3] = tx0;
						vbuff[position + 4] = ty0;
						vbuff[position + 5] = sr;
						vbuff[position + 6] = sg;
						vbuff[position + 7] = sb;
						vbuff[position + 8] = a3;
						var position1 = (vpos + 1) * 9;
						vbuff[position1] = quad2.x1;
						vbuff[position1 + 1] = quad2.y1;
						vbuff[position1 + 2] = -5.0;
						vbuff[position1 + 3] = tx1;
						vbuff[position1 + 4] = ty0;
						vbuff[position1 + 5] = sr;
						vbuff[position1 + 6] = sg;
						vbuff[position1 + 7] = sb;
						vbuff[position1 + 8] = a3;
						var position2 = (vpos + 2) * 9;
						vbuff[position2] = quad2.x2;
						vbuff[position2 + 1] = quad2.y2;
						vbuff[position2 + 2] = -5.0;
						vbuff[position2 + 3] = tx1;
						vbuff[position2 + 4] = ty1;
						vbuff[position2 + 5] = sr;
						vbuff[position2 + 6] = sg;
						vbuff[position2 + 7] = sb;
						vbuff[position2 + 8] = a3;
						var position3 = (vpos + 3) * 9;
						vbuff[position3] = quad2.x3;
						vbuff[position3 + 1] = quad2.y3;
						vbuff[position3 + 2] = -5.0;
						vbuff[position3 + 3] = tx0;
						vbuff[position3 + 4] = ty1;
						vbuff[position3 + 5] = sr;
						vbuff[position3 + 6] = sg;
						vbuff[position3 + 7] = sb;
						vbuff[position3 + 8] = a3;
						vpos += 4;
					}
				}
				result1.shiftCounters();
			}
			var renderer1 = ctx.renderer2;
			var material1 = this.material;
			var _this3 = this.batchEntry;
			if(_this3.ext == null) {
				_this3.ext = [_this3];
			}
			if(_this3.ext[_this3.currentIdx] == null) {
				var batchEntry1 = new banan_render_render2_batch_BatchEntry(_this3.render2Context.getDrawableId());
				batchEntry1.themeId = _this3.themeId;
				_this3.ext[_this3.currentIdx] = batchEntry1;
			}
			var result2 = _this3.ext[_this3.currentIdx++];
			var test1 = _this3._dirtyOnShift;
			if(test1 == null) {
				test1 = true;
			}
			result2.isDirty = result2.isDirty || test1;
			var quadCache1 = this.charQuadCache;
			var vertexCount1 = 4 * quadCache1.quadCount;
			var indexCount1 = 6 * quadCache1.quadCount;
			var batch2 = renderer1.getBatchFor(material1,indexCount1,result2.themeId);
			if(result2.check(batch2,vertexCount1,indexCount1)) {
				result2.sync(batch2,vertexCount1,indexCount1);
			} else {
				result2.isDirty = false;
			}
			var batch3 = batch2;
			if(result2.isDirty) {
				if(batch3._vertices == null) {
					batch3._vertices = batch3.vertexBuffer.lock();
					if(batch3.isDynamicIndices) {
						batch3._indices = batch3.indexBuffer.lock();
					}
				}
				var vbuff1 = batch3._vertices;
				var vpos1 = batch3.vertexCount;
				var _g4 = 0;
				var _g13 = quadCache1.quadCount;
				while(_g4 < _g13) {
					var i1 = _g4++;
					var quad3 = i1 < quadCache1.quadCount ? quadCache1.quads[i1] : null;
					if(!quad3.isNormalizedCalculated) {
						quad3.isNormalizedCalculated = true;
						quad3.tx0_norm = quad3.tx0 / quad3.texture.sizeX;
						quad3.tx1_norm = quad3.tx1 / quad3.texture.sizeX;
						quad3.ty0_norm = quad3.ty0 / quad3.texture.sizeY;
						quad3.ty1_norm = quad3.ty1 / quad3.texture.sizeY;
					}
					var tx01 = quad3.tx0_norm;
					var ty01 = quad3.ty0_norm;
					var tx11 = quad3.tx1_norm;
					var ty11 = quad3.ty1_norm;
					var a4 = a2 * opacity;
					var position4 = vpos1 * 9;
					vbuff1[position4] = quad3.x0;
					vbuff1[position4 + 1] = quad3.y0;
					vbuff1[position4 + 2] = -5.0;
					vbuff1[position4 + 3] = tx01;
					vbuff1[position4 + 4] = ty01;
					vbuff1[position4 + 5] = r2;
					vbuff1[position4 + 6] = g;
					vbuff1[position4 + 7] = b3;
					vbuff1[position4 + 8] = a4;
					var position5 = (vpos1 + 1) * 9;
					vbuff1[position5] = quad3.x1;
					vbuff1[position5 + 1] = quad3.y1;
					vbuff1[position5 + 2] = -5.0;
					vbuff1[position5 + 3] = tx11;
					vbuff1[position5 + 4] = ty01;
					vbuff1[position5 + 5] = r2;
					vbuff1[position5 + 6] = g;
					vbuff1[position5 + 7] = b3;
					vbuff1[position5 + 8] = a4;
					var position6 = (vpos1 + 2) * 9;
					vbuff1[position6] = quad3.x2;
					vbuff1[position6 + 1] = quad3.y2;
					vbuff1[position6 + 2] = -5.0;
					vbuff1[position6 + 3] = tx11;
					vbuff1[position6 + 4] = ty11;
					vbuff1[position6 + 5] = r2;
					vbuff1[position6 + 6] = g;
					vbuff1[position6 + 7] = b3;
					vbuff1[position6 + 8] = a4;
					var position7 = (vpos1 + 3) * 9;
					vbuff1[position7] = quad3.x3;
					vbuff1[position7 + 1] = quad3.y3;
					vbuff1[position7 + 2] = -5.0;
					vbuff1[position7 + 3] = tx01;
					vbuff1[position7 + 4] = ty11;
					vbuff1[position7 + 5] = r2;
					vbuff1[position7 + 6] = g;
					vbuff1[position7 + 7] = b3;
					vbuff1[position7 + 8] = a4;
					vpos1 += 4;
				}
			}
			result2.shiftCounters();
		}
	}
	,invalidate: function() {
		this.charQuadCache.quadCount = 0;
		this.shadowQuadCache.quadCount = 0;
		if(this.textDesigner != null) {
			this.textDesigner.dispose();
			this.textDesigner = null;
		}
		this.sdfParametersScale = NaN;
	}
	,get_isSdf: function() {
		var may = this.textDesigner;
		var this1 = may != null ? may.font.get_isSdf() : null;
		if(this1 != null) {
			return this1;
		} else {
			return false;
		}
	}
	,get_textSizeX: function() {
		var may = this.textDesigner;
		var this1 = may != null ? may.textSizeX : null;
		return (this1 != null ? this1 : 0) + this.paddingLeft + this.paddingRight;
	}
	,get_textSizeY: function() {
		var may = this.textDesigner;
		var this1 = may != null ? may.textSizeY : null;
		return (this1 != null ? this1 : 0) + this.paddingTop + this.paddingBottom;
	}
	,set_sizeX: function(v) {
		if(this.sizeX != v) {
			this.invalidate();
		}
		return this.sizeX = v;
	}
	,set_sizeY: function(v) {
		if(this.sizeY != v) {
			this.invalidate();
		}
		return this.sizeY = v;
	}
	,set_text: function(v) {
		if(this.text != v) {
			this.invalidate();
		}
		return this.text = v;
	}
	,set_fontSize: function(v) {
		if(this.fontSize != v) {
			this.invalidate();
		}
		return this.fontSize = v;
	}
	,set_lineHeight: function(v) {
		if(this.lineHeight != v) {
			this.invalidate();
		}
		return this.lineHeight = v;
	}
	,set_hAlign: function(v) {
		if(this.hAlign != v) {
			this.invalidate();
		}
		return this.hAlign = v;
	}
	,set_vAlign: function(v) {
		if(this.vAlign != v) {
			this.invalidate();
		}
		return this.vAlign = v;
	}
	,set_wrap: function(v) {
		if(this.wrap != v) {
			this.invalidate();
		}
		return this.wrap = v;
	}
	,set_isHideOverflowX: function(v) {
		if(this.isHideOverflowX != v) {
			this.invalidate();
		}
		return this.isHideOverflowX = v;
	}
	,set_isHideOverflowY: function(v) {
		if(this.isHideOverflowY != v) {
			this.invalidate();
		}
		return this.isHideOverflowY = v;
	}
	,set_maxVisibleChars: function(v) {
		if(this.maxVisibleChars != v) {
			this.charQuadCache.quadCount = 0;
			this.shadowQuadCache.quadCount = 0;
			this.maxVisibleChars = v;
		}
		return v;
	}
	,set_color: function(v) {
		if(this.color != v) {
			this.invalidate();
			this.color = v;
			this.colorA = (v >>> 24) * 0.00392156862745098;
			this.colorR = ((v & 16711680) >>> 16) * 0.00392156862745098;
			this.colorG = ((v & 65280) >>> 8) * 0.00392156862745098;
			this.colorB = (v & 255) * 0.00392156862745098;
		}
		return v;
	}
	,set_shadowColor: function(v) {
		if(this.shadowColor != v) {
			this.invalidate();
			this.shadowColor = v;
			this.shadowColorA = (v >>> 24) * 0.00392156862745098;
			this.shadowColorR = ((v & 16711680) >>> 16) * 0.00392156862745098;
			this.shadowColorG = ((v & 65280) >>> 8) * 0.00392156862745098;
			this.shadowColorB = (v & 255) * 0.00392156862745098;
		}
		return v;
	}
	,__class__: banan_display_TextDisplayEdge
	,__properties__: {set_sizeY:"set_sizeY",set_sizeX:"set_sizeX",get_textSizeY:"get_textSizeY",get_textSizeX:"get_textSizeX",get_isSdf:"get_isSdf",set_maxVisibleChars:"set_maxVisibleChars",set_isHideOverflowY:"set_isHideOverflowY",set_isHideOverflowX:"set_isHideOverflowX",set_wrap:"set_wrap",set_vAlign:"set_vAlign",set_hAlign:"set_hAlign",set_lineHeight:"set_lineHeight",set_fontSize:"set_fontSize",set_font:"set_font",get_font:"get_font",set_text:"set_text",set_shadowColor:"set_shadowColor",set_color:"set_color"}
});
var banan_display_TextHAlign = $hxEnums["banan.display.TextHAlign"] = { __ename__ : true, __constructs__ : ["Left","Right","Center"]
	,Left: {_hx_index:0,__enum__:"banan.display.TextHAlign",toString:$estr}
	,Right: {_hx_index:1,__enum__:"banan.display.TextHAlign",toString:$estr}
	,Center: {_hx_index:2,__enum__:"banan.display.TextHAlign",toString:$estr}
};
banan_display_TextHAlign.__empty_constructs__ = [banan_display_TextHAlign.Left,banan_display_TextHAlign.Right,banan_display_TextHAlign.Center];
var banan_display_TextVAlign = $hxEnums["banan.display.TextVAlign"] = { __ename__ : true, __constructs__ : ["Top","Bottom","Center"]
	,Top: {_hx_index:0,__enum__:"banan.display.TextVAlign",toString:$estr}
	,Bottom: {_hx_index:1,__enum__:"banan.display.TextVAlign",toString:$estr}
	,Center: {_hx_index:2,__enum__:"banan.display.TextVAlign",toString:$estr}
};
banan_display_TextVAlign.__empty_constructs__ = [banan_display_TextVAlign.Top,banan_display_TextVAlign.Bottom,banan_display_TextVAlign.Center];
var banan_display_TextWrap = $hxEnums["banan.display.TextWrap"] = { __ename__ : true, __constructs__ : ["None","Wrap","WordWrap"]
	,None: {_hx_index:0,__enum__:"banan.display.TextWrap",toString:$estr}
	,Wrap: {_hx_index:1,__enum__:"banan.display.TextWrap",toString:$estr}
	,WordWrap: {_hx_index:2,__enum__:"banan.display.TextWrap",toString:$estr}
};
banan_display_TextWrap.__empty_constructs__ = [banan_display_TextWrap.None,banan_display_TextWrap.Wrap,banan_display_TextWrap.WordWrap];
var banan_ds_ArrayHelper = function() { };
$hxClasses["banan.ds.ArrayHelper"] = banan_ds_ArrayHelper;
banan_ds_ArrayHelper.__name__ = "banan.ds.ArrayHelper";
banan_ds_ArrayHelper.toConst = function(array) {
	return array;
};
banan_ds_ArrayHelper.fastIterator = function(array) {
	return new banan_ds_ArrayIterator(array);
};
banan_ds_ArrayHelper.reverseIterator = function(array) {
	return new banan_ds_ReverseArrayIterator(array);
};
banan_ds_ArrayHelper.create = function(length,fill) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < length) {
		++_g1;
		_g.push(fill);
	}
	return _g;
};
banan_ds_ArrayHelper.intersect = function(aa,bb,sort,result) {
	if(result == null) {
		result = [];
	}
	var length = 0;
	if(sort == null) {
		var _g = 0;
		while(_g < aa.length) {
			var a = aa[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < bb.length) if(a == bb[_g1++]) {
				result[length++] = a;
			}
		}
	} else {
		aa.sort(sort);
		bb.sort(sort);
		var i = 0;
		var j = 0;
		while(i < aa.length) {
			if(j == bb.length) {
				break;
			}
			while(j < bb.length) if(aa[i] == bb[j]) {
				result[length++] = bb[j++];
			} else {
				break;
			}
			++i;
		}
	}
	result.length = length;
	return result;
};
banan_ds_ArrayHelper.getRandom = function(a) {
	if(a.length == 0) {
		return null;
	} else if(a.length == 1) {
		return a[0];
	} else {
		return a[banan_math_M.randomI(0,a.length - 1)];
	}
};
banan_ds_ArrayHelper.shuffle = function(a,length) {
	if(length == null) {
		length = a.length;
	}
	var i = length - 1;
	while(i > 1) {
		var j = banan_math_M.randomI(0,i);
		var temp = a[j];
		a[j] = a[i];
		a[i] = temp;
		--i;
	}
};
banan_ds_ArrayHelper.swap = function(array,idx_a,idx_b) {
	if(idx_a != idx_b) {
		var tmp = array[idx_a];
		array[idx_a] = array[idx_b];
		array[idx_b] = tmp;
	}
};
banan_ds_ArrayHelper.swapRemove = function(array,element) {
	var index = array.indexOf(element);
	if(index < 0) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"ArrayHelper.hx:129","element is not in array",null));
	} else if(index == array.length - 1) {
		array.pop();
	} else {
		array[index] = array.pop();
	}
};
banan_ds_ArrayHelper.filterTo = function(src,dst,fun) {
	var i = 0;
	var _g = 0;
	var _g1 = src;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		if(fun(e)) {
			dst[i++] = e;
		}
	}
	dst.length = i;
};
banan_ds_ArrayHelper.clear = function(a) {
	a.length = 0;
};
banan_ds_ArrayHelper.addAll = function(a,other) {
	var _g = 0;
	var _g1 = other;
	while(_g < _g1.length) a.push(_g1[_g++]);
	return a;
};
banan_ds_ArrayHelper.isEmpty = function(a) {
	return a.length == 0;
};
banan_ds_ArrayHelper.last = function(a) {
	return a[a.length - 1];
};
banan_ds_ArrayHelper.first = function(a) {
	return a[0];
};
banan_ds_ArrayHelper.findIndex = function(a,predicate) {
	var result = null;
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		if(predicate(a[i])) {
			result = i;
			break;
		}
	}
	return result;
};
banan_ds_ArrayHelper.findIndexReverse = function(a,predicate) {
	var result = null;
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var j = a.length - (_g++ + 1);
		if(predicate(a[j])) {
			result = j;
			break;
		}
	}
	return result;
};
banan_ds_ArrayHelper.find = function(a,predicate) {
	var result = null;
	var _g = 0;
	var _g1 = a;
	while(_g < _g1.length) {
		var it = _g1[_g];
		++_g;
		if(predicate(it)) {
			result = it;
			break;
		}
	}
	return result;
};
banan_ds_ArrayHelper.findReverse = function(a,predicate) {
	var result = null;
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var j = a.length - (_g++ + 1);
		if(predicate(a[j])) {
			result = a[j];
			break;
		}
	}
	return result;
};
banan_ds_ArrayHelper.removeIndex = function(a,index) {
	return a.splice(index,1)[0];
};
banan_ds_ArrayHelper.toHashSet = function(a) {
	var it = HxOverrides.iter(a);
	var first = new haxe_ds_StringMap();
	while(it.hasNext()) {
		var x = it.next();
		var _this = first;
		if(__map_reserved[x] != null) {
			_this.setReserved(x,true);
		} else {
			_this.h[x] = true;
		}
		first = first;
	}
	return first;
};
banan_ds_ArrayHelper.contains = function(a,item) {
	return a.indexOf(item) >= 0;
};
banan_ds_ArrayHelper.pushUnique = function(a,item) {
	if(a.indexOf(item) < 0) {
		a.push(item);
	}
};
banan_ds_ArrayHelper.sortedInsert = function(a,el,getIdx) {
	var insertedAt = null;
	var idx = getIdx(el);
	var _g = 0;
	var _g1 = a.length;
	while(_g < _g1) {
		var i = _g++;
		if(getIdx(a[i]) > idx) {
			a.splice(i,0,el);
			insertedAt = i;
			break;
		}
	}
	if(insertedAt == null) {
		insertedAt = a.length;
		a.push(el);
	}
	return insertedAt;
};
var banan_ds_ReverseArrayIterator = function(array) {
	this._array = array;
	this._i = this._array.length - 1;
};
$hxClasses["banan.ds.ReverseArrayIterator"] = banan_ds_ReverseArrayIterator;
banan_ds_ReverseArrayIterator.__name__ = "banan.ds.ReverseArrayIterator";
banan_ds_ReverseArrayIterator.prototype = {
	_array: null
	,_i: null
	,hasNext: function() {
		return this._i >= 0;
	}
	,next: function() {
		return this._array[this._i--];
	}
	,__class__: banan_ds_ReverseArrayIterator
};
var banan_ds_ArrayIterator = function(array) {
	this._i = 0;
	this._array = array;
	this._length = array.length;
};
$hxClasses["banan.ds.ArrayIterator"] = banan_ds_ArrayIterator;
banan_ds_ArrayIterator.__name__ = "banan.ds.ArrayIterator";
banan_ds_ArrayIterator.prototype = {
	_array: null
	,_length: null
	,_i: null
	,hasNext: function() {
		return this._i < this._length;
	}
	,next: function() {
		return this._array[this._i++];
	}
	,__class__: banan_ds_ArrayIterator
};
var banan_ds__$ConstArray_ConstArray_$Impl_$ = {};
$hxClasses["banan.ds._ConstArray.ConstArray_Impl_"] = banan_ds__$ConstArray_ConstArray_$Impl_$;
banan_ds__$ConstArray_ConstArray_$Impl_$.__name__ = "banan.ds._ConstArray.ConstArray_Impl_";
banan_ds__$ConstArray_ConstArray_$Impl_$.__properties__ = {get_length:"get_length"};
banan_ds__$ConstArray_ConstArray_$Impl_$.get_length = function(this1) {
	return this1.length;
};
banan_ds__$ConstArray_ConstArray_$Impl_$.get = function(this1,no) {
	return this1[no];
};
banan_ds__$ConstArray_ConstArray_$Impl_$.__getMutable = function(this1) {
	return this1;
};
var banan_ds__$ConstMap_ConstMap_$Impl_$ = {};
$hxClasses["banan.ds._ConstMap.ConstMap_Impl_"] = banan_ds__$ConstMap_ConstMap_$Impl_$;
banan_ds__$ConstMap_ConstMap_$Impl_$.__name__ = "banan.ds._ConstMap.ConstMap_Impl_";
banan_ds__$ConstMap_ConstMap_$Impl_$.get = function(this1,key) {
	return this1.get(key);
};
banan_ds__$ConstMap_ConstMap_$Impl_$.exists = function(this1,key) {
	return this1.exists(key);
};
banan_ds__$ConstMap_ConstMap_$Impl_$.keys = function(this1) {
	return this1.keys();
};
banan_ds__$ConstMap_ConstMap_$Impl_$.iterator = function(this1) {
	return this1.iterator();
};
banan_ds__$ConstMap_ConstMap_$Impl_$.keyValueIterator = function(this1) {
	return this1.keyValueIterator();
};
banan_ds__$ConstMap_ConstMap_$Impl_$.copy = function(this1) {
	return this1.copy();
};
banan_ds__$ConstMap_ConstMap_$Impl_$.__getMutable = function(this1) {
	return this1;
};
banan_ds__$ConstMap_ConstMap_$Impl_$.toKeyValueIterable = function(this1) {
	return this1;
};
var banan_ds__$Map2K_Map2K_$Impl_$ = {};
$hxClasses["banan.ds._Map2K.Map2K_Impl_"] = banan_ds__$Map2K_Map2K_$Impl_$;
banan_ds__$Map2K_Map2K_$Impl_$.__name__ = "banan.ds._Map2K.Map2K_Impl_";
banan_ds__$Map2K_Map2K_$Impl_$.toIntIntMap = function(t) {
	return new banan_ds_Map2KImpl_$Int_$Int();
};
banan_ds__$Map2K_Map2K_$Impl_$.toIntStringMap = function(t) {
	return new banan_ds_Map2KImpl_$Int_$String();
};
banan_ds__$Map2K_Map2K_$Impl_$.toIntObjectMap = function(t) {
	return new banan_ds_Map2KImpl_$Int_$anon_$();
};
banan_ds__$Map2K_Map2K_$Impl_$.toStringIntMap = function(t) {
	return new banan_ds_Map2KImpl_$String_$Int();
};
banan_ds__$Map2K_Map2K_$Impl_$.toStringStringMap = function(t) {
	return new banan_ds_Map2KImpl_$String_$String();
};
banan_ds__$Map2K_Map2K_$Impl_$.toStringObjectMap = function(t) {
	return new banan_ds_Map2KImpl_$String_$anon_$();
};
banan_ds__$Map2K_Map2K_$Impl_$.toObjectIntMap = function(t) {
	return new banan_ds_Map2KImpl_$anon_$_$Int();
};
banan_ds__$Map2K_Map2K_$Impl_$.toObjectStringMap = function(t) {
	return new banan_ds_Map2KImpl_$anon_$_$String();
};
banan_ds__$Map2K_Map2K_$Impl_$.toObjectObjectMap = function(t) {
	return new banan_ds_Map2KImpl_$anon_$_$anon_$();
};
banan_ds__$Map2K_Map2K_$Impl_$.set = function(this1,key1,key2,value) {
	var m = this1.map.get(key1);
	if(m == null) {
		m = this1.createSubMap();
		this1.map.set(key1,m);
	}
	m.set(key2,value);
};
banan_ds__$Map2K_Map2K_$Impl_$.remove = function(this1,key1,key2) {
	var m = this1.map.get(key1);
	if(m != null) {
		return m.remove(key2);
	} else {
		return false;
	}
};
banan_ds__$Map2K_Map2K_$Impl_$.get = function(this1,key1,key2) {
	var m = this1.map.get(key1);
	if(m != null) {
		return m.get(key2);
	} else {
		return null;
	}
};
banan_ds__$Map2K_Map2K_$Impl_$.exists = function(this1,key1,key2) {
	var m = this1.map.get(key1);
	if(m != null) {
		return m.exists(key2);
	} else {
		return false;
	}
};
banan_ds__$Map2K_Map2K_$Impl_$.clear = function(this1) {
	this1.map.clear();
};
banan_ds__$Map2K_Map2K_$Impl_$.toString = function(this1) {
	return this1.toString();
};
banan_ds__$Map2K_Map2K_$Impl_$.keyValueIterator = function(this1) {
	return this1.map.keyValueIterator();
};
banan_ds__$Map2K_Map2K_$Impl_$.iterator = function(this1) {
	return new banan_ds_TripleIterator(this1);
};
var banan_ds_IMap2KImpl = function() { };
$hxClasses["banan.ds.IMap2KImpl"] = banan_ds_IMap2KImpl;
banan_ds_IMap2KImpl.__name__ = "banan.ds.IMap2KImpl";
banan_ds_IMap2KImpl.__isInterface__ = true;
banan_ds_IMap2KImpl.prototype = {
	map: null
	,createSubMap: null
	,toString: null
	,__class__: banan_ds_IMap2KImpl
};
var banan_ds_TripleIterator = function(map2k) {
	this.map = map2k.map;
	this.keys1 = this.map.keys();
	this.keys2 = null;
	while(this.keys1.hasNext() && this.keys2 == null) {
		this.key1 = this.keys1.next();
		this.keys2 = this.map.get(this.key1).keys();
		if(!this.keys2.hasNext()) {
			this.keys2 = null;
		}
	}
};
$hxClasses["banan.ds.TripleIterator"] = banan_ds_TripleIterator;
banan_ds_TripleIterator.__name__ = "banan.ds.TripleIterator";
banan_ds_TripleIterator.prototype = {
	map: null
	,key1: null
	,keys1: null
	,keys2: null
	,hasNext: function() {
		return this.keys2 != null;
	}
	,next: function() {
		var key1 = this.key1;
		var key2 = this.keys2.next();
		var value = this.map.get(key1).get(key2);
		if(!this.keys2.hasNext()) {
			this.keys2 = null;
			while(this.keys1.hasNext() && this.keys2 == null) {
				this.key1 = this.keys1.next();
				this.keys2 = this.map.get(this.key1).keys();
				if(!this.keys2.hasNext()) {
					this.keys2 = null;
				}
			}
		}
		return { key1 : key1, key2 : key2, value : value};
	}
	,__class__: banan_ds_TripleIterator
};
var banan_ds_Map2KImpl_$Int_$Int = function() {
	this.map = new haxe_ds_IntMap();
};
$hxClasses["banan.ds.Map2KImpl_Int_Int"] = banan_ds_Map2KImpl_$Int_$Int;
banan_ds_Map2KImpl_$Int_$Int.__name__ = "banan.ds.Map2KImpl_Int_Int";
banan_ds_Map2KImpl_$Int_$Int.__interfaces__ = [banan_ds_IMap2KImpl];
banan_ds_Map2KImpl_$Int_$Int.prototype = {
	map: null
	,createSubMap: function() {
		return new haxe_ds_IntMap();
	}
	,toString: function() {
		var s_b = "";
		s_b = "{\n";
		var _g = this.map.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key1 = _g1.key;
			var _g2 = new haxe_iterators_MapKeyValueIterator(_g1.value);
			while(_g2.hasNext()) {
				var _g3 = _g2.next();
				var key2 = _g3.key;
				s_b += Std.string(key1 == null ? "null" : "" + key1);
				s_b += "=>";
				s_b += Std.string(key2 == null ? "null" : "" + key2);
				s_b += "=>";
				s_b += Std.string(Std.string(_g3.value));
				s_b += "\n";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: banan_ds_Map2KImpl_$Int_$Int
};
var banan_ds_Map2KImpl_$Int_$String = function() {
	this.map = new haxe_ds_IntMap();
};
$hxClasses["banan.ds.Map2KImpl_Int_String"] = banan_ds_Map2KImpl_$Int_$String;
banan_ds_Map2KImpl_$Int_$String.__name__ = "banan.ds.Map2KImpl_Int_String";
banan_ds_Map2KImpl_$Int_$String.__interfaces__ = [banan_ds_IMap2KImpl];
banan_ds_Map2KImpl_$Int_$String.prototype = {
	map: null
	,createSubMap: function() {
		return new haxe_ds_StringMap();
	}
	,toString: function() {
		var s_b = "";
		s_b = "{\n";
		var _g = this.map.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key1 = _g1.key;
			var _g2 = new haxe_iterators_MapKeyValueIterator(_g1.value);
			while(_g2.hasNext()) {
				var _g3 = _g2.next();
				var key2 = _g3.key;
				s_b += Std.string(key1 == null ? "null" : "" + key1);
				s_b += "=>";
				s_b += Std.string(key2 == null ? "null" : "" + key2);
				s_b += "=>";
				s_b += Std.string(Std.string(_g3.value));
				s_b += "\n";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: banan_ds_Map2KImpl_$Int_$String
};
var banan_ds_Map2KImpl_$Int_$anon_$ = function() {
	this.map = new haxe_ds_IntMap();
};
$hxClasses["banan.ds.Map2KImpl_Int_anon_"] = banan_ds_Map2KImpl_$Int_$anon_$;
banan_ds_Map2KImpl_$Int_$anon_$.__name__ = "banan.ds.Map2KImpl_Int_anon_";
banan_ds_Map2KImpl_$Int_$anon_$.__interfaces__ = [banan_ds_IMap2KImpl];
banan_ds_Map2KImpl_$Int_$anon_$.prototype = {
	map: null
	,createSubMap: function() {
		return new haxe_ds_ObjectMap();
	}
	,toString: function() {
		var s_b = "";
		s_b = "{\n";
		var _g = this.map.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key1 = _g1.key;
			var _g2 = new haxe_iterators_MapKeyValueIterator(_g1.value);
			while(_g2.hasNext()) {
				var _g3 = _g2.next();
				s_b += Std.string(key1 == null ? "null" : "" + key1);
				s_b += "=>";
				s_b += Std.string(Std.string(_g3.key));
				s_b += "=>";
				s_b += Std.string(Std.string(_g3.value));
				s_b += "\n";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: banan_ds_Map2KImpl_$Int_$anon_$
};
var banan_ds_Map2KImpl_$String_$Int = function() {
	this.map = new haxe_ds_StringMap();
};
$hxClasses["banan.ds.Map2KImpl_String_Int"] = banan_ds_Map2KImpl_$String_$Int;
banan_ds_Map2KImpl_$String_$Int.__name__ = "banan.ds.Map2KImpl_String_Int";
banan_ds_Map2KImpl_$String_$Int.__interfaces__ = [banan_ds_IMap2KImpl];
banan_ds_Map2KImpl_$String_$Int.prototype = {
	map: null
	,createSubMap: function() {
		return new haxe_ds_IntMap();
	}
	,toString: function() {
		var s_b = "";
		s_b = "{\n";
		var _g = this.map.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key1 = _g1.key;
			var _g2 = new haxe_iterators_MapKeyValueIterator(_g1.value);
			while(_g2.hasNext()) {
				var _g3 = _g2.next();
				var key2 = _g3.key;
				s_b += Std.string(key1 == null ? "null" : "" + key1);
				s_b += "=>";
				s_b += Std.string(key2 == null ? "null" : "" + key2);
				s_b += "=>";
				s_b += Std.string(Std.string(_g3.value));
				s_b += "\n";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: banan_ds_Map2KImpl_$String_$Int
};
var banan_ds_Map2KImpl_$String_$String = function() {
	this.map = new haxe_ds_StringMap();
};
$hxClasses["banan.ds.Map2KImpl_String_String"] = banan_ds_Map2KImpl_$String_$String;
banan_ds_Map2KImpl_$String_$String.__name__ = "banan.ds.Map2KImpl_String_String";
banan_ds_Map2KImpl_$String_$String.__interfaces__ = [banan_ds_IMap2KImpl];
banan_ds_Map2KImpl_$String_$String.prototype = {
	map: null
	,createSubMap: function() {
		return new haxe_ds_StringMap();
	}
	,toString: function() {
		var s_b = "";
		s_b = "{\n";
		var _g = this.map.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key1 = _g1.key;
			var _g2 = new haxe_iterators_MapKeyValueIterator(_g1.value);
			while(_g2.hasNext()) {
				var _g3 = _g2.next();
				var key2 = _g3.key;
				s_b += Std.string(key1 == null ? "null" : "" + key1);
				s_b += "=>";
				s_b += Std.string(key2 == null ? "null" : "" + key2);
				s_b += "=>";
				s_b += Std.string(Std.string(_g3.value));
				s_b += "\n";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: banan_ds_Map2KImpl_$String_$String
};
var banan_ds_Map2KImpl_$String_$anon_$ = function() {
	this.map = new haxe_ds_StringMap();
};
$hxClasses["banan.ds.Map2KImpl_String_anon_"] = banan_ds_Map2KImpl_$String_$anon_$;
banan_ds_Map2KImpl_$String_$anon_$.__name__ = "banan.ds.Map2KImpl_String_anon_";
banan_ds_Map2KImpl_$String_$anon_$.__interfaces__ = [banan_ds_IMap2KImpl];
banan_ds_Map2KImpl_$String_$anon_$.prototype = {
	map: null
	,createSubMap: function() {
		return new haxe_ds_ObjectMap();
	}
	,toString: function() {
		var s_b = "";
		s_b = "{\n";
		var _g = this.map.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key1 = _g1.key;
			var _g2 = new haxe_iterators_MapKeyValueIterator(_g1.value);
			while(_g2.hasNext()) {
				var _g3 = _g2.next();
				s_b += Std.string(key1 == null ? "null" : "" + key1);
				s_b += "=>";
				s_b += Std.string(Std.string(_g3.key));
				s_b += "=>";
				s_b += Std.string(Std.string(_g3.value));
				s_b += "\n";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: banan_ds_Map2KImpl_$String_$anon_$
};
var banan_ds_Map2KImpl_$anon_$_$Int = function() {
	this.map = new haxe_ds_ObjectMap();
};
$hxClasses["banan.ds.Map2KImpl_anon__Int"] = banan_ds_Map2KImpl_$anon_$_$Int;
banan_ds_Map2KImpl_$anon_$_$Int.__name__ = "banan.ds.Map2KImpl_anon__Int";
banan_ds_Map2KImpl_$anon_$_$Int.__interfaces__ = [banan_ds_IMap2KImpl];
banan_ds_Map2KImpl_$anon_$_$Int.prototype = {
	map: null
	,createSubMap: function() {
		return new haxe_ds_IntMap();
	}
	,toString: function() {
		var s_b = "";
		s_b = "{\n";
		var _g = this.map.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key1 = _g1.key;
			var _g2 = new haxe_iterators_MapKeyValueIterator(_g1.value);
			while(_g2.hasNext()) {
				var _g3 = _g2.next();
				var key2 = _g3.key;
				s_b += Std.string(Std.string(key1));
				s_b += "=>";
				s_b += Std.string(key2 == null ? "null" : "" + key2);
				s_b += "=>";
				s_b += Std.string(Std.string(_g3.value));
				s_b += "\n";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: banan_ds_Map2KImpl_$anon_$_$Int
};
var banan_ds_Map2KImpl_$anon_$_$String = function() {
	this.map = new haxe_ds_ObjectMap();
};
$hxClasses["banan.ds.Map2KImpl_anon__String"] = banan_ds_Map2KImpl_$anon_$_$String;
banan_ds_Map2KImpl_$anon_$_$String.__name__ = "banan.ds.Map2KImpl_anon__String";
banan_ds_Map2KImpl_$anon_$_$String.__interfaces__ = [banan_ds_IMap2KImpl];
banan_ds_Map2KImpl_$anon_$_$String.prototype = {
	map: null
	,createSubMap: function() {
		return new haxe_ds_StringMap();
	}
	,toString: function() {
		var s_b = "";
		s_b = "{\n";
		var _g = this.map.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key1 = _g1.key;
			var _g2 = new haxe_iterators_MapKeyValueIterator(_g1.value);
			while(_g2.hasNext()) {
				var _g3 = _g2.next();
				var key2 = _g3.key;
				s_b += Std.string(Std.string(key1));
				s_b += "=>";
				s_b += Std.string(key2 == null ? "null" : "" + key2);
				s_b += "=>";
				s_b += Std.string(Std.string(_g3.value));
				s_b += "\n";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: banan_ds_Map2KImpl_$anon_$_$String
};
var banan_ds_Map2KImpl_$anon_$_$anon_$ = function() {
	this.map = new haxe_ds_ObjectMap();
};
$hxClasses["banan.ds.Map2KImpl_anon__anon_"] = banan_ds_Map2KImpl_$anon_$_$anon_$;
banan_ds_Map2KImpl_$anon_$_$anon_$.__name__ = "banan.ds.Map2KImpl_anon__anon_";
banan_ds_Map2KImpl_$anon_$_$anon_$.__interfaces__ = [banan_ds_IMap2KImpl];
banan_ds_Map2KImpl_$anon_$_$anon_$.prototype = {
	map: null
	,createSubMap: function() {
		return new haxe_ds_ObjectMap();
	}
	,toString: function() {
		var s_b = "";
		s_b = "{\n";
		var _g = this.map.keyValueIterator();
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var key1 = _g1.key;
			var _g2 = new haxe_iterators_MapKeyValueIterator(_g1.value);
			while(_g2.hasNext()) {
				var _g3 = _g2.next();
				s_b += Std.string(Std.string(key1));
				s_b += "=>";
				s_b += Std.string(Std.string(_g3.key));
				s_b += "=>";
				s_b += Std.string(Std.string(_g3.value));
				s_b += "\n";
			}
		}
		s_b += "}";
		return s_b;
	}
	,__class__: banan_ds_Map2KImpl_$anon_$_$anon_$
};
var banan_error_Error = function(typeCode,position,message,scope,stack) {
	this.typeCode = typeCode;
	this.position = position;
	this.message = message;
	this.scope = scope;
	this.stack = stack;
};
$hxClasses["banan.error.Error"] = banan_error_Error;
banan_error_Error.__name__ = "banan.error.Error";
banan_error_Error.fromCallStack = function(typeCode,stackPos,message,scope) {
	if(stackPos == null) {
		stackPos = 0;
	}
	var stack = haxe_CallStack.callStack().slice(1);
	return banan_error_Error.e(typeCode,stack[stackPos] == null ? "unknown" : StringTools.replace(haxe_CallStack.toString([stack[stackPos]]),"\nCalled from ",""),message,scope,stack);
};
banan_error_Error.fromExceptionStack = function(typeCode,stackPos,message,scope) {
	if(stackPos == null) {
		stackPos = 0;
	}
	var stack = haxe_CallStack.exceptionStack();
	return banan_error_Error.e(typeCode,stack[stackPos] == null ? "unknown" : StringTools.replace(haxe_CallStack.toString([stack[stackPos]]),"\nCalled from ",""),message,scope,stack);
};
banan_error_Error.getPositionDescr = function(posInfos) {
	return banan_error_Error.getShortPosition("" + posInfos.fileName + ":" + posInfos.lineNumber + ":");
};
banan_error_Error.e = function(typeCode,position,message,scope,stack) {
	if(message == null) {
		message = "";
	}
	if(stack == null) {
		stack = haxe_CallStack.callStack().slice(1);
	}
	if(scope == null) {
		scope = { };
	}
	return new banan_error_Error(typeCode,position,message,scope,stack);
};
banan_error_Error.getShortPosition = function(longPostion) {
	return longPostion.substring(longPostion.lastIndexOf("/") + 1,longPostion.lastIndexOf(":"));
};
banan_error_Error.prototype = {
	typeCode: null
	,position: null
	,message: null
	,scope: null
	,stack: null
	,typeStr: null
	,clone: function(typeCode) {
		return new banan_error_Error(typeCode != null ? typeCode : this.typeCode,this.position,this.message,this.scope,this.stack);
	}
	,toString: function() {
		return this.toStringExt("ERROR");
	}
	,toStringExt: function(caption) {
		return "\n\n" + StringTools.rpad(StringTools.lpad("  " + caption + "  ","#",(73 + caption.length + 4) / 2 | 0),"#",73) + "\n" + ("type: " + banan_error_ErrorType.breadcrumbs(this.typeCode).join("|") + "\n") + ("position: " + Std.string(this.position) + "\n") + ("message: " + Std.string(this.message) + "\n") + ("scope: " + Std.string(this.scope) + "\n") + "stack:" + ("" + haxe_CallStack.toString(this.stack) + "\n") + "#########################################################################" + "\n\n";
	}
	,get_typeStr: function() {
		return banan_error_ErrorType.breadcrumbs(this.typeCode).join("|");
	}
	,__class__: banan_error_Error
	,__properties__: {get_typeStr:"get_typeStr"}
};
var banan_error_ErrorType = function() {
};
$hxClasses["banan.error.ErrorType"] = banan_error_ErrorType;
banan_error_ErrorType.__name__ = "banan.error.ErrorType";
banan_error_ErrorType.breadcrumbs = function(typeCode) {
	var errorIndex = typeCode - (typeCode / banan_error_ErrorType.catRange | 0) * banan_error_ErrorType.catRange;
	return [banan_error_ErrorType.ROOT_CATEGORY_GAME,banan_error_ErrorType.catByCode[errorIndex],banan_error_ErrorType.messageByCode[errorIndex]];
};
banan_error_ErrorType.formattedBreadcrumbs = function(typeCode) {
	return banan_error_ErrorType.breadcrumbs(typeCode).join("|");
};
banan_error_ErrorType.formatErrorMessage = function(typeCode,str) {
	return "" + banan_error_ErrorType.breadcrumbs(typeCode).join("|") + "|" + str;
};
banan_error_ErrorType.all = function() {
	var errorTypes = new haxe_ds_IntMap();
	var _g = 0;
	var _g1 = banan_error_ErrorType.messageByCode.length;
	while(_g < _g1) {
		var typeCode = _g++ + banan_error_ErrorType.catRange;
		var v = banan_error_ErrorType.breadcrumbs(typeCode).join("|");
		errorTypes.h[typeCode] = v;
	}
	return errorTypes;
};
banan_error_ErrorType.prototype = {
	__class__: banan_error_ErrorType
};
var banan_es_EntityComponents = function() {
	this.__component__jetgui_element_Element = null;
	this.__component__jetgui_JetTooltipEdge = null;
	this.__component__jetgui_JetDataEdge = null;
	this.__component__banan_input_InputPolygonEdge = null;
	this.__component__banan_display_NodeLookEdge = null;
	this.__component__banan_display_NodeEdge = null;
	this.__component__banan_display_DisplayEdge = null;
	this.__component__banan_backend_RenderRootEdge = null;
};
$hxClasses["banan.es.EntityComponents"] = banan_es_EntityComponents;
banan_es_EntityComponents.__name__ = "banan.es.EntityComponents";
banan_es_EntityComponents.prototype = {
	__component__banan_backend_RenderRootEdge: null
	,__add__banan_backend_RenderRootEdge: function(component) {
		var entity = this;
		if(entity.__component__banan_backend_RenderRootEdge != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:7","entity.__component__banan_backend_RenderRootEdge.isNone" + ": " + "Component is already added",null));
		}
		if(component == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:7","banan.basis.May.from(component).isSome" + ": " + "Passed component is null",null));
		}
		entity.__component__banan_backend_RenderRootEdge = component;
		entity.system.__systemLists.__onAdded__banan_backend_RenderRootEdge.dispatch(entity,component);
		return component;
	}
	,__dispose__banan_backend_RenderRootEdge: function() {
		var entity = this;
		var mComponent = entity.__component__banan_backend_RenderRootEdge;
		if(mComponent == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:10","mComponent.isSome" + ": " + "Component is already null",null));
		}
		entity.__component__banan_backend_RenderRootEdge = null;
		entity.system.__systemLists.__onRemoved__banan_backend_RenderRootEdge.dispatch(entity,mComponent);
	}
	,__component__banan_display_DisplayEdge: null
	,__add__banan_display_DisplayEdge: function(component) {
		var entity = this;
		if(entity.__component__banan_display_DisplayEdge != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:14","entity.__component__banan_display_DisplayEdge.isNone" + ": " + "Component is already added",null));
		}
		if(component == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:14","banan.basis.May.from(component).isSome" + ": " + "Passed component is null",null));
		}
		entity.__component__banan_display_DisplayEdge = component;
		entity.system.__systemLists.__onAdded__banan_display_DisplayEdge.dispatch(entity,component);
		return component;
	}
	,__dispose__banan_display_DisplayEdge: function() {
		var entity = this;
		var mComponent = entity.__component__banan_display_DisplayEdge;
		if(mComponent == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:17","mComponent.isSome" + ": " + "Component is already null",null));
		}
		entity.__component__banan_display_DisplayEdge = null;
		entity.system.__systemLists.__onRemoved__banan_display_DisplayEdge.dispatch(entity,mComponent);
	}
	,__component__banan_display_NodeEdge: null
	,__add__banan_display_NodeEdge: function(component) {
		var entity = this;
		if(entity.__component__banan_display_NodeEdge != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:21","entity.__component__banan_display_NodeEdge.isNone" + ": " + "Component is already added",null));
		}
		if(component == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:21","banan.basis.May.from(component).isSome" + ": " + "Passed component is null",null));
		}
		entity.__component__banan_display_NodeEdge = component;
		if(entity.__component__banan_display_NodeEdge != null) {
			var tmp = entity.system.__systemLists.__list__Some_banan_display_NodeEdge.push(entity);
			entity.__listIndexes.__index__Some_banan_display_NodeEdge = tmp - 1;
		}
		if(entity.__component__banan_display_NodeLookEdge != null && entity.__component__banan_display_NodeEdge != null) {
			var tmp1 = entity.system.__systemLists.__list__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge.push(entity);
			entity.__listIndexes.__index__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge = tmp1 - 1;
		}
		entity.system.__systemLists.__onAdded__banan_display_NodeEdge.dispatch(entity,component);
		return component;
	}
	,__dispose__banan_display_NodeEdge: function() {
		var entity = this;
		var mComponent = entity.__component__banan_display_NodeEdge;
		if(mComponent == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:24","mComponent.isSome" + ": " + "Component is already null",null));
		}
		entity.__component__banan_display_NodeEdge = null;
		var index = entity.__listIndexes.__index__Some_banan_display_NodeEdge;
		if(index >= 0) {
			var list = entity.system.__systemLists.__list__Some_banan_display_NodeEdge;
			var last = list.pop();
			if(last != entity) {
				list[index] = last;
				last.__listIndexes.__index__Some_banan_display_NodeEdge = index;
			}
			entity.__listIndexes.__index__Some_banan_display_NodeEdge = -1;
		}
		var index1 = entity.__listIndexes.__index__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge;
		if(index1 >= 0) {
			var list1 = entity.system.__systemLists.__list__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge;
			var last1 = list1.pop();
			if(last1 != entity) {
				list1[index1] = last1;
				last1.__listIndexes.__index__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge = index1;
			}
			entity.__listIndexes.__index__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge = -1;
		}
		entity.system.__systemLists.__onRemoved__banan_display_NodeEdge.dispatch(entity,mComponent);
	}
	,__component__banan_display_NodeLookEdge: null
	,__add__banan_display_NodeLookEdge: function(component) {
		var entity = this;
		if(entity.__component__banan_display_NodeLookEdge != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:28","entity.__component__banan_display_NodeLookEdge.isNone" + ": " + "Component is already added",null));
		}
		if(component == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:28","banan.basis.May.from(component).isSome" + ": " + "Passed component is null",null));
		}
		entity.__component__banan_display_NodeLookEdge = component;
		if(entity.__component__banan_display_NodeLookEdge != null && entity.__component__banan_display_NodeEdge != null) {
			var tmp = entity.system.__systemLists.__list__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge.push(entity);
			entity.__listIndexes.__index__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge = tmp - 1;
		}
		entity.system.__systemLists.__onAdded__banan_display_NodeLookEdge.dispatch(entity,component);
		return component;
	}
	,__dispose__banan_display_NodeLookEdge: function() {
		var entity = this;
		var mComponent = entity.__component__banan_display_NodeLookEdge;
		if(mComponent == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:31","mComponent.isSome" + ": " + "Component is already null",null));
		}
		entity.__component__banan_display_NodeLookEdge = null;
		var index = entity.__listIndexes.__index__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge;
		if(index >= 0) {
			var list = entity.system.__systemLists.__list__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge;
			var last = list.pop();
			if(last != entity) {
				list[index] = last;
				last.__listIndexes.__index__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge = index;
			}
			entity.__listIndexes.__index__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge = -1;
		}
		entity.system.__systemLists.__onRemoved__banan_display_NodeLookEdge.dispatch(entity,mComponent);
	}
	,__component__banan_input_InputPolygonEdge: null
	,__add__banan_input_InputPolygonEdge: function(component) {
		var entity = this;
		if(entity.__component__banan_input_InputPolygonEdge != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:35","entity.__component__banan_input_InputPolygonEdge.isNone" + ": " + "Component is already added",null));
		}
		if(component == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:35","banan.basis.May.from(component).isSome" + ": " + "Passed component is null",null));
		}
		entity.__component__banan_input_InputPolygonEdge = component;
		entity.system.__systemLists.__onAdded__banan_input_InputPolygonEdge.dispatch(entity,component);
		return component;
	}
	,__dispose__banan_input_InputPolygonEdge: function() {
		var entity = this;
		var mComponent = entity.__component__banan_input_InputPolygonEdge;
		if(mComponent == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:38","mComponent.isSome" + ": " + "Component is already null",null));
		}
		entity.__component__banan_input_InputPolygonEdge = null;
		entity.system.__systemLists.__onRemoved__banan_input_InputPolygonEdge.dispatch(entity,mComponent);
	}
	,__component__jetgui_JetDataEdge: null
	,__add__jetgui_JetDataEdge: function(component) {
		var entity = this;
		if(entity.__component__jetgui_JetDataEdge != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:42","entity.__component__jetgui_JetDataEdge.isNone" + ": " + "Component is already added",null));
		}
		if(component == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:42","banan.basis.May.from(component).isSome" + ": " + "Passed component is null",null));
		}
		entity.__component__jetgui_JetDataEdge = component;
		if(entity.__component__jetgui_JetDataEdge != null) {
			var tmp = entity.system.__systemLists.__list__Some_jetgui_JetDataEdge.push(entity);
			entity.__listIndexes.__index__Some_jetgui_JetDataEdge = tmp - 1;
		}
		entity.system.__systemLists.__onAdded__jetgui_JetDataEdge.dispatch(entity,component);
		return component;
	}
	,__dispose__jetgui_JetDataEdge: function() {
		var entity = this;
		var mComponent = entity.__component__jetgui_JetDataEdge;
		if(mComponent == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:45","mComponent.isSome" + ": " + "Component is already null",null));
		}
		entity.__component__jetgui_JetDataEdge = null;
		var index = entity.__listIndexes.__index__Some_jetgui_JetDataEdge;
		if(index >= 0) {
			var list = entity.system.__systemLists.__list__Some_jetgui_JetDataEdge;
			var last = list.pop();
			if(last != entity) {
				list[index] = last;
				last.__listIndexes.__index__Some_jetgui_JetDataEdge = index;
			}
			entity.__listIndexes.__index__Some_jetgui_JetDataEdge = -1;
		}
		entity.system.__systemLists.__onRemoved__jetgui_JetDataEdge.dispatch(entity,mComponent);
	}
	,__component__jetgui_JetTooltipEdge: null
	,__add__jetgui_JetTooltipEdge: function(component) {
		var entity = this;
		if(entity.__component__jetgui_JetTooltipEdge != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:49","entity.__component__jetgui_JetTooltipEdge.isNone" + ": " + "Component is already added",null));
		}
		if(component == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:49","banan.basis.May.from(component).isSome" + ": " + "Passed component is null",null));
		}
		entity.__component__jetgui_JetTooltipEdge = component;
		entity.system.__systemLists.__onAdded__jetgui_JetTooltipEdge.dispatch(entity,component);
		return component;
	}
	,__dispose__jetgui_JetTooltipEdge: function() {
		var entity = this;
		var mComponent = entity.__component__jetgui_JetTooltipEdge;
		if(mComponent == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:52","mComponent.isSome" + ": " + "Component is already null",null));
		}
		entity.__component__jetgui_JetTooltipEdge = null;
		entity.system.__systemLists.__onRemoved__jetgui_JetTooltipEdge.dispatch(entity,mComponent);
	}
	,__component__jetgui_element_Element: null
	,__add__jetgui_element_Element: function(component) {
		var entity = this;
		if(entity.__component__jetgui_element_Element != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:56","entity.__component__jetgui_element_Element.isNone" + ": " + "Component is already added",null));
		}
		if(component == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:56","banan.basis.May.from(component).isSome" + ": " + "Passed component is null",null));
		}
		entity.__component__jetgui_element_Element = component;
		entity.system.__systemLists.__onAdded__jetgui_element_Element.dispatch(entity,component);
		return component;
	}
	,__dispose__jetgui_element_Element: function() {
		var entity = this;
		var mComponent = entity.__component__jetgui_element_Element;
		if(mComponent == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityComponents.hx:59","mComponent.isSome" + ": " + "Component is already null",null));
		}
		entity.__component__jetgui_element_Element = null;
		entity.system.__systemLists.__onRemoved__jetgui_element_Element.dispatch(entity,mComponent);
	}
	,__class__: banan_es_EntityComponents
};
var banan_es_Entity = function(system,name) {
	this.__listIndexes = new banan_es_EntityListIndexes();
	this.disposeState = banan_basis_DisposeState.Initing;
	this.id = banan_es_Entity.nextId++;
	banan_es_EntityComponents.call(this);
	this.name = name;
	this.system = system;
	this.disposeState = banan_basis_DisposeState.Inited;
};
$hxClasses["banan.es.Entity"] = banan_es_Entity;
banan_es_Entity.__name__ = "banan.es.Entity";
banan_es_Entity.__super__ = banan_es_EntityComponents;
banan_es_Entity.prototype = $extend(banan_es_EntityComponents.prototype,{
	name: null
	,id: null
	,system: null
	,disposeState: null
	,__listIndexes: null
	,toString: function() {
		return "" + this.name + "#" + this.id;
	}
	,__startDispose: function() {
		if(this.disposeState._hx_index != 1) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Entity.hx:45","disposeState.match(DisposeState.Inited)" + ": " + ("Can not start dispose " + Std.string(this.disposeState) + " Entity"),null));
		}
		this.disposeState = banan_basis_DisposeState.Disposing;
	}
	,__finishDispose: function() {
		if(this.disposeState._hx_index != 2) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Entity.hx:50","disposeState.match(DisposeState.Disposing)" + ": " + ("Can not finish dispose " + Std.string(this.disposeState) + " Entity"),null));
		}
		var entity = this;
		if(entity.__component__banan_backend_RenderRootEdge != null) {
			entity.__dispose__banan_backend_RenderRootEdge();
		}
		if(entity.__component__banan_display_DisplayEdge != null) {
			entity.__dispose__banan_display_DisplayEdge();
		}
		if(entity.__component__banan_display_NodeEdge != null) {
			entity.__dispose__banan_display_NodeEdge();
		}
		if(entity.__component__banan_display_NodeLookEdge != null) {
			entity.__dispose__banan_display_NodeLookEdge();
		}
		if(entity.__component__banan_input_InputPolygonEdge != null) {
			entity.__dispose__banan_input_InputPolygonEdge();
		}
		if(entity.__component__jetgui_JetDataEdge != null) {
			entity.__dispose__jetgui_JetDataEdge();
		}
		if(entity.__component__jetgui_JetTooltipEdge != null) {
			entity.__dispose__jetgui_JetTooltipEdge();
		}
		if(entity.__component__jetgui_element_Element != null) {
			entity.__dispose__jetgui_element_Element();
		}
		this.system = null;
		this.disposeState = banan_basis_DisposeState.Disposed;
	}
	,__class__: banan_es_Entity
});
var banan_es_EntityDelayedDisposer = function(updatePriority) {
	this.isAsyncDisposingEntities = false;
	this.entitiesToDisposing = [];
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.es.EntityDelayedDisposer"] = banan_es_EntityDelayedDisposer;
banan_es_EntityDelayedDisposer.__name__ = "banan.es.EntityDelayedDisposer";
banan_es_EntityDelayedDisposer.__super__ = banan_module_Module;
banan_es_EntityDelayedDisposer.prototype = $extend(banan_module_Module.prototype,{
	entitiesToDisposing: null
	,isAsyncDisposingEntities: null
	,asyncDisposeEntity: function(entity) {
		if(this.entitiesToDisposing.indexOf(entity) < 0) {
			if(!(entity.disposeState._hx_index != 2 && entity.disposeState._hx_index != 3)) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityDelayedDisposer.hx:17","!entity.disposeState.match(DisposeState.Disposing) && !entity.disposeState.match(DisposeState.Disposed)" + ": " + ("can not EntityFactorySystem.asyncDisposeEntity(): entity \"" + Std.string(entity) + "\" is " + Std.string(entity.disposeState)),null));
			}
			this.entitiesToDisposing.push(entity);
		}
	}
	,isInited: function(entity) {
		var a = entity != null ? entity.disposeState == banan_basis_DisposeState.Inited && this.entitiesToDisposing.indexOf(entity) == -1 : null;
		if(a != null) {
			return a;
		} else {
			return false;
		}
	}
	,syncDisposeEntity: function(entity) {
		if(!this.isAsyncDisposingEntities) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityDelayedDisposer.hx:33","isAsyncDisposingEntities" + ": " + "can not EntityFactorySystem.syncDisposeEntity(): entities are not disposing now",null));
		}
		entity.system.disposeEntity(entity);
	}
	,afterUpdate: function() {
		this.disposeEntities();
	}
	,disposeEntities: function() {
		this.isAsyncDisposingEntities = true;
		var entity = this.entitiesToDisposing.pop();
		while(entity != null) {
			if(entity.disposeState._hx_index == 0) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntityDelayedDisposer.hx:47","!entity.disposeState.match(DisposeState.Initing)",{ "disposeState" : entity.disposeState}));
			}
			if(entity.disposeState._hx_index == 1) {
				this.disposeEntity(entity);
			}
			entity = this.entitiesToDisposing.pop();
		}
		this.isAsyncDisposingEntities = false;
	}
	,disposeEntity: function(entity) {
		this.syncDisposeEntity(entity);
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("banan.es.EntityDelayedDisposer",[],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: banan_es_EntityDelayedDisposer
});
var banan_es_EntityListIndexes = function() {
	this.__index__Some_jetgui_JetDataEdge = -1;
	this.__index__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge = -1;
	this.__index__Some_banan_display_NodeEdge = -1;
};
$hxClasses["banan.es.EntityListIndexes"] = banan_es_EntityListIndexes;
banan_es_EntityListIndexes.__name__ = "banan.es.EntityListIndexes";
banan_es_EntityListIndexes.prototype = {
	__index__Some_banan_display_NodeEdge: null
	,__index__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge: null
	,__index__Some_jetgui_JetDataEdge: null
	,__class__: banan_es_EntityListIndexes
};
var banan_es_EntitySystem = function(updatePriority) {
	this._entities = [];
	this.__systemLists = new banan_es_EntitySystemLists();
	this.onEntityStartDispose = new msignal_Signal1();
	this.onEntityCreated = new msignal_Signal1();
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.es.EntitySystem"] = banan_es_EntitySystem;
banan_es_EntitySystem.__name__ = "banan.es.EntitySystem";
banan_es_EntitySystem.__super__ = banan_module_Module;
banan_es_EntitySystem.prototype = $extend(banan_module_Module.prototype,{
	onEntityCreated: null
	,onEntityStartDispose: null
	,__systemLists: null
	,get_entities: function() {
		return this._entities;
	}
	,_entities: null
	,createEntity: function(name) {
		var entity = new banan_es_Entity(this,name);
		this._entities.push(entity);
		this.onEntityCreated.dispatch(entity);
		return entity;
	}
	,disposeEntity: function(entity) {
		if(entity.system != this) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"EntitySystem.hx:100","entity.system == this" + ": " + ("Entity " + Std.string(entity) + " does not belong to system or disposed"),null));
		}
		if(entity.disposeState._hx_index != 1) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Entity.hx:45","disposeState.match(DisposeState.Inited)" + ": " + ("Can not start dispose " + Std.string(entity.disposeState) + " Entity"),null));
		}
		entity.disposeState = banan_basis_DisposeState.Disposing;
		this.onEntityStartDispose.dispatch(entity);
		if(entity.disposeState._hx_index != 2) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Entity.hx:50","disposeState.match(DisposeState.Disposing)" + ": " + ("Can not finish dispose " + Std.string(entity.disposeState) + " Entity"),null));
		}
		if(entity.__component__banan_backend_RenderRootEdge != null) {
			entity.__dispose__banan_backend_RenderRootEdge();
		}
		if(entity.__component__banan_display_DisplayEdge != null) {
			entity.__dispose__banan_display_DisplayEdge();
		}
		if(entity.__component__banan_display_NodeEdge != null) {
			entity.__dispose__banan_display_NodeEdge();
		}
		if(entity.__component__banan_display_NodeLookEdge != null) {
			entity.__dispose__banan_display_NodeLookEdge();
		}
		if(entity.__component__banan_input_InputPolygonEdge != null) {
			entity.__dispose__banan_input_InputPolygonEdge();
		}
		if(entity.__component__jetgui_JetDataEdge != null) {
			entity.__dispose__jetgui_JetDataEdge();
		}
		if(entity.__component__jetgui_JetTooltipEdge != null) {
			entity.__dispose__jetgui_JetTooltipEdge();
		}
		if(entity.__component__jetgui_element_Element != null) {
			entity.__dispose__jetgui_element_Element();
		}
		entity.system = null;
		entity.disposeState = banan_basis_DisposeState.Disposed;
		HxOverrides.remove(this._entities,entity);
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("banan.es.EntitySystem",[],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: banan_es_EntitySystem
	,__properties__: {get_entities:"get_entities"}
});
var banan_es_EntitySystemLists = function() {
	this.__onRemoved__jetgui_element_Element = new msignal_Signal2();
	this.__onRemoved__jetgui_JetTooltipEdge = new msignal_Signal2();
	this.__onRemoved__jetgui_JetDataEdge = new msignal_Signal2();
	this.__onRemoved__banan_input_InputPolygonEdge = new msignal_Signal2();
	this.__onRemoved__banan_display_NodeLookEdge = new msignal_Signal2();
	this.__onRemoved__banan_display_NodeEdge = new msignal_Signal2();
	this.__onRemoved__banan_display_DisplayEdge = new msignal_Signal2();
	this.__onRemoved__banan_backend_RenderRootEdge = new msignal_Signal2();
	this.__onAdded__jetgui_element_Element = new msignal_Signal2();
	this.__onAdded__jetgui_JetTooltipEdge = new msignal_Signal2();
	this.__onAdded__jetgui_JetDataEdge = new msignal_Signal2();
	this.__onAdded__banan_input_InputPolygonEdge = new msignal_Signal2();
	this.__onAdded__banan_display_NodeLookEdge = new msignal_Signal2();
	this.__onAdded__banan_display_NodeEdge = new msignal_Signal2();
	this.__onAdded__banan_display_DisplayEdge = new msignal_Signal2();
	this.__onAdded__banan_backend_RenderRootEdge = new msignal_Signal2();
	this.__list__Some_jetgui_JetDataEdge = [];
	this.__list__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge = [];
	this.__list__Some_banan_display_NodeEdge = [];
};
$hxClasses["banan.es.EntitySystemLists"] = banan_es_EntitySystemLists;
banan_es_EntitySystemLists.__name__ = "banan.es.EntitySystemLists";
banan_es_EntitySystemLists.prototype = {
	__list__Some_banan_display_NodeEdge: null
	,__list__Some_banan_display_NodeEdge__Some_banan_display_NodeLookEdge: null
	,__list__Some_jetgui_JetDataEdge: null
	,__onAdded__banan_backend_RenderRootEdge: null
	,__onAdded__banan_display_DisplayEdge: null
	,__onAdded__banan_display_NodeEdge: null
	,__onAdded__banan_display_NodeLookEdge: null
	,__onAdded__banan_input_InputPolygonEdge: null
	,__onAdded__jetgui_JetDataEdge: null
	,__onAdded__jetgui_JetTooltipEdge: null
	,__onAdded__jetgui_element_Element: null
	,__onRemoved__banan_backend_RenderRootEdge: null
	,__onRemoved__banan_display_DisplayEdge: null
	,__onRemoved__banan_display_NodeEdge: null
	,__onRemoved__banan_display_NodeLookEdge: null
	,__onRemoved__banan_input_InputPolygonEdge: null
	,__onRemoved__jetgui_JetDataEdge: null
	,__onRemoved__jetgui_JetTooltipEdge: null
	,__onRemoved__jetgui_element_Element: null
	,__class__: banan_es_EntitySystemLists
};
var banan_es_IEntityReferrer = function() { };
$hxClasses["banan.es.IEntityReferrer"] = banan_es_IEntityReferrer;
banan_es_IEntityReferrer.__name__ = "banan.es.IEntityReferrer";
banan_es_IEntityReferrer.__isInterface__ = true;
banan_es_IEntityReferrer.prototype = {
	getEntityByRef: null
	,__class__: banan_es_IEntityReferrer
};
var banan_filesystem_IFile = function() { };
$hxClasses["banan.filesystem.IFile"] = banan_filesystem_IFile;
banan_filesystem_IFile.__name__ = "banan.filesystem.IFile";
banan_filesystem_IFile.__isInterface__ = true;
banan_filesystem_IFile.prototype = {
	get_name: null
	,get_url: null
	,get_md5: null
	,get_size: null
	,get_width: null
	,get_height: null
	,downloadedSize: null
	,data: null
	,load: null
	,unload: null
	,__class__: banan_filesystem_IFile
	,__properties__: {get_height:"get_height",get_width:"get_width",get_size:"get_size",get_md5:"get_md5",get_url:"get_url",get_name:"get_name"}
};
var banan_filesystem_IFsModule = function() { };
$hxClasses["banan.filesystem.IFsModule"] = banan_filesystem_IFsModule;
banan_filesystem_IFsModule.__name__ = "banan.filesystem.IFsModule";
banan_filesystem_IFsModule.__isInterface__ = true;
banan_filesystem_IFsModule.prototype = {
	getFileSystemHash: null
	,hasFile: null
	,hasLocalFileCache: null
	,hasEmbed: null
	,getFile: null
	,getFileNames: null
	,getPackFileNames: null
	,hasInPack: null
	,unloadPackFiles: null
	,__class__: banan_filesystem_IFsModule
};
var banan_filesystem_PreloadFileListModule = function(updatePriority) {
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.filesystem.PreloadFileListModule"] = banan_filesystem_PreloadFileListModule;
banan_filesystem_PreloadFileListModule.__name__ = "banan.filesystem.PreloadFileListModule";
banan_filesystem_PreloadFileListModule.__super__ = banan_module_Module;
banan_filesystem_PreloadFileListModule.prototype = $extend(banan_module_Module.prototype,{
	fileSystem: null
	,unloadFiles: function() {
	}
	,isLoadCandidate: function(path) {
		if(!this.fileSystem.hasInPack(path) && this.fileSystem.hasFile(path) && !this.fileSystem.hasLocalFileCache(path)) {
			return !this.fileSystem.hasEmbed(path);
		} else {
			return false;
		}
	}
	,makeModuleInfo: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["banan.filesystem.IFsModule"] != null) {
			_g.setReserved("banan.filesystem.IFsModule","fileSystem");
		} else {
			_g.h["banan.filesystem.IFsModule"] = "fileSystem";
		}
		return new banan_module_ModuleInfo("banan.filesystem.PreloadFileListModule",[],[],_g,["banan.filesystem.IFsModule"]);
	}
	,__class__: banan_filesystem_PreloadFileListModule
});
var banan_font_FontData = function(fontXml,dir,filename,displayName,getImage) {
	this._sdfParametersList = null;
	var chars = new haxe_ds_IntMap();
	var infoXml = fontXml.elementsNamed("info").next();
	this.face = infoXml.get("face");
	this.size = parseFloat(StringTools.replace(infoXml.get("size"),",","."));
	this.bold = infoXml.get("bold") != "0";
	this.italic = infoXml.get("italic") != "0";
	var _this = infoXml.get("padding").split(",");
	var f = banan_font__$FontData_ParseFloat.parseFloat;
	var result = new Array(_this.length);
	var _g = 0;
	var _g1 = _this.length;
	while(_g < _g1) {
		var i = _g++;
		result[i] = f(_this[i]);
	}
	if(result.length != 4) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(121,"FontData.hx:36","paddingArr.length == 4",null));
	}
	var padding = { up : result[0], right : result[1], down : result[2], left : result[3]};
	var commonXml = fontXml.elementsNamed("common").next();
	this.lineHeight = parseFloat(StringTools.replace(commonXml.get("lineHeight"),",","."));
	this.base = parseFloat(StringTools.replace(commonXml.get("base"),",","."));
	var pageXml = fontXml.elementsNamed("pages").next().elementsNamed("page").next();
	if(pageXml.get("id") != "0") {
		throw new js__$Boot_HaxeError(banan_error_Error.e(121,"FontData.hx:45","pageXml.get('id') == '0'",null));
	}
	this.texturePath = haxe_io_Path.join([dir,pageXml.get("file")]);
	this.texture = getImage(this.texturePath);
	var sdfXml = fontXml.elementsNamed("sdf");
	while(sdfXml.hasNext()) {
		var sdfXml1 = sdfXml.next();
		this._sdfParametersList = [];
		var parametersXml = sdfXml1.elementsNamed("parameters");
		while(parametersXml.hasNext()) {
			var parametersXml1 = parametersXml.next();
			this._sdfParametersList.push(new banan_font_SdfParameters(parametersXml1));
		}
		this._sdfParametersList.sort(function(x,y) {
			var v = x.fontSize - y.fontSize;
			if(v == 0) {
				return 0;
			} else if(v > 0) {
				return 1;
			} else {
				return -1;
			}
		});
		if(this._sdfParametersList.length <= 0) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"FontData.hx:64","_sdfParametersList.length > 0",null));
		}
		break;
	}
	var charsXml = fontXml.elementsNamed("chars");
	while(charsXml.hasNext()) {
		var charXml = charsXml.next().elementsNamed("char");
		while(charXml.hasNext()) {
			var charData = new banan_font_CharData(charXml.next(),padding);
			chars.h[charData.charCode] = charData;
		}
	}
	var kerningsXml = fontXml.elementsNamed("kernings");
	while(kerningsXml.hasNext()) {
		var kerningXml = kerningsXml.next().elementsNamed("kerning");
		while(kerningXml.hasNext()) {
			var kerningXml1 = kerningXml.next();
			var first = Std.parseInt(kerningXml1.get("first"));
			var second = Std.parseInt(kerningXml1.get("second"));
			var amount = Std.parseInt(kerningXml1.get("amount"));
			chars.h[second]._kernings.set(chars.h[first],amount);
		}
	}
	this.chars = chars;
	this.displayName = displayName;
	this.isDebug = (dir + filename).toLowerCase().indexOf("debug") >= 0;
};
$hxClasses["banan.font.FontData"] = banan_font_FontData;
banan_font_FontData.__name__ = "banan.font.FontData";
banan_font_FontData.prototype = {
	displayName: null
	,face: null
	,size: null
	,bold: null
	,italic: null
	,lineHeight: null
	,base: null
	,chars: null
	,texturePath: null
	,texture: null
	,get_isSdf: function() {
		return this._sdfParametersList != null;
	}
	,isDebug: null
	,_sdfParametersList: null
	,getSdfParameters: function(fontSize,out) {
		if(!this.get_isSdf()) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"FontData.hx:94","isSdf",null));
		}
		if(fontSize <= this._sdfParametersList[0].fontSize) {
			var first = this._sdfParametersList[0];
			out.sdfAntialiasing = first.antialiasing;
			out.sdfThickness = first.thickness;
		} else if(fontSize >= this._sdfParametersList[this._sdfParametersList.length - 1].fontSize) {
			var last = this._sdfParametersList[this._sdfParametersList.length - 1];
			out.sdfAntialiasing = last.antialiasing;
			out.sdfThickness = last.thickness;
		} else {
			var _g = 1;
			var _g1 = this._sdfParametersList.length;
			while(_g < _g1) {
				var i = _g++;
				if(fontSize < this._sdfParametersList[i].fontSize) {
					var p0 = this._sdfParametersList[i - 1];
					var p1 = this._sdfParametersList[i];
					var t = (fontSize - p0.fontSize) / (p1.fontSize - p0.fontSize);
					out.sdfAntialiasing = p0.antialiasing + t * (p1.antialiasing - p0.antialiasing);
					out.sdfThickness = p0.thickness + t * (p1.thickness - p0.thickness);
					break;
				}
			}
		}
	}
	,__class__: banan_font_FontData
	,__properties__: {get_isSdf:"get_isSdf"}
};
var banan_font__$FontData_ParseFloat = function() { };
$hxClasses["banan.font._FontData.ParseFloat"] = banan_font__$FontData_ParseFloat;
banan_font__$FontData_ParseFloat.__name__ = "banan.font._FontData.ParseFloat";
banan_font__$FontData_ParseFloat.parseFloat = function(value) {
	return parseFloat(StringTools.replace(value,",","."));
};
var banan_font_SdfParameters = function(sdfParamterXml) {
	this.fontSize = parseFloat(StringTools.replace(sdfParamterXml.get("fontSize"),",","."));
	this.antialiasing = parseFloat(StringTools.replace(sdfParamterXml.get("antialiasing"),",","."));
	this.thickness = parseFloat(StringTools.replace(sdfParamterXml.get("thickness"),",","."));
};
$hxClasses["banan.font.SdfParameters"] = banan_font_SdfParameters;
banan_font_SdfParameters.__name__ = "banan.font.SdfParameters";
banan_font_SdfParameters.prototype = {
	fontSize: null
	,antialiasing: null
	,thickness: null
	,__class__: banan_font_SdfParameters
};
var banan_font_CharData = function(charXml,padding) {
	this._kernings = new haxe_ds_ObjectMap();
	this.charCode = Std.parseInt(charXml.get("id"));
	this.x = parseFloat(StringTools.replace(charXml.get("x"),",","."));
	this.y = parseFloat(StringTools.replace(charXml.get("y"),",","."));
	this.sizeX = parseFloat(StringTools.replace(charXml.get("width"),",","."));
	this.sizeY = parseFloat(StringTools.replace(charXml.get("height"),",","."));
	this.xOffset = parseFloat(StringTools.replace(charXml.get("xoffset"),",","."));
	this.yOffset = parseFloat(StringTools.replace(charXml.get("yoffset"),",","."));
	this.xAdvance = parseFloat(StringTools.replace(charXml.get("xadvance"),",","."));
	if(charXml.get("page") != "0") {
		throw new js__$Boot_HaxeError(banan_error_Error.e(121,"FontData.hx:168","charXml.get('page') == '0'",null));
	}
};
$hxClasses["banan.font.CharData"] = banan_font_CharData;
banan_font_CharData.__name__ = "banan.font.CharData";
banan_font_CharData.prototype = {
	charCode: null
	,x: null
	,y: null
	,sizeX: null
	,sizeY: null
	,xOffset: null
	,yOffset: null
	,xAdvance: null
	,get_kerningsByPrevChar: function() {
		return this._kernings;
	}
	,_kernings: null
	,__class__: banan_font_CharData
	,__properties__: {get_kerningsByPrevChar:"get_kerningsByPrevChar"}
};
var banan_font_FontModule = function(updatePriority) {
	this.fontMap = new haxe_ds_StringMap();
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.font.FontModule"] = banan_font_FontModule;
banan_font_FontModule.__name__ = "banan.font.FontModule";
banan_font_FontModule.__super__ = banan_module_Module;
banan_font_FontModule.prototype = $extend(banan_module_Module.prototype,{
	fileSystem: null
	,resourceManager: null
	,resourceSetting: null
	,fontMap: null
	,initialize: function() {
		var _gthis = this;
		var counter = 1;
		var decCounter = function() {
			if((counter -= 1) == 0) {
				_gthis.moduleInfo.setInitialized();
			}
		};
		this.fileSystem.getFile("font/font.json").load(false).then(function(fontJsonBytes) {
			var fontDescrList = JSON.parse(fontJsonBytes.toString());
			var _g = 0;
			while(_g < fontDescrList.length) {
				var fontDescr = [fontDescrList[_g]];
				++_g;
				counter += 1;
				_gthis.fileSystem.getFile(fontDescr[0].path).load(false).then((function(fontDescr1) {
					return function(bytes) {
						var fontDescr2 = fontDescr1[0].path;
						var fontDescr3 = fontDescr1[0].name;
						var tmp = bytes.toString();
						return _gthis.parseFntFile(fontDescr2,fontDescr3,tmp);
					};
				})(fontDescr)).then((function() {
					return function(fontData) {
						var k = fontData.displayName;
						var _this = _gthis.fontMap;
						if(__map_reserved[k] != null) {
							_this.setReserved(k,fontData);
						} else {
							_this.h[k] = fontData;
						}
						return fontData;
					};
				})()).then((function() {
					return function(_) {
						decCounter();
						return;
					};
				})());
			}
			decCounter();
		});
	}
	,getFont: function(name) {
		var _this = this.fontMap;
		if(__map_reserved[name] != null) {
			return _this.getReserved(name);
		} else {
			return _this.h[name];
		}
	}
	,getDefaultFont: function() {
		var tmp = this.getFont(this.resourceSetting.defaultFont);
		if(tmp == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"FontModule.hx:61","getFont(resourceSetting.defaultFont)" + " is null",null));
		}
		return tmp;
	}
	,parseFntFile: function(path,displayName,fntFileContents) {
		var dir = haxe_io_Path.directory(path);
		var filename = haxe_io_Path.withoutDirectory(path);
		return new banan_font_FontData(Xml.parse(fntFileContents).elementsNamed("font").next(),dir,filename,displayName,$bind(this,this.getImage));
	}
	,getImage: function(path) {
		var image = this.resourceManager.getFsImage(path);
		if(image.textureScale != 1.0) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"FontModule.hx:78","image.textureScale == 1.0",null));
		}
		return image;
	}
	,makeModuleInfo: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["banan.filesystem.IFsModule"] != null) {
			_g.setReserved("banan.filesystem.IFsModule","fileSystem");
		} else {
			_g.h["banan.filesystem.IFsModule"] = "fileSystem";
		}
		if(__map_reserved["banan.resource.ResourceManager"] != null) {
			_g.setReserved("banan.resource.ResourceManager","resourceManager");
		} else {
			_g.h["banan.resource.ResourceManager"] = "resourceManager";
		}
		if(__map_reserved["banan.resource.IResourceSetting"] != null) {
			_g.setReserved("banan.resource.IResourceSetting","resourceSetting");
		} else {
			_g.h["banan.resource.IResourceSetting"] = "resourceSetting";
		}
		return new banan_module_ModuleInfo("banan.font.FontModule",[],[],_g,["banan.filesystem.IFsModule","banan.resource.ResourceManager","banan.resource.IResourceSetting"]);
	}
	,__class__: banan_font_FontModule
});
var banan_utils_Pool_$banan_$font_$PlacedChar = function() {
};
$hxClasses["banan.utils.Pool_banan_font_PlacedChar"] = banan_utils_Pool_$banan_$font_$PlacedChar;
banan_utils_Pool_$banan_$font_$PlacedChar.__name__ = "banan.utils.Pool_banan_font_PlacedChar";
banan_utils_Pool_$banan_$font_$PlacedChar.prototype = {
	pool: null
	,pop: function() {
		var item = this.pool;
		if(item != null) {
			this.pool = item.next;
			item.next = null;
		} else {
			item = new banan_font_PlacedChar();
		}
		return item;
	}
	,put: function(item) {
		if(this.pool == null) {
			this.pool = item;
		} else {
			item.next = this.pool;
			this.pool = item;
		}
	}
	,__class__: banan_utils_Pool_$banan_$font_$PlacedChar
};
var banan_font_PlacedChar = function() {
	this.next = null;
};
$hxClasses["banan.font.PlacedChar"] = banan_font_PlacedChar;
banan_font_PlacedChar.__name__ = "banan.font.PlacedChar";
banan_font_PlacedChar.get = function(x,charData,fontScale) {
	var result = banan_font_PlacedChar.pool.pop();
	result.xPos = x;
	result.x = x + charData.xOffset * fontScale;
	result.y = charData.yOffset * fontScale;
	result.sizeX = charData.sizeX * fontScale;
	result.sizeY = charData.sizeY * fontScale;
	result.xAdvance = charData.xAdvance * fontScale;
	result.charData = charData;
	return result;
};
banan_font_PlacedChar.prototype = {
	xPos: null
	,x: null
	,y: null
	,charData: null
	,sizeX: null
	,sizeY: null
	,xAdvance: null
	,next: null
	,dispose: function() {
		this.charData = null;
		banan_font_PlacedChar.pool.put(this);
	}
	,__class__: banan_font_PlacedChar
};
var banan_utils_Pool_$banan_$font_$PlacedLine = function() {
};
$hxClasses["banan.utils.Pool_banan_font_PlacedLine"] = banan_utils_Pool_$banan_$font_$PlacedLine;
banan_utils_Pool_$banan_$font_$PlacedLine.__name__ = "banan.utils.Pool_banan_font_PlacedLine";
banan_utils_Pool_$banan_$font_$PlacedLine.prototype = {
	pool: null
	,pop: function() {
		var item = this.pool;
		if(item != null) {
			this.pool = item.next;
			item.next = null;
		} else {
			item = new banan_font_PlacedLine();
		}
		return item;
	}
	,put: function(item) {
		if(this.pool == null) {
			this.pool = item;
		} else {
			item.next = this.pool;
			this.pool = item;
		}
	}
	,__class__: banan_utils_Pool_$banan_$font_$PlacedLine
};
var banan_font_PlacedLine = function() {
	this._chars = [];
	this.sizeX = 0;
};
$hxClasses["banan.font.PlacedLine"] = banan_font_PlacedLine;
banan_font_PlacedLine.__name__ = "banan.font.PlacedLine";
banan_font_PlacedLine.get = function(fontScale) {
	var result = banan_font_PlacedLine.pool.pop();
	result.fontScale = fontScale;
	return result;
};
banan_font_PlacedLine.prototype = {
	sizeX: null
	,next: null
	,_chars: null
	,lastChar: null
	,fontScale: null
	,dispose: function() {
		while(this._chars.length > 0) this._chars.pop().dispose();
		this.sizeX = 0;
		this.lastChar = null;
		banan_font_PlacedLine.pool.put(this);
	}
	,addChar: function(charData) {
		if(this.lastChar != null) {
			var a = charData.get_kerningsByPrevChar().h[this.lastChar.__id__];
			this.sizeX += (a != null ? a : 0) * this.fontScale;
		}
		var placedChar = banan_font_PlacedChar.get(this.sizeX,charData,this.fontScale);
		this.sizeX += placedChar.xAdvance;
		this._chars.push(placedChar);
		this.lastChar = charData;
	}
	,cutToLength: function(length) {
		while(this._chars.length > length) this._chars.pop().dispose();
		if(this._chars.length == 0) {
			this.sizeX = 0;
			this.lastChar = null;
		} else {
			var lastPlaced = this._chars[this._chars.length - 1];
			this.lastChar = lastPlaced.charData;
			this.sizeX = lastPlaced.xPos + lastPlaced.xAdvance;
		}
	}
	,takeChars: function(destination,x,y) {
		var _g = 0;
		var _g1 = this._chars;
		while(_g < _g1.length) {
			var char = _g1[_g];
			++_g;
			char.x += x;
			char.y += y;
			destination.push(char);
		}
		this._chars.length = 0;
	}
	,get_chars: function() {
		return this._chars;
	}
	,__class__: banan_font_PlacedLine
	,__properties__: {get_chars:"get_chars"}
};
var banan_utils_Pool_$banan_$font_$TextDesigner = function() {
};
$hxClasses["banan.utils.Pool_banan_font_TextDesigner"] = banan_utils_Pool_$banan_$font_$TextDesigner;
banan_utils_Pool_$banan_$font_$TextDesigner.__name__ = "banan.utils.Pool_banan_font_TextDesigner";
banan_utils_Pool_$banan_$font_$TextDesigner.prototype = {
	pool: null
	,pop: function() {
		var item = this.pool;
		if(item != null) {
			this.pool = item.next;
			item.next = null;
		} else {
			item = new banan_font_TextDesigner();
		}
		return item;
	}
	,put: function(item) {
		if(this.pool == null) {
			this.pool = item;
		} else {
			item.next = this.pool;
			this.pool = item;
		}
	}
	,__class__: banan_utils_Pool_$banan_$font_$TextDesigner
};
var banan_font_TextDesigner = function() {
	this.placed = [];
};
$hxClasses["banan.font.TextDesigner"] = banan_font_TextDesigner;
banan_font_TextDesigner.__name__ = "banan.font.TextDesigner";
banan_font_TextDesigner.isDash = function(charCode) {
	if(charCode != 45) {
		if(charCode >= 8208) {
			return charCode <= 8213;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
banan_font_TextDesigner.get = function(text,hAlign,vAlign,wrap,isHideOverflowX,isHideOverflowY,font,fontSize,lineHeightPercent,sizeX,sizeY) {
	var fontRenderData = banan_font_TextDesigner.pool.pop();
	fontRenderData.initialize(text,hAlign,vAlign,wrap,isHideOverflowX,isHideOverflowY,font,fontSize,lineHeightPercent,sizeX,sizeY);
	return fontRenderData;
};
banan_font_TextDesigner.prototype = {
	texture: null
	,textSizeX: null
	,textSizeY: null
	,font: null
	,fontSize: null
	,next: null
	,placed: null
	,getChars: function() {
		return this.placed;
	}
	,dispose: function() {
		while(this.placed.length > 0) this.placed.pop().dispose();
		banan_font_TextDesigner.pool.put(this);
		this.font = null;
	}
	,initialize: function(text,hAlign,vAlign,wrap,isHideOverflowX,isHideOverflowY,font,fontSize,lineHeightPercent,sizeX,sizeY) {
		this.font = font;
		this.fontSize = fontSize;
		this.texture = font.texture;
		var it = font.chars.h[63];
		var message = "Char not found in font " + font.displayName;
		if(it == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(null,banan_error_Error.getShortPosition("banan/font/TextDesigner.hx" + ":" + 91 + ":"),message,null));
		}
		var it1 = font.chars.h[32];
		var message1 = "Char not found in font " + font.displayName;
		if(it1 == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(null,banan_error_Error.getShortPosition("banan/font/TextDesigner.hx" + ":" + 92 + ":"),message1,null));
		}
		var it2 = font.chars.h[46];
		var message2 = "Char not found in font " + font.displayName;
		if(it2 == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(null,banan_error_Error.getShortPosition("banan/font/TextDesigner.hx" + ":" + 93 + ":"),message2,null));
		}
		var lines = [];
		var fontScale = fontSize / font.size;
		var currentLine = banan_font_PlacedLine.get(fontScale);
		var position = 0;
		var currentLineStartPosition = 0;
		var wrapPosition = 0;
		var wrapLineLength = 0;
		var delayedSpaces = 0;
		var lineHeight = lineHeightPercent * font.lineHeight * fontScale | 0;
		var length = _$UnicodeString_UnicodeString_$Impl_$.get_length(text);
		if(length > 100000) {
			length = 100000;
			haxe_Log.trace("There was an attempt to render text longer then 100000 symbols. Text was truncated.",{ fileName : "banan/font/TextDesigner.hx", lineNumber : 124, className : "banan.font.TextDesigner", methodName : "initialize"});
		}
		while(position < length) {
			var prevCharCode = position > 0 ? _$UnicodeString_UnicodeString_$Impl_$.charCodeAt(text,position - 1) : 0;
			var charCode = _$UnicodeString_UnicodeString_$Impl_$.charCodeAt(text,position);
			switch(wrap._hx_index) {
			case 0:
				break;
			case 1:
				wrapPosition = position;
				wrapLineLength = currentLine._chars.length;
				break;
			case 2:
				if((prevCharCode == banan_font_TextDesigner.SPACE || prevCharCode == banan_font_TextDesigner.TAB) && !(charCode == banan_font_TextDesigner.SPACE || charCode == banan_font_TextDesigner.TAB || (charCode == 45 || charCode >= 8208 && charCode <= 8213))) {
					wrapPosition = position;
					wrapLineLength = currentLine._chars.length;
				}
				break;
			}
			++position;
			if(charCode == null) {
				var _g = 0;
				var _g1 = delayedSpaces;
				while(_g < _g1) {
					++_g;
					currentLine.addChar(it1);
				}
				delayedSpaces = 0;
				var a = font.chars.h[charCode];
				currentLine.addChar(a != null ? a : it);
			} else {
				switch(charCode) {
				case banan_font_TextDesigner.CR:
					break;
				case banan_font_TextDesigner.LF:
					lines.push(currentLine);
					currentLine = banan_font_PlacedLine.get(fontScale);
					currentLineStartPosition = position;
					delayedSpaces = 0;
					wrapPosition = position;
					wrapLineLength = currentLine._chars.length;
					break;
				case banan_font_TextDesigner.SPACE:
					++delayedSpaces;
					break;
				case banan_font_TextDesigner.TAB:
					delayedSpaces += banan_font_TextDesigner.TAB_SIZE;
					break;
				default:
					var _g2 = 0;
					var _g11 = delayedSpaces;
					while(_g2 < _g11) {
						++_g2;
						currentLine.addChar(it1);
					}
					delayedSpaces = 0;
					var a1 = font.chars.h[charCode];
					currentLine.addChar(a1 != null ? a1 : it);
				}
			}
			if(wrap._hx_index != 0 && Math.floor(currentLine.sizeX) > sizeX && currentLine._chars.length > 1) {
				if(wrapPosition == currentLineStartPosition) {
					wrapPosition = position - 1;
					wrapLineLength = currentLine._chars.length - 1;
				}
				if(wrapLineLength > 0) {
					currentLine.cutToLength(wrapLineLength);
					position = wrapPosition;
					lines.push(currentLine);
					currentLine = banan_font_PlacedLine.get(fontScale);
					currentLineStartPosition = position;
					delayedSpaces = 0;
					wrapPosition = position;
					wrapLineLength = currentLine._chars.length;
				}
			}
		}
		lines.push(currentLine);
		this.textSizeX = 0;
		this.textSizeY = lineHeight * (lines.length - 1) + font.lineHeight * fontScale;
		var isAddEllipsisToLastLine = false;
		while(isHideOverflowY && Math.floor(this.textSizeY) > sizeY && lines.length > 1) {
			lines.pop();
			this.textSizeY -= lineHeight;
			isAddEllipsisToLastLine = true;
		}
		var textY = 0;
		switch(vAlign._hx_index) {
		case 0:
			break;
		case 1:
			textY += sizeY - this.textSizeY;
			break;
		case 2:
			textY += Math.round((sizeY - this.textSizeY) / 2);
			break;
		}
		while(lines.length > 0) {
			var line = lines.shift();
			if(wrap._hx_index == 0 && isHideOverflowX && Math.floor(line.sizeX) > sizeX || isAddEllipsisToLastLine && lines.length == 0) {
				var ellipsisLength = it2.xAdvance * 3;
				while(isHideOverflowX && line.sizeX + ellipsisLength > sizeX && line._chars.length > 0) line.cutToLength(line._chars.length - 1);
				line.addChar(it2);
				line.addChar(it2);
				line.addChar(it2);
			}
			this.textSizeX = Math.max(this.textSizeX,line.sizeX);
			var textX = 0;
			switch(hAlign._hx_index) {
			case 0:
				break;
			case 1:
				textX += sizeX - line.sizeX;
				break;
			case 2:
				textX += Math.round((sizeX - line.sizeX) / 2);
				break;
			}
			line.takeChars(this.placed,textX,textY);
			line.dispose();
			textY += lineHeight;
		}
	}
	,__class__: banan_font_TextDesigner
};
var banan_http_DownloadStatsHelper = function() {
	this.stats = { requestCount : 0, succeededRequests : 0, averageRetriesPerSuccess : 0., averageSpeed : 0, minSpeed : -1};
	this.succeededTries = 0;
};
$hxClasses["banan.http.DownloadStatsHelper"] = banan_http_DownloadStatsHelper;
banan_http_DownloadStatsHelper.__name__ = "banan.http.DownloadStatsHelper";
banan_http_DownloadStatsHelper.prototype = {
	succeededTries: null
	,stats: null
	,getStats: function() {
		return this.stats;
	}
	,watchRequest: function(completeCallback,errorCallback) {
		var _gthis = this;
		this.stats.requestCount++;
		return { onSuccess : function(bytes,retries) {
			_gthis.onRequestSuccess(retries);
			completeCallback(bytes);
		}, onFailure : function(error) {
			errorCallback(error);
		}};
	}
	,watchDowloadTry: function(item) {
		var _gthis = this;
		var startTime = banan_utils_TimeUtils.currentTime();
		var originalCompleteCb = item.completeCb;
		item.completeCb = function(bytes,log) {
			var finishTime = banan_utils_TimeUtils.currentTime();
			_gthis.onDownloadTrySuccess(bytes.length,banan_utils__$Time_Time_$Impl_$.toFloat(finishTime) - banan_utils__$Time_Time_$Impl_$.toFloat(startTime));
			originalCompleteCb(bytes,log);
		};
		var originalErrorCb = item.errorCb;
		item.errorCb = function(error,log1) {
			originalErrorCb(error,log1);
		};
		return item;
	}
	,onRequestSuccess: function(retries) {
		var succeededBefore = this.stats.succeededRequests;
		this.stats.succeededRequests++;
		this.stats.averageRetriesPerSuccess = (succeededBefore * this.stats.averageRetriesPerSuccess + retries) / this.stats.succeededRequests;
	}
	,onRequestFailure: function() {
	}
	,onDownloadTrySuccess: function(bytes,downloadTime) {
		var succeededTriesBefore = this.succeededTries;
		var speed = bytes / banan_utils__$Time_Time_$Impl_$.toFloat(downloadTime);
		this.succeededTries++;
		this.stats.averageSpeed = (succeededTriesBefore * this.stats.averageSpeed + speed) / this.succeededTries | 0;
		if(this.stats.minSpeed < 0 || speed < this.stats.minSpeed) {
			this.stats.minSpeed = speed | 0;
		}
	}
	,onDownloadTryFailure: function() {
	}
	,__class__: banan_http_DownloadStatsHelper
};
var banan_http_HttpBytes = function(onComplete,onProgress,onError) {
	this.state = banan_http_HttpBytesState.Empty;
	this.onComplete = onComplete;
	this.onProgress = onProgress;
	this.onError = onError;
};
$hxClasses["banan.http.HttpBytes"] = banan_http_HttpBytes;
banan_http_HttpBytes.__name__ = "banan.http.HttpBytes";
banan_http_HttpBytes.extractAndSetTaongaDomainName = function(url) {
	if(url.indexOf("://") < 0) {
		url = "https://" + url;
	}
	banan_http_HttpBytes.TAONGA_DOMAIN = url.split("://")[1].split("/")[0];
};
banan_http_HttpBytes.downloadFile = function(url,expectedCrc32,completeCb,progressCb,errorCb) {
	var wrappedCallbacks = banan_http_HttpBytes.statsHelper.watchRequest(completeCb,errorCb);
	new banan_http_MultiTryDownload(url,expectedCrc32,$bind(wrappedCallbacks,wrappedCallbacks.onSuccess),progressCb,$bind(wrappedCallbacks,wrappedCallbacks.onFailure),5);
};
banan_http_HttpBytes.downloadFileNoRetry = function(url,completeCb,progressCb,errorCb) {
	var downloadItem = { url : url, completeCb : completeCb, progressCb : progressCb, errorCb : errorCb};
	if(banan_http_HttpBytes.TAONGA_DOMAIN != null && url.indexOf(banan_http_HttpBytes.TAONGA_DOMAIN) != -1) {
		banan_http_HttpBytes.queueTaonga.push(downloadItem);
	} else {
		banan_http_HttpBytes.queueOther.push(downloadItem);
	}
};
banan_http_HttpBytes.update = function() {
	banan_http_MultiTryDownload.updateAll();
	banan_http_HttpBytes.updateQueue(banan_http_HttpBytes.inProgressListTaonga,banan_http_HttpBytes.queueTaonga);
	banan_http_HttpBytes.updateQueue(banan_http_HttpBytes.inProgressListOther,banan_http_HttpBytes.queueOther);
};
banan_http_HttpBytes.updateQueue = function(inProgressList,queue) {
	var i = 0;
	var _g = 0;
	while(_g < inProgressList.length) {
		var http = inProgressList[_g];
		++_g;
		if(http.state._hx_index == 1) {
			inProgressList[i++] = http;
		}
	}
	inProgressList.length = i;
	while(inProgressList.length < 6 && queue.length > 0) {
		var wrappedItem = banan_http_HttpBytes.statsHelper.watchDowloadTry(queue.shift());
		var http1 = new banan_http_impl_Html5HttpBytes(wrappedItem.completeCb,wrappedItem.progressCb,wrappedItem.errorCb);
		http1.download(wrappedItem.url);
		inProgressList.push(http1);
	}
};
banan_http_HttpBytes.getStats = function() {
	return banan_http_HttpBytes.statsHelper.getStats();
};
banan_http_HttpBytes.prototype = {
	state: null
	,onComplete: null
	,onProgress: null
	,onError: null
	,download: function(url) {
		if(this.state != banan_http_HttpBytesState.Empty) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(122,"HttpBytes.hx:138","HttpBytes.download. State is " + Std.string(this.state) + ", but should be Empty.",null));
		}
		if(url.indexOf("://") < 0) {
			url = "https://" + url;
		}
		this.state = banan_http_HttpBytesState.Downloading(url,0,0);
		this.impl_download(url);
	}
	,getData: function() {
		var _g = this.state;
		if(_g._hx_index == 3) {
			return _g.data;
		} else {
			return null;
		}
	}
	,set_state: function(state) {
		this.state = state;
		switch(state._hx_index) {
		case 2:
			this.onError(state.err,state.downloadLog);
			break;
		case 3:
			this.onComplete(state.data,state.downloadLog);
			break;
		default:
		}
		return state;
	}
	,impl_download: function(url) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"HttpBytes.hx:183","",null));
	}
	,progress: function(loaded,total) {
		var _g = this.state;
		if(_g._hx_index == 1) {
			this.state = banan_http_HttpBytesState.Downloading(_g.url,loaded,total);
			this.onProgress(loaded);
		} else {
			throw new js__$Boot_HaxeError(banan_error_Error.e(122,"HttpBytes.hx:195","State is " + Std.string(this.state) + ", should be Downloading.",null));
		}
	}
	,complete: function(data,downloadLog) {
		var _g = this.state;
		switch(_g._hx_index) {
		case 1:
			var state = banan_http_HttpBytesState.Complete(_g.url,data,downloadLog);
			this.state = state;
			this.onComplete(state.data,state.downloadLog);
			break;
		case 2:
			break;
		default:
			throw new js__$Boot_HaxeError(banan_error_Error.e(122,"HttpBytes.hx:210","State is " + Std.string(this.state) + ", should be Downloading.",null));
		}
	}
	,error: function(error,downloadLog) {
		var _g = this.state;
		if(_g._hx_index == 1) {
			var state = banan_http_HttpBytesState.Error(_g.url,JSON.stringify(error,null,"\t"),downloadLog);
			this.state = state;
			this.onError(state.err,state.downloadLog);
		}
	}
	,__class__: banan_http_HttpBytes
	,__properties__: {set_state:"set_state"}
};
var banan_http_HttpBytesState = $hxEnums["banan.http.HttpBytesState"] = { __ename__ : true, __constructs__ : ["Empty","Downloading","Error","Complete"]
	,Empty: {_hx_index:0,__enum__:"banan.http.HttpBytesState",toString:$estr}
	,Downloading: ($_=function(url,bytesLoaded,bytesTotal) { return {_hx_index:1,url:url,bytesLoaded:bytesLoaded,bytesTotal:bytesTotal,__enum__:"banan.http.HttpBytesState",toString:$estr}; },$_.__params__ = ["url","bytesLoaded","bytesTotal"],$_)
	,Error: ($_=function(url,err,downloadLog) { return {_hx_index:2,url:url,err:err,downloadLog:downloadLog,__enum__:"banan.http.HttpBytesState",toString:$estr}; },$_.__params__ = ["url","err","downloadLog"],$_)
	,Complete: ($_=function(url,data,downloadLog) { return {_hx_index:3,url:url,data:data,downloadLog:downloadLog,__enum__:"banan.http.HttpBytesState",toString:$estr}; },$_.__params__ = ["url","data","downloadLog"],$_)
};
banan_http_HttpBytesState.__empty_constructs__ = [banan_http_HttpBytesState.Empty];
var banan_http_MultiTryDownload = function(url,expectedCrc32,completeCb,progressCb,errorCb,maxTryCount) {
	this.nextDelay = 5;
	this.url = url;
	this.urlWithSalt = url;
	this.expectedCrc32 = expectedCrc32;
	this.completeCb = completeCb;
	this.progressCb = progressCb;
	this.errorCb = errorCb;
	this.tryCount = maxTryCount;
	this.maxTryCount = maxTryCount;
	this.startTime = kha_Scheduler.realTime();
	banan_http_MultiTryDownload.downloadList.push(this);
};
$hxClasses["banan.http.MultiTryDownload"] = banan_http_MultiTryDownload;
banan_http_MultiTryDownload.__name__ = "banan.http.MultiTryDownload";
banan_http_MultiTryDownload.updateAll = function() {
	var _g = 0;
	var _g1 = banan_http_MultiTryDownload.downloadList;
	while(_g < _g1.length) _g1[_g++].update();
};
banan_http_MultiTryDownload.prototype = {
	url: null
	,urlWithSalt: null
	,expectedCrc32: null
	,completeCb: null
	,progressCb: null
	,errorCb: null
	,tryCount: null
	,startTime: null
	,nextDelay: null
	,maxTryCount: null
	,update: function() {
		if(this.startTime > 0 && this.startTime < kha_Scheduler.realTime()) {
			this.startTime = -1;
			var url = this.urlWithSalt;
			var downloadItem = { url : url, completeCb : $bind(this,this.handleHttpComplete), progressCb : $bind(this,this.handleHttpProgress), errorCb : $bind(this,this.handleHttpError)};
			if(banan_http_HttpBytes.TAONGA_DOMAIN != null && url.indexOf(banan_http_HttpBytes.TAONGA_DOMAIN) != -1) {
				banan_http_HttpBytes.queueTaonga.push(downloadItem);
			} else {
				banan_http_HttpBytes.queueOther.push(downloadItem);
			}
		}
	}
	,saltUrl: function() {
		haxe_Log.trace("adding salt to url " + this.url,{ fileName : "banan/http/MultiTryDownload.hx", lineNumber : 62, className : "banan.http.MultiTryDownload", methodName : "saltUrl"});
		this.urlWithSalt = this.url + (this.url.indexOf("?") >= 0 ? "&" : "?") + "salt=" + StringTools.hex(Std.random(65535),4) + StringTools.hex(Std.random(65535),4);
	}
	,handleHttpComplete: function(data,downloadLog) {
		if(this.expectedCrc32 != null) {
			var crc32 = haxe_crypto_Crc32.make(data);
			if(this.expectedCrc32 != crc32) {
				this.saltUrl();
				this.handleHttpError("crc32 not match. expected: " + this.expectedCrc32 + ", recieved: " + crc32,downloadLog);
				return;
			}
		}
		HxOverrides.remove(banan_http_MultiTryDownload.downloadList,this);
		if(this.url != this.urlWithSalt && !banan_http_MultiTryDownload.isSuccessfulDownloadWithSaltLogged) {
			banan_http_MultiTryDownload.isSuccessfulDownloadWithSaltLogged = true;
			haxe_Log.trace("download with salt completed. url: " + this.urlWithSalt + ". download log:\n " + downloadLog.join("\n"),{ fileName : "banan/http/MultiTryDownload.hx", lineNumber : 85, className : "banan.http.MultiTryDownload", methodName : "handleHttpComplete"});
		}
		this.completeCb(data,this.maxTryCount - this.tryCount);
	}
	,handleHttpProgress: function(length) {
		this.progressCb(length);
	}
	,handleHttpError: function(error,downloadLog) {
		var errMsg = "download failed. url: " + this.urlWithSalt + ". error: " + error + ". download log:\n " + downloadLog.join("\n");
		this.tryCount--;
		if(this.tryCount > 0) {
			haxe_Log.trace(errMsg + ("\n retrying in " + this.nextDelay + " sec."),{ fileName : "banan/http/MultiTryDownload.hx", lineNumber : 102, className : "banan.http.MultiTryDownload", methodName : "handleHttpError"});
			if(this.tryCount == 1 && banan_http_MultiTryDownload.saltTryCount > 0) {
				banan_http_MultiTryDownload.saltTryCount--;
				this.saltUrl();
			}
			this.startTime = kha_Scheduler.realTime() + this.nextDelay;
			this.nextDelay *= 2;
		} else {
			haxe_Log.trace(errMsg + "\n no more retry.",{ fileName : "banan/http/MultiTryDownload.hx", lineNumber : 116, className : "banan.http.MultiTryDownload", methodName : "handleHttpError"});
			HxOverrides.remove(banan_http_MultiTryDownload.downloadList,this);
			this.errorCb(error);
		}
	}
	,__class__: banan_http_MultiTryDownload
};
var banan_http_impl_Html5HttpBytes = function(onComplete,onProgress,onError) {
	this.requestInfoLog = [];
	banan_http_HttpBytes.call(this,onComplete,onProgress,onError);
};
$hxClasses["banan.http.impl.Html5HttpBytes"] = banan_http_impl_Html5HttpBytes;
banan_http_impl_Html5HttpBytes.__name__ = "banan.http.impl.Html5HttpBytes";
banan_http_impl_Html5HttpBytes.__super__ = banan_http_HttpBytes;
banan_http_impl_Html5HttpBytes.prototype = $extend(banan_http_HttpBytes.prototype,{
	request: null
	,requestInfoLog: null
	,impl_download: function(url) {
		this.request = new XMLHttpRequest();
		this.request.onreadystatechange = $bind(this,this.onReadyStateChange);
		this.request.onprogress = $bind(this,this.onLoadProgress);
		this.request.open("GET",url,true);
		this.request.responseType = "arraybuffer";
		this.request.send();
	}
	,clearListeners: function() {
		this.request.onreadystatechange = null;
		this.request.onprogress = null;
	}
	,onLoadProgress: function(e) {
		this.progress(e["loaded"],e["total"]);
	}
	,onReadyStateChange: function(e) {
		this.writeRequestInfo();
		if(this.request.readyState != 4) {
			return;
		}
		if(this.request.status >= 200 && this.request.status < 400 || this.request.status == 0 && this.request.statusText == "") {
			this.onLoadComplete();
		} else {
			this.onLoadError();
		}
	}
	,onLoadError: function() {
		this.clearListeners();
		this.error("request failed",this.requestInfoLog);
	}
	,writeRequestInfo: function() {
		var requestInfo = "   status: " + Std.string(this.request.status) + ",\n" + ("   statusText: " + Std.string(this.request.statusText) + ",\n") + ("   readyState: " + Std.string(this.request.readyState) + ",\n") + ("   response headers: " + Std.string(this.request.getAllResponseHeaders()) + "\n");
		var tmp;
		if(this.requestInfoLog.length != 0) {
			var a = this.requestInfoLog;
			tmp = a[a.length - 1] != requestInfo;
		} else {
			tmp = true;
		}
		if(tmp) {
			this.requestInfoLog.push(requestInfo);
		}
	}
	,onLoadComplete: function() {
		var bytes = null;
		var arrayBuffer = this.request.response;
		if(arrayBuffer != null) {
			bytes = haxe_io_Bytes.ofData(arrayBuffer);
		} else if(this.request.responseBody != null) {
			var data = VBArray(this.request.responseBody).toArray();
			bytes = new haxe_io_Bytes(new ArrayBuffer(data.length));
			var _g = 0;
			var _g1 = data.length;
			while(_g < _g1) {
				var i = _g++;
				bytes.b[i] = data[i];
			}
		} else {
			this.onLoadError();
			return;
		}
		this.clearListeners();
		this.complete(bytes,this.requestInfoLog);
		this.request = null;
	}
	,__class__: banan_http_impl_Html5HttpBytes
});
var banan_input_EInputEvent = $hxEnums["banan.input.EInputEvent"] = { __ename__ : true, __constructs__ : ["TouchBegin","TouchEnd","TouchMove","Tap","ShortTapBegin","LongTapBegin"]
	,TouchBegin: {_hx_index:0,__enum__:"banan.input.EInputEvent",toString:$estr}
	,TouchEnd: {_hx_index:1,__enum__:"banan.input.EInputEvent",toString:$estr}
	,TouchMove: {_hx_index:2,__enum__:"banan.input.EInputEvent",toString:$estr}
	,Tap: {_hx_index:3,__enum__:"banan.input.EInputEvent",toString:$estr}
	,ShortTapBegin: {_hx_index:4,__enum__:"banan.input.EInputEvent",toString:$estr}
	,LongTapBegin: {_hx_index:5,__enum__:"banan.input.EInputEvent",toString:$estr}
};
banan_input_EInputEvent.__empty_constructs__ = [banan_input_EInputEvent.TouchBegin,banan_input_EInputEvent.TouchEnd,banan_input_EInputEvent.TouchMove,banan_input_EInputEvent.Tap,banan_input_EInputEvent.ShortTapBegin,banan_input_EInputEvent.LongTapBegin];
var banan_input_EInputListenerType = function(name,pos) {
	banan_basis_ExtendEnum.call(this,name,pos);
};
$hxClasses["banan.input.EInputListenerType"] = banan_input_EInputListenerType;
banan_input_EInputListenerType.__name__ = "banan.input.EInputListenerType";
banan_input_EInputListenerType.__super__ = banan_basis_ExtendEnum;
banan_input_EInputListenerType.prototype = $extend(banan_basis_ExtendEnum.prototype,{
	__class__: banan_input_EInputListenerType
});
var banan_input_EInputState = $hxEnums["banan.input.EInputState"] = { __ename__ : true, __constructs__ : ["Idle","TapBegin","OneFingerMove","TwoFingerMove"]
	,Idle: {_hx_index:0,__enum__:"banan.input.EInputState",toString:$estr}
	,TapBegin: ($_=function(touch,startTime,startX,startY,shortTapTime,longTapTime) { return {_hx_index:1,touch:touch,startTime:startTime,startX:startX,startY:startY,shortTapTime:shortTapTime,longTapTime:longTapTime,__enum__:"banan.input.EInputState",toString:$estr}; },$_.__params__ = ["touch","startTime","startX","startY","shortTapTime","longTapTime"],$_)
	,OneFingerMove: ($_=function(touch,isLongTap) { return {_hx_index:2,touch:touch,isLongTap:isLongTap,__enum__:"banan.input.EInputState",toString:$estr}; },$_.__params__ = ["touch","isLongTap"],$_)
	,TwoFingerMove: ($_=function(touch1,touch2,isLongTap) { return {_hx_index:3,touch1:touch1,touch2:touch2,isLongTap:isLongTap,__enum__:"banan.input.EInputState",toString:$estr}; },$_.__params__ = ["touch1","touch2","isLongTap"],$_)
};
banan_input_EInputState.__empty_constructs__ = [banan_input_EInputState.Idle];
var banan_input_IInputListener = function() { };
$hxClasses["banan.input.IInputListener"] = banan_input_IInputListener;
banan_input_IInputListener.__name__ = "banan.input.IInputListener";
banan_input_IInputListener.__isInterface__ = true;
banan_input_IInputListener.prototype = {
	willProcessInputEvent: null
	,processInputEvent: null
	,clearInputState: null
	,__class__: banan_input_IInputListener
};
var banan_input_InputEvent = function(event,x,y,prevX,prevY,isLongTap,haveTouch2,touch2X,touch2Y,touch2PrevX,touch2PrevY) {
	this.event = event;
	this.x = x;
	this.y = y;
	this.prevX = prevX;
	this.prevY = prevY;
	this.isLongTap = isLongTap;
	this.haveTouch2 = haveTouch2;
	this.touch2X = touch2X;
	this.touch2Y = touch2Y;
	this.touch2PrevX = touch2PrevX;
	this.touch2PrevY = touch2PrevY;
};
$hxClasses["banan.input.InputEvent"] = banan_input_InputEvent;
banan_input_InputEvent.__name__ = "banan.input.InputEvent";
banan_input_InputEvent.prototype = {
	event: null
	,x: null
	,y: null
	,prevX: null
	,prevY: null
	,isLongTap: null
	,haveTouch2: null
	,touch2X: null
	,touch2Y: null
	,touch2PrevX: null
	,touch2PrevY: null
	,toString: function() {
		return "InputEvent{" + Std.string(this.event) + ", " + this.x + ", " + this.y + "}";
	}
	,__class__: banan_input_InputEvent
};
var banan_input_InputHandler = function(updatePriority) {
	this.currentInputListenerType = null;
	this.currentInputListener = null;
	this.inputListenerMap = new banan_basis_ExtendEnumMapImpl(banan_input_EInputListenerType);
	this.targetListTester = null;
	this.targetList = null;
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.input.InputHandler"] = banan_input_InputHandler;
banan_input_InputHandler.__name__ = "banan.input.InputHandler";
banan_input_InputHandler.__super__ = banan_module_Module;
banan_input_InputHandler.prototype = $extend(banan_module_Module.prototype,{
	targetList: null
	,targetListTester: null
	,inputListenerMap: null
	,currentInputListener: null
	,currentInputListenerType: null
	,renderSystem: null
	,nodeSystem: null
	,notificatorModule: null
	,inputSystem: null
	,enableTargetListTester: function(tests) {
		if(this.targetListTester != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"InputHandler.hx:36","targetListTester == null",null));
		}
		return this.targetListTester = new banan_input_TargetListTester(tests);
	}
	,disableTargetListTester: function() {
		this.targetListTester = null;
	}
	,processInput: function() {
		this.inputSystem.processInput();
		if(this.inputSystem.events.length > 0) {
			this.notificatorModule.notify(["input","hasEvents"]);
		}
		var _g = 0;
		var _g1 = this.inputSystem.events;
		while(_g < _g1.length) {
			var event = _g1[_g];
			++_g;
			if(event.event == banan_input_EInputEvent.TouchBegin) {
				if(this.targetList != null) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(121,"InputHandler.hx:57","targetList == null",null));
				}
				var nodeHits = this.collectNodeHits(event.x,event.y);
				var this1 = this.findTarget(nodeHits);
				var entity = this.nodeSystem.root;
				var sThis = entity.__component__banan_display_NodeEdge;
				if(sThis == null) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(120,"InputHandler.hx:60","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
				}
				this.targetList = [];
				var node = this1 != null ? this1 : sThis;
				while(node != null) {
					var tmp = this.targetList;
					var sThis1 = node._entity;
					if(sThis1 == null) {
						throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
					}
					tmp.push(sThis1);
					node = node.parent;
				}
				this.utilizeNodeHits(nodeHits);
				haxe_Log.trace("TOUCH BEGIN " + Std.string(this.targetList),{ fileName : "banan/input/InputHandler.hx", lineNumber : 72, className : "banan.input.InputHandler", methodName : "processInput"});
			}
			if(this.targetListTester == null || this.targetListTester.testTargetList(this.targetList,event)) {
				if(this.currentInputListener == null) {
					var _this = this.inputListenerMap;
					var _g2 = new banan_basis__$IteratorHelper_TransformIterator(new banan_basis__$IteratorHelper_FilterIterator(HxOverrides.iter(_this.type.all),(function(_gthis) {
						return function(k) {
							var key = k.name;
							var _this1 = _gthis[0].map;
							if(__map_reserved[key] != null) {
								return _this1.existsReserved(key);
							} else {
								return _this1.h.hasOwnProperty(key);
							}
						};
					})([_this])),(function(_gthis1) {
						return function(k1) {
							var key1 = k1.name;
							var _this2 = _gthis1[0].map;
							return { key : k1, value : __map_reserved[key1] != null ? _this2.getReserved(key1) : _this2.h[key1]};
						};
					})([_this]));
					while(_g2.hasNext()) {
						var _g11 = _g2.next();
						var type = _g11.key;
						var listener = _g11.value;
						if(listener.willProcessInputEvent(this.targetList,event)) {
							haxe_Log.trace("" + Std.string(type) + " will process input event",{ fileName : "banan/input/InputHandler.hx", lineNumber : 84, className : "banan.input.InputHandler", methodName : "processInput"});
							this.currentInputListener = listener;
							this.currentInputListenerType = type;
							break;
						}
					}
					if(this.currentInputListener != null) {
						var _this3 = this.inputListenerMap;
						var _g3 = new banan_basis__$IteratorHelper_TransformIterator(new banan_basis__$IteratorHelper_FilterIterator(HxOverrides.iter(_this3.type.all),(function(_gthis2) {
							return function(k2) {
								var key2 = k2.name;
								var _this4 = _gthis2[0].map;
								if(__map_reserved[key2] != null) {
									return _this4.existsReserved(key2);
								} else {
									return _this4.h.hasOwnProperty(key2);
								}
							};
						})([_this3])),(function(_gthis3) {
							return function(k3) {
								var key3 = k3.name;
								var _this5 = _gthis3[0].map;
								return { key : k3, value : __map_reserved[key3] != null ? _this5.getReserved(key3) : _this5.h[key3]};
							};
						})([_this3]));
						while(_g3.hasNext()) {
							var listener1 = _g3.next().value;
							if(listener1 != this.currentInputListener) {
								listener1.clearInputState();
							}
						}
					}
				}
				if(this.currentInputListener != null) {
					this.currentInputListener.processInputEvent(this.targetList,event);
				}
			}
			if(event.event == banan_input_EInputEvent.TouchEnd) {
				this.targetList = null;
				if(this.currentInputListener != null) {
					this.releaseInput();
				} else {
					var _this6 = this.inputListenerMap;
					var _g4 = new banan_basis__$IteratorHelper_TransformIterator(new banan_basis__$IteratorHelper_FilterIterator(HxOverrides.iter(_this6.type.all),(function(_gthis4) {
						return function(k4) {
							var key4 = k4.name;
							var _this7 = _gthis4[0].map;
							if(__map_reserved[key4] != null) {
								return _this7.existsReserved(key4);
							} else {
								return _this7.h.hasOwnProperty(key4);
							}
						};
					})([_this6])),(function(_gthis5) {
						return function(k5) {
							var key5 = k5.name;
							var _this8 = _gthis5[0].map;
							return { key : k5, value : __map_reserved[key5] != null ? _this8.getReserved(key5) : _this8.h[key5]};
						};
					})([_this6]));
					while(_g4.hasNext()) _g4.next().value.clearInputState();
				}
				haxe_Log.trace("TOUCH END",{ fileName : "banan/input/InputHandler.hx", lineNumber : 125, className : "banan.input.InputHandler", methodName : "processInput"});
			}
		}
	}
	,registerInputListener: function(listener,type) {
		var _this = this.inputListenerMap;
		if(type.type != _this.type) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:53","key.type == type",null));
		}
		var key = type.name;
		var _this1 = _this.map;
		if(!(!(__map_reserved[key] != null ? _this1.existsReserved(key) : _this1.h.hasOwnProperty(key)))) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"InputHandler.hx:132","!inputListenerMap.exists(type)",null));
		}
		var this1 = this.inputListenerMap;
		if(type.type != this1.type) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:40","key.type == type",null));
		}
		var k = type.name;
		var _this2 = this1.map;
		if(__map_reserved[k] != null) {
			_this2.setReserved(k,listener);
		} else {
			_this2.h[k] = listener;
		}
	}
	,unregisterInputListener: function(type) {
		var this1 = this.inputListenerMap;
		if(type.type != this1.type) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:47","key.type == type",null));
		}
		var key = type.name;
		var _this = this1.map;
		var listener = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(listener != null) {
			if(listener == this.currentInputListener) {
				this.releaseInput();
			} else if(this.currentInputListener == null && this.targetList != null) {
				listener.clearInputState();
			}
			var _this1 = this.inputListenerMap;
			if(type.type != _this1.type) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:59","key.type == type",null));
			}
			_this1.map.remove(type.name);
		}
	}
	,findTarget: function(nodeHits) {
		var node = null;
		var _g = 0;
		while(_g < nodeHits.length) {
			var nodeHit = nodeHits[_g];
			++_g;
			if(nodeHit.hitType._hx_index == 1) {
				if(nodeHit.interactMode != banan_display_EInteractMode.Hover) {
					node = nodeHit.node;
					break;
				}
			}
		}
		return node;
	}
	,collectNodeHits: function(x,y) {
		var worldPoint_y;
		var worldPoint_x = 0.0;
		worldPoint_y = 0.0;
		var goInside = function(node) {
			if(node._isChildrenVisible.valueImpl.get_value() && node.scaleX != 0.0 && node.scaleY != 0.0 && node.isChildrenTouchable.valueImpl.get_value()) {
				var goInside1;
				if(node.isScissorChildren) {
					if(!node._isBoundsValid) {
						node.validateGlobalBounds();
					}
					var left = node._boundsLeft;
					var top = node._boundsTop;
					var _this_x = left;
					var _this_y = top;
					var x1 = worldPoint_x;
					var y1 = worldPoint_y;
					goInside1 = !(x1 >= _this_x && y1 >= _this_y && x1 <= _this_x + (node._boundsRight - left) && y1 <= _this_y + (node._boundsBottom - top));
				} else {
					goInside1 = false;
				}
				return !goInside1;
			} else {
				return false;
			}
		};
		var result = [];
		var _g__array = this.renderSystem.rootList;
		var _g__i = _g__array.length - 1;
		while(_g__i >= 0) {
			var renderRoot = _g__array[_g__i--];
			var entity = renderRoot;
			var sThis = entity.__component__banan_backend_RenderRootEdge;
			if(sThis == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"InputHandler.hx:192","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_backend_RenderRootEdge.__name__,null));
			}
			var entity1 = renderRoot;
			var sThis1 = entity1.__component__banan_display_NodeEdge;
			if(sThis1 == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"InputHandler.hx:193","Unwrap edge error. Entity: " + entity1.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
			}
			var _this = sThis.camera;
			worldPoint_x = _this.cameraX + x / _this.cameraScale;
			worldPoint_y = _this.cameraY + y / _this.cameraScale;
			var _g__current;
			var root = sThis1;
			var _g__into = true;
			var _g__next = null;
			var _g__isDone = false;
			var _g__isBackward = true;
			var _g__getGoInside = goInside;
			var _g__nodeEdge = root;
			var _g__rootParent = root.parent;
			if(_g__isDone) {
				_g__next = null;
			} else {
				var newNext = null;
				while(newNext == null) {
					if(_g__into && !_g__isBackward) {
						newNext = _g__nodeEdge;
					}
					var firstChild = _g__isBackward ? _g__nodeEdge.lastChild : _g__nodeEdge.firstChild;
					if(_g__getGoInside != null && !_g__getGoInside(_g__nodeEdge)) {
						firstChild = null;
					}
					if(_g__into && firstChild != null) {
						_g__nodeEdge = firstChild;
					} else {
						if(_g__isBackward) {
							newNext = _g__nodeEdge;
						}
						var nextSibling = _g__isBackward ? _g__nodeEdge.prev : _g__nodeEdge.next;
						if(_g__nodeEdge.parent == _g__rootParent) {
							_g__isDone = true;
							break;
						} else if(nextSibling != null) {
							_g__into = true;
							_g__nodeEdge = nextSibling;
						} else {
							_g__into = false;
							_g__nodeEdge = _g__nodeEdge.parent;
						}
					}
				}
				_g__next = newNext;
			}
			while(_g__next != null) {
				var sThis2 = _g__next;
				if(sThis2 == null) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:911","",null));
				}
				_g__current = sThis2;
				if(_g__isDone) {
					_g__next = null;
				} else {
					var newNext1 = null;
					while(newNext1 == null) {
						if(_g__into && !_g__isBackward) {
							newNext1 = _g__nodeEdge;
						}
						var firstChild1 = _g__isBackward ? _g__nodeEdge.lastChild : _g__nodeEdge.firstChild;
						if(_g__getGoInside != null && !_g__getGoInside(_g__nodeEdge)) {
							firstChild1 = null;
						}
						if(_g__into && firstChild1 != null) {
							_g__nodeEdge = firstChild1;
						} else {
							if(_g__isBackward) {
								newNext1 = _g__nodeEdge;
							}
							var nextSibling1 = _g__isBackward ? _g__nodeEdge.prev : _g__nodeEdge.next;
							if(_g__nodeEdge.parent == _g__rootParent) {
								_g__isDone = true;
								break;
							} else if(nextSibling1 != null) {
								_g__into = true;
								_g__nodeEdge = nextSibling1;
							} else {
								_g__into = false;
								_g__nodeEdge = _g__nodeEdge.parent;
							}
						}
					}
					_g__next = newNext1;
				}
				var node1 = _g__current;
				var result1 = false;
				if(node1.interactMode.valueImpl.get_value() != banan_display_EInteractMode.None) {
					if(node1._isVisible.valueImpl.get_value() && node1.scaleX != 0.0 && node1.scaleY != 0.0) {
						result1 = true;
					}
				}
				if(result1) {
					var hitType = null;
					var worldPoint_x1 = worldPoint_x;
					var worldPoint_y1 = worldPoint_y;
					var targetNode = null;
					var x2 = node1.areaX;
					var y2 = node1.areaY;
					var sizeX = node1.areaSizeX;
					var sizeY = node1.areaSizeY;
					var transform_m00 = 1;
					var transform_m10 = 0;
					var transform_m20 = 0;
					var transform_m01 = 0;
					var transform_m11 = 1;
					var transform_m21 = 0;
					var transform_m02 = 0;
					var transform_m12 = 0;
					var transform_m22 = 1;
					if(targetNode == null) {
						if(node1.globalTransformId == -1 || node1.parent != node1._globalTransformParent) {
							node1.validateGlobalTransformRecursively();
						}
						var p00 = node1._v00;
						var p10 = node1._v10;
						var p20 = node1._v20;
						var p01 = node1._v01;
						var p11 = node1._v11;
						var p21 = node1._v21;
						if(p21 == null) {
							p21 = 0.0;
						}
						if(p11 == null) {
							p11 = 1.0;
						}
						if(p01 == null) {
							p01 = 0.0;
						}
						if(p20 == null) {
							p20 = 0.0;
						}
						if(p10 == null) {
							p10 = 0.0;
						}
						if(p00 == null) {
							p00 = 1.0;
						}
						transform_m00 = p00;
						transform_m10 = p10;
						transform_m20 = p20;
						transform_m01 = p01;
						transform_m11 = p11;
						transform_m21 = p21;
						transform_m02 = 0.0;
						transform_m12 = 0.0;
						transform_m22 = 1.0;
					} else {
						if(node1.globalTransformId == -1 || node1.parent != node1._globalTransformParent) {
							node1.validateGlobalTransformRecursively();
						}
						var p001 = node1._v00;
						var p101 = node1._v10;
						var p201 = node1._v20;
						var p011 = node1._v01;
						var p111 = node1._v11;
						var p211 = node1._v21;
						if(p211 == null) {
							p211 = 0.0;
						}
						if(p111 == null) {
							p111 = 1.0;
						}
						if(p011 == null) {
							p011 = 0.0;
						}
						if(p201 == null) {
							p201 = 0.0;
						}
						if(p101 == null) {
							p101 = 0.0;
						}
						if(p001 == null) {
							p001 = 1.0;
						}
						var baseToRoot_m00 = p001;
						var baseToRoot_m10 = p101;
						var baseToRoot_m20 = p201;
						var baseToRoot_m01 = p011;
						var baseToRoot_m11 = p111;
						var baseToRoot_m21 = p211;
						var baseToRoot_m02 = 0.0;
						var baseToRoot_m12 = 0.0;
						var baseToRoot_m22 = 1.0;
						if(!targetNode._isInverseTransformValid) {
							targetNode.validateInverseTransform();
						}
						var _this1 = targetNode._inverseTransform;
						var rootToTarget_m00 = _this1.m00;
						var rootToTarget_m10 = _this1.m10;
						var rootToTarget_m20 = _this1.m20;
						var rootToTarget_m01 = _this1.m01;
						var rootToTarget_m11 = _this1.m11;
						var rootToTarget_m21 = _this1.m21;
						var rootToTarget_m02 = _this1.m02;
						var rootToTarget_m12 = _this1.m12;
						var rootToTarget_m22 = _this1.m22;
						var current = node1;
						var result2 = null;
						while(result2 == null && current != null) {
							var sThis3 = current._entity;
							if(sThis3 == null) {
								throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
							}
							result2 = sThis3.__component__banan_backend_RenderRootEdge;
							current = current.parent;
						}
						var myRoot = result2;
						var current1 = targetNode;
						var result3 = null;
						while(result3 == null && current1 != null) {
							var sThis4 = current1._entity;
							if(sThis4 == null) {
								throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
							}
							result3 = sThis4.__component__banan_backend_RenderRootEdge;
							current1 = current1.parent;
						}
						var targetRoot = result3;
						if(myRoot != targetRoot) {
							if(myRoot != null) {
								var _this2 = myRoot.camera;
								var _this_m00 = _this2.cameraScale;
								var _this_m10 = 0;
								var _this_m20 = 0;
								var _this_m01 = 0;
								var _this_m11 = _this2.cameraScale;
								var _this_m21 = 0;
								var _this_m02 = 0;
								var _this_m12 = 0;
								var _this_m22 = 1;
								var rhs_m00 = 1;
								var rhs_m10 = 0;
								var rhs_m20 = -_this2.cameraX;
								var rhs_m01 = 0;
								var rhs_m11 = 1;
								var rhs_m21 = -_this2.cameraY;
								var rhs_m02 = 0;
								var rhs_m12 = 0;
								var rhs_m22 = 1;
								var _this_m001 = _this_m00 * rhs_m00 + _this_m10 * rhs_m01 + _this_m20 * rhs_m02;
								var _this_m101 = _this_m00 * rhs_m10 + _this_m10 * rhs_m11 + _this_m20 * rhs_m12;
								var _this_m201 = _this_m00 * rhs_m20 + _this_m10 * rhs_m21 + _this_m20 * rhs_m22;
								var _this_m011 = _this_m01 * rhs_m00 + _this_m11 * rhs_m01 + _this_m21 * rhs_m02;
								var _this_m111 = _this_m01 * rhs_m10 + _this_m11 * rhs_m11 + _this_m21 * rhs_m12;
								var _this_m211 = _this_m01 * rhs_m20 + _this_m11 * rhs_m21 + _this_m21 * rhs_m22;
								var _this_m021 = _this_m02 * rhs_m00 + _this_m12 * rhs_m01 + _this_m22 * rhs_m02;
								var _this_m121 = _this_m02 * rhs_m10 + _this_m12 * rhs_m11 + _this_m22 * rhs_m12;
								var _this_m221 = _this_m02 * rhs_m20 + _this_m12 * rhs_m21 + _this_m22 * rhs_m22;
								var source_m01 = _this_m011 * baseToRoot_m00 + _this_m111 * baseToRoot_m01 + _this_m211 * baseToRoot_m02;
								var source_m11 = _this_m011 * baseToRoot_m10 + _this_m111 * baseToRoot_m11 + _this_m211 * baseToRoot_m12;
								var source_m21 = _this_m011 * baseToRoot_m20 + _this_m111 * baseToRoot_m21 + _this_m211 * baseToRoot_m22;
								var source_m02 = _this_m021 * baseToRoot_m00 + _this_m121 * baseToRoot_m01 + _this_m221 * baseToRoot_m02;
								var source_m12 = _this_m021 * baseToRoot_m10 + _this_m121 * baseToRoot_m11 + _this_m221 * baseToRoot_m12;
								var source_m22 = _this_m021 * baseToRoot_m20 + _this_m121 * baseToRoot_m21 + _this_m221 * baseToRoot_m22;
								baseToRoot_m00 = _this_m001 * baseToRoot_m00 + _this_m101 * baseToRoot_m01 + _this_m201 * baseToRoot_m02;
								baseToRoot_m10 = _this_m001 * baseToRoot_m10 + _this_m101 * baseToRoot_m11 + _this_m201 * baseToRoot_m12;
								baseToRoot_m20 = _this_m001 * baseToRoot_m20 + _this_m101 * baseToRoot_m21 + _this_m201 * baseToRoot_m22;
								baseToRoot_m01 = source_m01;
								baseToRoot_m11 = source_m11;
								baseToRoot_m21 = source_m21;
								baseToRoot_m02 = source_m02;
								baseToRoot_m12 = source_m12;
								baseToRoot_m22 = source_m22;
							}
							if(targetRoot != null) {
								var _this3 = targetRoot.camera;
								var _this_m002 = 1;
								var _this_m102 = 0;
								var _this_m202 = _this3.cameraX;
								var _this_m012 = 0;
								var _this_m112 = 1;
								var _this_m212 = _this3.cameraY;
								var _this_m022 = 0;
								var _this_m122 = 0;
								var _this_m222 = 1;
								var rhs_m001 = 1 / _this3.cameraScale;
								var rhs_m101 = 0;
								var rhs_m201 = 0;
								var rhs_m011 = 0;
								var rhs_m111 = 1 / _this3.cameraScale;
								var rhs_m211 = 0;
								var rhs_m021 = 0;
								var rhs_m121 = 0;
								var rhs_m221 = 1;
								var rhs_m002 = _this_m002 * rhs_m001 + _this_m102 * rhs_m011 + _this_m202 * rhs_m021;
								var rhs_m102 = _this_m002 * rhs_m101 + _this_m102 * rhs_m111 + _this_m202 * rhs_m121;
								var rhs_m202 = _this_m002 * rhs_m201 + _this_m102 * rhs_m211 + _this_m202 * rhs_m221;
								var rhs_m012 = _this_m012 * rhs_m001 + _this_m112 * rhs_m011 + _this_m212 * rhs_m021;
								var rhs_m112 = _this_m012 * rhs_m101 + _this_m112 * rhs_m111 + _this_m212 * rhs_m121;
								var rhs_m212 = _this_m012 * rhs_m201 + _this_m112 * rhs_m211 + _this_m212 * rhs_m221;
								var rhs_m022 = _this_m022 * rhs_m001 + _this_m122 * rhs_m011 + _this_m222 * rhs_m021;
								var rhs_m122 = _this_m022 * rhs_m101 + _this_m122 * rhs_m111 + _this_m222 * rhs_m121;
								var rhs_m222 = _this_m022 * rhs_m201 + _this_m122 * rhs_m211 + _this_m222 * rhs_m221;
								var source_m10 = rootToTarget_m00 * rhs_m102 + rootToTarget_m10 * rhs_m112 + rootToTarget_m20 * rhs_m122;
								var source_m20 = rootToTarget_m00 * rhs_m202 + rootToTarget_m10 * rhs_m212 + rootToTarget_m20 * rhs_m222;
								var source_m111 = rootToTarget_m01 * rhs_m102 + rootToTarget_m11 * rhs_m112 + rootToTarget_m21 * rhs_m122;
								var source_m211 = rootToTarget_m01 * rhs_m202 + rootToTarget_m11 * rhs_m212 + rootToTarget_m21 * rhs_m222;
								var source_m121 = rootToTarget_m02 * rhs_m102 + rootToTarget_m12 * rhs_m112 + rootToTarget_m22 * rhs_m122;
								var source_m221 = rootToTarget_m02 * rhs_m202 + rootToTarget_m12 * rhs_m212 + rootToTarget_m22 * rhs_m222;
								rootToTarget_m00 = rootToTarget_m00 * rhs_m002 + rootToTarget_m10 * rhs_m012 + rootToTarget_m20 * rhs_m022;
								rootToTarget_m10 = source_m10;
								rootToTarget_m20 = source_m20;
								rootToTarget_m01 = rootToTarget_m01 * rhs_m002 + rootToTarget_m11 * rhs_m012 + rootToTarget_m21 * rhs_m022;
								rootToTarget_m11 = source_m111;
								rootToTarget_m21 = source_m211;
								rootToTarget_m02 = rootToTarget_m02 * rhs_m002 + rootToTarget_m12 * rhs_m012 + rootToTarget_m22 * rhs_m022;
								rootToTarget_m12 = source_m121;
								rootToTarget_m22 = source_m221;
							}
						}
						transform_m00 = rootToTarget_m00 * baseToRoot_m00 + rootToTarget_m10 * baseToRoot_m01 + rootToTarget_m20 * baseToRoot_m02;
						transform_m10 = rootToTarget_m00 * baseToRoot_m10 + rootToTarget_m10 * baseToRoot_m11 + rootToTarget_m20 * baseToRoot_m12;
						transform_m20 = rootToTarget_m00 * baseToRoot_m20 + rootToTarget_m10 * baseToRoot_m21 + rootToTarget_m20 * baseToRoot_m22;
						transform_m01 = rootToTarget_m01 * baseToRoot_m00 + rootToTarget_m11 * baseToRoot_m01 + rootToTarget_m21 * baseToRoot_m02;
						transform_m11 = rootToTarget_m01 * baseToRoot_m10 + rootToTarget_m11 * baseToRoot_m11 + rootToTarget_m21 * baseToRoot_m12;
						transform_m21 = rootToTarget_m01 * baseToRoot_m20 + rootToTarget_m11 * baseToRoot_m21 + rootToTarget_m21 * baseToRoot_m22;
						transform_m02 = rootToTarget_m02 * baseToRoot_m00 + rootToTarget_m12 * baseToRoot_m01 + rootToTarget_m22 * baseToRoot_m02;
						transform_m12 = rootToTarget_m02 * baseToRoot_m10 + rootToTarget_m12 * baseToRoot_m11 + rootToTarget_m22 * baseToRoot_m12;
						transform_m22 = rootToTarget_m02 * baseToRoot_m20 + rootToTarget_m12 * baseToRoot_m21 + rootToTarget_m22 * baseToRoot_m22;
					}
					var w = transform_m02 * x2 + transform_m12 * y2 + transform_m22;
					var leftTop_x = (transform_m00 * x2 + transform_m10 * y2 + transform_m20) / w;
					var leftTop_y = (transform_m01 * x2 + transform_m11 * y2 + transform_m21) / w;
					var x3 = x2 + sizeX;
					var w1 = transform_m02 * x3 + transform_m12 * y2 + transform_m22;
					var rightTop_x = (transform_m00 * x3 + transform_m10 * y2 + transform_m20) / w1;
					var rightTop_y = (transform_m01 * x3 + transform_m11 * y2 + transform_m21) / w1;
					var x4 = x2 + sizeX;
					var y3 = y2 + sizeY;
					var w2 = transform_m02 * x4 + transform_m12 * y3 + transform_m22;
					var rightBottom_x = (transform_m00 * x4 + transform_m10 * y3 + transform_m20) / w2;
					var rightBottom_y = (transform_m01 * x4 + transform_m11 * y3 + transform_m21) / w2;
					var y4 = y2 + sizeY;
					var w3 = transform_m02 * x2 + transform_m12 * y4 + transform_m22;
					var leftBottom_x = (transform_m00 * x2 + transform_m10 * y4 + transform_m20) / w3;
					var leftBottom_y = (transform_m01 * x2 + transform_m11 * y4 + transform_m21) / w3;
					var a = leftTop_x;
					var a1 = rightTop_x;
					var a2 = rightBottom_x;
					var b = leftBottom_x;
					var b1 = a2 < b ? a2 : b;
					var b2 = a1 < b1 ? a1 : b1;
					var left1 = a < b2 ? a : b2;
					var a3 = leftTop_y;
					var a4 = rightTop_y;
					var a5 = rightBottom_y;
					var b3 = leftBottom_y;
					var b4 = a5 < b3 ? a5 : b3;
					var b5 = a4 < b4 ? a4 : b4;
					var top1 = a3 < b5 ? a3 : b5;
					var a6 = leftTop_x;
					var a7 = rightTop_x;
					var a8 = rightBottom_x;
					var b6 = leftBottom_x;
					var b7 = a8 > b6 ? a8 : b6;
					var b8 = a7 > b7 ? a7 : b7;
					var a9 = leftTop_y;
					var a10 = rightTop_y;
					var a11 = rightBottom_y;
					var b9 = leftBottom_y;
					var b10 = a11 > b9 ? a11 : b9;
					var b11 = a10 > b10 ? a10 : b10;
					var _this_x1 = left1;
					var _this_y1 = top1;
					if((worldPoint_x1 - _this_x1) * (worldPoint_x1 - (_this_x1 + ((a6 > b8 ? a6 : b8) - left1))) <= 0 && (worldPoint_y1 - _this_y1) * (worldPoint_y1 - (_this_y1 + ((a9 > b11 ? a9 : b11) - top1))) <= 0) {
						if(!node1._isInverseTransformValid) {
							node1.validateInverseTransform();
						}
						var _this4 = node1._inverseTransform;
						var x5 = worldPoint_x1;
						var y5 = worldPoint_y1;
						var w4 = _this4.m02 * x5 + _this4.m12 * y5 + _this4.m22;
						var localPoint_x = (_this4.m00 * x5 + _this4.m10 * y5 + _this4.m20) / w4;
						var localPoint_y = (_this4.m01 * x5 + _this4.m11 * y5 + _this4.m21) / w4;
						var _this_x2 = node1.areaX;
						var _this_y2 = node1.areaY;
						if((localPoint_x - _this_x2) * (localPoint_x - (_this_x2 + node1.areaSizeX)) <= 0 && (localPoint_y - _this_y2) * (localPoint_y - (_this_y2 + node1.areaSizeY)) <= 0) {
							var sThis5 = node1._entity;
							if(sThis5 == null) {
								throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
							}
							var inputPolygonEdge = sThis5.__component__banan_input_InputPolygonEdge;
							var a12;
							if(inputPolygonEdge != null) {
								var a13;
								if(inputPolygonEdge.isEnabled) {
									var localX = Math.round(localPoint_x);
									var localY = Math.round(localPoint_y);
									var includeHit = false;
									var _this5 = inputPolygonEdge.includes;
									var polygon = new haxe_ds__$StringMap_StringMapIterator(_this5,_this5.arrayKeys());
									while(polygon.hasNext()) {
										var polygon1 = polygon.next();
										var a14;
										if(localX < polygon1.left || localX > polygon1.right || localY < polygon1.top || localY > polygon1.bottom) {
											a14 = false;
										} else {
											var count = 0;
											var _g = 0;
											var _g1 = polygon1.pointList.length;
											while(_g < _g1) {
												var i = _g++;
												var p0 = polygon1.pointList[i];
												var p1 = polygon1.pointList[(i + 1) % polygon1.pointList.length];
												if(localY >= p0.y && localY <= p1.y || localY >= p1.y && localY <= p0.y) {
													var dy = p1.y - p0.y;
													if(dy != 0) {
														var edgeX = p0.x + (localY - p0.y) * (p1.x - p0.x) / dy;
														var d = edgeX - localX;
														var eps = 1e-10;
														if(d >= 0 ? d < eps : d > -eps) {
															count = 1;
															break;
														}
														if(edgeX > localX) {
															if(!(localY == p1.y && localY < p0.y || localY == p0.y && localY < p1.y)) {
																++count;
															}
														}
													} else if(localX >= p0.x && localX <= p1.x || localX >= p1.x && localX <= p0.x) {
														count = 1;
														break;
													}
												}
											}
											a14 = count % 2 == 1;
										}
										if(a14) {
											includeHit = true;
											break;
										}
									}
									a13 = includeHit;
								} else {
									a13 = false;
								}
								if(a13) {
									var worldX = worldPoint_x1;
									var worldY = worldPoint_y1;
									var excludeHit = false;
									var shape = inputPolygonEdge.excludes.keys();
									while(shape.hasNext()) if(shape.next().isPointInside(worldX,worldY)) {
										excludeHit = true;
										break;
									}
									a12 = !excludeHit;
								} else {
									a12 = false;
								}
							} else {
								a12 = null;
							}
							var a15 = a12;
							if(a15 != null ? a15 : true) {
								hitType = banan_input_ENodeHitType.Hit_Polygon;
							} else {
								hitType = banan_input_ENodeHitType.Hit_Sprite;
							}
						}
					}
					var hitType1 = hitType;
					if(hitType1 != null) {
						result.push(banan_input_NodeHitPair.make(node1,hitType1,node1.interactMode.valueImpl.get_value()));
					}
				}
			}
		}
		return result;
	}
	,releaseInput: function() {
		if(this.currentInputListener != null) {
			haxe_Log.trace("releasing input, clearing input state of " + Std.string(this.currentInputListenerType),{ fileName : "banan/input/InputHandler.hx", lineNumber : 217, className : "banan.input.InputHandler", methodName : "releaseInput"});
			this.currentInputListener.clearInputState();
			this.currentInputListener = null;
			this.currentInputListenerType = null;
		}
	}
	,canBeHit: function(node) {
		var result = false;
		if(node.interactMode.valueImpl.get_value() != banan_display_EInteractMode.None) {
			if(node._isVisible.valueImpl.get_value() && node.scaleX != 0.0 && node.scaleY != 0.0) {
				result = true;
			}
		}
		return result;
	}
	,calculateHitType: function(node,worldX,worldY) {
		var hitType = null;
		var x = node.areaX;
		var y = node.areaY;
		var sizeX = node.areaSizeX;
		var sizeY = node.areaSizeY;
		var transform_m00 = 1;
		var transform_m10 = 0;
		var transform_m20 = 0;
		var transform_m01 = 0;
		var transform_m11 = 1;
		var transform_m21 = 0;
		if(node.globalTransformId == -1 || node.parent != node._globalTransformParent) {
			node.validateGlobalTransformRecursively();
		}
		var p00 = node._v00;
		var p10 = node._v10;
		var p20 = node._v20;
		var p01 = node._v01;
		var p11 = node._v11;
		var p21 = node._v21;
		if(p21 == null) {
			p21 = 0.0;
		}
		if(p11 == null) {
			p11 = 1.0;
		}
		if(p01 == null) {
			p01 = 0.0;
		}
		if(p20 == null) {
			p20 = 0.0;
		}
		if(p10 == null) {
			p10 = 0.0;
		}
		if(p00 == null) {
			p00 = 1.0;
		}
		transform_m00 = p00;
		transform_m10 = p10;
		transform_m20 = p20;
		transform_m01 = p01;
		transform_m11 = p11;
		transform_m21 = p21;
		var w = 0.0 * x + 0.0 * y + 1.0;
		var resultX = (transform_m00 * x + transform_m10 * y + transform_m20) / w;
		var resultY = (transform_m01 * x + transform_m11 * y + transform_m21) / w;
		var x1 = x + sizeX;
		var w1 = 0.0 * x1 + 0.0 * y + 1.0;
		var resultX1 = (transform_m00 * x1 + transform_m10 * y + transform_m20) / w1;
		var resultY1 = (transform_m01 * x1 + transform_m11 * y + transform_m21) / w1;
		var x2 = x + sizeX;
		var y1 = y + sizeY;
		var w2 = 0.0 * x2 + 0.0 * y1 + 1.0;
		var resultX2 = (transform_m00 * x2 + transform_m10 * y1 + transform_m20) / w2;
		var resultY2 = (transform_m01 * x2 + transform_m11 * y1 + transform_m21) / w2;
		var y2 = y + sizeY;
		var w3 = 0.0 * x + 0.0 * y2 + 1.0;
		var resultX3 = (transform_m00 * x + transform_m10 * y2 + transform_m20) / w3;
		var resultY3 = (transform_m01 * x + transform_m11 * y2 + transform_m21) / w3;
		var b = resultX2 < resultX3 ? resultX2 : resultX3;
		var b1 = resultX1 < b ? resultX1 : b;
		var left = resultX < b1 ? resultX : b1;
		var b2 = resultY2 < resultY3 ? resultY2 : resultY3;
		var b3 = resultY1 < b2 ? resultY1 : b2;
		var top = resultY < b3 ? resultY : b3;
		var b4 = resultX2 > resultX3 ? resultX2 : resultX3;
		var b5 = resultX1 > b4 ? resultX1 : b4;
		var b6 = resultY2 > resultY3 ? resultY2 : resultY3;
		var b7 = resultY1 > b6 ? resultY1 : b6;
		var _this_x = left;
		var _this_y = top;
		if((worldX - _this_x) * (worldX - (_this_x + ((resultX > b5 ? resultX : b5) - left))) <= 0 && (worldY - _this_y) * (worldY - (_this_y + ((resultY > b7 ? resultY : b7) - top))) <= 0) {
			if(!node._isInverseTransformValid) {
				node.validateInverseTransform();
			}
			var _this = node._inverseTransform;
			var w4 = _this.m02 * worldX + _this.m12 * worldY + _this.m22;
			var resultX4 = (_this.m00 * worldX + _this.m10 * worldY + _this.m20) / w4;
			var resultY4 = (_this.m01 * worldX + _this.m11 * worldY + _this.m21) / w4;
			var x3 = node.areaX;
			var y3 = node.areaY;
			if((resultX4 - x3) * (resultX4 - (x3 + node.areaSizeX)) <= 0 && (resultY4 - y3) * (resultY4 - (y3 + node.areaSizeY)) <= 0) {
				var sThis = node._entity;
				if(sThis == null) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
				}
				var inputPolygonEdge = sThis.__component__banan_input_InputPolygonEdge;
				var a;
				if(inputPolygonEdge != null) {
					var a1;
					if(inputPolygonEdge.isEnabled) {
						var localX = Math.round(resultX4);
						var localY = Math.round(resultY4);
						var includeHit = false;
						var _this1 = inputPolygonEdge.includes;
						var polygon = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
						while(polygon.hasNext()) {
							var polygon1 = polygon.next();
							var a2;
							if(localX < polygon1.left || localX > polygon1.right || localY < polygon1.top || localY > polygon1.bottom) {
								a2 = false;
							} else {
								var count = 0;
								var _g = 0;
								var _g1 = polygon1.pointList.length;
								while(_g < _g1) {
									var i = _g++;
									var p0 = polygon1.pointList[i];
									var p1 = polygon1.pointList[(i + 1) % polygon1.pointList.length];
									if(localY >= p0.y && localY <= p1.y || localY >= p1.y && localY <= p0.y) {
										var dy = p1.y - p0.y;
										if(dy != 0) {
											var edgeX = p0.x + (localY - p0.y) * (p1.x - p0.x) / dy;
											var d = edgeX - localX;
											if(d >= 0 ? d < 1e-10 : d > -1e-010) {
												count = 1;
												break;
											}
											if(edgeX > localX) {
												if(!(localY == p1.y && localY < p0.y || localY == p0.y && localY < p1.y)) {
													++count;
												}
											}
										} else if(localX >= p0.x && localX <= p1.x || localX >= p1.x && localX <= p0.x) {
											count = 1;
											break;
										}
									}
								}
								a2 = count % 2 == 1;
							}
							if(a2) {
								includeHit = true;
								break;
							}
						}
						a1 = includeHit;
					} else {
						a1 = false;
					}
					if(a1) {
						var excludeHit = false;
						var shape = inputPolygonEdge.excludes.keys();
						while(shape.hasNext()) if(shape.next().isPointInside(worldX,worldY)) {
							excludeHit = true;
							break;
						}
						a = !excludeHit;
					} else {
						a = false;
					}
				} else {
					a = null;
				}
				var a3 = a;
				if(a3 != null ? a3 : true) {
					hitType = banan_input_ENodeHitType.Hit_Polygon;
				} else {
					hitType = banan_input_ENodeHitType.Hit_Sprite;
				}
			}
		}
		return hitType;
	}
	,utilizeNodeHits: function(nodeHits) {
		while(nodeHits.length > 0) banan_input_NodeHitPair.dispose(nodeHits.pop());
	}
	,makeModuleInfo: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["banan.backend.IRenderSystem"] != null) {
			_g.setReserved("banan.backend.IRenderSystem","renderSystem");
		} else {
			_g.h["banan.backend.IRenderSystem"] = "renderSystem";
		}
		if(__map_reserved["banan.display.NodeSystem"] != null) {
			_g.setReserved("banan.display.NodeSystem","nodeSystem");
		} else {
			_g.h["banan.display.NodeSystem"] = "nodeSystem";
		}
		if(__map_reserved["banan.notificator.NotificatorModule"] != null) {
			_g.setReserved("banan.notificator.NotificatorModule","notificatorModule");
		} else {
			_g.h["banan.notificator.NotificatorModule"] = "notificatorModule";
		}
		if(__map_reserved["banan.input.InputSystem"] != null) {
			_g.setReserved("banan.input.InputSystem","inputSystem");
		} else {
			_g.h["banan.input.InputSystem"] = "inputSystem";
		}
		return new banan_module_ModuleInfo("banan.input.InputHandler",[],[],_g,["banan.input.InputSystem"]);
	}
	,__class__: banan_input_InputHandler
});
var banan_input_EInputPolygonEnableModifier = function(name,pos) {
	banan_basis_ExtendEnum.call(this,name,pos);
};
$hxClasses["banan.input.EInputPolygonEnableModifier"] = banan_input_EInputPolygonEnableModifier;
banan_input_EInputPolygonEnableModifier.__name__ = "banan.input.EInputPolygonEnableModifier";
banan_input_EInputPolygonEnableModifier.__super__ = banan_basis_ExtendEnum;
banan_input_EInputPolygonEnableModifier.prototype = $extend(banan_basis_ExtendEnum.prototype,{
	__class__: banan_input_EInputPolygonEnableModifier
});
var banan_input_InputPolygonEdge = function() {
	this.excludes = new haxe_ds_ObjectMap();
	this.includes = new haxe_ds_StringMap();
	this.includes = new haxe_ds_StringMap();
	this.excludes = new haxe_ds_ObjectMap();
	this.isEnabled = true;
	this.enableModifiers = new haxe_ds_ObjectMap();
};
$hxClasses["banan.input.InputPolygonEdge"] = banan_input_InputPolygonEdge;
banan_input_InputPolygonEdge.__name__ = "banan.input.InputPolygonEdge";
banan_input_InputPolygonEdge.prototype = {
	isEnabled: null
	,includes: null
	,excludes: null
	,enableModifiers: null
	,iterateIncludes: function(cb) {
		var _this = this.includes;
		var polygon = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(polygon.hasNext()) cb(polygon.next());
	}
	,setInclude: function(polygon,key) {
		var _this = this.includes;
		if(__map_reserved[key] != null) {
			_this.setReserved(key,polygon);
		} else {
			_this.h[key] = polygon;
		}
	}
	,removeInclude: function(key) {
		this.includes.remove(key);
	}
	,addExclude: function(shape) {
		this.excludes.set(shape,true);
	}
	,removeExclude: function(shape) {
		this.excludes.remove(shape);
	}
	,modifyIsEnabled: function(type,value) {
		if(value == 0) {
			this.enableModifiers.remove(type);
		} else {
			this.enableModifiers.set(type,value);
		}
		this.validateIsEnabled();
	}
	,checkIncludesHit: function(localX,localY) {
		var includeHit = false;
		var _this = this.includes;
		var polygon = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(polygon.hasNext()) {
			var polygon1 = polygon.next();
			var tmp;
			if(localX < polygon1.left || localX > polygon1.right || localY < polygon1.top || localY > polygon1.bottom) {
				tmp = false;
			} else {
				var count = 0;
				var _g = 0;
				var _g1 = polygon1.pointList.length;
				while(_g < _g1) {
					var i = _g++;
					var p0 = polygon1.pointList[i];
					var p1 = polygon1.pointList[(i + 1) % polygon1.pointList.length];
					if(localY >= p0.y && localY <= p1.y || localY >= p1.y && localY <= p0.y) {
						var dy = p1.y - p0.y;
						if(dy != 0) {
							var edgeX = p0.x + (localY - p0.y) * (p1.x - p0.x) / dy;
							var d = edgeX - localX;
							if(d >= 0 ? d < 1e-10 : d > -1e-010) {
								count = 1;
								break;
							}
							if(edgeX > localX) {
								if(!(localY == p1.y && localY < p0.y || localY == p0.y && localY < p1.y)) {
									++count;
								}
							}
						} else if(localX >= p0.x && localX <= p1.x || localX >= p1.x && localX <= p0.x) {
							count = 1;
							break;
						}
					}
				}
				tmp = count % 2 == 1;
			}
			if(tmp) {
				includeHit = true;
				break;
			}
		}
		return includeHit;
	}
	,checkExcludesHit: function(worldX,worldY) {
		var excludeHit = false;
		var shape = this.excludes.keys();
		while(shape.hasNext()) if(shape.next().isPointInside(worldX,worldY)) {
			excludeHit = true;
			break;
		}
		return excludeHit;
	}
	,validateIsEnabled: function() {
		var counter = 0;
		var n = this.enableModifiers.iterator();
		while(n.hasNext()) counter += n.next();
		this.isEnabled = counter >= 0;
	}
	,__class__: banan_input_InputPolygonEdge
};
var banan_input_InputSystem = function(updatePriority) {
	this.isDiscardCurrentTouches = false;
	this.state = banan_input_EInputState.Idle;
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.input.InputSystem"] = banan_input_InputSystem;
banan_input_InputSystem.__name__ = "banan.input.InputSystem";
banan_input_InputSystem.__super__ = banan_module_Module;
banan_input_InputSystem.prototype = $extend(banan_module_Module.prototype,{
	events: null
	,lastEventTime: null
	,state: null
	,set_state: function(value) {
		this.state = value;
		var _g = this.state;
		var tmp;
		switch(_g._hx_index) {
		case 0:
			tmp = "idle";
			break;
		case 1:
			var _g4 = _g.touch;
			tmp = "tap begin x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g4) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g4) + " " + (_g.shortTapTime != null ? "shortTap" : "") + " " + (_g.longTapTime != null ? "longTap" : "");
			break;
		case 2:
			var _g10 = _g.touch;
			tmp = "one finger move x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g10) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g10) + ", " + (_g.isLongTap ? "longTap" : "");
			break;
		case 3:
			var _g2 = _g.touch2;
			var _g1 = _g.touch1;
			tmp = "two finger move x1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g1) + ", y1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g1) + ", x2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g2) + ", y2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g2) + ", " + (_g.isLongTap ? "longTap" : "");
			break;
		}
		haxe_Log.trace(tmp,{ fileName : "banan/input/InputSystem.hx", lineNumber : 27, className : "banan.input.InputSystem", methodName : "set_state"});
		return this.state;
	}
	,isDiscardCurrentTouches: null
	,timeProvider: null
	,bInput: null
	,deviceProfileResolver: null
	,initialize: function() {
		this.lastEventTime = this.timeProvider.provider.appTimeReal;
		this.moduleInfo.setInitialized();
	}
	,discardCurrentTouches: function() {
		this.isDiscardCurrentTouches = true;
	}
	,processInput: function() {
		banan_input__$ScaledTouch_ScaledTouch_$Impl_$.scale = this.deviceProfileResolver.resolutionScale;
		this.events = [];
		this.identifyEvents();
	}
	,identifyEvents: function() {
		var allTouches = [];
		var touches = [];
		if(this.isDiscardCurrentTouches) {
			this.isDiscardCurrentTouches = false;
			banan_input__$ScaledTouch_ScaledTouch_$Impl_$.forceNotActive = true;
		} else {
			banan_input__$ScaledTouch_ScaledTouch_$Impl_$.forceNotActive = false;
		}
		var _g = 0;
		var _g1 = this.bInput.get_touches();
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			allTouches.push(touch);
			if(touch.isActive) {
				touches.push(touch);
			}
		}
		if(allTouches.length > 0) {
			this.lastEventTime = this.timeProvider.provider.appTimeReal;
		}
		var numTouches = touches.length;
		var _g2 = this.state;
		switch(_g2._hx_index) {
		case 0:
			if(allTouches.length >= 1) {
				var touch1 = allTouches[0];
				this.state = banan_input_EInputState.TapBegin(touch1,this.timeProvider.provider.appTimeReal,banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(touch1),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(touch1));
				var _g3 = this.state;
				var tmp;
				switch(_g3._hx_index) {
				case 0:
					tmp = "idle";
					break;
				case 1:
					var _g4 = _g3.touch;
					tmp = "tap begin x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g4) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g4) + " " + (_g3.shortTapTime != null ? "shortTap" : "") + " " + (_g3.longTapTime != null ? "longTap" : "");
					break;
				case 2:
					var _g10 = _g3.touch;
					tmp = "one finger move x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g10) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g10) + ", " + (_g3.isLongTap ? "longTap" : "");
					break;
				case 3:
					var _g21 = _g3.touch2;
					var _g11 = _g3.touch1;
					tmp = "two finger move x1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g11) + ", y1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g11) + ", x2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g21) + ", y2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g21) + ", " + (_g3.isLongTap ? "longTap" : "");
					break;
				}
				haxe_Log.trace(tmp,{ fileName : "banan/input/InputSystem.hx", lineNumber : 27, className : "banan.input.InputSystem", methodName : "set_state"});
				this.sendEvent(banan_input_EInputEvent.TouchBegin,banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(touch1),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(touch1),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(touch1),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(touch1));
				this.identifyEvents();
			}
			break;
		case 1:
			var _g111 = _g2.longTapTime;
			var _g101 = _g2.shortTapTime;
			var _g9 = _g2.startY;
			var _g8 = _g2.startX;
			var _g7 = _g2.startTime;
			var _g6 = _g2.touch;
			if(!banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_isActive(_g6)) {
				if(_g111 == null) {
					this.sendEvent(banan_input_EInputEvent.Tap,_g8,_g9,_g8,_g9);
				}
				this.sendEvent(banan_input_EInputEvent.TouchEnd,_g8,_g9,_g8,_g9);
				this.state = banan_input_EInputState.Idle;
				var _g5 = this.state;
				var tmp1;
				switch(_g5._hx_index) {
				case 0:
					tmp1 = "idle";
					break;
				case 1:
					var _g41 = _g5.touch;
					tmp1 = "tap begin x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g41) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g41) + " " + (_g5.shortTapTime != null ? "shortTap" : "") + " " + (_g5.longTapTime != null ? "longTap" : "");
					break;
				case 2:
					var _g102 = _g5.touch;
					tmp1 = "one finger move x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g102) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g102) + ", " + (_g5.isLongTap ? "longTap" : "");
					break;
				case 3:
					var _g22 = _g5.touch2;
					var _g12 = _g5.touch1;
					tmp1 = "two finger move x1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g12) + ", y1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g12) + ", x2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g22) + ", y2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g22) + ", " + (_g5.isLongTap ? "longTap" : "");
					break;
				}
				haxe_Log.trace(tmp1,{ fileName : "banan/input/InputSystem.hx", lineNumber : 27, className : "banan.input.InputSystem", methodName : "set_state"});
			} else if(numTouches >= 2) {
				var touch2 = null;
				var _g23 = 0;
				while(_g23 < touches.length) {
					var t = touches[_g23];
					++_g23;
					if(t != _g6) {
						touch2 = t;
						break;
					}
				}
				this.state = banan_input_EInputState.TwoFingerMove(_g6,touch2,false);
				var _g13 = this.state;
				var tmp2;
				switch(_g13._hx_index) {
				case 0:
					tmp2 = "idle";
					break;
				case 1:
					var _g42 = _g13.touch;
					tmp2 = "tap begin x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g42) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g42) + " " + (_g13.shortTapTime != null ? "shortTap" : "") + " " + (_g13.longTapTime != null ? "longTap" : "");
					break;
				case 2:
					var _g103 = _g13.touch;
					tmp2 = "one finger move x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g103) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g103) + ", " + (_g13.isLongTap ? "longTap" : "");
					break;
				case 3:
					var _g24 = _g13.touch2;
					var _g14 = _g13.touch1;
					tmp2 = "two finger move x1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g14) + ", y1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g14) + ", x2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g24) + ", y2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g24) + ", " + (_g13.isLongTap ? "longTap" : "");
					break;
				}
				haxe_Log.trace(tmp2,{ fileName : "banan/input/InputSystem.hx", lineNumber : 27, className : "banan.input.InputSystem", methodName : "set_state"});
				this.identifyEvents();
			} else if(Math.abs(_g8 - banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g6)) + Math.abs(_g9 - banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g6)) > banan_input_InputSystem.MAX_TAP_MOVE) {
				this.state = banan_input_EInputState.OneFingerMove(_g6,_g111 != null);
				var _g15 = this.state;
				var tmp3;
				switch(_g15._hx_index) {
				case 0:
					tmp3 = "idle";
					break;
				case 1:
					var _g43 = _g15.touch;
					tmp3 = "tap begin x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g43) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g43) + " " + (_g15.shortTapTime != null ? "shortTap" : "") + " " + (_g15.longTapTime != null ? "longTap" : "");
					break;
				case 2:
					var _g104 = _g15.touch;
					tmp3 = "one finger move x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g104) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g104) + ", " + (_g15.isLongTap ? "longTap" : "");
					break;
				case 3:
					var _g25 = _g15.touch2;
					var _g16 = _g15.touch1;
					tmp3 = "two finger move x1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g16) + ", y1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g16) + ", x2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g25) + ", y2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g25) + ", " + (_g15.isLongTap ? "longTap" : "");
					break;
				}
				haxe_Log.trace(tmp3,{ fileName : "banan/input/InputSystem.hx", lineNumber : 27, className : "banan.input.InputSystem", methodName : "set_state"});
				this.identifyEvents();
			} else if(_g101 == null && this.timeProvider.provider.appTimeReal - _g7 > banan_input_InputSystem.SHORT_TAP_BEGIN_TIME) {
				this.sendEvent(banan_input_EInputEvent.ShortTapBegin,banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g6),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g6),_g8,_g9,true);
				this.state = banan_input_EInputState.TapBegin(_g6,_g7,_g8,_g9,this.timeProvider.provider.appTimeReal);
				var _g17 = this.state;
				var tmp4;
				switch(_g17._hx_index) {
				case 0:
					tmp4 = "idle";
					break;
				case 1:
					var _g44 = _g17.touch;
					tmp4 = "tap begin x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g44) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g44) + " " + (_g17.shortTapTime != null ? "shortTap" : "") + " " + (_g17.longTapTime != null ? "longTap" : "");
					break;
				case 2:
					var _g105 = _g17.touch;
					tmp4 = "one finger move x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g105) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g105) + ", " + (_g17.isLongTap ? "longTap" : "");
					break;
				case 3:
					var _g26 = _g17.touch2;
					var _g18 = _g17.touch1;
					tmp4 = "two finger move x1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g18) + ", y1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g18) + ", x2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g26) + ", y2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g26) + ", " + (_g17.isLongTap ? "longTap" : "");
					break;
				}
				haxe_Log.trace(tmp4,{ fileName : "banan/input/InputSystem.hx", lineNumber : 27, className : "banan.input.InputSystem", methodName : "set_state"});
				this.identifyEvents();
			} else if(_g111 == null && this.timeProvider.provider.appTimeReal - _g7 > banan_input_InputSystem.LONG_TAP_BEGIN_TIME) {
				this.sendEvent(banan_input_EInputEvent.LongTapBegin,banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g6),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g6),_g8,_g9,true);
				this.state = banan_input_EInputState.TapBegin(_g6,_g7,_g8,_g9,_g101,this.timeProvider.provider.appTimeReal);
				var _g19 = this.state;
				var tmp5;
				switch(_g19._hx_index) {
				case 0:
					tmp5 = "idle";
					break;
				case 1:
					var _g45 = _g19.touch;
					tmp5 = "tap begin x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g45) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g45) + " " + (_g19.shortTapTime != null ? "shortTap" : "") + " " + (_g19.longTapTime != null ? "longTap" : "");
					break;
				case 2:
					var _g106 = _g19.touch;
					tmp5 = "one finger move x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g106) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g106) + ", " + (_g19.isLongTap ? "longTap" : "");
					break;
				case 3:
					var _g27 = _g19.touch2;
					var _g110 = _g19.touch1;
					tmp5 = "two finger move x1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g110) + ", y1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g110) + ", x2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g27) + ", y2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g27) + ", " + (_g19.isLongTap ? "longTap" : "");
					break;
				}
				haxe_Log.trace(tmp5,{ fileName : "banan/input/InputSystem.hx", lineNumber : 27, className : "banan.input.InputSystem", methodName : "set_state"});
				this.identifyEvents();
			}
			break;
		case 2:
			var _g131 = _g2.isLongTap;
			var _g121 = _g2.touch;
			if(!banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_isActive(_g121)) {
				this.sendEvent(banan_input_EInputEvent.TouchEnd,banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g121),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g121),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_prevX(_g121),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_prevY(_g121),_g131);
				this.state = banan_input_EInputState.Idle;
				var _g20 = this.state;
				var tmp6;
				switch(_g20._hx_index) {
				case 0:
					tmp6 = "idle";
					break;
				case 1:
					var _g46 = _g20.touch;
					tmp6 = "tap begin x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g46) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g46) + " " + (_g20.shortTapTime != null ? "shortTap" : "") + " " + (_g20.longTapTime != null ? "longTap" : "");
					break;
				case 2:
					var _g107 = _g20.touch;
					tmp6 = "one finger move x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g107) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g107) + ", " + (_g20.isLongTap ? "longTap" : "");
					break;
				case 3:
					var _g28 = _g20.touch2;
					var _g112 = _g20.touch1;
					tmp6 = "two finger move x1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g112) + ", y1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g112) + ", x2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g28) + ", y2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g28) + ", " + (_g20.isLongTap ? "longTap" : "");
					break;
				}
				haxe_Log.trace(tmp6,{ fileName : "banan/input/InputSystem.hx", lineNumber : 27, className : "banan.input.InputSystem", methodName : "set_state"});
			} else if(numTouches >= 2) {
				this.state = banan_input_EInputState.TwoFingerMove(touches[0],touches[1],_g131);
				var _g29 = this.state;
				var tmp7;
				switch(_g29._hx_index) {
				case 0:
					tmp7 = "idle";
					break;
				case 1:
					var _g47 = _g29.touch;
					tmp7 = "tap begin x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g47) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g47) + " " + (_g29.shortTapTime != null ? "shortTap" : "") + " " + (_g29.longTapTime != null ? "longTap" : "");
					break;
				case 2:
					var _g108 = _g29.touch;
					tmp7 = "one finger move x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g108) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g108) + ", " + (_g29.isLongTap ? "longTap" : "");
					break;
				case 3:
					var _g210 = _g29.touch2;
					var _g113 = _g29.touch1;
					tmp7 = "two finger move x1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g113) + ", y1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g113) + ", x2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g210) + ", y2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g210) + ", " + (_g29.isLongTap ? "longTap" : "");
					break;
				}
				haxe_Log.trace(tmp7,{ fileName : "banan/input/InputSystem.hx", lineNumber : 27, className : "banan.input.InputSystem", methodName : "set_state"});
				this.identifyEvents();
			} else {
				this.sendEvent(banan_input_EInputEvent.TouchMove,banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g121),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g121),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_prevX(_g121),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_prevY(_g121),_g131);
			}
			break;
		case 3:
			var _g51 = _g2.isLongTap;
			var _g48 = _g2.touch2;
			var _g31 = _g2.touch1;
			if(!banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_isActive(_g31) && !banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_isActive(_g48)) {
				this.sendEvent(banan_input_EInputEvent.TouchEnd,banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g31),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g31),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_prevX(_g31),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_prevY(_g31),_g51);
				this.state = banan_input_EInputState.Idle;
				var _g30 = this.state;
				var tmp8;
				switch(_g30._hx_index) {
				case 0:
					tmp8 = "idle";
					break;
				case 1:
					var _g49 = _g30.touch;
					tmp8 = "tap begin x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g49) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g49) + " " + (_g30.shortTapTime != null ? "shortTap" : "") + " " + (_g30.longTapTime != null ? "longTap" : "");
					break;
				case 2:
					var _g109 = _g30.touch;
					tmp8 = "one finger move x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g109) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g109) + ", " + (_g30.isLongTap ? "longTap" : "");
					break;
				case 3:
					var _g211 = _g30.touch2;
					var _g114 = _g30.touch1;
					tmp8 = "two finger move x1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g114) + ", y1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g114) + ", x2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g211) + ", y2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g211) + ", " + (_g30.isLongTap ? "longTap" : "");
					break;
				}
				haxe_Log.trace(tmp8,{ fileName : "banan/input/InputSystem.hx", lineNumber : 27, className : "banan.input.InputSystem", methodName : "set_state"});
			} else if(!banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_isActive(_g31)) {
				this.state = banan_input_EInputState.OneFingerMove(_g48,_g51);
				var _g32 = this.state;
				var tmp9;
				switch(_g32._hx_index) {
				case 0:
					tmp9 = "idle";
					break;
				case 1:
					var _g410 = _g32.touch;
					tmp9 = "tap begin x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g410) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g410) + " " + (_g32.shortTapTime != null ? "shortTap" : "") + " " + (_g32.longTapTime != null ? "longTap" : "");
					break;
				case 2:
					var _g1010 = _g32.touch;
					tmp9 = "one finger move x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g1010) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g1010) + ", " + (_g32.isLongTap ? "longTap" : "");
					break;
				case 3:
					var _g212 = _g32.touch2;
					var _g115 = _g32.touch1;
					tmp9 = "two finger move x1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g115) + ", y1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g115) + ", x2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g212) + ", y2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g212) + ", " + (_g32.isLongTap ? "longTap" : "");
					break;
				}
				haxe_Log.trace(tmp9,{ fileName : "banan/input/InputSystem.hx", lineNumber : 27, className : "banan.input.InputSystem", methodName : "set_state"});
				this.identifyEvents();
			} else if(!banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_isActive(_g48)) {
				this.state = banan_input_EInputState.OneFingerMove(_g31,_g51);
				var _g33 = this.state;
				var tmp10;
				switch(_g33._hx_index) {
				case 0:
					tmp10 = "idle";
					break;
				case 1:
					var _g411 = _g33.touch;
					tmp10 = "tap begin x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g411) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g411) + " " + (_g33.shortTapTime != null ? "shortTap" : "") + " " + (_g33.longTapTime != null ? "longTap" : "");
					break;
				case 2:
					var _g1011 = _g33.touch;
					tmp10 = "one finger move x: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g1011) + ", y: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g1011) + ", " + (_g33.isLongTap ? "longTap" : "");
					break;
				case 3:
					var _g213 = _g33.touch2;
					var _g116 = _g33.touch1;
					tmp10 = "two finger move x1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g116) + ", y1: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g116) + ", x2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g213) + ", y2: " + banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g213) + ", " + (_g33.isLongTap ? "longTap" : "");
					break;
				}
				haxe_Log.trace(tmp10,{ fileName : "banan/input/InputSystem.hx", lineNumber : 27, className : "banan.input.InputSystem", methodName : "set_state"});
				this.identifyEvents();
			} else {
				this.sendEvent(banan_input_EInputEvent.TouchMove,banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g31),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g31),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_prevX(_g31),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_prevY(_g31),_g51,true,banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x(_g48),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y(_g48),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_prevX(_g48),banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_prevY(_g48));
			}
			break;
		}
	}
	,sendEvent: function(event,x,y,prevX,prevY,isLongTap,haveTouch2,touch2X,touch2Y,touch2PrevX,touch2PrevY) {
		if(touch2PrevY == null) {
			touch2PrevY = 0;
		}
		if(touch2PrevX == null) {
			touch2PrevX = 0;
		}
		if(touch2Y == null) {
			touch2Y = 0;
		}
		if(touch2X == null) {
			touch2X = 0;
		}
		if(haveTouch2 == null) {
			haveTouch2 = false;
		}
		if(isLongTap == null) {
			isLongTap = false;
		}
		this.events.push(new banan_input_InputEvent(event,x,y,prevX,prevY,isLongTap,haveTouch2,touch2X,touch2Y,touch2PrevX,touch2PrevY));
	}
	,makeModuleInfo: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["banan.time.TimeProviderModule"] != null) {
			_g.setReserved("banan.time.TimeProviderModule","timeProvider");
		} else {
			_g.h["banan.time.TimeProviderModule"] = "timeProvider";
		}
		if(__map_reserved["banan.backend.input.IBInput"] != null) {
			_g.setReserved("banan.backend.input.IBInput","bInput");
		} else {
			_g.h["banan.backend.input.IBInput"] = "bInput";
		}
		if(__map_reserved["banan.deviceprofile.DeviceProfileResolver"] != null) {
			_g.setReserved("banan.deviceprofile.DeviceProfileResolver","deviceProfileResolver");
		} else {
			_g.h["banan.deviceprofile.DeviceProfileResolver"] = "deviceProfileResolver";
		}
		return new banan_module_ModuleInfo("banan.input.InputSystem",[],[],_g,["banan.time.TimeProviderModule"]);
	}
	,__class__: banan_input_InputSystem
	,__properties__: {set_state:"set_state"}
});
var banan_input_ENodeHitType = $hxEnums["banan.input.ENodeHitType"] = { __ename__ : true, __constructs__ : ["Hit_Sprite","Hit_Polygon"]
	,Hit_Sprite: {_hx_index:0,__enum__:"banan.input.ENodeHitType",toString:$estr}
	,Hit_Polygon: {_hx_index:1,__enum__:"banan.input.ENodeHitType",toString:$estr}
};
banan_input_ENodeHitType.__empty_constructs__ = [banan_input_ENodeHitType.Hit_Sprite,banan_input_ENodeHitType.Hit_Polygon];
var banan_input_NodeHitPair = function() {
};
$hxClasses["banan.input.NodeHitPair"] = banan_input_NodeHitPair;
banan_input_NodeHitPair.__name__ = "banan.input.NodeHitPair";
banan_input_NodeHitPair.make = function(node,type,interactMode) {
	if(banan_input_NodeHitPair.pool.length == 0) {
		banan_input_NodeHitPair.pool.push(new banan_input_NodeHitPair());
		banan_input_NodeHitPair.pool.push(new banan_input_NodeHitPair());
		banan_input_NodeHitPair.pool.push(new banan_input_NodeHitPair());
		banan_input_NodeHitPair.pool.push(new banan_input_NodeHitPair());
		banan_input_NodeHitPair.pool.push(new banan_input_NodeHitPair());
		banan_input_NodeHitPair.pool.push(new banan_input_NodeHitPair());
		banan_input_NodeHitPair.pool.push(new banan_input_NodeHitPair());
		banan_input_NodeHitPair.pool.push(new banan_input_NodeHitPair());
		banan_input_NodeHitPair.pool.push(new banan_input_NodeHitPair());
		banan_input_NodeHitPair.pool.push(new banan_input_NodeHitPair());
	}
	var pair = banan_input_NodeHitPair.pool.pop();
	pair.node = node;
	pair.hitType = type;
	pair.interactMode = interactMode;
	return pair;
};
banan_input_NodeHitPair.dispose = function(pair) {
	banan_input_NodeHitPair.pool.push(pair);
	pair.node = null;
};
banan_input_NodeHitPair.prototype = {
	node: null
	,hitType: null
	,interactMode: null
	,__class__: banan_input_NodeHitPair
};
var banan_input__$ScaledTouch_ScaledTouch_$Impl_$ = {};
$hxClasses["banan.input._ScaledTouch.ScaledTouch_Impl_"] = banan_input__$ScaledTouch_ScaledTouch_$Impl_$;
banan_input__$ScaledTouch_ScaledTouch_$Impl_$.__name__ = "banan.input._ScaledTouch.ScaledTouch_Impl_";
banan_input__$ScaledTouch_ScaledTouch_$Impl_$.__properties__ = {get_dy:"get_dy",get_dx:"get_dx",get_prevY:"get_prevY",get_prevX:"get_prevX",get_y:"get_y",get_x:"get_x",get_isActive:"get_isActive"};
banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_isActive = function(this1) {
	if(this1.isActive) {
		return !banan_input__$ScaledTouch_ScaledTouch_$Impl_$.forceNotActive;
	} else {
		return false;
	}
};
banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_x = function(this1) {
	return this1.x / banan_input__$ScaledTouch_ScaledTouch_$Impl_$.scale;
};
banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_y = function(this1) {
	return this1.y / banan_input__$ScaledTouch_ScaledTouch_$Impl_$.scale;
};
banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_prevX = function(this1) {
	return this1.prevX / banan_input__$ScaledTouch_ScaledTouch_$Impl_$.scale;
};
banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_prevY = function(this1) {
	return this1.prevY / banan_input__$ScaledTouch_ScaledTouch_$Impl_$.scale;
};
banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_dx = function(this1) {
	return (this1.x - this1.prevX) / banan_input__$ScaledTouch_ScaledTouch_$Impl_$.scale;
};
banan_input__$ScaledTouch_ScaledTouch_$Impl_$.get_dy = function(this1) {
	return (this1.y - this1.prevY) / banan_input__$ScaledTouch_ScaledTouch_$Impl_$.scale;
};
var banan_input_ETargetListTest = $hxEnums["banan.input.ETargetListTest"] = { __ename__ : true, __constructs__ : ["PredicateTap","PredicateMove"]
	,PredicateTap: ($_=function(predicate,cb,redirect) { return {_hx_index:0,predicate:predicate,cb:cb,redirect:redirect,__enum__:"banan.input.ETargetListTest",toString:$estr}; },$_.__params__ = ["predicate","cb","redirect"],$_)
	,PredicateMove: ($_=function(predicate) { return {_hx_index:1,predicate:predicate,__enum__:"banan.input.ETargetListTest",toString:$estr}; },$_.__params__ = ["predicate"],$_)
};
banan_input_ETargetListTest.__empty_constructs__ = [];
var banan_input_TargetListTester = function(globalTests) {
	this.globalTests = globalTests;
	this.tests = [];
	this.clearTests();
};
$hxClasses["banan.input.TargetListTester"] = banan_input_TargetListTester;
banan_input_TargetListTester.__name__ = "banan.input.TargetListTester";
banan_input_TargetListTester.matchEntityEventType = function(target,event,predicate,entityEventType,entityEventTypeCb) {
	var _g = event.event;
	switch(_g._hx_index) {
	case 0:
		return predicate(target);
	case 1:
		return true;
	default:
		if(predicate(target) && Type.enumEq(_g,entityEventType)) {
			if(entityEventTypeCb != null) {
				haxe_Log.trace("targetListTester on " + Std.string(_g) + " callback for target " + target.name,{ fileName : "banan/input/TargetListTester.hx", lineNumber : 30, className : "banan.input.TargetListTester", methodName : "matchEntityEventType"});
				entityEventTypeCb();
			}
			return true;
		} else {
			return false;
		}
	}
};
banan_input_TargetListTester.prototype = {
	globalTests: null
	,tests: null
	,setTests: function(tests) {
		this.clearTests();
		banan_ds_ArrayHelper.addAll(this.tests,tests);
	}
	,clearTests: function() {
		this.tests.length = 0;
		banan_ds_ArrayHelper.addAll(this.tests,this.globalTests);
	}
	,testTargetList: function(targetList,event) {
		if(this.tests.length == 0) {
			return false;
		}
		var _g = 0;
		while(_g < targetList.length) {
			var target = targetList[_g];
			++_g;
			var _g1 = 0;
			var _g11 = this.tests;
			while(_g1 < _g11.length) {
				var test = _g11[_g1];
				++_g1;
				var result;
				switch(test._hx_index) {
				case 0:
					var _g3 = test.redirect;
					var _g2 = test.cb;
					var _g12 = test.predicate;
					if(!banan_input_TargetListTester.matchEntityEventType(target,event,_g12,banan_input_EInputEvent.Tap,_g2)) {
						var it = _g3 != null ? _g3(target) : null;
						var a = it != null ? banan_input_TargetListTester.matchEntityEventType(it,event,_g12,banan_input_EInputEvent.Tap,_g2) : null;
						result = a != null && a;
					} else {
						result = true;
					}
					break;
				case 1:
					result = banan_input_TargetListTester.matchEntityEventType(target,event,test.predicate,banan_input_EInputEvent.TouchMove);
					break;
				}
				if(result) {
					return true;
				}
			}
		}
		return false;
	}
	,__class__: banan_input_TargetListTester
};
var banan_input_shapes_Shape = function() { };
$hxClasses["banan.input.shapes.Shape"] = banan_input_shapes_Shape;
banan_input_shapes_Shape.__name__ = "banan.input.shapes.Shape";
banan_input_shapes_Shape.__isInterface__ = true;
banan_input_shapes_Shape.prototype = {
	isPointInside: null
	,__class__: banan_input_shapes_Shape
};
var banan_load_ILoadingProgressSource = function() { };
$hxClasses["banan.load.ILoadingProgressSource"] = banan_load_ILoadingProgressSource;
banan_load_ILoadingProgressSource.__name__ = "banan.load.ILoadingProgressSource";
banan_load_ILoadingProgressSource.__isInterface__ = true;
banan_load_ILoadingProgressSource.prototype = {
	getProgress: null
	,__class__: banan_load_ILoadingProgressSource
};
var banan_load_ILoadingProgressModule = function() { };
$hxClasses["banan.load.ILoadingProgressModule"] = banan_load_ILoadingProgressModule;
banan_load_ILoadingProgressModule.__name__ = "banan.load.ILoadingProgressModule";
banan_load_ILoadingProgressModule.__isInterface__ = true;
banan_load_ILoadingProgressModule.__interfaces__ = [banan_load_ILoadingProgressSource];
banan_load_ILoadingProgressModule.prototype = {
	registerSource: null
	,__class__: banan_load_ILoadingProgressModule
};
var banan_load_LoadingProgress = function() {
	this.makeEmpty();
};
$hxClasses["banan.load.LoadingProgress"] = banan_load_LoadingProgress;
banan_load_LoadingProgress.__name__ = "banan.load.LoadingProgress";
banan_load_LoadingProgress.getSizeMB = function(size,showFrac) {
	if(showFrac) {
		var mb = Math.ceil(size * 0.00001) * 0.1;
		var mb_int = Math.floor(mb);
		return "" + mb_int + "." + Math.ceil((mb - mb_int) * 10);
	} else {
		return "" + Math.floor(size * 0.000001);
	}
};
banan_load_LoadingProgress.prototype = {
	description: null
	,isReady: null
	,isDone: null
	,isShowProgress: null
	,progress: null
	,isDownload: null
	,isTotalSizeKnown: null
	,totalSize: null
	,downloadedSize: null
	,get_progressPercent: function() {
		var value = this.progress;
		return "" + Math.floor((value < 0.0 ? 0.0 : value > 1.0 ? 1.0 : value) * 100) + "%";
	}
	,get_totalSizeMB: function() {
		return banan_load_LoadingProgress.getSizeMB(this.totalSize,this.totalSize < 10000000);
	}
	,get_downloadedSizeMB: function() {
		return banan_load_LoadingProgress.getSizeMB(this.downloadedSize,this.totalSize < 10000000);
	}
	,get_isEmpty: function() {
		return this.description == "";
	}
	,makeEmpty: function() {
		this.description = "";
		this.isReady = true;
		this.isDone = false;
		this.isShowProgress = false;
		this.progress = 0.0;
		this.isDownload = false;
		this.isTotalSizeKnown = false;
		this.totalSize = 0;
		this.downloadedSize = 0;
	}
	,getText: function() {
		var text = "";
		if(this.description != "") {
			text = "" + ("" + this.description);
			if(this.isShowProgress) {
				text += ": ";
				if(this.isDownload) {
					if(this.isTotalSizeKnown) {
						text += "" + banan_load_LoadingProgress.getSizeMB(this.downloadedSize,this.totalSize < 10000000) + "/" + banan_load_LoadingProgress.getSizeMB(this.totalSize,this.totalSize < 10000000) + "MB";
					} else {
						text += "...";
					}
				} else {
					var value = this.progress;
					text += "" + Math.floor((value < 0.0 ? 0.0 : value > 1.0 ? 1.0 : value) * 100) + "%";
				}
			}
		}
		return text;
	}
	,__class__: banan_load_LoadingProgress
	,__properties__: {get_isEmpty:"get_isEmpty",get_downloadedSizeMB:"get_downloadedSizeMB",get_totalSizeMB:"get_totalSizeMB",get_progressPercent:"get_progressPercent"}
};
var banan_load_LoadingProgressModule = function(updatePriority) {
	this.serialSource = new banan_load_SerialProgressSource();
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.load.LoadingProgressModule"] = banan_load_LoadingProgressModule;
banan_load_LoadingProgressModule.__name__ = "banan.load.LoadingProgressModule";
banan_load_LoadingProgressModule.__interfaces__ = [banan_load_ILoadingProgressModule];
banan_load_LoadingProgressModule.__super__ = banan_module_Module;
banan_load_LoadingProgressModule.prototype = $extend(banan_module_Module.prototype,{
	serialSource: null
	,setSourceOrder: function(sourceOrder) {
		this.serialSource.setSourceOrder(sourceOrder);
	}
	,registerSource: function(source,alias) {
		this.serialSource.registerSource(source,alias);
	}
	,getProgress: function(result) {
		this.serialSource.getProgress(result);
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("banan.load.LoadingProgressModule",["banan.load.ILoadingProgressModule"],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: banan_load_LoadingProgressModule
});
var banan_load_SerialProgressSource = function() {
	this.sourceOrder = null;
	this.currentSourceIdx = 0;
	this.sources = new haxe_ds_StringMap();
	this.hloadingProgress = new banan_load_LoadingProgress();
};
$hxClasses["banan.load.SerialProgressSource"] = banan_load_SerialProgressSource;
banan_load_SerialProgressSource.__name__ = "banan.load.SerialProgressSource";
banan_load_SerialProgressSource.__interfaces__ = [banan_load_ILoadingProgressSource];
banan_load_SerialProgressSource.prototype = {
	sourceOrder: null
	,currentSourceIdx: null
	,sources: null
	,hloadingProgress: null
	,isDone: function() {
		var _gthis = this;
		var it = this.sourceOrder.length - 1;
		if(_gthis.currentSourceIdx == it) {
			_gthis.getSourceProgress(_gthis.getSource(it),_gthis.hloadingProgress);
			return _gthis.hloadingProgress.isDone;
		} else {
			return false;
		}
	}
	,setSourceOrder: function(sourceOrder) {
		if(this.sourceOrder != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"SerialProgressSource.hx:41","this.sourceOrder == null",null));
		}
		this.sourceOrder = sourceOrder;
	}
	,registerSource: function(source,alias) {
		if(this.sourceOrder == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"SerialProgressSource.hx:47","sourceOrder" + " is null",null));
		}
		if(this.sourceOrder.indexOf(alias) < 0) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"SerialProgressSource.hx:48","sourceOrder.indexOf(alias) >= 0",null));
		}
		var _this = this.sources;
		if(__map_reserved[alias] != null) {
			_this.setReserved(alias,source);
		} else {
			_this.h[alias] = source;
		}
	}
	,getProgress: function(result) {
		var _gthis = this;
		var getNextSourceIdx = function() {
			var idx = _gthis.currentSourceIdx + 1;
			var lastIdx = _gthis.sourceOrder.length - 1;
			while(idx <= lastIdx) {
				var source = _gthis.getSource(idx);
				if(source == null) {
					return null;
				}
				_gthis.getSourceProgress(source,_gthis.hloadingProgress);
				if(!_gthis.hloadingProgress.isReady) {
					return null;
				}
				if(idx < lastIdx && _gthis.hloadingProgress.isDone) {
					++idx;
					continue;
				}
				return idx;
			}
			return null;
		};
		while(true) {
			this.getSourceProgress(this.getSource(this.currentSourceIdx),result);
			if(result.isDone) {
				var idx1 = getNextSourceIdx();
				if(idx1 != null) {
					this.currentSourceIdx = idx1;
					continue;
				}
			}
			break;
		}
	}
	,getSource: function(sourceIdx) {
		if(this.sourceOrder == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"SerialProgressSource.hx:105","sourceOrder" + " is null",null));
		}
		var sourceAlias = this.sourceOrder[sourceIdx];
		var _this = this.sources;
		if(__map_reserved[sourceAlias] != null) {
			return _this.getReserved(sourceAlias);
		} else {
			return _this.h[sourceAlias];
		}
	}
	,getSourceProgress: function(source,result) {
		result.makeEmpty();
		source.getProgress(result);
	}
	,__class__: banan_load_SerialProgressSource
};
var banan_localization_ILocalization = function() { };
$hxClasses["banan.localization.ILocalization"] = banan_localization_ILocalization;
banan_localization_ILocalization.__name__ = "banan.localization.ILocalization";
banan_localization_ILocalization.__isInterface__ = true;
banan_localization_ILocalization.prototype = {
	onChange: null
	,getLanguage: null
	,getTranslation: null
	,getTplTranslation: null
	,getTranslatedImage: null
	,__class__: banan_localization_ILocalization
};
var banan_math__$AColorTransform_AColorTransform_$Impl_$ = {};
$hxClasses["banan.math._AColorTransform.AColorTransform_Impl_"] = banan_math__$AColorTransform_AColorTransform_$Impl_$;
banan_math__$AColorTransform_AColorTransform_$Impl_$.__name__ = "banan.math._AColorTransform.AColorTransform_Impl_";
banan_math__$AColorTransform_AColorTransform_$Impl_$.idenity = function() {
	return banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0]);
};
banan_math__$AColorTransform_AColorTransform_$Impl_$.transform = function(r0,r1,r2,r3,g0,g1,g2,g3,b0,b1,b2,b3) {
	return banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([r0,r1,r2,r3,g0,g1,g2,g3,b0,b1,b2,b3]);
};
banan_math__$AColorTransform_AColorTransform_$Impl_$.grayscale = function(v) {
	return banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([v,v,v,0.0,v,v,v,0.0,v,v,v,0.0]);
};
banan_math__$AColorTransform_AColorTransform_$Impl_$.glow = function(v) {
	return banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([1.0,0.0,0.0,v,0.0,1.0,0.0,v,0.0,0.0,1.0,v]);
};
banan_math__$AColorTransform_AColorTransform_$Impl_$.colorFill = function(r,g,b,opacity) {
	if(opacity == null) {
		opacity = 1.0;
	}
	var invOpacity = 1.0 - opacity;
	return banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([invOpacity,0.0,0.0,r * opacity,0.0,invOpacity,0.0,g * opacity,0.0,0.0,invOpacity,b * opacity]);
};
banan_math__$AColorTransform_AColorTransform_$Impl_$.ghostify = function(strength) {
	var colorFillOpacity = 0.8 * strength;
	var glowValue = 0.5 * strength;
	var i = 1.0 - colorFillOpacity;
	return banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([i,0.0,0.0,colorFillOpacity + i * glowValue,0.0,i,0.0,colorFillOpacity + i * glowValue,0.0,0.0,i,colorFillOpacity + i * glowValue]);
};
banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray = function(array) {
	if(array != null) {
		array.length = 12;
	}
	return banan_math__$AColorTransform_AColorTransform_$Impl_$._new(array);
};
banan_math__$AColorTransform_AColorTransform_$Impl_$._new = function(array) {
	return array;
};
banan_math__$AColorTransform_AColorTransform_$Impl_$.toFastMatrix4 = function(this1) {
	return new kha_math_FastMatrix4(this1[0],this1[1],this1[2],this1[3],this1[4],this1[5],this1[6],this1[7],this1[8],this1[9],this1[10],this1[11],0.0,0.0,0.0,1.0);
};
banan_math__$AColorTransform_AColorTransform_$Impl_$.getElement = function(this1,idx) {
	return this1[idx];
};
banan_math__$AColorTransform_AColorTransform_$Impl_$.isEqual = function(this1,rhs) {
	var result = true;
	var rhsimpl = rhs;
	if(this1 != null && rhsimpl != null) {
		var _g = 0;
		while(_g < 12) {
			var i = _g++;
			if(this1[i] != rhs[i]) {
				result = false;
				break;
			}
		}
	} else {
		result = this1 == rhsimpl;
	}
	return result;
};
banan_math__$AColorTransform_AColorTransform_$Impl_$.isNotEqual = function(this1,rhs) {
	var result = true;
	var rhsimpl = rhs;
	if(this1 != null && rhsimpl != null) {
		var _g = 0;
		while(_g < 12) {
			var i = _g++;
			if(this1[i] != rhs[i]) {
				result = false;
				break;
			}
		}
	} else {
		result = this1 == rhsimpl;
	}
	return !result;
};
var banan_math_Bezier = function(s,f,p1,p2) {
	this.s = s;
	this.f = f;
	this.p1 = p1;
	this.p2 = p2;
};
$hxClasses["banan.math.Bezier"] = banan_math_Bezier;
banan_math_Bezier.__name__ = "banan.math.Bezier";
banan_math_Bezier.prototype = {
	s: null
	,f: null
	,p1: null
	,p2: null
	,__class__: banan_math_Bezier
};
var banan_math_IntPoint = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["banan.math.IntPoint"] = banan_math_IntPoint;
banan_math_IntPoint.__name__ = "banan.math.IntPoint";
banan_math_IntPoint.fromPoint = function(point) {
	return new banan_math_IntPoint(Math.floor(point.x),Math.floor(point.y));
};
banan_math_IntPoint.zero = function() {
	return new banan_math_IntPoint(0,0);
};
banan_math_IntPoint.prototype = {
	x: null
	,y: null
	,offsetFloor: function(x,y) {
		this.x += Math.floor(x);
		this.y += Math.floor(y);
	}
	,__class__: banan_math_IntPoint
};
var banan_math_M = function() { };
$hxClasses["banan.math.M"] = banan_math_M;
banan_math_M.__name__ = "banan.math.M";
banan_math_M.clamp_Int = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
banan_math_M.abs_Int = function(a) {
	if(a >= 0) {
		return a;
	} else {
		return -a;
	}
};
banan_math_M.max_Int = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
banan_math_M.max_Float = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
banan_math_M.min_Float = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
banan_math_M.min_Int = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
banan_math_M.abs_Float = function(a) {
	if(a >= 0) {
		return a;
	} else {
		return -a;
	}
};
banan_math_M.clamp_Float = function(value,min,max) {
	if(value < min) {
		return min;
	} else if(value > max) {
		return max;
	} else {
		return value;
	}
};
banan_math_M.sign = function(a) {
	if(a > 0) {
		return 1;
	} else if(a < 0) {
		return -1;
	} else {
		return 0;
	}
};
banan_math_M.distance2 = function(x0,y0,x1,y1) {
	var dx = x1 - x0;
	var dy = y1 - y0;
	return dx * dx + dy * dy;
};
banan_math_M.distance = function(x0,y0,x1,y1) {
	var dx = x1 - x0;
	var dy = y1 - y0;
	return Math.sqrt(dx * dx + dy * dy);
};
banan_math_M.randomF = function(from,to) {
	return from + Math.random() * (to - from);
};
banan_math_M.randomI = function(from,to) {
	return from + Math.floor(Math.random() * (to - from + 1));
};
banan_math_M.degToRad = function(deg) {
	return deg * (Math.PI / 180.0);
};
banan_math_M.radToDeg = function(rad) {
	return rad * (180.0 / Math.PI);
};
banan_math_M.sin = function(a) {
	return Math.sin(a);
};
banan_math_M.cos = function(a) {
	return Math.cos(a);
};
banan_math_M.sqrt = function(x) {
	return Math.sqrt(x);
};
banan_math_M.atan2 = function(y,x) {
	return Math.atan2(y,x);
};
banan_math_M.idiv = function(x,y) {
	return x / y | 0;
};
banan_math_M.imod = function(x,y) {
	return x % y;
};
banan_math_M.roundFixed = function(f,prec) {
	var t = Math.pow(10,prec);
	return Math.round(f * t) / t;
};
banan_math_M.isInside = function(x,y,left,top,right,bottom) {
	if(x >= left && y >= top && x < right) {
		return y < bottom;
	} else {
		return false;
	}
};
banan_math_M.getBarycentric = function(a,b,p) {
	return (1 - p) * a + p * b;
};
banan_math_M.isAlmostEqual = function(a,b) {
	var d = a - b;
	if(d >= 0) {
		return d < 1e-10;
	} else {
		return d > -1e-010;
	}
};
banan_math_M.isBetween = function(x,min,max) {
	if(x >= min) {
		return x <= max;
	} else {
		return false;
	}
};
banan_math_M.ceil = function(x) {
	if(x == null) {
		return null;
	} else {
		return Math.ceil(x);
	}
};
banan_math_M.compare = function(a,b) {
	if(a > b) {
		return 1;
	} else if(a < b) {
		return -1;
	} else {
		return 0;
	}
};
banan_math_M.isEven = function(a) {
	return a >> 1 << 1 == a;
};
var banan_math_Matrix3 = function(m00,m10,m20,m01,m11,m21,m02,m12,m22) {
	this.m00 = m00;
	this.m10 = m10;
	this.m20 = m20;
	this.m01 = m01;
	this.m11 = m11;
	this.m21 = m21;
	this.m02 = m02;
	this.m12 = m12;
	this.m22 = m22;
};
$hxClasses["banan.math.Matrix3"] = banan_math_Matrix3;
banan_math_Matrix3.__name__ = "banan.math.Matrix3";
banan_math_Matrix3.prototype = {
	m00: null
	,m10: null
	,m20: null
	,m01: null
	,m11: null
	,m21: null
	,m02: null
	,m12: null
	,m22: null
	,__class__: banan_math_Matrix3
};
var banan_math_Matrix3Storage = function() {
	this.m22 = 1;
	this.m12 = 0;
	this.m02 = 0;
	this.m21 = 0;
	this.m11 = 1;
	this.m01 = 0;
	this.m20 = 0;
	this.m10 = 0;
	this.m00 = 1;
};
$hxClasses["banan.math.Matrix3Storage"] = banan_math_Matrix3Storage;
banan_math_Matrix3Storage.__name__ = "banan.math.Matrix3Storage";
banan_math_Matrix3Storage.prototype = {
	m00: null
	,m10: null
	,m20: null
	,m01: null
	,m11: null
	,m21: null
	,m02: null
	,m12: null
	,m22: null
	,toString: function() {
		return "{\n\t" + this.m00 + ",\t" + this.m10 + ",\t" + this.m20 + ",\n\t" + this.m01 + ",\t" + this.m11 + ",\t" + this.m21 + ",\n\t" + this.m02 + ",\t" + this.m12 + ",\t" + this.m22 + "\n}";
	}
	,__class__: banan_math_Matrix3Storage
};
var banan_math_Point = function(x,y) {
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["banan.math.Point"] = banan_math_Point;
banan_math_Point.__name__ = "banan.math.Point";
banan_math_Point.prototype = {
	x: null
	,y: null
	,add: function(p) {
		this.x += p.x;
		this.y += p.y;
		return this;
	}
	,setXy: function(x,y) {
		this.x = x;
		this.y = y;
		return this;
	}
	,addXy: function(x,y) {
		this.x += x;
		this.y += y;
		return this;
	}
	,clone: function() {
		return new banan_math_Point(this.x,this.y);
	}
	,copy: function(from) {
		this.x = from.x;
		this.y = from.y;
		return this;
	}
	,equals: function(other) {
		if(this != other) {
			if(this.x == other.x) {
				return this.y == other.y;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,distanceTo: function(other) {
		var dx = other.x - this.x;
		var dy = other.y - this.y;
		return Math.sqrt(dx * dx + dy * dy);
	}
	,__class__: banan_math_Point
};
var banan_math_Polygon = function(pointList) {
	this.bottom = -2147483648;
	this.top = 2147483647;
	this.right = -2147483648;
	this.left = 2147483647;
	this.pointList = pointList;
	var _g = 0;
	while(_g < pointList.length) {
		var point = pointList[_g];
		++_g;
		if(point.x < this.left) {
			this.left = point.x;
		}
		if(point.x > this.right) {
			this.right = point.x;
		}
		if(point.y < this.top) {
			this.top = point.y;
		}
		if(point.y > this.bottom) {
			this.bottom = point.y;
		}
	}
};
$hxClasses["banan.math.Polygon"] = banan_math_Polygon;
banan_math_Polygon.__name__ = "banan.math.Polygon";
banan_math_Polygon.prototype = {
	pointList: null
	,left: null
	,right: null
	,top: null
	,bottom: null
	,iterateEdges: function(cb) {
		var _g = 0;
		var _g1 = this.pointList.length;
		while(_g < _g1) {
			var i = _g++;
			var p0 = this.pointList[i];
			var p1 = this.pointList[(i + 1) % this.pointList.length];
			cb(p0.x,p0.y,p1.x,p1.y);
		}
	}
	,isPointInside: function(x,y) {
		if(x < this.left || x > this.right || y < this.top || y > this.bottom) {
			return false;
		}
		var count = 0;
		var _g = 0;
		var _g1 = this.pointList.length;
		while(_g < _g1) {
			var i = _g++;
			var p0 = this.pointList[i];
			var p1 = this.pointList[(i + 1) % this.pointList.length];
			if(y >= p0.y && y <= p1.y || y >= p1.y && y <= p0.y) {
				var dy = p1.y - p0.y;
				if(dy != 0) {
					var edgeX = p0.x + (y - p0.y) * (p1.x - p0.x) / dy;
					var d = edgeX - x;
					if(d >= 0 ? d < 1e-10 : d > -1e-010) {
						count = 1;
						break;
					}
					if(edgeX > x) {
						if(!(y == p1.y && y < p0.y || y == p0.y && y < p1.y)) {
							++count;
						}
					}
				} else if(x >= p0.x && x <= p1.x || x >= p1.x && x <= p0.x) {
					count = 1;
					break;
				}
			}
		}
		return count % 2 == 1;
	}
	,__class__: banan_math_Polygon
};
var banan_math_Rect = function(x,y,width,height) {
	if(height == null) {
		height = 0.0;
	}
	if(width == null) {
		width = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.setTo(x,y,width,height);
};
$hxClasses["banan.math.Rect"] = banan_math_Rect;
banan_math_Rect.__name__ = "banan.math.Rect";
banan_math_Rect.union = function(a,b) {
	var left = Math.min(a.x,b.x);
	var top = Math.min(a.y,b.y);
	return new banan_math_Rect(left,top,Math.max(a.x + a.width,b.x + b.width) - left,Math.max(a.y + a.height,b.y + b.height) - top);
};
banan_math_Rect.prototype = {
	x: null
	,y: null
	,width: null
	,height: null
	,copyFrom: function(rect) {
		this.setTo(rect.x,rect.y,rect.width,rect.height);
	}
	,clone: function() {
		var rect = new banan_math_Rect();
		rect.copyFrom(this);
		return rect;
	}
	,setTo: function(x,y,width,height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	}
	,equals: function(rect,onlySize) {
		if(onlySize == null) {
			onlySize = false;
		}
		if(this.width == rect.width && this.height == rect.height) {
			if(onlySize) {
				return true;
			} else if(this.x == rect.x) {
				return this.y == rect.y;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,expand: function(left,top,right,bottom) {
		var _g = this;
		var value = _g.x - left;
		_g.width = Math.max(_g.x + _g.width - value,0.0);
		_g.x = value;
		var _g1 = this;
		var value1 = _g1.y - top;
		_g1.height = Math.max(_g1.y + _g1.height - value1,0.0);
		_g1.y = value1;
		var _g2 = this;
		var value2 = _g2.x + _g2.width + right;
		_g2.width = Math.max(value2 - _g2.x,0.0);
		_g2.x = value2 - _g2.width;
		var _g3 = this;
		var value3 = _g3.y + _g3.height + bottom;
		_g3.height = Math.max(value3 - _g3.y,0.0);
		_g3.y = value3 - _g3.height;
	}
	,interset: function(rect) {
		return !(rect.x + rect.width < this.x || rect.y + rect.height < this.y || rect.x > this.x + this.width || rect.y > this.y + this.height);
	}
	,contains: function(px,py) {
		if(px >= this.x && py >= this.y && px < this.x + this.width) {
			return py < this.y + this.height;
		} else {
			return false;
		}
	}
	,include: function(x,y) {
		if(x < this.x) {
			this.width = Math.max(this.x + this.width - x,0.0);
			this.x = x;
		}
		if(y < this.y) {
			this.height = Math.max(this.y + this.height - y,0.0);
			this.y = y;
		}
		if(x > this.x + this.width) {
			this.width = Math.max(x - this.x,0.0);
			this.x = x - this.width;
		}
		if(y > this.y + this.height) {
			this.height = Math.max(y - this.y,0.0);
			this.y = y - this.height;
		}
	}
	,get_left: function() {
		return this.x;
	}
	,get_top: function() {
		return this.y;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_left: function(value) {
		this.width = Math.max(this.x + this.width - value,0.0);
		this.x = value;
		return value;
	}
	,set_top: function(value) {
		this.height = Math.max(this.y + this.height - value,0.0);
		this.y = value;
		return value;
	}
	,set_right: function(value) {
		this.width = Math.max(value - this.x,0.0);
		this.x = value - this.width;
		return value;
	}
	,set_bottom: function(value) {
		this.height = Math.max(value - this.y,0.0);
		this.y = value - this.height;
		return value;
	}
	,__class__: banan_math_Rect
	,__properties__: {set_bottom:"set_bottom",get_bottom:"get_bottom",set_right:"set_right",get_right:"get_right",set_top:"set_top",get_top:"get_top",set_left:"set_left",get_left:"get_left"}
};
var banan_math_Rectangle = function(x,y,sizeX,sizeY) {
	this.x = x;
	this.y = y;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
};
$hxClasses["banan.math.Rectangle"] = banan_math_Rectangle;
banan_math_Rectangle.__name__ = "banan.math.Rectangle";
banan_math_Rectangle.prototype = {
	x: null
	,y: null
	,sizeX: null
	,sizeY: null
	,toString: function() {
		return "{x:" + this.x + ", y:" + this.y + ", sizeX:" + this.sizeX + ", sizeY:" + this.sizeY + "}";
	}
	,isValid: function() {
		if(this.sizeX > 0) {
			return this.sizeY > 0;
		} else {
			return false;
		}
	}
	,intersects: function(another) {
		return !(this.x >= another.x + another.sizeX || this.x + this.sizeX <= another.x || this.y >= another.y + another.sizeY || this.y + this.sizeY <= another.y);
	}
	,__class__: banan_math_Rectangle
};
var banan_math_Vector2 = function(x,y) {
	this.x = x;
	this.y = y;
};
$hxClasses["banan.math.Vector2"] = banan_math_Vector2;
banan_math_Vector2.__name__ = "banan.math.Vector2";
banan_math_Vector2.prototype = {
	x: null
	,y: null
	,toString: function() {
		return "{x:" + this.x + ", y:" + this.y + "}";
	}
	,__class__: banan_math_Vector2
};
var banan_math_Vector3 = function(X,Y,Z) {
	this.x = X;
	this.y = Y;
	this.z = Z;
};
$hxClasses["banan.math.Vector3"] = banan_math_Vector3;
banan_math_Vector3.__name__ = "banan.math.Vector3";
banan_math_Vector3.prototype = {
	x: null
	,y: null
	,z: null
	,toString: function() {
		return "{x:" + this.x + ", y:" + this.y + ", z:" + this.z + "}";
	}
	,__class__: banan_math_Vector3
};
var banan_module_InjectModulesMacro = function() { };
$hxClasses["banan.module.InjectModulesMacro"] = banan_module_InjectModulesMacro;
banan_module_InjectModulesMacro.__name__ = "banan.module.InjectModulesMacro";
var banan_module_ModuleBuildMacro = function() { };
$hxClasses["banan.module.ModuleBuildMacro"] = banan_module_ModuleBuildMacro;
banan_module_ModuleBuildMacro.__name__ = "banan.module.ModuleBuildMacro";
var banan_module_ModuleHelper = function() { };
$hxClasses["banan.module.ModuleHelper"] = banan_module_ModuleHelper;
banan_module_ModuleHelper.__name__ = "banan.module.ModuleHelper";
banan_module_ModuleHelper.dependsOn = function(module,potentialDependency) {
	var key = potentialDependency.moduleInfo.name;
	var _this = module.moduleInfo.injectModules;
	if(__map_reserved[key] != null) {
		return _this.existsReserved(key);
	} else {
		return _this.h.hasOwnProperty(key);
	}
};
var banan_module_ModuleInfo = function(name,interfaces,inherited,injectModules,initializeModules) {
	this.injectModules = new haxe_ds_StringMap();
	this.name = name;
	this.interfaces = interfaces;
	this.inherited = inherited;
	this.injectModules = injectModules;
	this.initializeModules = initializeModules;
	this.setStateTime = null;
	this.set_state(0);
};
$hxClasses["banan.module.ModuleInfo"] = banan_module_ModuleInfo;
banan_module_ModuleInfo.__name__ = "banan.module.ModuleInfo";
banan_module_ModuleInfo.prototype = {
	name: null
	,interfaces: null
	,inherited: null
	,injectModules: null
	,initializeModules: null
	,state: null
	,setStateTime: null
	,setInitialized: function() {
		if(this.state != 1) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ModuleInfo.hx:31","state == ModuleState.INITIALIZING",{ "module name" : this.name, "current module state" : banan_module__$ModuleState_ModuleState_$Impl_$.toString(this.state)}));
		}
		this.set_state(2);
	}
	,set_state: function(v) {
		if(this.state != v) {
			this.state = v;
			var msg = "module " + this.name + " is " + banan_module__$ModuleState_ModuleState_$Impl_$.toString(this.state);
			var stamp = kha_Scheduler.realTime();
			if(this.setStateTime != null) {
				msg += " in " + banan_utils_TextUtils.formatFloat(stamp - this.setStateTime) + "s";
			}
			this.setStateTime = stamp;
			haxe_Log.trace(msg,{ fileName : "banan/module/ModuleInfo.hx", lineNumber : 50, className : "banan.module.ModuleInfo", methodName : "set_state"});
		}
		return this.state;
	}
	,__class__: banan_module_ModuleInfo
	,__properties__: {set_state:"set_state"}
};
var banan_module_ModuleManager = function(name,parent) {
	this.isInitialized = false;
	this.name = name;
	this.isInitialized = false;
	this.moduleMap = new haxe_ds_StringMap();
	this.updateOrderValid = false;
	this.updatePrepared = [];
	this.parent = parent;
	this.children = [];
	if(parent != null) {
		parent.children.push(this);
	}
};
$hxClasses["banan.module.ModuleManager"] = banan_module_ModuleManager;
banan_module_ModuleManager.__name__ = "banan.module.ModuleManager";
banan_module_ModuleManager.prototype = {
	name: null
	,isInitialized: null
	,moduleMap: null
	,updateOrder: null
	,updateOrderValid: null
	,updatePrepared: null
	,updatePreparedCount: null
	,parent: null
	,children: null
	,terminate: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) _g1[_g++].terminate();
		this.children.length = 0;
		var _this = this.moduleMap;
		var module = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(module.hasNext()) this.terminateModule(module.next());
		var _this1 = this.moduleMap;
		_this1.h = { };
		_this1.rh = null;
		this.updateOrder.length = 0;
		this.updatePrepared.length = 0;
		if(this.parent != null) {
			HxOverrides.remove(this.parent.children,this);
			this.parent = null;
		}
	}
	,addModule: function(module,allowParentDuplicate) {
		if(allowParentDuplicate == null) {
			allowParentDuplicate = false;
		}
		this.registerModule(module,allowParentDuplicate);
	}
	,createModule: function(typeOf,priority,allowParentDuplicate) {
		if(allowParentDuplicate == null) {
			allowParentDuplicate = false;
		}
		this.registerModule(js_Boot.__cast(Type.createInstance(typeOf,[priority]) , banan_module_Module),allowParentDuplicate);
	}
	,removeModule: function(moduleClass) {
		var moduleName = moduleClass.__name__;
		var _this = this.moduleMap;
		var module = __map_reserved[moduleName] != null ? _this.getReserved(moduleName) : _this.h[moduleName];
		if(module == null) {
			return;
		}
		var _g = 0;
		var _g1 = [this].concat(this.children);
		while(_g < _g1.length) {
			var _this1 = _g1[_g++].moduleMap;
			var potentialCouple = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
			while(potentialCouple.hasNext()) {
				var potentialCouple1 = potentialCouple.next();
				if(moduleName == potentialCouple1.moduleInfo.name) {
					continue;
				}
				if(banan_module_ModuleHelper.dependsOn(potentialCouple1,module)) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(122,"ModuleManager.hx:90","Module " + moduleName + " can't be removed due to coupling with " + potentialCouple1.moduleInfo.name,null));
				}
			}
		}
		this.terminateModule(module);
		this.moduleMap.remove(moduleName);
		this.updateOrderValid = false;
		haxe_Log.trace("Module " + moduleName + " has been removed",{ fileName : "banan/module/ModuleManager.hx", lineNumber : 99, className : "banan.module.ModuleManager", methodName : "removeModule"});
	}
	,prepareUpdate: function() {
		if(!this.updateOrderValid) {
			this.formUpdateOrder();
			this.updateOrderValid = true;
		}
		this.updatePreparedCount = 0;
		var tmp;
		if(this.isInitialized) {
			if(this.parent != null) {
				var _this = this.parent;
				tmp = _this.isInitialized && (_this.parent == null || _this.parent.get_isInitialized());
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(!tmp) {
			var initializedCount = 0;
			var _g = 0;
			var _g1 = this.updateOrder;
			while(_g < _g1.length) {
				var module = _g1[_g];
				++_g;
				var moduleState = module.moduleInfo.state;
				this.validateState(module);
				if(moduleState == 3) {
					++initializedCount;
					this.updatePrepared[this.updatePreparedCount++] = module;
				}
			}
			if(initializedCount == this.updateOrder.length) {
				this.isInitialized = true;
			}
		} else {
			var _g2 = 0;
			var _g11 = this.updateOrder;
			while(_g2 < _g11.length) {
				var module1 = _g11[_g2++];
				this.updatePrepared[this.updatePreparedCount++] = module1;
			}
		}
		var _g3 = this.updatePreparedCount;
		var _g12 = this.updatePrepared.length;
		while(_g3 < _g12) this.updatePrepared[_g3++] = null;
		var _g21 = 0;
		var _g31 = this.children;
		while(_g21 < _g31.length) _g31[_g21++].prepareUpdate();
	}
	,update: function() {
		var _g = 0;
		var _g1 = this.updatePreparedCount;
		while(_g < _g1) {
			var module = this.updatePrepared[_g++];
			var tmp;
			if(this.isInitialized) {
				if(this.parent != null) {
					var _this = this.parent;
					tmp = _this.isInitialized && (_this.parent == null || _this.parent.get_isInitialized());
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp || !module.managerInitializedUpdateOnly) {
				module.update();
			}
		}
		var _g2 = 0;
		var _g3 = this.updatePreparedCount;
		while(_g2 < _g3) {
			var module1 = this.updatePrepared[_g2++];
			var tmp1;
			if(this.isInitialized) {
				if(this.parent != null) {
					var _this1 = this.parent;
					tmp1 = _this1.isInitialized && (_this1.parent == null || _this1.parent.get_isInitialized());
				} else {
					tmp1 = true;
				}
			} else {
				tmp1 = false;
			}
			if(tmp1 || !module1.managerInitializedUpdateOnly) {
				module1.afterUpdate();
			}
		}
		var _g4 = 0;
		var _g5 = this.children;
		while(_g4 < _g5.length) _g5[_g4++].update();
	}
	,validateState: function(module) {
		switch(module.moduleInfo.state) {
		case 0:
			this.tryInitializeWaiting(module);
			break;
		case 2:
			this.tryInitializeDependencyWaiting(module);
			break;
		default:
		}
	}
	,tryInitializeWaiting: function(module) {
		var moduleInfo = module.moduleInfo;
		var initializeModules = moduleInfo.initializeModules;
		var injectModules = moduleInfo.injectModules;
		var canInitialize = true;
		var _g = 0;
		while(_g < initializeModules.length) {
			var requiredModule = this.getModule(initializeModules[_g++]);
			canInitialize = canInitialize && requiredModule.moduleInfo.state == 3;
		}
		if(canInitialize) {
			var _g1 = 0;
			while(_g1 < initializeModules.length) {
				var requiredModuleName = initializeModules[_g1];
				++_g1;
				var requiredModule1 = this.getModule(requiredModuleName);
				if(__map_reserved[requiredModuleName] != null ? injectModules.existsReserved(requiredModuleName) : injectModules.h.hasOwnProperty(requiredModuleName)) {
					module[__map_reserved[requiredModuleName] != null ? injectModules.getReserved(requiredModuleName) : injectModules.h[requiredModuleName]] = requiredModule1;
				}
			}
			moduleInfo.set_state(1);
			module.initialize();
		}
	}
	,tryInitializeDependencyWaiting: function(module) {
		var _gthis = this;
		var dependancyWaitingModuleList = [];
		var checkModule = null;
		checkModule = function(module1) {
			if(dependancyWaitingModuleList.indexOf(module1.moduleInfo.name) >= 0) {
				return true;
			} else if(module1.moduleInfo.state == 3) {
				return true;
			} else if(module1.moduleInfo.state == 2 && _gthis.isOwnModule(module1)) {
				dependancyWaitingModuleList.push(module1.moduleInfo.name);
				var isPossibleInitialize = true;
				var requiredModuleName = module1.moduleInfo.injectModules.keys();
				while(requiredModuleName.hasNext()) {
					var requiredModuleName1 = requiredModuleName.next();
					var requiredModule = _gthis.getModule(requiredModuleName1);
					if(!checkModule(requiredModule)) {
						isPossibleInitialize = false;
						break;
					}
				}
				return isPossibleInitialize;
			} else {
				return false;
			}
		};
		if(checkModule(module)) {
			var _g = 0;
			while(_g < dependancyWaitingModuleList.length) {
				var moduleName = dependancyWaitingModuleList[_g];
				++_g;
				var _this = this.moduleMap;
				var module2 = __map_reserved[moduleName] != null ? _this.getReserved(moduleName) : _this.h[moduleName];
				var requiredModuleName2 = module2.moduleInfo.injectModules.keys();
				while(requiredModuleName2.hasNext()) {
					var requiredModuleName3 = requiredModuleName2.next();
					var requiredModule1 = this.getModule(requiredModuleName3);
					var _this1 = module2.moduleInfo.injectModules;
					module2[__map_reserved[requiredModuleName3] != null ? _this1.getReserved(requiredModuleName3) : _this1.h[requiredModuleName3]] = requiredModule1;
				}
			}
			var _g1 = 0;
			while(_g1 < dependancyWaitingModuleList.length) {
				var moduleName1 = dependancyWaitingModuleList[_g1];
				++_g1;
				var _this2 = this.moduleMap;
				(__map_reserved[moduleName1] != null ? _this2.getReserved(moduleName1) : _this2.h[moduleName1]).moduleInfo.set_state(3);
			}
			var _g2 = 0;
			while(_g2 < dependancyWaitingModuleList.length) {
				var moduleName2 = dependancyWaitingModuleList[_g2];
				++_g2;
				var _this3 = this.moduleMap;
				(__map_reserved[moduleName2] != null ? _this3.getReserved(moduleName2) : _this3.h[moduleName2]).onInitialized();
			}
		}
	}
	,registerModule: function(module,allowParentDuplicate) {
		this.isInitialized = false;
		this.updateOrderValid = false;
		this.registerModuleByName(module.moduleInfo.name,module,allowParentDuplicate);
		var _g = 0;
		var _g1 = module.moduleInfo.interfaces;
		while(_g < _g1.length) this.registerModuleByName(_g1[_g++],module,allowParentDuplicate);
		var _g2 = 0;
		var _g3 = module.moduleInfo.inherited;
		while(_g2 < _g3.length) this.registerModuleByName(_g3[_g2++],module,allowParentDuplicate);
	}
	,formUpdateOrder: function() {
		this.updateOrder = [];
		var _this = this.moduleMap;
		var module = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(module.hasNext()) {
			var module1 = module.next();
			if(this.updateOrder.indexOf(module1) < 0) {
				this.updateOrder.push(module1);
			}
		}
		this.updateOrder.sort(function(a,b) {
			return a.updatePriority - b.updatePriority;
		});
	}
	,registerModuleByName: function(moduleName,module,allowParentDuplicate) {
		if(this.getModule(moduleName,allowParentDuplicate) != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ModuleManager.hx:306","getModule(moduleName, allowParentDuplicate) == null" + ": " + "module ${moduleName} already registered",null));
		}
		var _this = this.moduleMap;
		if(__map_reserved[moduleName] != null) {
			_this.setReserved(moduleName,module);
		} else {
			_this.h[moduleName] = module;
		}
	}
	,getModule: function(moduleName,excludeParent) {
		if(excludeParent == null) {
			excludeParent = false;
		}
		var _this = this.moduleMap;
		var module = __map_reserved[moduleName] != null ? _this.getReserved(moduleName) : _this.h[moduleName];
		if(!excludeParent && module == null && this.parent != null) {
			module = this.parent.getModule(moduleName);
		}
		return module;
	}
	,isOwnModule: function(module) {
		var key = module.moduleInfo.name;
		var _this = this.moduleMap;
		return (__map_reserved[key] != null ? _this.getReserved(key) : _this.h[key]) == module;
	}
	,terminateModule: function(module) {
		switch(module.moduleInfo.state) {
		case 1:case 2:case 3:
			module.terminate();
			module.moduleInfo.set_state(4);
			break;
		case 0:case 4:
			break;
		}
	}
	,get_isInitialized: function() {
		if(this.isInitialized) {
			if(this.parent != null) {
				return this.parent.get_isInitialized();
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,debugInfo: function() {
		var result = { };
		var _this = this.moduleMap;
		var module = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(module.hasNext()) {
			var module1 = module.next();
			if(module1.moduleInfo.state != 3) {
				var waitingListIterator;
				switch(module1.moduleInfo.state) {
				case 0:
					waitingListIterator = HxOverrides.iter(module1.moduleInfo.initializeModules);
					break;
				case 2:
					waitingListIterator = module1.moduleInfo.injectModules.keys();
					break;
				default:
					waitingListIterator = HxOverrides.iter([]);
				}
				var waitingList = [];
				result["" + module1.moduleInfo.name + "(" + banan_module__$ModuleState_ModuleState_$Impl_$.toString(module1.moduleInfo.state) + ")"] = waitingList;
				var moduleName = waitingListIterator;
				while(moduleName.hasNext()) {
					var moduleName1 = moduleName.next();
					var requiredModule = this.getModule(moduleName1);
					if(requiredModule == null) {
						waitingList.push("module not found: " + moduleName1);
					} else if(requiredModule.moduleInfo.state != 3) {
						waitingList.push("module not initialized: " + moduleName1 + " (" + banan_module__$ModuleState_ModuleState_$Impl_$.toString(requiredModule.moduleInfo.state) + ")");
					}
				}
			}
		}
		return result;
	}
	,debugInfo2: function() {
		var _gthis = this;
		var list = { };
		var visit = null;
		visit = function(moduleName,prev) {
			if(!Object.prototype.hasOwnProperty.call(list,moduleName)) {
				list[moduleName] = [];
				prev.unshift(moduleName);
				var _this = _gthis.moduleMap;
				var module = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
				while(module.hasNext()) {
					var module1 = module.next();
					var _this1 = module1.moduleInfo.injectModules;
					var fieldName = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
					while(fieldName.hasNext()) if(Reflect.field(module1,fieldName.next()).moduleInfo.name == moduleName) {
						visit(module1.moduleInfo.name,prev);
					}
				}
				prev.shift();
			}
			list[moduleName].push(prev.slice());
		};
		return list;
	}
	,storeDebugVar: function(varName) {
		var varValue = { };
		var regExp = new EReg("(?:[^.]*\\.)*([^.]*)","");
		var _this = this.moduleMap;
		var module = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(module.hasNext()) {
			var module1 = module.next();
			if(regExp.match(module1.moduleInfo.name)) {
				varValue[regExp.matched(1)] = module1;
			}
		}
		var wnd = window;
		while(wnd != null) try {
			wnd[varName] = varValue;
			wnd = wnd != wnd.parent ? wnd.parent : null;
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			wnd = null;
		}
	}
	,__class__: banan_module_ModuleManager
	,__properties__: {get_isInitialized:"get_isInitialized"}
};
var banan_module_ModuleProvider = function(moduleManager,updatePriority) {
	banan_module_Module.call(this,updatePriority);
	this.moduleManager = moduleManager;
};
$hxClasses["banan.module.ModuleProvider"] = banan_module_ModuleProvider;
banan_module_ModuleProvider.__name__ = "banan.module.ModuleProvider";
banan_module_ModuleProvider.__super__ = banan_module_Module;
banan_module_ModuleProvider.prototype = $extend(banan_module_Module.prototype,{
	moduleManager: null
	,getModuleManagerName: function() {
		return this.moduleManager.name;
	}
	,getModule: function(moduleClass) {
		var module = this.moduleManager.getModule(moduleClass.__name__);
		if(module != null && module.moduleInfo.state != 3) {
			module = null;
		}
		return module;
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("banan.module.ModuleProvider",[],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: banan_module_ModuleProvider
});
var banan_module__$ModuleState_ModuleState_$Impl_$ = {};
$hxClasses["banan.module._ModuleState.ModuleState_Impl_"] = banan_module__$ModuleState_ModuleState_$Impl_$;
banan_module__$ModuleState_ModuleState_$Impl_$.__name__ = "banan.module._ModuleState.ModuleState_Impl_";
banan_module__$ModuleState_ModuleState_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "WAITING";
	case 1:
		return "INITIALIZING";
	case 2:
		return "DEPENDENCY_WAITING";
	case 3:
		return "INITIALIZED";
	case 4:
		return "TERMINATED";
	default:
		return "";
	}
};
var banan_notificator__$Notificator_PathItem_$Impl_$ = {};
$hxClasses["banan.notificator._Notificator.PathItem_Impl_"] = banan_notificator__$Notificator_PathItem_$Impl_$;
banan_notificator__$Notificator_PathItem_$Impl_$.__name__ = "banan.notificator._Notificator.PathItem_Impl_";
banan_notificator__$Notificator_PathItem_$Impl_$.fromInt = function(i) {
	if(i == null) {
		return "null";
	} else {
		return "" + i;
	}
};
var banan_notificator_Notificator = function(name) {
	this.isProcessing = false;
	this.hasNotifications = false;
	this.cbRoot = new banan_notificator_NotificatorNode();
	this.name = name != null ? name : "Default" + banan_notificator_Notificator.count++;
	this.matchBuffer = new banan_notificator_NotificatorMatchBuffer(this.name);
	this.matchBuffer2 = new banan_notificator_NotificatorMatchBuffer(this.name);
	this.parent = null;
	this.children = [];
	this.all = [this];
};
$hxClasses["banan.notificator.Notificator"] = banan_notificator_Notificator;
banan_notificator_Notificator.__name__ = "banan.notificator.Notificator";
banan_notificator_Notificator.prototype = {
	hasNotifications: null
	,isProcessing: null
	,name: null
	,cbRoot: null
	,matchBuffer: null
	,matchBuffer2: null
	,parent: null
	,children: null
	,all: null
	,addChild: function(notificator) {
		if(notificator.parent != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Notificator.hx:47","notificator.parent == null",null));
		}
		this.children.push(notificator);
		notificator.parent = this;
		this.validateAll();
	}
	,removeChild: function(notificator) {
		if(notificator.parent != this) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Notificator.hx:55","notificator.parent == this",null));
		}
		HxOverrides.remove(this.children,notificator);
		notificator.parent = null;
		this.validateAll();
	}
	,subscribe: function(path,cb) {
		this.getCbPath(path).cbs.push(cb);
		banan_notificator_Notificator.subscriptionCount++;
	}
	,unsubscribe: function(path,cb) {
		var node = this.getCbPath(path);
		if(HxOverrides.remove(node.cbs,cb)) {
			banan_notificator_Notificator.subscriptionCount--;
		}
		while(path.length > 0 && this.isEmpty(node)) {
			var name = path[path.length - 1];
			path = path.slice(0,path.length - 1);
			var parent = this.getCbPath(path);
			parent.next.remove(name);
			node = parent;
		}
	}
	,unsubscribeAll: function(cb) {
		var _gthis = this;
		var visit = null;
		visit = function(node) {
			if(HxOverrides.remove(node.cbs,cb)) {
				banan_notificator_Notificator.subscriptionCount--;
			}
			var _g = new haxe_iterators_MapKeyValueIterator(node.next);
			while(_g.hasNext()) {
				var _g1 = _g.next();
				var subNodeName = _g1.key;
				var subNode = _g1.value;
				visit(subNode);
				if(_gthis.isEmpty(subNode)) {
					node.next.remove(subNodeName);
				}
			}
		};
		visit(this.cbRoot);
	}
	,notify: function(path) {
		var it = this;
		while(it != null && !it.hasNotifications) {
			it.hasNotifications = true;
			it = it.parent;
		}
		var _g = 0;
		var _g1 = this.all;
		while(_g < _g1.length) {
			var it1 = _g1[_g];
			++_g;
			it1.matchBuffer.addEvent(path,it1.cbRoot);
			it1.hasNotifications = true;
		}
	}
	,process: function() {
		if(this.parent != null) {
			this.parent.process();
		} else if(!this.isProcessing) {
			this.isProcessing = true;
			while(this.hasNotifications) this.processCurrent();
			this.isProcessing = false;
		}
	}
	,toString: function() {
		return "notificator#" + this.name;
	}
	,processCurrent: function() {
		var _g = 0;
		var _g1 = this.all;
		while(_g < _g1.length) {
			var it = _g1[_g];
			++_g;
			var tmp = it.matchBuffer;
			it.matchBuffer = it.matchBuffer2;
			it.matchBuffer2 = tmp;
			it.hasNotifications = false;
		}
		var _g2 = 0;
		var _g3 = this.all;
		while(_g2 < _g3.length) {
			var it1 = _g3[_g2];
			++_g2;
			it1.matchBuffer2.process();
			it1.matchBuffer2.clear();
		}
	}
	,getCbPath: function(path) {
		var node = this.cbRoot;
		var _g = 0;
		while(_g < path.length) {
			var name = path[_g];
			++_g;
			var _this = node.next;
			var nextNode = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
			if(nextNode == null) {
				nextNode = new banan_notificator_NotificatorNode();
				var _this1 = node.next;
				if(__map_reserved[name] != null) {
					_this1.setReserved(name,nextNode);
				} else {
					_this1.h[name] = nextNode;
				}
			}
			node = nextNode;
		}
		return node;
	}
	,isEmpty: function(node) {
		if(node.cbs.length == 0) {
			return !node.next.keys().hasNext();
		} else {
			return false;
		}
	}
	,validateAll: function() {
		var i = 0;
		i = 1;
		this.all[0] = this;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g11 = _g1[_g++].all;
			while(_g2 < _g11.length) this.all[i++] = _g11[_g2++];
		}
		this.all.length = i;
		if(this.parent != null) {
			this.parent.validateAll();
		}
	}
	,__class__: banan_notificator_Notificator
};
var banan_notificator_NotificatorMatchBuffer = function(name) {
	this.matched = [];
	this.nodePoolIndex = 0;
	this.nodePool = [];
	this.root = new banan_notificator_NotificatorNode();
	this.name = name;
};
$hxClasses["banan.notificator.NotificatorMatchBuffer"] = banan_notificator_NotificatorMatchBuffer;
banan_notificator_NotificatorMatchBuffer.__name__ = "banan.notificator.NotificatorMatchBuffer";
banan_notificator_NotificatorMatchBuffer.prototype = {
	nodePool: null
	,nodePoolIndex: null
	,root: null
	,matched: null
	,name: null
	,clear: function() {
		var _this = this.root.next;
		_this.h = { };
		_this.rh = null;
		this.root.cbs.length = 0;
		var _g = 0;
		var _g1 = this.nodePoolIndex;
		while(_g < _g1) {
			var node = this.nodePool[_g++];
			var _this1 = node.next;
			_this1.h = { };
			_this1.rh = null;
			node.cbs.length = 0;
		}
		this.nodePoolIndex = 0;
	}
	,addEvent: function(path,cbRoot) {
		this.addEventImpl(path,0,cbRoot,this.root);
	}
	,process: function() {
		this.processImpl(this.root);
	}
	,processImpl: function(prevMatchNode) {
		var _g = 0;
		var _g1 = prevMatchNode.cbs;
		while(_g < _g1.length) _g1[_g++](this.matched);
		var index = this.matched.push(null) - 1;
		var _g2 = new haxe_iterators_MapKeyValueIterator(prevMatchNode.next);
		while(_g2.hasNext()) {
			var _g3 = _g2.next();
			this.matched[index] = _g3.key;
			this.processImpl(_g3.value);
		}
		this.matched.pop();
	}
	,addEventImpl: function(path,i,cbNode,matchNode) {
		var _this = cbNode.next;
		var key = banan_notificator_Notificator.rest;
		var restCbNode = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(restCbNode != null) {
			this.addCbToMatchNode(restCbNode,matchNode);
		}
		if(i >= path.length) {
			this.addCbToMatchNode(cbNode,matchNode);
		} else {
			var name = path[i];
			var _this1 = cbNode.next;
			var exactCbNode = __map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name];
			if(exactCbNode != null) {
				this.addEventImpl(path,i + 1,exactCbNode,this.getOrCreateMatchNode(matchNode,name));
			}
			var _this2 = cbNode.next;
			var key1 = banan_notificator_Notificator.distinct;
			var distinctCbNode = __map_reserved[key1] != null ? _this2.getReserved(key1) : _this2.h[key1];
			if(distinctCbNode != null) {
				this.addEventImpl(path,i + 1,distinctCbNode,this.getOrCreateMatchNode(matchNode,name));
			}
			var _this3 = cbNode.next;
			var key2 = banan_notificator_Notificator.any;
			var anyCbNode = __map_reserved[key2] != null ? _this3.getReserved(key2) : _this3.h[key2];
			if(anyCbNode != null) {
				this.addEventImpl(path,i + 1,anyCbNode,this.getOrCreateMatchNode(matchNode,banan_notificator_Notificator.any));
			}
		}
	}
	,addCbToMatchNode: function(cbNode,matchNode) {
		var _g = 0;
		var _g1 = cbNode.cbs;
		while(_g < _g1.length) {
			var cb = _g1[_g];
			++_g;
			if(matchNode.cbs.indexOf(cb) < 0) {
				matchNode.cbs.push(cb);
			}
		}
	}
	,getOrCreateMatchNode: function(prevNode,name) {
		var _this = prevNode.next;
		var node = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(node == null) {
			node = this.createMatchNode();
			var _this1 = prevNode.next;
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,node);
			} else {
				_this1.h[name] = node;
			}
		}
		return node;
	}
	,createMatchNode: function() {
		while(this.nodePoolIndex >= this.nodePool.length) this.nodePool.push(new banan_notificator_NotificatorNode());
		return this.nodePool[this.nodePoolIndex++];
	}
	,__class__: banan_notificator_NotificatorMatchBuffer
};
var banan_notificator_NotificatorModule = function(updatePriority) {
	this.isMuted = false;
	this.notificator = new banan_notificator_Notificator("NotificatorModule");
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.notificator.NotificatorModule"] = banan_notificator_NotificatorModule;
banan_notificator_NotificatorModule.__name__ = "banan.notificator.NotificatorModule";
banan_notificator_NotificatorModule.__super__ = banan_module_Module;
banan_notificator_NotificatorModule.prototype = $extend(banan_module_Module.prototype,{
	notificator: null
	,isMuted: null
	,terminate: function() {
		this.isMuted = true;
	}
	,subscribe: function(path,cb) {
		this.notificator.subscribe(path,cb);
	}
	,unsubscribe: function(path,cb) {
		this.notificator.unsubscribe(path,cb);
	}
	,unsubscribeAll: function(cb) {
		this.notificator.unsubscribeAll(cb);
	}
	,notify: function(path) {
		if(this.isMuted) {
			return;
		}
		this.notificator.notify(path);
		this.notificator.process();
	}
	,addChildNotificator: function(childNotificator) {
		this.notificator.addChild(childNotificator);
	}
	,removeChildNotificator: function(childNotificator) {
		this.notificator.removeChild(childNotificator);
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("banan.notificator.NotificatorModule",[],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: banan_notificator_NotificatorModule
});
var banan_notificator_NotificatorNode = function() {
	this.cbs = [];
	this.next = new haxe_ds_StringMap();
};
$hxClasses["banan.notificator.NotificatorNode"] = banan_notificator_NotificatorNode;
banan_notificator_NotificatorNode.__name__ = "banan.notificator.NotificatorNode";
banan_notificator_NotificatorNode.prototype = {
	next: null
	,cbs: null
	,__class__: banan_notificator_NotificatorNode
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,toString: function() {
		var s_b = "";
		var first = true;
		var l = this.h;
		s_b = "{";
		while(l != null) {
			if(first) {
				first = false;
			} else {
				s_b += ", ";
			}
			s_b += Std.string(Std.string(l.item));
			l = l.next;
		}
		s_b += "}";
		return s_b;
	}
	,__class__: haxe_ds_List
};
var banan_rectpack_PackedRect = function() {
};
$hxClasses["banan.rectpack.PackedRect"] = banan_rectpack_PackedRect;
banan_rectpack_PackedRect.__name__ = "banan.rectpack.PackedRect";
banan_rectpack_PackedRect.get = function(packer,x,y,sizeX,sizeY) {
	var rect = banan_rectpack_PackedRect.pool.length > 0 ? banan_rectpack_PackedRect.pool.pop() : new banan_rectpack_PackedRect();
	rect.packer = packer;
	rect.x = x;
	rect.y = y;
	rect.sizeX = sizeX;
	rect.sizeY = sizeY;
	rect.isFree = true;
	rect.parent = null;
	rect.sibling = null;
	rect.square = sizeX * sizeY;
	return rect;
};
banan_rectpack_PackedRect.dispose = function(rect) {
	rect.packer = null;
	rect.parent = null;
	rect.sibling = null;
	banan_rectpack_PackedRect.pool.push(rect);
};
banan_rectpack_PackedRect.prototype = {
	packer: null
	,x: null
	,y: null
	,sizeX: null
	,sizeY: null
	,square: null
	,isFree: null
	,parent: null
	,sibling: null
	,splitHorizontally: function(topSizeY) {
		var packer = this.packer;
		var x = this.x;
		var y = this.y;
		var sizeX = this.sizeX;
		var rect = banan_rectpack_PackedRect.pool.length > 0 ? banan_rectpack_PackedRect.pool.pop() : new banan_rectpack_PackedRect();
		rect.packer = packer;
		rect.x = x;
		rect.y = y;
		rect.sizeX = sizeX;
		rect.sizeY = topSizeY;
		rect.isFree = true;
		rect.parent = null;
		rect.sibling = null;
		rect.square = sizeX * topSizeY;
		var topRect = rect;
		var packer1 = this.packer;
		var x1 = this.x;
		var y1 = this.y + topSizeY;
		var sizeX1 = this.sizeX;
		var sizeY = this.sizeY - topSizeY;
		var rect1 = banan_rectpack_PackedRect.pool.length > 0 ? banan_rectpack_PackedRect.pool.pop() : new banan_rectpack_PackedRect();
		rect1.packer = packer1;
		rect1.x = x1;
		rect1.y = y1;
		rect1.sizeX = sizeX1;
		rect1.sizeY = sizeY;
		rect1.isFree = true;
		rect1.parent = null;
		rect1.sibling = null;
		rect1.square = sizeX1 * sizeY;
		var bottomRect = rect1;
		topRect.parent = bottomRect.parent = this;
		topRect.sibling = bottomRect;
		bottomRect.sibling = topRect;
		return topRect;
	}
	,splitVertically: function(leftSizeX) {
		var packer = this.packer;
		var x = this.x;
		var y = this.y;
		var sizeY = this.sizeY;
		var rect = banan_rectpack_PackedRect.pool.length > 0 ? banan_rectpack_PackedRect.pool.pop() : new banan_rectpack_PackedRect();
		rect.packer = packer;
		rect.x = x;
		rect.y = y;
		rect.sizeX = leftSizeX;
		rect.sizeY = sizeY;
		rect.isFree = true;
		rect.parent = null;
		rect.sibling = null;
		rect.square = leftSizeX * sizeY;
		var leftRect = rect;
		var packer1 = this.packer;
		var x1 = this.x + leftSizeX;
		var y1 = this.y;
		var sizeX = this.sizeX - leftSizeX;
		var sizeY1 = this.sizeY;
		var rect1 = banan_rectpack_PackedRect.pool.length > 0 ? banan_rectpack_PackedRect.pool.pop() : new banan_rectpack_PackedRect();
		rect1.packer = packer1;
		rect1.x = x1;
		rect1.y = y1;
		rect1.sizeX = sizeX;
		rect1.sizeY = sizeY1;
		rect1.isFree = true;
		rect1.parent = null;
		rect1.sibling = null;
		rect1.square = sizeX * sizeY1;
		var rightRect = rect1;
		leftRect.parent = rightRect.parent = this;
		leftRect.sibling = rightRect;
		rightRect.sibling = leftRect;
		return leftRect;
	}
	,__class__: banan_rectpack_PackedRect
};
var banan_rectpack_RectPacker = function(sizeX,sizeY) {
	this.freeRectList = new haxe_ds_List();
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	var tmp = this.freeRectList;
	var rect = banan_rectpack_PackedRect.pool.length > 0 ? banan_rectpack_PackedRect.pool.pop() : new banan_rectpack_PackedRect();
	rect.packer = this;
	rect.x = 0;
	rect.y = 0;
	rect.sizeX = sizeX;
	rect.sizeY = sizeY;
	rect.isFree = true;
	rect.parent = null;
	rect.sibling = null;
	rect.square = sizeX * sizeY;
	tmp.push(rect);
};
$hxClasses["banan.rectpack.RectPacker"] = banan_rectpack_RectPacker;
banan_rectpack_RectPacker.__name__ = "banan.rectpack.RectPacker";
banan_rectpack_RectPacker.prototype = {
	sizeX: null
	,sizeY: null
	,freeRectList: null
	,isEmpty: function() {
		if(this.freeRectList.length == 1) {
			return this.freeRectList.first().sizeX * this.freeRectList.first().sizeY == this.sizeX * this.sizeY;
		} else {
			return false;
		}
	}
	,placeRect: function(freeRect,sizeX,sizeY) {
		freeRect.isFree = false;
		this.freeRectList.remove(freeRect);
		if(freeRect.sizeX - sizeX > freeRect.sizeY - sizeY) {
			var leftRect = freeRect.splitVertically(sizeX);
			this.freeRectList.push(leftRect.sibling);
			var topRect = leftRect.splitHorizontally(sizeY);
			this.freeRectList.push(topRect.sibling);
			leftRect.isFree = topRect.isFree = false;
			return topRect;
		} else {
			var topRect1 = freeRect.splitHorizontally(sizeY);
			this.freeRectList.push(topRect1.sibling);
			var leftRect1 = topRect1.splitVertically(sizeX);
			this.freeRectList.push(leftRect1.sibling);
			topRect1.isFree = leftRect1.isFree = false;
			return leftRect1;
		}
	}
	,findPlace: function(sizeX,sizeY) {
		var found = null;
		var square = sizeX * sizeY;
		var delta = 2147483647;
		var _g_head = this.freeRectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			if(val.sizeX >= sizeX && val.sizeY >= sizeY) {
				var newDelta = val.square - square;
				if(newDelta < delta) {
					found = val;
					delta = newDelta;
					if(newDelta == 0) {
						break;
					}
				}
			}
		}
		if(found != null) {
			return this.placeRect(found,sizeX,sizeY);
		} else {
			return null;
		}
	}
	,remove: function(rect) {
		if(rect.packer != this) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(122,"RectPacker.hx:73","not my rect",null));
		}
		var done = false;
		while(!done) if(rect.sibling == null || !rect.sibling.isFree) {
			rect.isFree = true;
			this.freeRectList.push(rect);
			done = true;
		} else {
			var parent = rect.parent;
			this.freeRectList.remove(rect.sibling);
			var rect1 = rect.sibling;
			rect1.packer = null;
			rect1.parent = null;
			rect1.sibling = null;
			banan_rectpack_PackedRect.pool.push(rect1);
			rect.packer = null;
			rect.parent = null;
			rect.sibling = null;
			banan_rectpack_PackedRect.pool.push(rect);
			rect = parent;
		}
	}
	,__class__: banan_rectpack_RectPacker
};
var banan_render_Batch = function(shortName,type,sigTpl,vertexBufferLength,indexBufferLength,isDynamicIndices) {
	if(isDynamicIndices == null) {
		isDynamicIndices = false;
	}
	this.id = banan_render_Batch.batchCount++;
	this.shortName = shortName;
	this.vertexBufferLength = vertexBufferLength;
	this.indexBufferLength = indexBufferLength;
	this.isDynamicIndices = isDynamicIndices;
	this.registeredIndices = new Array(indexBufferLength);
	this.registeredVertices = new Array(vertexBufferLength);
	this.vertexBuffer = new kha_graphics4_VertexBuffer(vertexBufferLength,type.structure,1);
	this.indexBuffer = new kha_graphics4_IndexBuffer(indexBufferLength,isDynamicIndices ? 1 : 0);
	this.clear();
	this._vertices = null;
	this._indices = null;
};
$hxClasses["banan.render.Batch"] = banan_render_Batch;
banan_render_Batch.__name__ = "banan.render.Batch";
banan_render_Batch.prototype = {
	id: null
	,shortName: null
	,vertexBuffer: null
	,vertexBufferLength: null
	,vertexCount: null
	,indexBuffer: null
	,indexBufferLength: null
	,indexCount: null
	,isDynamicIndices: null
	,vertices: null
	,_vertices: null
	,get_vertices: function() {
		if(this._vertices == null) {
			this._vertices = this.vertexBuffer.lock();
			if(this.isDynamicIndices) {
				this._indices = this.indexBuffer.lock();
			}
		}
		return this._vertices;
	}
	,indices: null
	,_indices: null
	,get_indices: function() {
		if(this._vertices == null) {
			this._vertices = this.vertexBuffer.lock();
			if(this.isDynamicIndices) {
				this._indices = this.indexBuffer.lock();
			}
		}
		return this._indices;
	}
	,get_isLocked: function() {
		return this._vertices != null;
	}
	,registeredIndices: null
	,registeredVertices: null
	,dispose: function() {
		this.vertexBuffer.delete();
		this.indexBuffer.delete();
		this.vertexBuffer = null;
		this.indexBuffer = null;
	}
	,registerIndeices: function(drawableId,indexFrom,indexCount) {
		this.registeredIndices[indexFrom] = drawableId;
		var _g = indexFrom + 1;
		var _g1 = indexFrom + indexCount;
		while(_g < _g1) this.registeredIndices[_g++] = banan_render_render2_Render2Context.NO_DRAWABLE_ID;
	}
	,registerVertices: function(drawableId,vertexFrom,vertexCount) {
		this.registeredVertices[vertexFrom] = drawableId;
		var _g = vertexFrom + 1;
		var _g1 = vertexFrom + vertexCount;
		while(_g < _g1) this.registeredVertices[_g++] = banan_render_render2_Render2Context.NO_DRAWABLE_ID;
	}
	,checkIndex: function(drawableId,indexFrom) {
		return this.registeredIndices[indexFrom] == drawableId;
	}
	,checkVertex: function(drawableId,vertexFrom) {
		return this.registeredVertices[vertexFrom] == drawableId;
	}
	,isEmpty: function() {
		return this.indexCount == 0;
	}
	,getNotUsedIndices: function() {
		return this.indexBufferLength - this.indexCount;
	}
	,shiftCounters: function(vertexCount,indexCount) {
		this.vertexCount += vertexCount;
		this.indexCount += indexCount;
	}
	,lock: function() {
		if(this._vertices == null) {
			this._vertices = this.vertexBuffer.lock();
			if(this.isDynamicIndices) {
				this._indices = this.indexBuffer.lock();
			}
		}
	}
	,unlock: function() {
		if(this._vertices != null) {
			this.vertexBuffer.unlock();
			if(this.isDynamicIndices) {
				this.indexBuffer.unlock();
			}
			this._vertices = null;
			this._indices = null;
		}
		this.clear();
	}
	,clear: function() {
		this.vertexCount = 0;
		this.indexCount = 0;
	}
	,__class__: banan_render_Batch
	,__properties__: {get_isLocked:"get_isLocked",get_indices:"get_indices",get_vertices:"get_vertices"}
};
var banan_render__$EntityCopier_CachedNode = function() {
	this.node = null;
	this.display = null;
	this.hash = null;
	this.isNodeVisible = null;
	this.renderRGBAO = null;
};
$hxClasses["banan.render._EntityCopier.CachedNode"] = banan_render__$EntityCopier_CachedNode;
banan_render__$EntityCopier_CachedNode.__name__ = "banan.render._EntityCopier.CachedNode";
banan_render__$EntityCopier_CachedNode.prototype = {
	node: null
	,display: null
	,hash: null
	,isNodeVisible: null
	,renderRGBAO: null
	,sync: function(node,display) {
		var displayHash = display.getHash();
		if(display != this.display || node != this.node || this.renderRGBAO != node.renderRGBAO || !(display.transformId != null && node.globalTransformId == display.transformId) || displayHash == "NO_HASH" || this.hash != displayHash) {
			this.hash = displayHash;
			this.display = display;
			this.node = node;
			this.isNodeVisible = node._isVisible.valueImpl.get_value() && node.scaleX != 0.0 && node.scaleY != 0.0;
			this.renderRGBAO = node.renderRGBAO;
			return true;
		} else {
			return false;
		}
	}
	,__class__: banan_render__$EntityCopier_CachedNode
};
var banan_render_EntityCopier = function(render2Context,resourceManager) {
	this.rt = null;
	this.bounds = banan_utils_Bounds.createImpossible();
	this.globalToNode = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.projection = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.extraSize = 0;
	this.newBounds = banan_utils_Bounds.createImpossible();
	this.validationCache = [];
	this.validationCacheLength = 0;
	this.renderList = null;
	this.nodeRenderer = new banan_render_render2_node_NodeRenderer(resourceManager,render2Context);
	this.needRedraw = true;
	this.token = new banan_resource_ResourceToken();
	this.render2Context = render2Context;
	this.resourceManager = resourceManager;
};
$hxClasses["banan.render.EntityCopier"] = banan_render_EntityCopier;
banan_render_EntityCopier.__name__ = "banan.render.EntityCopier";
banan_render_EntityCopier.copyTo = function(source,moduleProvider) {
	var sThis = moduleProvider.getModule(banan_render_render2_Render2Context);
	if(sThis == null) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(120,"EntityCopier.hx:73","",null));
	}
	var render2Context = sThis;
	var sThis1 = moduleProvider.getModule(banan_resource_ResourceManager);
	if(sThis1 == null) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(120,"EntityCopier.hx:74","",null));
	}
	var sThis2 = moduleProvider.getModule(banan_es_EntitySystem);
	if(sThis2 == null) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(120,"EntityCopier.hx:75","",null));
	}
	var entity = source;
	var sThis3 = entity.__component__banan_display_NodeEdge;
	if(sThis3 == null) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(120,"EntityCopier.hx:77","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
	}
	var _this = sThis3;
	if(!_this._isBoundsValid) {
		_this.validateGlobalBounds();
	}
	var left = _this._boundsLeft;
	var top = _this._boundsTop;
	var scissorW = 4096.0;
	var scissorH = 4096.0;
	var renderList = new banan_render_renderlist_GuiRenderList();
	renderList.collectNodes(source,left - (scissorW - (_this._boundsRight - left)) * 0.5,top - (scissorH - (_this._boundsBottom - top)) * 0.5,scissorW,scissorH);
	var copier = new banan_render_EntityCopier(render2Context,sThis1);
	copier.setRenderList(renderList.slice(0));
	copier.validate(true);
	var copy = sThis2.createEntity("test");
	var rt = copier.rt;
	var copyNode = copy.__add__banan_display_NodeEdge(new banan_display_NodeEdge());
	copyNode._isBoundsValid = false;
	copyNode.areaX = copier.bounds.left;
	copyNode._isBoundsValid = false;
	copyNode.areaY = copier.bounds.top;
	copyNode._isBoundsValid = false;
	copyNode.areaSizeX = rt.tSizeX;
	copyNode._isBoundsValid = false;
	copyNode.areaSizeY = rt.tSizeY;
	copy.__add__banan_display_DisplayEdge(new banan_display_ImageDisplayEdge(render2Context,rt));
	copier.disposeRenderTarget();
	return copy;
};
banan_render_EntityCopier.prototype = {
	rt: null
	,bounds: null
	,globalToNode: null
	,projection: null
	,extraSize: null
	,newBounds: null
	,validationCache: null
	,validationCacheLength: null
	,renderList: null
	,nodeRenderer: null
	,needRedraw: null
	,token: null
	,render2Context: null
	,resourceManager: null
	,setRenderList: function(renderList) {
		this.renderList = renderList;
	}
	,validate: function(doFlush) {
		var _gthis = this;
		this.newBounds.toImpossible();
		var this1 = this.renderList;
		var sourceNode = this1.renderList.nodes[this1.from];
		this.validationCacheLength = 0;
		var _g = 0;
		var _g1 = this.renderList.count;
		while(_g < _g1) {
			var this2 = this.renderList;
			var node = this2.renderList.nodes[this2.from + _g++];
			var _this = this.newBounds;
			var x = node.areaX;
			var y = node.areaY;
			var sizeX = node.areaSizeX;
			var sizeY = node.areaSizeY;
			var transform_m00 = 1;
			var transform_m10 = 0;
			var transform_m20 = 0;
			var transform_m01 = 0;
			var transform_m11 = 1;
			var transform_m21 = 0;
			var transform_m02 = 0;
			var transform_m12 = 0;
			var transform_m22 = 1;
			if(sourceNode == null) {
				if(node.globalTransformId == -1 || node.parent != node._globalTransformParent) {
					node.validateGlobalTransformRecursively();
				}
				var p00 = node._v00;
				var p10 = node._v10;
				var p20 = node._v20;
				var p01 = node._v01;
				var p11 = node._v11;
				var p21 = node._v21;
				if(p21 == null) {
					p21 = 0.0;
				}
				if(p11 == null) {
					p11 = 1.0;
				}
				if(p01 == null) {
					p01 = 0.0;
				}
				if(p20 == null) {
					p20 = 0.0;
				}
				if(p10 == null) {
					p10 = 0.0;
				}
				if(p00 == null) {
					p00 = 1.0;
				}
				transform_m00 = p00;
				transform_m10 = p10;
				transform_m20 = p20;
				transform_m01 = p01;
				transform_m11 = p11;
				transform_m21 = p21;
				transform_m02 = 0.0;
				transform_m12 = 0.0;
				transform_m22 = 1.0;
			} else {
				if(node.globalTransformId == -1 || node.parent != node._globalTransformParent) {
					node.validateGlobalTransformRecursively();
				}
				var p001 = node._v00;
				var p101 = node._v10;
				var p201 = node._v20;
				var p011 = node._v01;
				var p111 = node._v11;
				var p211 = node._v21;
				if(p211 == null) {
					p211 = 0.0;
				}
				if(p111 == null) {
					p111 = 1.0;
				}
				if(p011 == null) {
					p011 = 0.0;
				}
				if(p201 == null) {
					p201 = 0.0;
				}
				if(p101 == null) {
					p101 = 0.0;
				}
				if(p001 == null) {
					p001 = 1.0;
				}
				var _this_v00 = p001;
				var _this_v10 = p101;
				var _this_v20 = p201;
				var _this_v01 = p011;
				var _this_v11 = p111;
				var _this_v21 = p211;
				var baseToRoot_m00 = _this_v00;
				var baseToRoot_m10 = _this_v10;
				var baseToRoot_m20 = _this_v20;
				var baseToRoot_m01 = _this_v01;
				var baseToRoot_m11 = _this_v11;
				var baseToRoot_m21 = _this_v21;
				var baseToRoot_m02 = 0.0;
				var baseToRoot_m12 = 0.0;
				var baseToRoot_m22 = 1.0;
				if(!sourceNode._isInverseTransformValid) {
					sourceNode.validateInverseTransform();
				}
				var _this1 = sourceNode._inverseTransform;
				var m00 = _this1.m00;
				var m10 = _this1.m10;
				var m20 = _this1.m20;
				var m01 = _this1.m01;
				var m11 = _this1.m11;
				var m21 = _this1.m21;
				var m02 = _this1.m02;
				var m12 = _this1.m12;
				var m22 = _this1.m22;
				var rootToTarget_m00 = m00;
				var rootToTarget_m10 = m10;
				var rootToTarget_m20 = m20;
				var rootToTarget_m01 = m01;
				var rootToTarget_m11 = m11;
				var rootToTarget_m21 = m21;
				var rootToTarget_m02 = m02;
				var rootToTarget_m12 = m12;
				var rootToTarget_m22 = m22;
				var current = node;
				var result = null;
				while(result == null && current != null) {
					var sThis = current._entity;
					if(sThis == null) {
						throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
					}
					result = sThis.__component__banan_backend_RenderRootEdge;
					current = current.parent;
				}
				var this3 = result;
				var current1 = sourceNode;
				var result1 = null;
				while(result1 == null && current1 != null) {
					var sThis1 = current1._entity;
					if(sThis1 == null) {
						throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
					}
					result1 = sThis1.__component__banan_backend_RenderRootEdge;
					current1 = current1.parent;
				}
				var this4 = result1;
				if(this3 != this4) {
					if(this3 != null) {
						var _this2 = this3.camera;
						var x1 = _this2.cameraScale;
						var y1 = _this2.cameraScale;
						var _this_m10 = 0;
						var _this_m20 = 0;
						var _this_m01 = 0;
						var _this_m21 = 0;
						var _this_m02 = 0;
						var _this_m12 = 0;
						var _this_m22 = 1;
						var x2 = -_this2.cameraX;
						var y2 = -_this2.cameraY;
						var rhs_m00 = 1;
						var rhs_m10 = 0;
						var rhs_m01 = 0;
						var rhs_m11 = 1;
						var rhs_m02 = 0;
						var rhs_m12 = 0;
						var rhs_m22 = 1;
						var m001 = x1 * rhs_m00 + _this_m10 * rhs_m01 + _this_m20 * rhs_m02;
						var m101 = x1 * rhs_m10 + _this_m10 * rhs_m11 + _this_m20 * rhs_m12;
						var m201 = x1 * x2 + _this_m10 * y2 + _this_m20 * rhs_m22;
						var m011 = _this_m01 * rhs_m00 + y1 * rhs_m01 + _this_m21 * rhs_m02;
						var m111 = _this_m01 * rhs_m10 + y1 * rhs_m11 + _this_m21 * rhs_m12;
						var m211 = _this_m01 * x2 + y1 * y2 + _this_m21 * rhs_m22;
						var m021 = _this_m02 * rhs_m00 + _this_m12 * rhs_m01 + _this_m22 * rhs_m02;
						var m121 = _this_m02 * rhs_m10 + _this_m12 * rhs_m11 + _this_m22 * rhs_m12;
						var m221 = _this_m02 * x2 + _this_m12 * y2 + _this_m22 * rhs_m22;
						baseToRoot_m00 = m001 * _this_v00 + m101 * _this_v01 + m201 * 0.0;
						baseToRoot_m10 = m001 * _this_v10 + m101 * _this_v11 + m201 * 0.0;
						baseToRoot_m20 = m001 * _this_v20 + m101 * _this_v21 + m201;
						baseToRoot_m01 = m011 * _this_v00 + m111 * _this_v01 + m211 * 0.0;
						baseToRoot_m11 = m011 * _this_v10 + m111 * _this_v11 + m211 * 0.0;
						baseToRoot_m21 = m011 * _this_v20 + m111 * _this_v21 + m211;
						baseToRoot_m02 = m021 * _this_v00 + m121 * _this_v01 + m221 * 0.0;
						baseToRoot_m12 = m021 * _this_v10 + m121 * _this_v11 + m221 * 0.0;
						baseToRoot_m22 = m021 * _this_v20 + m121 * _this_v21 + m221;
					}
					if(this4 != null) {
						var _this3 = this4.camera;
						var x3 = _this3.cameraX;
						var y3 = _this3.cameraY;
						var _this_m00 = 1;
						var _this_m101 = 0;
						var _this_m011 = 0;
						var _this_m11 = 1;
						var _this_m021 = 0;
						var _this_m121 = 0;
						var _this_m221 = 1;
						var x4 = 1 / _this3.cameraScale;
						var y4 = 1 / _this3.cameraScale;
						var rhs_m101 = 0;
						var rhs_m20 = 0;
						var rhs_m011 = 0;
						var rhs_m21 = 0;
						var rhs_m021 = 0;
						var rhs_m121 = 0;
						var rhs_m221 = 1;
						var m002 = _this_m00 * x4 + _this_m101 * rhs_m011 + x3 * rhs_m021;
						var m102 = _this_m00 * rhs_m101 + _this_m101 * y4 + x3 * rhs_m121;
						var m202 = _this_m00 * rhs_m20 + _this_m101 * rhs_m21 + x3 * rhs_m221;
						var m012 = _this_m011 * x4 + _this_m11 * rhs_m011 + y3 * rhs_m021;
						var m112 = _this_m011 * rhs_m101 + _this_m11 * y4 + y3 * rhs_m121;
						var m212 = _this_m011 * rhs_m20 + _this_m11 * rhs_m21 + y3 * rhs_m221;
						var m022 = _this_m021 * x4 + _this_m121 * rhs_m011 + _this_m221 * rhs_m021;
						var m122 = _this_m021 * rhs_m101 + _this_m121 * y4 + _this_m221 * rhs_m121;
						var m222 = _this_m021 * rhs_m20 + _this_m121 * rhs_m21 + _this_m221 * rhs_m221;
						rootToTarget_m00 = m00 * m002 + m10 * m012 + m20 * m022;
						rootToTarget_m10 = m00 * m102 + m10 * m112 + m20 * m122;
						rootToTarget_m20 = m00 * m202 + m10 * m212 + m20 * m222;
						rootToTarget_m01 = m01 * m002 + m11 * m012 + m21 * m022;
						rootToTarget_m11 = m01 * m102 + m11 * m112 + m21 * m122;
						rootToTarget_m21 = m01 * m202 + m11 * m212 + m21 * m222;
						rootToTarget_m02 = m02 * m002 + m12 * m012 + m22 * m022;
						rootToTarget_m12 = m02 * m102 + m12 * m112 + m22 * m122;
						rootToTarget_m22 = m02 * m202 + m12 * m212 + m22 * m222;
					}
				}
				transform_m00 = rootToTarget_m00 * baseToRoot_m00 + rootToTarget_m10 * baseToRoot_m01 + rootToTarget_m20 * baseToRoot_m02;
				transform_m10 = rootToTarget_m00 * baseToRoot_m10 + rootToTarget_m10 * baseToRoot_m11 + rootToTarget_m20 * baseToRoot_m12;
				transform_m20 = rootToTarget_m00 * baseToRoot_m20 + rootToTarget_m10 * baseToRoot_m21 + rootToTarget_m20 * baseToRoot_m22;
				transform_m01 = rootToTarget_m01 * baseToRoot_m00 + rootToTarget_m11 * baseToRoot_m01 + rootToTarget_m21 * baseToRoot_m02;
				transform_m11 = rootToTarget_m01 * baseToRoot_m10 + rootToTarget_m11 * baseToRoot_m11 + rootToTarget_m21 * baseToRoot_m12;
				transform_m21 = rootToTarget_m01 * baseToRoot_m20 + rootToTarget_m11 * baseToRoot_m21 + rootToTarget_m21 * baseToRoot_m22;
				transform_m02 = rootToTarget_m02 * baseToRoot_m00 + rootToTarget_m12 * baseToRoot_m01 + rootToTarget_m22 * baseToRoot_m02;
				transform_m12 = rootToTarget_m02 * baseToRoot_m10 + rootToTarget_m12 * baseToRoot_m11 + rootToTarget_m22 * baseToRoot_m12;
				transform_m22 = rootToTarget_m02 * baseToRoot_m20 + rootToTarget_m12 * baseToRoot_m21 + rootToTarget_m22 * baseToRoot_m22;
			}
			var w = transform_m02 * x + transform_m12 * y + transform_m22;
			var resultX = (transform_m00 * x + transform_m10 * y + transform_m20) / w;
			var resultY = (transform_m01 * x + transform_m11 * y + transform_m21) / w;
			var x5 = x + sizeX;
			var w1 = transform_m02 * x5 + transform_m12 * y + transform_m22;
			var resultX1 = (transform_m00 * x5 + transform_m10 * y + transform_m20) / w1;
			var resultY1 = (transform_m01 * x5 + transform_m11 * y + transform_m21) / w1;
			var x6 = x + sizeX;
			var y5 = y + sizeY;
			var w2 = transform_m02 * x6 + transform_m12 * y5 + transform_m22;
			var resultX2 = (transform_m00 * x6 + transform_m10 * y5 + transform_m20) / w2;
			var resultY2 = (transform_m01 * x6 + transform_m11 * y5 + transform_m21) / w2;
			var y6 = y + sizeY;
			var w3 = transform_m02 * x + transform_m12 * y6 + transform_m22;
			var resultX3 = (transform_m00 * x + transform_m10 * y6 + transform_m20) / w3;
			var resultY3 = (transform_m01 * x + transform_m11 * y6 + transform_m21) / w3;
			var b = resultX2 < resultX3 ? resultX2 : resultX3;
			var b1 = resultX1 < b ? resultX1 : b;
			var left = resultX < b1 ? resultX : b1;
			var b2 = resultY2 < resultY3 ? resultY2 : resultY3;
			var b3 = resultY1 < b2 ? resultY1 : b2;
			var top = resultY < b3 ? resultY : b3;
			var b4 = resultX2 > resultX3 ? resultX2 : resultX3;
			var b5 = resultX1 > b4 ? resultX1 : b4;
			var b6 = resultY2 > resultY3 ? resultY2 : resultY3;
			var b7 = resultY1 > b6 ? resultY1 : b6;
			var rectangle_x = left;
			var rectangle_y = top;
			var rectangle_sizeX = (resultX > b5 ? resultX : b5) - left;
			var rectangle_sizeY = (resultY > b7 ? resultY : b7) - top;
			if(rectangle_x < _this.left) {
				_this.left = rectangle_x;
			}
			if(rectangle_y < _this.top) {
				_this.top = rectangle_y;
			}
			if(rectangle_x + rectangle_sizeX > _this.right) {
				_this.right = rectangle_x + rectangle_sizeX;
			}
			if(rectangle_y + rectangle_sizeY > _this.bottom) {
				_this.bottom = rectangle_y + rectangle_sizeY;
			}
			var sThis2 = node._entity;
			if(sThis2 == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
			}
			var display = sThis2.__component__banan_display_DisplayEdge;
			if(display != null) {
				var it = this.validationCache[this.validationCacheLength];
				this.needRedraw = (it != null ? it : _gthis.validationCache[_gthis.validationCacheLength] = new banan_render__$EntityCopier_CachedNode()).sync(node,display) || this.needRedraw;
				this.validationCacheLength++;
			}
		}
		this.newBounds.expand(this.extraSize,this.extraSize,this.extraSize,this.extraSize);
		if(!this.bounds.isEqual(this.newBounds)) {
			this.bounds.copyFrom(this.newBounds);
			this.refreshRenderTarget();
			this.needRedraw = true;
		}
		if(this.needRedraw) {
			this.redraw(doFlush);
			return true;
		} else {
			return false;
		}
	}
	,setExtraSize: function(value) {
		this.extraSize = value;
	}
	,disposeRenderTarget: function() {
		if(this.rt != null) {
			this.rt.release(this.token);
		}
	}
	,refreshRenderTarget: function() {
		this.disposeRenderTarget();
		var _this = this.bounds;
		var _this1 = this.bounds;
		this.rt = this.resourceManager.getRenderTarget(Math.ceil(_this.right) - Math.floor(_this.left),Math.ceil(_this1.bottom) - Math.floor(_this1.top));
		this.rt.claim(this.token);
		var _this2 = this.projection;
		var it = this.rt.current.get_texture().data;
		var right = it != null ? it.get_width() : null;
		var it1 = this.rt.current.get_texture().data;
		var top = it1 != null ? it1.get_height() : null;
		_this2._00 = 2 / right;
		_this2._10 = 0;
		_this2._20 = 0;
		_this2._30 = -right / right;
		_this2._01 = 0;
		_this2._11 = 2.0 / top;
		_this2._21 = 0;
		_this2._31 = -top / top;
		_this2._02 = 0;
		_this2._12 = 0;
		_this2._22 = -0.002000200020002;
		_this2._32 = -1.0002000200020003;
		_this2._03 = 0;
		_this2._13 = 0;
		_this2._23 = 0;
		_this2._33 = 1;
	}
	,redraw: function(doFlush) {
		if(doFlush == null) {
			doFlush = false;
		}
		this.needRedraw = false;
		var this1 = this.renderList;
		var sourceNode = this1.renderList.nodes[this1.from];
		var _this = this.globalToNode;
		if(!sourceNode._isInverseTransformValid) {
			sourceNode.validateInverseTransform();
		}
		var _this1 = sourceNode._inverseTransform;
		_this._00 = _this1.m00;
		_this._10 = _this1.m10;
		_this._20 = 0.0;
		_this._30 = _this1.m20;
		_this._01 = _this1.m01;
		_this._11 = _this1.m11;
		_this._21 = 0.0;
		_this._31 = _this1.m21;
		_this._02 = 0.0;
		_this._12 = 0.0;
		_this._22 = 1.0;
		_this._32 = 0.0;
		_this._03 = _this1.m02;
		_this._13 = _this1.m12;
		_this._23 = 0.0;
		_this._33 = _this1.m22;
		sourceNode.renderColorA = (sourceNode.color >>> 24) * 0.00392156862745098;
		sourceNode.renderColorR = ((sourceNode.color & 16711680) >>> 16) * 0.00392156862745098;
		sourceNode.renderColorG = ((sourceNode.color & 65280) >>> 8) * 0.00392156862745098;
		sourceNode.renderColorB = (sourceNode.color & 255) * 0.00392156862745098;
		var a = sourceNode.renderColorA * sourceNode.renderOpacity;
		if(a == null) {
			a = 1;
		}
		sourceNode.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(sourceNode.renderColorR,sourceNode.renderColorG,sourceNode.renderColorB,a);
		var child = sourceNode.firstChild;
		while(child != null) {
			var nodeEdge = child;
			nodeEdge.renderColorA = (nodeEdge.color >>> 24) * 0.00392156862745098;
			nodeEdge.renderColorR = ((nodeEdge.color & 16711680) >>> 16) * 0.00392156862745098;
			nodeEdge.renderColorG = ((nodeEdge.color & 65280) >>> 8) * 0.00392156862745098;
			nodeEdge.renderColorB = (nodeEdge.color & 255) * 0.00392156862745098;
			var this2 = nodeEdge.parent;
			if(this2 != null) {
				nodeEdge.renderColorA *= this2.renderColorA;
				nodeEdge.renderColorR *= this2.renderColorR;
				nodeEdge.renderColorG *= this2.renderColorG;
				nodeEdge.renderColorB *= this2.renderColorB;
			}
			var a1 = nodeEdge.renderColorA * nodeEdge.renderOpacity;
			if(a1 == null) {
				a1 = 1;
			}
			nodeEdge.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,a1);
			var child1 = nodeEdge.firstChild;
			while(child1 != null) {
				var nodeEdge1 = child1;
				nodeEdge1.renderColorA = (nodeEdge1.color >>> 24) * 0.00392156862745098;
				nodeEdge1.renderColorR = ((nodeEdge1.color & 16711680) >>> 16) * 0.00392156862745098;
				nodeEdge1.renderColorG = ((nodeEdge1.color & 65280) >>> 8) * 0.00392156862745098;
				nodeEdge1.renderColorB = (nodeEdge1.color & 255) * 0.00392156862745098;
				var this3 = nodeEdge1.parent;
				if(this3 != null) {
					nodeEdge1.renderColorA *= this3.renderColorA;
					nodeEdge1.renderColorR *= this3.renderColorR;
					nodeEdge1.renderColorG *= this3.renderColorG;
					nodeEdge1.renderColorB *= this3.renderColorB;
				}
				var a2 = nodeEdge1.renderColorA * nodeEdge1.renderOpacity;
				if(a2 == null) {
					a2 = 1;
				}
				nodeEdge1.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge1.renderColorR,nodeEdge1.renderColorG,nodeEdge1.renderColorB,a2);
				var child2 = nodeEdge1.firstChild;
				while(child2 != null) {
					var nodeEdge2 = child2;
					nodeEdge2.recalcRenderColor(null,null);
					child2 = nodeEdge2.next;
				}
				child1 = nodeEdge1.next;
			}
			child = nodeEdge.next;
		}
		sourceNode.renderOpacity = sourceNode.modOpacity;
		var a3 = sourceNode.renderColorA * sourceNode.renderOpacity;
		if(a3 == null) {
			a3 = 1;
		}
		sourceNode.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(sourceNode.renderColorR,sourceNode.renderColorG,sourceNode.renderColorB,a3);
		var child3 = sourceNode.firstChild;
		while(child3 != null) {
			var nodeEdge3 = child3;
			nodeEdge3.renderOpacity = nodeEdge3.modOpacity;
			var this4 = nodeEdge3.parent;
			if(this4 != null) {
				nodeEdge3.renderOpacity *= this4.renderOpacity;
			}
			var a4 = nodeEdge3.renderColorA * nodeEdge3.renderOpacity;
			if(a4 == null) {
				a4 = 1;
			}
			nodeEdge3.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge3.renderColorR,nodeEdge3.renderColorG,nodeEdge3.renderColorB,a4);
			var child4 = nodeEdge3.firstChild;
			while(child4 != null) {
				var nodeEdge4 = child4;
				nodeEdge4.renderOpacity = nodeEdge4.modOpacity;
				var this5 = nodeEdge4.parent;
				if(this5 != null) {
					nodeEdge4.renderOpacity *= this5.renderOpacity;
				}
				var a5 = nodeEdge4.renderColorA * nodeEdge4.renderOpacity;
				if(a5 == null) {
					a5 = 1;
				}
				nodeEdge4.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge4.renderColorR,nodeEdge4.renderColorG,nodeEdge4.renderColorB,a5);
				var child5 = nodeEdge4.firstChild;
				while(child5 != null) {
					var nodeEdge5 = child5;
					nodeEdge5.recalcRenderOpacity(null,null);
					child5 = nodeEdge5.next;
				}
				child4 = nodeEdge4.next;
			}
			child3 = nodeEdge3.next;
		}
		var x = -Math.floor(this.bounds.left);
		var y = -Math.floor(this.bounds.top);
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__20 = 0;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__21 = 0;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var _this__03 = 0;
		var _this__13 = 0;
		var _this__23 = 0;
		var _this__33 = 1;
		var m = this.globalToNode;
		var view = new kha_math_FastMatrix4(_this__00 * m._00 + _this__10 * m._01 + _this__20 * m._02 + x * m._03,_this__00 * m._10 + _this__10 * m._11 + _this__20 * m._12 + x * m._13,_this__00 * m._20 + _this__10 * m._21 + _this__20 * m._22 + x * m._23,_this__00 * m._30 + _this__10 * m._31 + _this__20 * m._32 + x * m._33,_this__01 * m._00 + _this__11 * m._01 + _this__21 * m._02 + y * m._03,_this__01 * m._10 + _this__11 * m._11 + _this__21 * m._12 + y * m._13,_this__01 * m._20 + _this__11 * m._21 + _this__21 * m._22 + y * m._23,_this__01 * m._30 + _this__11 * m._31 + _this__21 * m._32 + y * m._33,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02 + 0.0 * m._03,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12 + 0.0 * m._13,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22 + 0.0 * m._23,_this__02 * m._30 + _this__12 * m._31 + _this__22 * m._32 + 0.0 * m._33,_this__03 * m._00 + _this__13 * m._01 + _this__23 * m._02 + _this__33 * m._03,_this__03 * m._10 + _this__13 * m._11 + _this__23 * m._12 + _this__33 * m._13,_this__03 * m._20 + _this__13 * m._21 + _this__23 * m._22 + _this__33 * m._23,_this__03 * m._30 + _this__13 * m._31 + _this__23 * m._32 + _this__33 * m._33);
		var _this2 = this.nodeRenderer;
		var it = this.rt.current.get_texture().data;
		var g4 = it != null ? it.get_g4() : null;
		var proj = this.projection;
		var _this3 = _this2.render2Context;
		var _this4 = _this3.renderer2;
		_this4.batchSource.closeRenderRequests(_this4);
		_this4.rtStack.push(new banan_render_render2_RenderTarget().configure("copier's render texture",g4,0));
		var renderer2 = _this3.renderer2;
		renderer2.projStack.push(proj);
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this5 = renderer2.projStack.first();
		var m1 = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this5._00 * m1._00 + _this5._10 * m1._01 + _this5._20 * m1._02 + _this5._30 * m1._03,_this5._00 * m1._10 + _this5._10 * m1._11 + _this5._20 * m1._12 + _this5._30 * m1._13,_this5._00 * m1._20 + _this5._10 * m1._21 + _this5._20 * m1._22 + _this5._30 * m1._23,_this5._00 * m1._30 + _this5._10 * m1._31 + _this5._20 * m1._32 + _this5._30 * m1._33,_this5._01 * m1._00 + _this5._11 * m1._01 + _this5._21 * m1._02 + _this5._31 * m1._03,_this5._01 * m1._10 + _this5._11 * m1._11 + _this5._21 * m1._12 + _this5._31 * m1._13,_this5._01 * m1._20 + _this5._11 * m1._21 + _this5._21 * m1._22 + _this5._31 * m1._23,_this5._01 * m1._30 + _this5._11 * m1._31 + _this5._21 * m1._32 + _this5._31 * m1._33,_this5._02 * m1._00 + _this5._12 * m1._01 + _this5._22 * m1._02 + _this5._32 * m1._03,_this5._02 * m1._10 + _this5._12 * m1._11 + _this5._22 * m1._12 + _this5._32 * m1._13,_this5._02 * m1._20 + _this5._12 * m1._21 + _this5._22 * m1._22 + _this5._32 * m1._23,_this5._02 * m1._30 + _this5._12 * m1._31 + _this5._22 * m1._32 + _this5._32 * m1._33,_this5._03 * m1._00 + _this5._13 * m1._01 + _this5._23 * m1._02 + _this5._33 * m1._03,_this5._03 * m1._10 + _this5._13 * m1._11 + _this5._23 * m1._12 + _this5._33 * m1._13,_this5._03 * m1._20 + _this5._13 * m1._21 + _this5._23 * m1._22 + _this5._33 * m1._23,_this5._03 * m1._30 + _this5._13 * m1._31 + _this5._23 * m1._32 + _this5._33 * m1._33);
		_this2.ctx.renderer2 = renderer2;
		_this2.allowDebugDraw = false;
		this.nodeRenderer.renderRenderList(this.renderList,view);
		var _this6 = this.nodeRenderer;
		var doFlush1 = doFlush;
		if(doFlush == null) {
			doFlush1 = false;
		}
		var doFlush2 = doFlush1;
		if(doFlush2 == null) {
			doFlush2 = false;
		}
		_this6.render2Context.renderer2.addEndRequest(doFlush2);
		var _this7 = _this6.ctx.renderer2;
		_this7.projStack.pop();
		_this7.batchSource.closeRenderRequests(_this7);
		var _this8 = _this7.projStack.first();
		var m2 = _this7.viewStack.first();
		_this7.mvp = new kha_math_FastMatrix4(_this8._00 * m2._00 + _this8._10 * m2._01 + _this8._20 * m2._02 + _this8._30 * m2._03,_this8._00 * m2._10 + _this8._10 * m2._11 + _this8._20 * m2._12 + _this8._30 * m2._13,_this8._00 * m2._20 + _this8._10 * m2._21 + _this8._20 * m2._22 + _this8._30 * m2._23,_this8._00 * m2._30 + _this8._10 * m2._31 + _this8._20 * m2._32 + _this8._30 * m2._33,_this8._01 * m2._00 + _this8._11 * m2._01 + _this8._21 * m2._02 + _this8._31 * m2._03,_this8._01 * m2._10 + _this8._11 * m2._11 + _this8._21 * m2._12 + _this8._31 * m2._13,_this8._01 * m2._20 + _this8._11 * m2._21 + _this8._21 * m2._22 + _this8._31 * m2._23,_this8._01 * m2._30 + _this8._11 * m2._31 + _this8._21 * m2._32 + _this8._31 * m2._33,_this8._02 * m2._00 + _this8._12 * m2._01 + _this8._22 * m2._02 + _this8._32 * m2._03,_this8._02 * m2._10 + _this8._12 * m2._11 + _this8._22 * m2._12 + _this8._32 * m2._13,_this8._02 * m2._20 + _this8._12 * m2._21 + _this8._22 * m2._22 + _this8._32 * m2._23,_this8._02 * m2._30 + _this8._12 * m2._31 + _this8._22 * m2._32 + _this8._32 * m2._33,_this8._03 * m2._00 + _this8._13 * m2._01 + _this8._23 * m2._02 + _this8._33 * m2._03,_this8._03 * m2._10 + _this8._13 * m2._11 + _this8._23 * m2._12 + _this8._33 * m2._13,_this8._03 * m2._20 + _this8._13 * m2._21 + _this8._23 * m2._22 + _this8._33 * m2._23,_this8._03 * m2._30 + _this8._13 * m2._31 + _this8._23 * m2._32 + _this8._33 * m2._33);
		_this6.ctx.renderer2 = null;
		sourceNode.renderColorA = (sourceNode.color >>> 24) * 0.00392156862745098;
		sourceNode.renderColorR = ((sourceNode.color & 16711680) >>> 16) * 0.00392156862745098;
		sourceNode.renderColorG = ((sourceNode.color & 65280) >>> 8) * 0.00392156862745098;
		sourceNode.renderColorB = (sourceNode.color & 255) * 0.00392156862745098;
		var this6 = sourceNode.parent;
		if(this6 != null) {
			sourceNode.renderColorA *= this6.renderColorA;
			sourceNode.renderColorR *= this6.renderColorR;
			sourceNode.renderColorG *= this6.renderColorG;
			sourceNode.renderColorB *= this6.renderColorB;
		}
		var a6 = sourceNode.renderColorA * sourceNode.renderOpacity;
		if(a6 == null) {
			a6 = 1;
		}
		sourceNode.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(sourceNode.renderColorR,sourceNode.renderColorG,sourceNode.renderColorB,a6);
		var child6 = sourceNode.firstChild;
		while(child6 != null) {
			var nodeEdge6 = child6;
			nodeEdge6.renderColorA = (nodeEdge6.color >>> 24) * 0.00392156862745098;
			nodeEdge6.renderColorR = ((nodeEdge6.color & 16711680) >>> 16) * 0.00392156862745098;
			nodeEdge6.renderColorG = ((nodeEdge6.color & 65280) >>> 8) * 0.00392156862745098;
			nodeEdge6.renderColorB = (nodeEdge6.color & 255) * 0.00392156862745098;
			var this7 = nodeEdge6.parent;
			if(this7 != null) {
				nodeEdge6.renderColorA *= this7.renderColorA;
				nodeEdge6.renderColorR *= this7.renderColorR;
				nodeEdge6.renderColorG *= this7.renderColorG;
				nodeEdge6.renderColorB *= this7.renderColorB;
			}
			var a7 = nodeEdge6.renderColorA * nodeEdge6.renderOpacity;
			if(a7 == null) {
				a7 = 1;
			}
			nodeEdge6.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge6.renderColorR,nodeEdge6.renderColorG,nodeEdge6.renderColorB,a7);
			var child7 = nodeEdge6.firstChild;
			while(child7 != null) {
				var nodeEdge7 = child7;
				nodeEdge7.renderColorA = (nodeEdge7.color >>> 24) * 0.00392156862745098;
				nodeEdge7.renderColorR = ((nodeEdge7.color & 16711680) >>> 16) * 0.00392156862745098;
				nodeEdge7.renderColorG = ((nodeEdge7.color & 65280) >>> 8) * 0.00392156862745098;
				nodeEdge7.renderColorB = (nodeEdge7.color & 255) * 0.00392156862745098;
				var this8 = nodeEdge7.parent;
				if(this8 != null) {
					nodeEdge7.renderColorA *= this8.renderColorA;
					nodeEdge7.renderColorR *= this8.renderColorR;
					nodeEdge7.renderColorG *= this8.renderColorG;
					nodeEdge7.renderColorB *= this8.renderColorB;
				}
				var a8 = nodeEdge7.renderColorA * nodeEdge7.renderOpacity;
				if(a8 == null) {
					a8 = 1;
				}
				nodeEdge7.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge7.renderColorR,nodeEdge7.renderColorG,nodeEdge7.renderColorB,a8);
				var child8 = nodeEdge7.firstChild;
				while(child8 != null) {
					var nodeEdge8 = child8;
					nodeEdge8.recalcRenderColor(null,null);
					child8 = nodeEdge8.next;
				}
				child7 = nodeEdge7.next;
			}
			child6 = nodeEdge6.next;
		}
		sourceNode.renderOpacity = sourceNode.modOpacity;
		var this9 = sourceNode.parent;
		if(this9 != null) {
			sourceNode.renderOpacity *= this9.renderOpacity;
		}
		var a9 = sourceNode.renderColorA * sourceNode.renderOpacity;
		if(a9 == null) {
			a9 = 1;
		}
		sourceNode.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(sourceNode.renderColorR,sourceNode.renderColorG,sourceNode.renderColorB,a9);
		var child9 = sourceNode.firstChild;
		while(child9 != null) {
			var nodeEdge9 = child9;
			nodeEdge9.renderOpacity = nodeEdge9.modOpacity;
			var this10 = nodeEdge9.parent;
			if(this10 != null) {
				nodeEdge9.renderOpacity *= this10.renderOpacity;
			}
			var a10 = nodeEdge9.renderColorA * nodeEdge9.renderOpacity;
			if(a10 == null) {
				a10 = 1;
			}
			nodeEdge9.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge9.renderColorR,nodeEdge9.renderColorG,nodeEdge9.renderColorB,a10);
			var child10 = nodeEdge9.firstChild;
			while(child10 != null) {
				var nodeEdge10 = child10;
				nodeEdge10.renderOpacity = nodeEdge10.modOpacity;
				var this11 = nodeEdge10.parent;
				if(this11 != null) {
					nodeEdge10.renderOpacity *= this11.renderOpacity;
				}
				var a11 = nodeEdge10.renderColorA * nodeEdge10.renderOpacity;
				if(a11 == null) {
					a11 = 1;
				}
				nodeEdge10.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge10.renderColorR,nodeEdge10.renderColorG,nodeEdge10.renderColorB,a11);
				var child11 = nodeEdge10.firstChild;
				while(child11 != null) {
					var nodeEdge11 = child11;
					nodeEdge11.recalcRenderOpacity(null,null);
					child11 = nodeEdge11.next;
				}
				child10 = nodeEdge10.next;
			}
			child9 = nodeEdge9.next;
		}
	}
	,__class__: banan_render_EntityCopier
};
var banan_render_Quad = function() {
	this.isNormalizedCalculated = false;
};
$hxClasses["banan.render.Quad"] = banan_render_Quad;
banan_render_Quad.__name__ = "banan.render.Quad";
banan_render_Quad.writeImageIdenity = function(texture,tx,ty,tSizeX,tSizeY,stSizeX,stSizeY,offsetX,offsetY,sizeX,sizeY,flipX,flipY,oX,oY) {
	banan_render_Quad.hquad.texture = texture;
	var _this = banan_render_Quad.hquad;
	var frameX = tx;
	var frameY = ty;
	var frameW = tSizeX;
	var frameH = tSizeY;
	var drawX = oX;
	var drawY = oY;
	if(flipX) {
		drawX = oX + (sizeX + offsetX - stSizeX);
		frameX = tx + tSizeX;
		frameW = -tSizeX;
	} else {
		drawX = oX - offsetX;
	}
	if(flipY) {
		drawY = oY + (sizeY + offsetY - stSizeY);
		frameY = ty + tSizeY;
		frameH = -tSizeY;
	} else {
		drawY = oY - offsetY;
	}
	var x1 = drawX + stSizeX;
	var y1 = drawY + stSizeY;
	_this.x0 = drawX;
	_this.y0 = drawY;
	_this.x1 = x1;
	_this.y1 = drawY;
	_this.x2 = x1;
	_this.y2 = y1;
	_this.x3 = drawX;
	_this.y3 = y1;
	_this.tx0 = frameX;
	_this.ty0 = frameY;
	_this.tx1 = frameX + frameW;
	_this.ty1 = frameY + frameH;
	_this.isNormalizedCalculated = false;
	var _this1 = banan_render_Quad.hquad;
	if(!_this1.isNormalizedCalculated) {
		_this1.isNormalizedCalculated = true;
		_this1.tx0_norm = _this1.tx0 / _this1.texture.sizeX;
		_this1.tx1_norm = _this1.tx1 / _this1.texture.sizeX;
		_this1.ty0_norm = _this1.ty0 / _this1.texture.sizeY;
		_this1.ty1_norm = _this1.ty1 / _this1.texture.sizeY;
	}
	return banan_render_Quad.hquad;
};
banan_render_Quad.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,x2: null
	,y2: null
	,x3: null
	,y3: null
	,tx0: null
	,ty0: null
	,tx1: null
	,ty1: null
	,tx0_norm: null
	,ty0_norm: null
	,tx1_norm: null
	,ty1_norm: null
	,isNormalizedCalculated: null
	,texture: null
	,writeToArray: function(vertices,vOffset) {
		var i = vOffset << 2;
		vertices[i] = this.x0;
		vertices[i + 1] = this.y0;
		vertices[i + 2] = this.tx0_norm;
		vertices[i + 3] = this.ty0_norm;
		var i1 = vOffset + 1 << 2;
		vertices[i1] = this.x1;
		vertices[i1 + 1] = this.y1;
		vertices[i1 + 2] = this.tx1_norm;
		vertices[i1 + 3] = this.ty0_norm;
		var i2 = vOffset + 2 << 2;
		vertices[i2] = this.x2;
		vertices[i2 + 1] = this.y2;
		vertices[i2 + 2] = this.tx1_norm;
		vertices[i2 + 3] = this.ty1_norm;
		var i3 = vOffset + 3 << 2;
		vertices[i3] = this.x3;
		vertices[i3 + 1] = this.y3;
		vertices[i3 + 2] = this.tx0_norm;
		vertices[i3 + 3] = this.ty1_norm;
	}
	,writeToBounds: function(bounds) {
		bounds.includeXy(this.x0,this.y0);
		bounds.includeXy(this.x1,this.y1);
		bounds.includeXy(this.x2,this.y2);
		bounds.includeXy(this.x3,this.y3);
	}
	,calculateUvNormalized: function() {
		if(!this.isNormalizedCalculated) {
			this.isNormalizedCalculated = true;
			this.tx0_norm = this.tx0 / this.texture.sizeX;
			this.tx1_norm = this.tx1 / this.texture.sizeX;
			this.ty0_norm = this.ty0 / this.texture.sizeY;
			this.ty1_norm = this.ty1 / this.texture.sizeY;
		}
	}
	,writeImage: function(texture,tx,ty,tSizeX,tSizeY,stSizeX,stSizeY,offsetX,offsetY,sizeX,sizeY,flipX,flipY,v00,v10,v20,v01,v11,v21,oX,oY) {
		this.texture = texture;
		var frameX = tx;
		var frameY = ty;
		var frameW = tSizeX;
		var frameH = tSizeY;
		var drawX = oX;
		var drawY = oY;
		if(flipX) {
			drawX = oX + (sizeX + offsetX - stSizeX);
			frameX = tx + tSizeX;
			frameW = -tSizeX;
		} else {
			drawX = oX - offsetX;
		}
		if(flipY) {
			drawY = oY + (sizeY + offsetY - stSizeY);
			frameY = ty + tSizeY;
			frameH = -tSizeY;
		} else {
			drawY = oY - offsetY;
		}
		var x1 = drawX + stSizeX;
		var y1 = drawY + stSizeY;
		this.x0 = drawX;
		this.y0 = drawY;
		this.x1 = x1;
		this.y1 = drawY;
		this.x2 = x1;
		this.y2 = y1;
		this.x3 = drawX;
		this.y3 = y1;
		this.tx0 = frameX;
		this.ty0 = frameY;
		this.tx1 = frameX + frameW;
		this.ty1 = frameY + frameH;
		this.isNormalizedCalculated = false;
		var x = this.x0;
		var y = this.y0;
		var x2 = this.x1;
		var y2 = this.y1;
		var x3 = this.x2;
		var y3 = this.y2;
		var x4 = this.x3;
		var y4 = this.y3;
		this.x0 = v00 * x + v10 * y + v20;
		this.y0 = v01 * x + v11 * y + v21;
		this.x1 = v00 * x2 + v10 * y2 + v20;
		this.y1 = v01 * x2 + v11 * y2 + v21;
		this.x2 = v00 * x3 + v10 * y3 + v20;
		this.y2 = v01 * x3 + v11 * y3 + v21;
		this.x3 = v00 * x4 + v10 * y4 + v20;
		this.y3 = v01 * x4 + v11 * y4 + v21;
		return this;
	}
	,calculateQuad: function(tx,ty,tSizeX,tSizeY,stSizeX,stSizeY,offsetX,offsetY,sizeX,sizeY,flipX,flipY,oX,oY) {
		var frameX = tx;
		var frameY = ty;
		var frameW = tSizeX;
		var frameH = tSizeY;
		var drawX = oX;
		var drawY = oY;
		if(flipX) {
			drawX = oX + (sizeX + offsetX - stSizeX);
			frameX = tx + tSizeX;
			frameW = -tSizeX;
		} else {
			drawX = oX - offsetX;
		}
		if(flipY) {
			drawY = oY + (sizeY + offsetY - stSizeY);
			frameY = ty + tSizeY;
			frameH = -tSizeY;
		} else {
			drawY = oY - offsetY;
		}
		var x1 = drawX + stSizeX;
		var y1 = drawY + stSizeY;
		this.x0 = drawX;
		this.y0 = drawY;
		this.x1 = x1;
		this.y1 = drawY;
		this.x2 = x1;
		this.y2 = y1;
		this.x3 = drawX;
		this.y3 = y1;
		this.tx0 = frameX;
		this.ty0 = frameY;
		this.tx1 = frameX + frameW;
		this.ty1 = frameY + frameH;
		this.isNormalizedCalculated = false;
	}
	,setQuad: function(x0,y0,x1,y1,tx0,ty0,tx1,ty1) {
		this.x0 = x0;
		this.y0 = y0;
		this.x1 = x1;
		this.y1 = y0;
		this.x2 = x1;
		this.y2 = y1;
		this.x3 = x0;
		this.y3 = y1;
		this.tx0 = tx0;
		this.ty0 = ty0;
		this.tx1 = tx1;
		this.ty1 = ty1;
		this.isNormalizedCalculated = false;
	}
	,applyTransform: function(v00,v10,v20,v01,v11,v21) {
		var x = this.x0;
		var y = this.y0;
		var x1 = this.x1;
		var y1 = this.y1;
		var x2 = this.x2;
		var y2 = this.y2;
		var x3 = this.x3;
		var y3 = this.y3;
		this.x0 = v00 * x + v10 * y + v20;
		this.y0 = v01 * x + v11 * y + v21;
		this.x1 = v00 * x1 + v10 * y1 + v20;
		this.y1 = v01 * x1 + v11 * y1 + v21;
		this.x2 = v00 * x2 + v10 * y2 + v20;
		this.y2 = v01 * x2 + v11 * y2 + v21;
		this.x3 = v00 * x3 + v10 * y3 + v20;
		this.y3 = v01 * x3 + v11 * y3 + v21;
	}
	,__class__: banan_render_Quad
};
var banan_render_QuadCache = function() {
	this.quadCount = 0;
	this.quads = [];
};
$hxClasses["banan.render.QuadCache"] = banan_render_QuadCache;
banan_render_QuadCache.__name__ = "banan.render.QuadCache";
banan_render_QuadCache.prototype = {
	quadCount: null
	,quads: null
	,getQuad: function(idx) {
		if(idx < this.quadCount) {
			return this.quads[idx];
		} else {
			return null;
		}
	}
	,reset: function() {
		this.quadCount = 0;
	}
	,__class__: banan_render_QuadCache
};
var banan_render_RenderSystem = function(updatePriority) {
	this.g2renderList = [];
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.render.RenderSystem"] = banan_render_RenderSystem;
banan_render_RenderSystem.__name__ = "banan.render.RenderSystem";
banan_render_RenderSystem.__interfaces__ = [banan_backend_IRenderSystem];
banan_render_RenderSystem.__super__ = banan_module_Module;
banan_render_RenderSystem.prototype = $extend(banan_module_Module.prototype,{
	rootList: null
	,g2renderList: null
	,rootMap: null
	,renderRoots: null
	,nodeRenderer: null
	,scaleMatrix: null
	,dynamicAtlases: null
	,fontModule: null
	,resourceManager: null
	,screenSizeProvider: null
	,render2Context: null
	,initialize: function() {
		banan_render_render2_node_NodeRenderer.debugGetFont = $bind(this,this.debugGetFont);
		this.rootList = [];
		this.g2renderList.push($bind(this,this.debugRenderPolygons));
		this.rootMap = new banan_basis_ExtendEnumMapImpl(banan_render_ERenderRoot);
		this.renderRoots = [];
		this.nodeRenderer = new banan_render_render2_node_NodeRenderer(this.resourceManager,this.render2Context);
		this.scaleMatrix = new kha_math_FastMatrix3(this.screenSizeProvider.resolutionScale,0,0,0,this.screenSizeProvider.resolutionScale,0,0,0,1);
		this.dynamicAtlases = [];
		this.moduleInfo.setInitialized();
	}
	,registerDynamicAtlas: function(dynamicAtlas) {
		if(this.dynamicAtlases.indexOf(dynamicAtlas) != -1) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(122,"RenderSystem.hx:74","atlas is already registered",null));
		}
		this.dynamicAtlases.push(dynamicAtlas);
	}
	,unregisterDynamicAtlas: function(dynamicAtlas) {
		HxOverrides.remove(this.dynamicAtlases,dynamicAtlas);
	}
	,addRoot: function(rootType,root) {
		var this1 = this.rootMap;
		if(rootType.type != this1.type) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:40","key.type == type",null));
		}
		var k = rootType.name;
		var _this = this1.map;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,root);
		} else {
			_this.h[k] = root;
		}
		this.updateRoots();
	}
	,removeRoot: function(rootType) {
		var _this = this.rootMap;
		if(rootType.type != _this.type) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ExtendEnumMap.hx:59","key.type == type",null));
		}
		_this.map.remove(rootType.name);
		this.updateRoots();
	}
	,updateRoots: function() {
		var list = this.rootList;
		var i = 0;
		var _this = this.rootMap;
		var _gthis = _this;
		var _gthis1 = _this;
		var root = new banan_basis__$IteratorHelper_TransformIterator(new banan_basis__$IteratorHelper_FilterIterator(HxOverrides.iter(_this.type.all),function(k) {
			var key = k.name;
			var _this1 = _gthis1.map;
			if(__map_reserved[key] != null) {
				return _this1.existsReserved(key);
			} else {
				return _this1.h.hasOwnProperty(key);
			}
		}),function(k1) {
			var key1 = k1.name;
			var _this2 = _gthis.map;
			if(__map_reserved[key1] != null) {
				return _this2.getReserved(key1);
			} else {
				return _this2.h[key1];
			}
		});
		while(root.hasNext()) list[i++] = root.next();
		list.length = i;
	}
	,render: function(canvas,clear,isRenderTarget) {
		banan_render_render2_request_DrawRequest.resetDebugCounters();
		this.fillRenderList(this.rootList,this.screenSizeProvider);
		canvas.get_g4().viewport(0,0,this.screenSizeProvider.canvasSizeX,this.screenSizeProvider.canvasSizeY);
		var frameSizeX = this.screenSizeProvider.screenSizeX;
		var frameSizeY = this.screenSizeProvider.screenSizeY;
		var invertY = isRenderTarget && kha_Image.renderTargetsInvertedY();
		var left = 0;
		var bottom = invertY ? 0 : frameSizeY;
		var top = invertY ? frameSizeY : 0;
		var proj = new kha_math_FastMatrix4(2 / (frameSizeX - left),0,0,-(frameSizeX + left) / (frameSizeX - left),0,2.0 / (top - bottom),0,-(top + bottom) / (top - bottom),0,0,-0.002000200020002,-1.0002000200020003,0,0,0,1);
		var _this = this.nodeRenderer;
		var g4 = canvas.get_g4();
		var _this1 = _this.render2Context;
		var _this2 = _this1.renderer2;
		_this2.batchSource.closeRenderRequests(_this2);
		_this2.rtStack.push(new banan_render_render2_RenderTarget().configure("back buffer",g4,-16777216));
		var renderer2 = _this1.renderer2;
		renderer2.projStack.push(proj);
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this3 = renderer2.projStack.first();
		var m = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this3._00 * m._00 + _this3._10 * m._01 + _this3._20 * m._02 + _this3._30 * m._03,_this3._00 * m._10 + _this3._10 * m._11 + _this3._20 * m._12 + _this3._30 * m._13,_this3._00 * m._20 + _this3._10 * m._21 + _this3._20 * m._22 + _this3._30 * m._23,_this3._00 * m._30 + _this3._10 * m._31 + _this3._20 * m._32 + _this3._30 * m._33,_this3._01 * m._00 + _this3._11 * m._01 + _this3._21 * m._02 + _this3._31 * m._03,_this3._01 * m._10 + _this3._11 * m._11 + _this3._21 * m._12 + _this3._31 * m._13,_this3._01 * m._20 + _this3._11 * m._21 + _this3._21 * m._22 + _this3._31 * m._23,_this3._01 * m._30 + _this3._11 * m._31 + _this3._21 * m._32 + _this3._31 * m._33,_this3._02 * m._00 + _this3._12 * m._01 + _this3._22 * m._02 + _this3._32 * m._03,_this3._02 * m._10 + _this3._12 * m._11 + _this3._22 * m._12 + _this3._32 * m._13,_this3._02 * m._20 + _this3._12 * m._21 + _this3._22 * m._22 + _this3._32 * m._23,_this3._02 * m._30 + _this3._12 * m._31 + _this3._22 * m._32 + _this3._32 * m._33,_this3._03 * m._00 + _this3._13 * m._01 + _this3._23 * m._02 + _this3._33 * m._03,_this3._03 * m._10 + _this3._13 * m._11 + _this3._23 * m._12 + _this3._33 * m._13,_this3._03 * m._20 + _this3._13 * m._21 + _this3._23 * m._22 + _this3._33 * m._23,_this3._03 * m._30 + _this3._13 * m._31 + _this3._23 * m._32 + _this3._33 * m._33);
		_this.ctx.renderer2 = renderer2;
		_this.allowDebugDraw = true;
		var _g = 0;
		var _g1 = this.renderRoots;
		while(_g < _g1.length) {
			var renderRoot = _g1[_g];
			++_g;
			var camera = renderRoot.camera;
			var x = camera.cameraScale;
			var y = camera.cameraScale;
			var _this__10 = 0;
			var _this__20 = 0;
			var _this__30 = 0;
			var _this__01 = 0;
			var _this__21 = 0;
			var _this__31 = 0;
			var _this__03 = 0;
			var _this__13 = 0;
			var _this__23 = 0;
			var _this__33 = 1;
			var x1 = -Math.round(camera.cameraX);
			var y1 = -Math.round(camera.cameraY);
			var m__00 = 1;
			var m__10 = 0;
			var m__20 = 0;
			var m__01 = 0;
			var m__11 = 1;
			var m__21 = 0;
			var m__02 = 0;
			var m__12 = 0;
			var m__22 = 1;
			var m__03 = 0;
			var m__13 = 0;
			var m__23 = 0;
			var m__33 = 1;
			this.nodeRenderer.renderRenderList(renderRoot.renderList.slice(0),new kha_math_FastMatrix4(x * m__00 + _this__10 * m__01 + _this__20 * m__02 + _this__30 * m__03,x * m__10 + _this__10 * m__11 + _this__20 * m__12 + _this__30 * m__13,x * m__20 + _this__10 * m__21 + _this__20 * m__22 + _this__30 * m__23,x * x1 + _this__10 * y1 + _this__30 * m__33,_this__01 * m__00 + y * m__01 + _this__21 * m__02 + _this__31 * m__03,_this__01 * m__10 + y * m__11 + _this__21 * m__12 + _this__31 * m__13,_this__01 * m__20 + y * m__21 + _this__21 * m__22 + _this__31 * m__23,_this__01 * x1 + y * y1 + _this__31 * m__33,0.,0.,1.,0 * x1 + 0 * y1 + 0 * m__33,_this__03 * m__00 + _this__13 * m__01 + _this__23 * m__02 + _this__33 * m__03,_this__03 * m__10 + _this__13 * m__11 + _this__23 * m__12 + _this__33 * m__13,_this__03 * m__20 + _this__13 * m__21 + _this__23 * m__22 + _this__33 * m__23,_this__03 * x1 + _this__13 * y1 + _this__33 * m__33),this.screenSizeProvider.resolutionScale);
		}
		var _this4 = this.nodeRenderer;
		_this4.render2Context.renderer2.addEndRequest(true);
		var _this5 = _this4.ctx.renderer2;
		_this5.projStack.pop();
		_this5.batchSource.closeRenderRequests(_this5);
		var _this6 = _this5.projStack.first();
		var m1 = _this5.viewStack.first();
		_this5.mvp = new kha_math_FastMatrix4(_this6._00 * m1._00 + _this6._10 * m1._01 + _this6._20 * m1._02 + _this6._30 * m1._03,_this6._00 * m1._10 + _this6._10 * m1._11 + _this6._20 * m1._12 + _this6._30 * m1._13,_this6._00 * m1._20 + _this6._10 * m1._21 + _this6._20 * m1._22 + _this6._30 * m1._23,_this6._00 * m1._30 + _this6._10 * m1._31 + _this6._20 * m1._32 + _this6._30 * m1._33,_this6._01 * m1._00 + _this6._11 * m1._01 + _this6._21 * m1._02 + _this6._31 * m1._03,_this6._01 * m1._10 + _this6._11 * m1._11 + _this6._21 * m1._12 + _this6._31 * m1._13,_this6._01 * m1._20 + _this6._11 * m1._21 + _this6._21 * m1._22 + _this6._31 * m1._23,_this6._01 * m1._30 + _this6._11 * m1._31 + _this6._21 * m1._32 + _this6._31 * m1._33,_this6._02 * m1._00 + _this6._12 * m1._01 + _this6._22 * m1._02 + _this6._32 * m1._03,_this6._02 * m1._10 + _this6._12 * m1._11 + _this6._22 * m1._12 + _this6._32 * m1._13,_this6._02 * m1._20 + _this6._12 * m1._21 + _this6._22 * m1._22 + _this6._32 * m1._23,_this6._02 * m1._30 + _this6._12 * m1._31 + _this6._22 * m1._32 + _this6._32 * m1._33,_this6._03 * m1._00 + _this6._13 * m1._01 + _this6._23 * m1._02 + _this6._33 * m1._03,_this6._03 * m1._10 + _this6._13 * m1._11 + _this6._23 * m1._12 + _this6._33 * m1._13,_this6._03 * m1._20 + _this6._13 * m1._21 + _this6._23 * m1._22 + _this6._33 * m1._23,_this6._03 * m1._30 + _this6._13 * m1._31 + _this6._23 * m1._32 + _this6._33 * m1._33);
		_this4.ctx.renderer2 = null;
		var g2 = canvas.get_g2();
		var trans = this.scaleMatrix;
		g2.transformationIndex++;
		if(g2.transformationIndex == g2.transformations.length) {
			g2.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this7 = g2.transformations[g2.transformationIndex];
		_this7._00 = trans._00;
		_this7._10 = trans._10;
		_this7._20 = trans._20;
		_this7._01 = trans._01;
		_this7._11 = trans._11;
		_this7._21 = trans._21;
		_this7._02 = trans._02;
		_this7._12 = trans._12;
		_this7._22 = trans._22;
		g2.setTransformation(g2.transformations[g2.transformationIndex]);
		var _g2 = 0;
		var _g3 = this.g2renderList;
		while(_g2 < _g3.length) _g3[_g2++](g2);
		g2.popTransformation();
	}
	,fillRenderList: function(rootList,screenSizeProvider) {
		var screenSizeX = screenSizeProvider.screenSizeX;
		var screenSizeY = screenSizeProvider.screenSizeY;
		this.renderRoots.length = banan_render_RenderSystem.DEBUG_DRAW_ONLY_SCENE ? 1 : rootList.length;
		var _g = 0;
		var _g1 = this.dynamicAtlases;
		while(_g < _g1.length) _g1[_g++].beforeCollect();
		var _g2 = 0;
		var _g3 = this.renderRoots.length;
		while(_g2 < _g3) {
			var i = _g2++;
			var root = rootList[i];
			var entity = root;
			var sThis = entity.__component__banan_backend_RenderRootEdge;
			if(sThis == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"RenderSystem.hx:158","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_backend_RenderRootEdge.__name__,null));
			}
			var renderRoot = sThis;
			var camera = renderRoot.camera;
			var screenRect_x = 0;
			var screenRect_y = 0;
			var topLeft_x = camera.cameraX + screenRect_x / camera.cameraScale;
			var topLeft_y = camera.cameraY + screenRect_y / camera.cameraScale;
			renderRoot.renderList.collectNodes(root,topLeft_x,topLeft_y,camera.cameraX + (screenRect_x + screenSizeX) / camera.cameraScale - topLeft_x,camera.cameraY + (screenRect_y + screenSizeY) / camera.cameraScale - topLeft_y);
			this.renderRoots[i] = renderRoot;
		}
		var _g4 = 0;
		var _g5 = this.dynamicAtlases;
		while(_g4 < _g5.length) _g5[_g4++].afterCollect();
	}
	,debugRenderPolygons: function(g2) {
		if(banan_render_RenderSystem.DEBUG_DRAW_INPUT_POLYGONS) {
			var _g = 0;
			var _g1 = this.rootList;
			while(_g < _g1.length) {
				var root = _g1[_g];
				++_g;
				var entity = root;
				if(entity.__component__banan_backend_RenderRootEdge == null) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(120,"RenderSystem.hx:176","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_backend_RenderRootEdge.__name__,null));
				}
				var _g1__current;
				var entity1 = root;
				var sThis = entity1.__component__banan_display_NodeEdge;
				if(sThis == null) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(120,"RenderSystem.hx:177","Unwrap edge error. Entity: " + entity1.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
				}
				var root1 = sThis;
				var _g1__into = true;
				var _g1__next = null;
				var _g1__isDone = false;
				var _g1__isBackward = false;
				var _g1__getGoInside = null;
				var _g1__nodeEdge = root1;
				var _g1__rootParent = root1.parent;
				if(_g1__isDone) {
					_g1__next = null;
				} else {
					var newNext = null;
					while(newNext == null) {
						if(_g1__into && !_g1__isBackward) {
							newNext = _g1__nodeEdge;
						}
						var firstChild = _g1__isBackward ? _g1__nodeEdge.lastChild : _g1__nodeEdge.firstChild;
						if(_g1__getGoInside != null && !_g1__getGoInside(_g1__nodeEdge)) {
							firstChild = null;
						}
						if(_g1__into && firstChild != null) {
							_g1__nodeEdge = firstChild;
						} else {
							if(_g1__isBackward) {
								newNext = _g1__nodeEdge;
							}
							var nextSibling = _g1__isBackward ? _g1__nodeEdge.prev : _g1__nodeEdge.next;
							if(_g1__nodeEdge.parent == _g1__rootParent) {
								_g1__isDone = true;
								break;
							} else if(nextSibling != null) {
								_g1__into = true;
								_g1__nodeEdge = nextSibling;
							} else {
								_g1__into = false;
								_g1__nodeEdge = _g1__nodeEdge.parent;
							}
						}
					}
					_g1__next = newNext;
				}
				while(_g1__next != null) {
					var sThis1 = _g1__next;
					if(sThis1 == null) {
						throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:911","",null));
					}
					_g1__current = sThis1;
					if(_g1__isDone) {
						_g1__next = null;
					} else {
						var newNext1 = null;
						while(newNext1 == null) {
							if(_g1__into && !_g1__isBackward) {
								newNext1 = _g1__nodeEdge;
							}
							var firstChild1 = _g1__isBackward ? _g1__nodeEdge.lastChild : _g1__nodeEdge.firstChild;
							if(_g1__getGoInside != null && !_g1__getGoInside(_g1__nodeEdge)) {
								firstChild1 = null;
							}
							if(_g1__into && firstChild1 != null) {
								_g1__nodeEdge = firstChild1;
							} else {
								if(_g1__isBackward) {
									newNext1 = _g1__nodeEdge;
								}
								var nextSibling1 = _g1__isBackward ? _g1__nodeEdge.prev : _g1__nodeEdge.next;
								if(_g1__nodeEdge.parent == _g1__rootParent) {
									_g1__isDone = true;
									break;
								} else if(nextSibling1 != null) {
									_g1__into = true;
									_g1__nodeEdge = nextSibling1;
								} else {
									_g1__into = false;
									_g1__nodeEdge = _g1__nodeEdge.parent;
								}
							}
						}
						_g1__next = newNext1;
					}
					var node = _g1__current;
					var sThis2 = node._entity;
					if(sThis2 == null) {
						throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
					}
					var this1 = sThis2.__component__banan_input_InputPolygonEdge;
					if(this1 != null) {
						var it = this1;
						var _this = it.includes;
						var polygon = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
						while(polygon.hasNext()) {
							var polygon1 = polygon.next();
							g2.begin(false);
							g2.set_color(it.isEnabled ? -1 : -65536);
							var _g2 = 0;
							var _g11 = polygon1.pointList.length;
							while(_g2 < _g11) {
								var i = _g2++;
								var p0 = polygon1.pointList[i];
								var p1 = polygon1.pointList[(i + 1) % polygon1.pointList.length];
								var x0 = p0.x;
								var y0 = p0.y;
								var x1 = p1.x;
								var y1 = p1.y;
								var current = node;
								var result = null;
								while(result == null && current != null) {
									var sThis3 = current._entity;
									if(sThis3 == null) {
										throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
									}
									result = sThis3.__component__banan_backend_RenderRootEdge;
									current = current.parent;
								}
								var sThis4 = result;
								if(sThis4 == null) {
									throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:399","",null));
								}
								if(node.globalTransformId == -1 || node.parent != node._globalTransformParent) {
									node.validateGlobalTransformRecursively();
								}
								var p00 = node._v00;
								var p10 = node._v10;
								var p20 = node._v20;
								var p01 = node._v01;
								var p11 = node._v11;
								var p21 = node._v21;
								if(p21 == null) {
									p21 = 0.0;
								}
								if(p11 == null) {
									p11 = 1.0;
								}
								if(p01 == null) {
									p01 = 0.0;
								}
								if(p20 == null) {
									p20 = 0.0;
								}
								if(p10 == null) {
									p10 = 0.0;
								}
								if(p00 == null) {
									p00 = 1.0;
								}
								var _this1 = sThis4.camera;
								var w = 0.0 * x0 + 0.0 * y0 + 1.0;
								var p0_x = ((p00 * x0 + p10 * y0 + p20) / w - _this1.cameraX) * _this1.cameraScale;
								var p0_y = ((p01 * x0 + p11 * y0 + p21) / w - _this1.cameraY) * _this1.cameraScale;
								var current1 = node;
								var result1 = null;
								while(result1 == null && current1 != null) {
									var sThis5 = current1._entity;
									if(sThis5 == null) {
										throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
									}
									result1 = sThis5.__component__banan_backend_RenderRootEdge;
									current1 = current1.parent;
								}
								var sThis6 = result1;
								if(sThis6 == null) {
									throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:399","",null));
								}
								if(node.globalTransformId == -1 || node.parent != node._globalTransformParent) {
									node.validateGlobalTransformRecursively();
								}
								var p001 = node._v00;
								var p101 = node._v10;
								var p201 = node._v20;
								var p011 = node._v01;
								var p111 = node._v11;
								var p211 = node._v21;
								if(p211 == null) {
									p211 = 0.0;
								}
								if(p111 == null) {
									p111 = 1.0;
								}
								if(p011 == null) {
									p011 = 0.0;
								}
								if(p201 == null) {
									p201 = 0.0;
								}
								if(p101 == null) {
									p101 = 0.0;
								}
								if(p001 == null) {
									p001 = 1.0;
								}
								var _this2 = sThis6.camera;
								var w1 = 0.0 * x1 + 0.0 * y1 + 1.0;
								g2.drawLine(p0_x,p0_y,((p001 * x1 + p101 * y1 + p201) / w1 - _this2.cameraX) * _this2.cameraScale,((p011 * x1 + p111 * y1 + p211) / w1 - _this2.cameraY) * _this2.cameraScale,2.0);
							}
							g2.end();
						}
					}
				}
			}
		}
	}
	,_debugFont: null
	,debugGetFont: function() {
		if(this._debugFont == null) {
			this._debugFont = this.fontModule.getDefaultFont();
		}
		return { font : this._debugFont, size : 12};
	}
	,makeModuleInfo: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["banan.font.FontModule"] != null) {
			_g.setReserved("banan.font.FontModule","fontModule");
		} else {
			_g.h["banan.font.FontModule"] = "fontModule";
		}
		if(__map_reserved["banan.resource.ResourceManager"] != null) {
			_g.setReserved("banan.resource.ResourceManager","resourceManager");
		} else {
			_g.h["banan.resource.ResourceManager"] = "resourceManager";
		}
		if(__map_reserved["banan.backend.IScreenSizeProvider"] != null) {
			_g.setReserved("banan.backend.IScreenSizeProvider","screenSizeProvider");
		} else {
			_g.h["banan.backend.IScreenSizeProvider"] = "screenSizeProvider";
		}
		if(__map_reserved["banan.render.render2.Render2Context"] != null) {
			_g.setReserved("banan.render.render2.Render2Context","render2Context");
		} else {
			_g.h["banan.render.render2.Render2Context"] = "render2Context";
		}
		return new banan_module_ModuleInfo("banan.render.RenderSystem",["banan.backend.IRenderSystem"],[],_g,["banan.font.FontModule","banan.resource.ResourceManager","banan.backend.IScreenSizeProvider","banan.render.render2.Render2Context"]);
	}
	,__class__: banan_render_RenderSystem
});
var banan_render_posteffect_PostEffect = function(type) {
	this.type = type;
	this.isValid = false;
	this.outImage = null;
	this.extraSize = 0;
};
$hxClasses["banan.render.posteffect.PostEffect"] = banan_render_posteffect_PostEffect;
banan_render_posteffect_PostEffect.__name__ = "banan.render.posteffect.PostEffect";
banan_render_posteffect_PostEffect.prototype = {
	type: null
	,isValid: null
	,outImage: null
	,extraSize: null
	,get_inImage: function() {
		return this.context.image;
	}
	,get_bounds: function() {
		return this.context.bounds;
	}
	,get_render2Context: function() {
		return this.context.render2Context;
	}
	,get_resourceManager: function() {
		return this.context.resourceManager;
	}
	,get_timeProvider: function() {
		return this.context.timeProvider;
	}
	,context: null
	,dispose: function() {
	}
	,invalidate: function() {
		this.isValid = false;
	}
	,validate: function(batchEntry) {
		if(!this.isValid) {
			this.isValid = this.validateInternal(batchEntry);
			return true;
		}
		return false;
	}
	,setContext: function(context) {
		this.context = context;
	}
	,isRemoved: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"PostEffect.hx:65","",null));
	}
	,validateInternal: function(batchEntry) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"PostEffect.hx:69","",null));
	}
	,__class__: banan_render_posteffect_PostEffect
	,__properties__: {get_timeProvider:"get_timeProvider",get_resourceManager:"get_resourceManager",get_render2Context:"get_render2Context",get_bounds:"get_bounds",get_inImage:"get_inImage"}
};
var banan_render_posteffect_RenderTexturePostEffect = function(type,shaderType) {
	banan_render_posteffect_PostEffect.call(this,type);
	this.token = new banan_resource_ResourceToken();
	this.shaderType = shaderType;
	this.material = null;
	this.rt = null;
};
$hxClasses["banan.render.posteffect.RenderTexturePostEffect"] = banan_render_posteffect_RenderTexturePostEffect;
banan_render_posteffect_RenderTexturePostEffect.__name__ = "banan.render.posteffect.RenderTexturePostEffect";
banan_render_posteffect_RenderTexturePostEffect.__super__ = banan_render_posteffect_PostEffect;
banan_render_posteffect_RenderTexturePostEffect.prototype = $extend(banan_render_posteffect_PostEffect.prototype,{
	token: null
	,shaderType: null
	,material: null
	,rt: null
	,dispose: function() {
		if(this.rt != null) {
			this.rt.release(this.token);
			this.outImage = this.rt = null;
		}
	}
	,setContext: function(context) {
		banan_render_posteffect_PostEffect.prototype.setContext.call(this,context);
		this.material = this.context.render2Context.materialFactory.initializeMaterial(new banan_render_render2_material_Material(),this.shaderType,banan_render_render2_material_EPrimitiveType.Quad);
	}
	,validateInternal: function(batchEntry) {
		var test = this.validateRt();
		if(test == null) {
			test = true;
		}
		batchEntry.isDirty = batchEntry.isDirty || test;
		var targetName = "" + this.type + " post effect's render textre";
		var _this = this.context.render2Context;
		var it = this.outImage.current.get_texture().data;
		var g4 = it != null ? it.get_g4() : null;
		var _this1 = _this.renderer2;
		_this1.batchSource.closeRenderRequests(_this1);
		_this1.rtStack.push(new banan_render_render2_RenderTarget().configure(targetName,g4,0));
		var renderer2 = _this.renderer2;
		var it1 = this.outImage.current.get_texture().data;
		var right = it1 != null ? it1.get_width() : null;
		var it2 = this.outImage.current.get_texture().data;
		var top = it2 != null ? it2.get_height() : null;
		var view = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
		renderer2.projStack.push(new kha_math_FastMatrix4(2 / right,0,0,-right / right,0,2.0 / top,0,-top / top,0,0,-0.002000200020002,-1.0002000200020003,0,0,0,1));
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this2 = renderer2.projStack.first();
		var m = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this2._00 * m._00 + _this2._10 * m._01 + _this2._20 * m._02 + _this2._30 * m._03,_this2._00 * m._10 + _this2._10 * m._11 + _this2._20 * m._12 + _this2._30 * m._13,_this2._00 * m._20 + _this2._10 * m._21 + _this2._20 * m._22 + _this2._30 * m._23,_this2._00 * m._30 + _this2._10 * m._31 + _this2._20 * m._32 + _this2._30 * m._33,_this2._01 * m._00 + _this2._11 * m._01 + _this2._21 * m._02 + _this2._31 * m._03,_this2._01 * m._10 + _this2._11 * m._11 + _this2._21 * m._12 + _this2._31 * m._13,_this2._01 * m._20 + _this2._11 * m._21 + _this2._21 * m._22 + _this2._31 * m._23,_this2._01 * m._30 + _this2._11 * m._31 + _this2._21 * m._32 + _this2._31 * m._33,_this2._02 * m._00 + _this2._12 * m._01 + _this2._22 * m._02 + _this2._32 * m._03,_this2._02 * m._10 + _this2._12 * m._11 + _this2._22 * m._12 + _this2._32 * m._13,_this2._02 * m._20 + _this2._12 * m._21 + _this2._22 * m._22 + _this2._32 * m._23,_this2._02 * m._30 + _this2._12 * m._31 + _this2._22 * m._32 + _this2._32 * m._33,_this2._03 * m._00 + _this2._13 * m._01 + _this2._23 * m._02 + _this2._33 * m._03,_this2._03 * m._10 + _this2._13 * m._11 + _this2._23 * m._12 + _this2._33 * m._13,_this2._03 * m._20 + _this2._13 * m._21 + _this2._23 * m._22 + _this2._33 * m._23,_this2._03 * m._30 + _this2._13 * m._31 + _this2._23 * m._32 + _this2._33 * m._33);
		renderer2.viewStack.push(view);
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this3 = renderer2.projStack.first();
		var m1 = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this3._00 * m1._00 + _this3._10 * m1._01 + _this3._20 * m1._02 + _this3._30 * m1._03,_this3._00 * m1._10 + _this3._10 * m1._11 + _this3._20 * m1._12 + _this3._30 * m1._13,_this3._00 * m1._20 + _this3._10 * m1._21 + _this3._20 * m1._22 + _this3._30 * m1._23,_this3._00 * m1._30 + _this3._10 * m1._31 + _this3._20 * m1._32 + _this3._30 * m1._33,_this3._01 * m1._00 + _this3._11 * m1._01 + _this3._21 * m1._02 + _this3._31 * m1._03,_this3._01 * m1._10 + _this3._11 * m1._11 + _this3._21 * m1._12 + _this3._31 * m1._13,_this3._01 * m1._20 + _this3._11 * m1._21 + _this3._21 * m1._22 + _this3._31 * m1._23,_this3._01 * m1._30 + _this3._11 * m1._31 + _this3._21 * m1._32 + _this3._31 * m1._33,_this3._02 * m1._00 + _this3._12 * m1._01 + _this3._22 * m1._02 + _this3._32 * m1._03,_this3._02 * m1._10 + _this3._12 * m1._11 + _this3._22 * m1._12 + _this3._32 * m1._13,_this3._02 * m1._20 + _this3._12 * m1._21 + _this3._22 * m1._22 + _this3._32 * m1._23,_this3._02 * m1._30 + _this3._12 * m1._31 + _this3._22 * m1._32 + _this3._32 * m1._33,_this3._03 * m1._00 + _this3._13 * m1._01 + _this3._23 * m1._02 + _this3._33 * m1._03,_this3._03 * m1._10 + _this3._13 * m1._11 + _this3._23 * m1._12 + _this3._33 * m1._13,_this3._03 * m1._20 + _this3._13 * m1._21 + _this3._23 * m1._22 + _this3._33 * m1._23,_this3._03 * m1._30 + _this3._13 * m1._31 + _this3._23 * m1._32 + _this3._33 * m1._33);
		var considerValidated = this.applyEffect(renderer2,batchEntry);
		renderer2.viewStack.pop();
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this4 = renderer2.projStack.first();
		var m2 = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this4._00 * m2._00 + _this4._10 * m2._01 + _this4._20 * m2._02 + _this4._30 * m2._03,_this4._00 * m2._10 + _this4._10 * m2._11 + _this4._20 * m2._12 + _this4._30 * m2._13,_this4._00 * m2._20 + _this4._10 * m2._21 + _this4._20 * m2._22 + _this4._30 * m2._23,_this4._00 * m2._30 + _this4._10 * m2._31 + _this4._20 * m2._32 + _this4._30 * m2._33,_this4._01 * m2._00 + _this4._11 * m2._01 + _this4._21 * m2._02 + _this4._31 * m2._03,_this4._01 * m2._10 + _this4._11 * m2._11 + _this4._21 * m2._12 + _this4._31 * m2._13,_this4._01 * m2._20 + _this4._11 * m2._21 + _this4._21 * m2._22 + _this4._31 * m2._23,_this4._01 * m2._30 + _this4._11 * m2._31 + _this4._21 * m2._32 + _this4._31 * m2._33,_this4._02 * m2._00 + _this4._12 * m2._01 + _this4._22 * m2._02 + _this4._32 * m2._03,_this4._02 * m2._10 + _this4._12 * m2._11 + _this4._22 * m2._12 + _this4._32 * m2._13,_this4._02 * m2._20 + _this4._12 * m2._21 + _this4._22 * m2._22 + _this4._32 * m2._23,_this4._02 * m2._30 + _this4._12 * m2._31 + _this4._22 * m2._32 + _this4._32 * m2._33,_this4._03 * m2._00 + _this4._13 * m2._01 + _this4._23 * m2._02 + _this4._33 * m2._03,_this4._03 * m2._10 + _this4._13 * m2._11 + _this4._23 * m2._12 + _this4._33 * m2._13,_this4._03 * m2._20 + _this4._13 * m2._21 + _this4._23 * m2._22 + _this4._33 * m2._23,_this4._03 * m2._30 + _this4._13 * m2._31 + _this4._23 * m2._32 + _this4._33 * m2._33);
		renderer2.projStack.pop();
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this5 = renderer2.projStack.first();
		var m3 = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this5._00 * m3._00 + _this5._10 * m3._01 + _this5._20 * m3._02 + _this5._30 * m3._03,_this5._00 * m3._10 + _this5._10 * m3._11 + _this5._20 * m3._12 + _this5._30 * m3._13,_this5._00 * m3._20 + _this5._10 * m3._21 + _this5._20 * m3._22 + _this5._30 * m3._23,_this5._00 * m3._30 + _this5._10 * m3._31 + _this5._20 * m3._32 + _this5._30 * m3._33,_this5._01 * m3._00 + _this5._11 * m3._01 + _this5._21 * m3._02 + _this5._31 * m3._03,_this5._01 * m3._10 + _this5._11 * m3._11 + _this5._21 * m3._12 + _this5._31 * m3._13,_this5._01 * m3._20 + _this5._11 * m3._21 + _this5._21 * m3._22 + _this5._31 * m3._23,_this5._01 * m3._30 + _this5._11 * m3._31 + _this5._21 * m3._32 + _this5._31 * m3._33,_this5._02 * m3._00 + _this5._12 * m3._01 + _this5._22 * m3._02 + _this5._32 * m3._03,_this5._02 * m3._10 + _this5._12 * m3._11 + _this5._22 * m3._12 + _this5._32 * m3._13,_this5._02 * m3._20 + _this5._12 * m3._21 + _this5._22 * m3._22 + _this5._32 * m3._23,_this5._02 * m3._30 + _this5._12 * m3._31 + _this5._22 * m3._32 + _this5._32 * m3._33,_this5._03 * m3._00 + _this5._13 * m3._01 + _this5._23 * m3._02 + _this5._33 * m3._03,_this5._03 * m3._10 + _this5._13 * m3._11 + _this5._23 * m3._12 + _this5._33 * m3._13,_this5._03 * m3._20 + _this5._13 * m3._21 + _this5._23 * m3._22 + _this5._33 * m3._23,_this5._03 * m3._30 + _this5._13 * m3._31 + _this5._23 * m3._32 + _this5._33 * m3._33);
		this.context.render2Context.renderer2.addEndRequest(false);
		return considerValidated;
	}
	,applyEffect: function(renderer2,batchEntry) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"RenderTexturePostEffect.hx:72","",null));
	}
	,validateRt: function() {
		var isValidated = false;
		if(this.rt != null) {
			var rt = this.rt;
			var tmp;
			var _this = this.context.bounds;
			if(rt.tSizeX == Math.ceil(_this.right) - Math.floor(_this.left)) {
				var _this1 = this.context.bounds;
				tmp = rt.tSizeY == Math.ceil(_this1.bottom) - Math.floor(_this1.top);
			} else {
				tmp = false;
			}
			if(!tmp) {
				isValidated = true;
				this.rt.release(this.token);
				var rt1 = this.rt;
				var _this2 = this.context.bounds;
				var sizeX = Math.ceil(_this2.right) - Math.floor(_this2.left);
				var _this3 = this.context.bounds;
				var sizeY = Math.ceil(_this3.bottom) - Math.floor(_this3.top);
				var tmp1;
				if(rt1.textureWidth < sizeX || rt1.textureHeight < sizeY) {
					tmp1 = false;
				} else {
					rt1.configure(0,0,sizeX,sizeY);
					tmp1 = true;
				}
				if(tmp1) {
					this.rt.claim(this.token);
				} else {
					this.outImage = this.rt = null;
				}
			}
		}
		if(this.rt == null) {
			isValidated = true;
			var _this4 = this.context.bounds;
			var _this5 = this.context.bounds;
			this.rt = this.context.resourceManager.getRenderTarget(Math.ceil(_this4.right) - Math.floor(_this4.left),Math.ceil(_this5.bottom) - Math.floor(_this5.top));
			this.rt.claim(this.token);
			this.outImage = this.rt;
		}
		return isValidated;
	}
	,__class__: banan_render_posteffect_RenderTexturePostEffect
});
var banan_render_posteffect_ColorTransformPostEffect = function() {
	banan_render_posteffect_RenderTexturePostEffect.call(this,3,banan_render_render2_material_EShaderType.ColorTransform);
	this.colorTransform = null;
};
$hxClasses["banan.render.posteffect.ColorTransformPostEffect"] = banan_render_posteffect_ColorTransformPostEffect;
banan_render_posteffect_ColorTransformPostEffect.__name__ = "banan.render.posteffect.ColorTransformPostEffect";
banan_render_posteffect_ColorTransformPostEffect.__super__ = banan_render_posteffect_RenderTexturePostEffect;
banan_render_posteffect_ColorTransformPostEffect.prototype = $extend(banan_render_posteffect_RenderTexturePostEffect.prototype,{
	colorTransform: null
	,configure: function(colorTransform) {
		var rhs = this.colorTransform;
		var result = true;
		var rhsimpl = rhs;
		if(colorTransform != null && rhsimpl != null) {
			var _g = 0;
			while(_g < 12) {
				var i = _g++;
				if(colorTransform[i] != rhs[i]) {
					result = false;
					break;
				}
			}
		} else {
			result = colorTransform == rhsimpl;
		}
		if(!result) {
			this.colorTransform = colorTransform;
			this.invalidate();
		}
	}
	,isRemoved: function() {
		return this.colorTransform == null;
	}
	,applyEffect: function(renderer2,batchEntry) {
		this.material.setTexture(this.context.image.current.get_texture()).setTextureAddressing(2).setColorTransform(this.colorTransform);
		var material = this.material;
		var _this = this.context.bounds;
		var sizeX = Math.ceil(_this.right) - Math.floor(_this.left);
		var _this1 = this.context.bounds;
		var sizeY = Math.ceil(_this1.bottom) - Math.floor(_this1.top);
		var rect_x = 0;
		var rect_y = 0;
		var _this2 = this.context.bounds;
		var sizeX1 = Math.ceil(_this2.right) - Math.floor(_this2.left);
		var it = this.context.image.current.get_texture().data;
		var sizeX2 = sizeX1 / (it != null ? it.get_width() : null);
		var _this3 = this.context.bounds;
		var sizeY1 = Math.ceil(_this3.bottom) - Math.floor(_this3.top);
		var it1 = this.context.image.current.get_texture().data;
		var sizeY2 = sizeY1 / (it1 != null ? it1.get_height() : null);
		var uvRect_x = 0;
		var uvRect_y = 0;
		var batch = renderer2.getBatchFor(material,6,batchEntry.themeId);
		if(batchEntry.check(batch,4,6)) {
			batchEntry.sync(batch,4,6);
		} else {
			batchEntry.isDirty = false;
		}
		var batch1 = batch;
		if(batchEntry.isDirty) {
			if(batch1._vertices == null) {
				batch1._vertices = batch1.vertexBuffer.lock();
				if(batch1.isDynamicIndices) {
					batch1._indices = batch1.indexBuffer.lock();
				}
			}
			var vbuff = batch1._vertices;
			var vfrom = batch1.vertexCount;
			var position = vfrom * 5;
			vbuff[position] = rect_x;
			vbuff[position + 1] = rect_y;
			vbuff[position + 2] = -5.0;
			vbuff[position + 3] = uvRect_x;
			vbuff[position + 4] = uvRect_y;
			var position1 = (vfrom + 1) * 5;
			vbuff[position1] = rect_x + sizeX;
			vbuff[position1 + 1] = rect_y;
			vbuff[position1 + 2] = -5.0;
			vbuff[position1 + 3] = uvRect_x + sizeX2;
			vbuff[position1 + 4] = uvRect_y;
			var position2 = (vfrom + 2) * 5;
			vbuff[position2] = rect_x + sizeX;
			vbuff[position2 + 1] = rect_y + sizeY;
			vbuff[position2 + 2] = -5.0;
			vbuff[position2 + 3] = uvRect_x + sizeX2;
			vbuff[position2 + 4] = uvRect_y + sizeY2;
			var position3 = (vfrom + 3) * 5;
			vbuff[position3] = rect_x;
			vbuff[position3 + 1] = rect_y + sizeY;
			vbuff[position3 + 2] = -5.0;
			vbuff[position3 + 3] = uvRect_x;
			vbuff[position3 + 4] = uvRect_y + sizeY2;
		}
		batchEntry.shiftCounters();
		return true;
	}
	,__class__: banan_render_posteffect_ColorTransformPostEffect
});
var banan_render_posteffect_OutlinePostEffect = function() {
	banan_render_posteffect_RenderTexturePostEffect.call(this,1,banan_render_render2_material_EShaderType.Outline);
	this.extraSize = banan_render_posteffect_OutlinePostEffect.OUTLINE_SIZE + banan_render_posteffect_OutlinePostEffect.MARGIN_SIZE;
	this.fadeDuration = null;
	this.color = null;
	this.alphaMultiplier = 0.0;
};
$hxClasses["banan.render.posteffect.OutlinePostEffect"] = banan_render_posteffect_OutlinePostEffect;
banan_render_posteffect_OutlinePostEffect.__name__ = "banan.render.posteffect.OutlinePostEffect";
banan_render_posteffect_OutlinePostEffect.__super__ = banan_render_posteffect_RenderTexturePostEffect;
banan_render_posteffect_OutlinePostEffect.prototype = $extend(banan_render_posteffect_RenderTexturePostEffect.prototype,{
	fadeDuration: null
	,color: null
	,alphaMultiplier: null
	,animation: null
	,configure: function(color,fadeDuration) {
		this.fadeDuration = fadeDuration;
		if(this.color != color) {
			this.color = color;
			var value = this.color == null ? 0.0 : 1.0;
			if(this.fadeDuration != null) {
				this.animation = banan_animation_AnimatedFloat.animateLinear(this.alphaMultiplier,value,1.0,this.fadeDuration);
			} else {
				this.animation = null;
				this.alphaMultiplier = value;
			}
			this.invalidate();
		}
	}
	,isRemoved: function() {
		if(this.color == null) {
			return this.alphaMultiplier == 0.0;
		} else {
			return false;
		}
	}
	,applyEffect: function(renderer2,batchEntry) {
		if(this.animation != null) {
			this.animation.update(this.context.timeProvider.provider.dt);
			this.alphaMultiplier = this.animation.easing.getValue(0.0);
			if(this.animation.isCompleted()) {
				this.animation = null;
			}
		}
		this.material.setTexture(this.context.image.current.get_texture()).setTextureAddressing(2).setAlphaMultiplier(this.alphaMultiplier);
		if(this.color != null) {
			this.material.setOutlineColor(this.color);
		}
		var material = this.material;
		var _this = this.context.bounds;
		var sizeX = Math.ceil(_this.right) - Math.floor(_this.left);
		var _this1 = this.context.bounds;
		var sizeY = Math.ceil(_this1.bottom) - Math.floor(_this1.top);
		var rect_x = 0;
		var rect_y = 0;
		var _this2 = this.context.bounds;
		var sizeX1 = Math.ceil(_this2.right) - Math.floor(_this2.left);
		var it = this.context.image.current.get_texture().data;
		var sizeX2 = sizeX1 / (it != null ? it.get_width() : null);
		var _this3 = this.context.bounds;
		var sizeY1 = Math.ceil(_this3.bottom) - Math.floor(_this3.top);
		var it1 = this.context.image.current.get_texture().data;
		var sizeY2 = sizeY1 / (it1 != null ? it1.get_height() : null);
		var uvRect_x = 0;
		var uvRect_y = 0;
		var batch = renderer2.getBatchFor(material,6,batchEntry.themeId);
		if(batchEntry.check(batch,4,6)) {
			batchEntry.sync(batch,4,6);
		} else {
			batchEntry.isDirty = false;
		}
		var batch1 = batch;
		if(batchEntry.isDirty) {
			if(batch1._vertices == null) {
				batch1._vertices = batch1.vertexBuffer.lock();
				if(batch1.isDynamicIndices) {
					batch1._indices = batch1.indexBuffer.lock();
				}
			}
			var vbuff = batch1._vertices;
			var vfrom = batch1.vertexCount;
			var position = vfrom * 5;
			vbuff[position] = rect_x;
			vbuff[position + 1] = rect_y;
			vbuff[position + 2] = -5.0;
			vbuff[position + 3] = uvRect_x;
			vbuff[position + 4] = uvRect_y;
			var position1 = (vfrom + 1) * 5;
			vbuff[position1] = rect_x + sizeX;
			vbuff[position1 + 1] = rect_y;
			vbuff[position1 + 2] = -5.0;
			vbuff[position1 + 3] = uvRect_x + sizeX2;
			vbuff[position1 + 4] = uvRect_y;
			var position2 = (vfrom + 2) * 5;
			vbuff[position2] = rect_x + sizeX;
			vbuff[position2 + 1] = rect_y + sizeY;
			vbuff[position2 + 2] = -5.0;
			vbuff[position2 + 3] = uvRect_x + sizeX2;
			vbuff[position2 + 4] = uvRect_y + sizeY2;
			var position3 = (vfrom + 3) * 5;
			vbuff[position3] = rect_x;
			vbuff[position3 + 1] = rect_y + sizeY;
			vbuff[position3 + 2] = -5.0;
			vbuff[position3 + 3] = uvRect_x;
			vbuff[position3 + 4] = uvRect_y + sizeY2;
		}
		batchEntry.shiftCounters();
		return this.animation == null;
	}
	,setAlphaMultiplier: function(value) {
		if(this.fadeDuration != null) {
			this.animation = banan_animation_AnimatedFloat.animateLinear(this.alphaMultiplier,value,1.0,this.fadeDuration);
		} else {
			this.animation = null;
			this.alphaMultiplier = value;
		}
	}
	,__class__: banan_render_posteffect_OutlinePostEffect
});
var banan_render_posteffect_PostEffectContext = function() {
	this.globalToNode = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
};
$hxClasses["banan.render.posteffect.PostEffectContext"] = banan_render_posteffect_PostEffectContext;
banan_render_posteffect_PostEffectContext.__name__ = "banan.render.posteffect.PostEffectContext";
banan_render_posteffect_PostEffectContext.prototype = {
	image: null
	,bounds: null
	,globalToNode: null
	,render2Context: null
	,resourceManager: null
	,timeProvider: null
	,__class__: banan_render_posteffect_PostEffectContext
};
var banan_render_posteffect_XRayPostEffect = function() {
	banan_render_posteffect_RenderTexturePostEffect.call(this,2,banan_render_render2_material_EShaderType.XRay);
	this.xRayConfig = null;
};
$hxClasses["banan.render.posteffect.XRayPostEffect"] = banan_render_posteffect_XRayPostEffect;
banan_render_posteffect_XRayPostEffect.__name__ = "banan.render.posteffect.XRayPostEffect";
banan_render_posteffect_XRayPostEffect.__super__ = banan_render_posteffect_RenderTexturePostEffect;
banan_render_posteffect_XRayPostEffect.prototype = $extend(banan_render_posteffect_RenderTexturePostEffect.prototype,{
	xRayConfig: null
	,configure: function(xRayConfig) {
		if(this.xRayConfig != xRayConfig) {
			this.xRayConfig = xRayConfig;
			this.invalidate();
		}
	}
	,isRemoved: function() {
		return this.xRayConfig == null;
	}
	,applyEffect: function(renderer2,batchEntry) {
		var _gthis = this;
		var conf1 = this.xRayConfig;
		var it = this.material.xRayConfig;
		var conf2 = it != null ? it : { sourceX : NaN, sourceY : NaN, radius : NaN};
		conf2.radius = conf1.radius;
		var _this = this.context.globalToNode;
		var x = conf1.sourceX;
		var y = conf1.sourceY;
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var value_z = 0;
		var value_w = 1;
		var product = new kha_math_FastVector4();
		product.x = _this._00 * value_x + _this._10 * value_y + _this._20 * value_z + _this._30 * value_w;
		product.y = _this._01 * value_x + _this._11 * value_y + _this._21 * value_z + _this._31 * value_w;
		product.z = _this._02 * value_x + _this._12 * value_y + _this._22 * value_z + _this._32 * value_w;
		product.w = _this._03 * value_x + _this._13 * value_y + _this._23 * value_z + _this._33 * value_w;
		conf2.sourceX = product.x - _gthis.context.bounds.left;
		conf2.sourceY = product.y - _gthis.context.bounds.top;
		this.material.setTexture(this.context.image.current.get_texture()).setTextureAddressing(2).setXRayConfig(conf2);
		var material = this.material;
		var _this1 = this.context.bounds;
		var sizeX = Math.ceil(_this1.right) - Math.floor(_this1.left);
		var _this2 = this.context.bounds;
		var sizeY = Math.ceil(_this2.bottom) - Math.floor(_this2.top);
		var rect_x = 0;
		var rect_y = 0;
		var _this3 = this.context.bounds;
		var sizeX1 = Math.ceil(_this3.right) - Math.floor(_this3.left);
		var it1 = this.context.image.current.get_texture().data;
		var sizeX2 = sizeX1 / (it1 != null ? it1.get_width() : null);
		var _this4 = this.context.bounds;
		var sizeY1 = Math.ceil(_this4.bottom) - Math.floor(_this4.top);
		var it2 = this.context.image.current.get_texture().data;
		var sizeY2 = sizeY1 / (it2 != null ? it2.get_height() : null);
		var uvRect_x = 0;
		var uvRect_y = 0;
		var batch = renderer2.getBatchFor(material,6,batchEntry.themeId);
		if(batchEntry.check(batch,4,6)) {
			batchEntry.sync(batch,4,6);
		} else {
			batchEntry.isDirty = false;
		}
		var batch1 = batch;
		if(batchEntry.isDirty) {
			if(batch1._vertices == null) {
				batch1._vertices = batch1.vertexBuffer.lock();
				if(batch1.isDynamicIndices) {
					batch1._indices = batch1.indexBuffer.lock();
				}
			}
			var vbuff = batch1._vertices;
			var vfrom = batch1.vertexCount;
			var position = vfrom * 5;
			vbuff[position] = rect_x;
			vbuff[position + 1] = rect_y;
			vbuff[position + 2] = -5.0;
			vbuff[position + 3] = uvRect_x;
			vbuff[position + 4] = uvRect_y;
			var position1 = (vfrom + 1) * 5;
			vbuff[position1] = rect_x + sizeX;
			vbuff[position1 + 1] = rect_y;
			vbuff[position1 + 2] = -5.0;
			vbuff[position1 + 3] = uvRect_x + sizeX2;
			vbuff[position1 + 4] = uvRect_y;
			var position2 = (vfrom + 2) * 5;
			vbuff[position2] = rect_x + sizeX;
			vbuff[position2 + 1] = rect_y + sizeY;
			vbuff[position2 + 2] = -5.0;
			vbuff[position2 + 3] = uvRect_x + sizeX2;
			vbuff[position2 + 4] = uvRect_y + sizeY2;
			var position3 = (vfrom + 3) * 5;
			vbuff[position3] = rect_x;
			vbuff[position3 + 1] = rect_y + sizeY;
			vbuff[position3 + 2] = -5.0;
			vbuff[position3 + 3] = uvRect_x;
			vbuff[position3 + 4] = uvRect_y + sizeY2;
		}
		batchEntry.shiftCounters();
		return true;
	}
	,__class__: banan_render_posteffect_XRayPostEffect
});
var banan_render_render2_IBatchRenderer = function() { };
$hxClasses["banan.render.render2.IBatchRenderer"] = banan_render_render2_IBatchRenderer;
banan_render_render2_IBatchRenderer.__name__ = "banan.render.render2.IBatchRenderer";
banan_render_render2_IBatchRenderer.__isInterface__ = true;
banan_render_render2_IBatchRenderer.prototype = {
	addDrawRequest: null
	,flush: null
	,__class__: banan_render_render2_IBatchRenderer
};
var banan_render_render2__$Render2Context_DrawableId_$Impl_$ = {};
$hxClasses["banan.render.render2._Render2Context.DrawableId_Impl_"] = banan_render_render2__$Render2Context_DrawableId_$Impl_$;
banan_render_render2__$Render2Context_DrawableId_$Impl_$.__name__ = "banan.render.render2._Render2Context.DrawableId_Impl_";
banan_render_render2__$Render2Context_DrawableId_$Impl_$._new = function(v) {
	return v;
};
var banan_render_render2_Render2Context = function(sigTpl,updatePriority) {
	banan_module_Module.call(this,updatePriority);
	this.sigTpl = new haxe_Template(sigTpl);
	this.batchThemeManifest = this.getDefaultBatchThemeManifest();
};
$hxClasses["banan.render.render2.Render2Context"] = banan_render_render2_Render2Context;
banan_render_render2_Render2Context.__name__ = "banan.render.render2.Render2Context";
banan_render_render2_Render2Context.__super__ = banan_module_Module;
banan_render_render2_Render2Context.prototype = $extend(banan_module_Module.prototype,{
	materialFactory: null
	,sigTpl: null
	,drawableIdSource: null
	,sharedRt: null
	,renderer2: null
	,batchThemeManifest: null
	,initialize: function() {
		this.materialFactory = new banan_render_render2_material_MaterialFactory();
		this.drawableIdSource = new banan_basis_IdSource(1);
		this.sharedRt = new banan_render_render2_SharedRenderTarget();
		this.renderer2 = this.createRenderer(new banan_render_render2_batch_SerialBatchSource(this.batchThemeManifest));
		this.moduleInfo.setInitialized();
	}
	,addConfig: function(name,primitiveCount,shortName) {
		var index = this.batchThemeManifest.configs.length;
		var _this = this.batchThemeManifest.customIdBindings;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,index);
		} else {
			_this.h[name] = index;
		}
		this.batchThemeManifest.configs[index] = { primitiveCount : primitiveCount, shortName : shortName, sigTpl : this.sigTpl};
	}
	,createRenderer: function(batchSource) {
		return new banan_render_render2_Renderer2(batchSource,this.sharedRt);
	}
	,getBatchThemeId: function(batchTheme) {
		return this.batchThemeManifest.themeIdBinding.get(batchTheme);
	}
	,getCustomBatchThemeId: function(customBatchTheme) {
		var _this = this.batchThemeManifest.customIdBindings;
		if(__map_reserved[customBatchTheme] != null) {
			return _this.getReserved(customBatchTheme);
		} else {
			return _this.h[customBatchTheme];
		}
	}
	,getDrawableId: function() {
		return banan_render_render2__$Render2Context_DrawableId_$Impl_$._new(this.drawableIdSource.next++);
	}
	,beginRender: function(targetName,g4,clearColor) {
		var _this = this.renderer2;
		_this.batchSource.closeRenderRequests(_this);
		_this.rtStack.push(new banan_render_render2_RenderTarget().configure(targetName,g4,clearColor));
		return this.renderer2;
	}
	,endRender: function(doFlush) {
		if(doFlush == null) {
			doFlush = false;
		}
		this.renderer2.addEndRequest(doFlush);
	}
	,clear: function(g4,clearColor) {
		var rt = new banan_render_render2_RenderTarget().configure("just texture clearing",g4,clearColor);
		this.sharedRt.switchRt(rt);
		this.sharedRt.switchRt(null);
	}
	,getDefaultBatchThemeManifest: function() {
		var _g = new haxe_ds_EnumValueMap();
		_g.set(banan_render_render2_batch_EBatchTheme.Default,0);
		_g.set(banan_render_render2_batch_EBatchTheme.Debug,1);
		_g.set(banan_render_render2_batch_EBatchTheme.Jetgui,2);
		_g.set(banan_render_render2_batch_EBatchTheme.PostEffect,3);
		_g.set(banan_render_render2_batch_EBatchTheme.JetguiText,4);
		var batchThemeManifest = new haxe_ds_StringMap();
		var _g1 = new haxe_ds_EnumValueMap();
		_g1.set(banan_render_render2_material_EPrimitiveType.Quad,1000);
		_g1.set(banan_render_render2_material_EPrimitiveType.Triangle,2000);
		var batchThemeManifest1 = { primitiveCount : _g1, shortName : "oth", sigTpl : this.sigTpl};
		var _g2 = new haxe_ds_EnumValueMap();
		_g2.set(banan_render_render2_material_EPrimitiveType.Quad,500);
		_g2.set(banan_render_render2_material_EPrimitiveType.Triangle,100);
		var batchThemeManifest2 = { primitiveCount : _g2, shortName : "deb", sigTpl : this.sigTpl};
		var _g3 = new haxe_ds_EnumValueMap();
		_g3.set(banan_render_render2_material_EPrimitiveType.Quad,500);
		_g3.set(banan_render_render2_material_EPrimitiveType.Triangle,1000);
		var batchThemeManifest3 = { primitiveCount : _g3, shortName : "jet", sigTpl : this.sigTpl};
		var _g4 = new haxe_ds_EnumValueMap();
		_g4.set(banan_render_render2_material_EPrimitiveType.Quad,50);
		_g4.set(banan_render_render2_material_EPrimitiveType.Triangle,100);
		var batchThemeManifest4 = { primitiveCount : _g4, shortName : "eff", sigTpl : this.sigTpl};
		var _g5 = new haxe_ds_EnumValueMap();
		_g5.set(banan_render_render2_material_EPrimitiveType.Quad,1000);
		_g5.set(banan_render_render2_material_EPrimitiveType.Triangle,100);
		return { themeIdBinding : _g, customIdBindings : batchThemeManifest, configs : [batchThemeManifest1,batchThemeManifest2,batchThemeManifest3,batchThemeManifest4,{ primitiveCount : _g5, shortName : "jtx", sigTpl : this.sigTpl}]};
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("banan.render.render2.Render2Context",[],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: banan_render_render2_Render2Context
});
var banan_render_render2_Render2Helper = function() { };
$hxClasses["banan.render.render2.Render2Helper"] = banan_render_render2_Render2Helper;
banan_render_render2_Render2Helper.__name__ = "banan.render.render2.Render2Helper";
var banan_render_render2_RenderTarget = function() {
};
$hxClasses["banan.render.render2.RenderTarget"] = banan_render_render2_RenderTarget;
banan_render_render2_RenderTarget.__name__ = "banan.render.render2.RenderTarget";
banan_render_render2_RenderTarget.prototype = {
	name: null
	,g4: null
	,clearColor: null
	,clearCount: null
	,configure: function(name,g4,clearColor) {
		this.name = name;
		this.g4 = g4;
		this.clearColor = clearColor;
		this.clearCount = 0;
		return this;
	}
	,begin: function() {
		this.g4.begin();
		if(this.clearColor != null && this.clearCount == 0) {
			this.g4.clear(this.clearColor);
		}
		this.clearCount++;
	}
	,end: function() {
		this.g4.end();
	}
	,__class__: banan_render_render2_RenderTarget
};
var banan_render_render2_Renderer2 = function(batchSource,sharedRt) {
	this.projStack = new haxe_ds_List();
	this.projStack.push(new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1));
	this.viewStack = new haxe_ds_List();
	this.viewStack.push(new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1));
	this.mvp = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.batchSource = batchSource;
	this.sharedRt = sharedRt;
	this.requestFactory = new banan_render_render2_request_RenderRequestFactory();
	this.requests = [];
	this.requestsLength = 0;
	this.rtStack = new haxe_ds_List();
};
$hxClasses["banan.render.render2.Renderer2"] = banan_render_render2_Renderer2;
banan_render_render2_Renderer2.__name__ = "banan.render.render2.Renderer2";
banan_render_render2_Renderer2.__interfaces__ = [banan_render_render2_IBatchRenderer];
banan_render_render2_Renderer2.prototype = {
	projStack: null
	,viewStack: null
	,mvp: null
	,batchSource: null
	,sharedRt: null
	,requestFactory: null
	,requests: null
	,requestsLength: null
	,rtStack: null
	,pushView: function(view) {
		this.viewStack.push(view);
		this.batchSource.closeRenderRequests(this);
		var _this = this.projStack.first();
		var m = this.viewStack.first();
		this.mvp = new kha_math_FastMatrix4(_this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02 + _this._30 * m._03,_this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12 + _this._30 * m._13,_this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22 + _this._30 * m._23,_this._00 * m._30 + _this._10 * m._31 + _this._20 * m._32 + _this._30 * m._33,_this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02 + _this._31 * m._03,_this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12 + _this._31 * m._13,_this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22 + _this._31 * m._23,_this._01 * m._30 + _this._11 * m._31 + _this._21 * m._32 + _this._31 * m._33,_this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02 + _this._32 * m._03,_this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12 + _this._32 * m._13,_this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22 + _this._32 * m._23,_this._02 * m._30 + _this._12 * m._31 + _this._22 * m._32 + _this._32 * m._33,_this._03 * m._00 + _this._13 * m._01 + _this._23 * m._02 + _this._33 * m._03,_this._03 * m._10 + _this._13 * m._11 + _this._23 * m._12 + _this._33 * m._13,_this._03 * m._20 + _this._13 * m._21 + _this._23 * m._22 + _this._33 * m._23,_this._03 * m._30 + _this._13 * m._31 + _this._23 * m._32 + _this._33 * m._33);
	}
	,popView: function() {
		this.viewStack.pop();
		this.batchSource.closeRenderRequests(this);
		var _this = this.projStack.first();
		var m = this.viewStack.first();
		this.mvp = new kha_math_FastMatrix4(_this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02 + _this._30 * m._03,_this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12 + _this._30 * m._13,_this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22 + _this._30 * m._23,_this._00 * m._30 + _this._10 * m._31 + _this._20 * m._32 + _this._30 * m._33,_this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02 + _this._31 * m._03,_this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12 + _this._31 * m._13,_this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22 + _this._31 * m._23,_this._01 * m._30 + _this._11 * m._31 + _this._21 * m._32 + _this._31 * m._33,_this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02 + _this._32 * m._03,_this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12 + _this._32 * m._13,_this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22 + _this._32 * m._23,_this._02 * m._30 + _this._12 * m._31 + _this._22 * m._32 + _this._32 * m._33,_this._03 * m._00 + _this._13 * m._01 + _this._23 * m._02 + _this._33 * m._03,_this._03 * m._10 + _this._13 * m._11 + _this._23 * m._12 + _this._33 * m._13,_this._03 * m._20 + _this._13 * m._21 + _this._23 * m._22 + _this._33 * m._23,_this._03 * m._30 + _this._13 * m._31 + _this._23 * m._32 + _this._33 * m._33);
	}
	,pushProjection: function(proj) {
		this.projStack.push(proj);
		this.batchSource.closeRenderRequests(this);
		var _this = this.projStack.first();
		var m = this.viewStack.first();
		this.mvp = new kha_math_FastMatrix4(_this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02 + _this._30 * m._03,_this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12 + _this._30 * m._13,_this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22 + _this._30 * m._23,_this._00 * m._30 + _this._10 * m._31 + _this._20 * m._32 + _this._30 * m._33,_this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02 + _this._31 * m._03,_this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12 + _this._31 * m._13,_this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22 + _this._31 * m._23,_this._01 * m._30 + _this._11 * m._31 + _this._21 * m._32 + _this._31 * m._33,_this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02 + _this._32 * m._03,_this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12 + _this._32 * m._13,_this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22 + _this._32 * m._23,_this._02 * m._30 + _this._12 * m._31 + _this._22 * m._32 + _this._32 * m._33,_this._03 * m._00 + _this._13 * m._01 + _this._23 * m._02 + _this._33 * m._03,_this._03 * m._10 + _this._13 * m._11 + _this._23 * m._12 + _this._33 * m._13,_this._03 * m._20 + _this._13 * m._21 + _this._23 * m._22 + _this._33 * m._23,_this._03 * m._30 + _this._13 * m._31 + _this._23 * m._32 + _this._33 * m._33);
	}
	,popProjection: function() {
		this.projStack.pop();
		this.batchSource.closeRenderRequests(this);
		var _this = this.projStack.first();
		var m = this.viewStack.first();
		this.mvp = new kha_math_FastMatrix4(_this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02 + _this._30 * m._03,_this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12 + _this._30 * m._13,_this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22 + _this._30 * m._23,_this._00 * m._30 + _this._10 * m._31 + _this._20 * m._32 + _this._30 * m._33,_this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02 + _this._31 * m._03,_this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12 + _this._31 * m._13,_this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22 + _this._31 * m._23,_this._01 * m._30 + _this._11 * m._31 + _this._21 * m._32 + _this._31 * m._33,_this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02 + _this._32 * m._03,_this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12 + _this._32 * m._13,_this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22 + _this._32 * m._23,_this._02 * m._30 + _this._12 * m._31 + _this._22 * m._32 + _this._32 * m._33,_this._03 * m._00 + _this._13 * m._01 + _this._23 * m._02 + _this._33 * m._03,_this._03 * m._10 + _this._13 * m._11 + _this._23 * m._12 + _this._33 * m._13,_this._03 * m._20 + _this._13 * m._21 + _this._23 * m._22 + _this._33 * m._23,_this._03 * m._30 + _this._13 * m._31 + _this._23 * m._32 + _this._33 * m._33);
	}
	,flush: function() {
		this.batchSource.rendererIsFlushing(this);
		var _g = 0;
		var _g1 = this.requestsLength;
		while(_g < _g1) {
			var i = _g++;
			this.sharedRt.switchRt(this.requests[i].rt);
			this.requests[i].process();
		}
		this.requestsLength = 0;
		this.sharedRt.switchRt(null);
		this.requestFactory.resetPools();
	}
	,addBeginRequest: function(targetName,g4,clearColor) {
		this.batchSource.closeRenderRequests(this);
		this.rtStack.push(new banan_render_render2_RenderTarget().configure(targetName,g4,clearColor));
	}
	,addDrawRequest: function(batch,from,to,material) {
		var tmp = this.requests;
		var tmp1 = this.requestsLength++;
		var _this = this.requestFactory;
		var rt = this.rtStack.first();
		var it = _this.drawRequests[_this.drawRequestLength];
		var drawRequest = (it != null ? it : _this.drawRequests[_this.drawRequestLength] = new banan_render_render2_request_DrawRequest()).configure(rt,batch,from,to,material,this.mvp);
		_this.drawRequestLength++;
		tmp[tmp1] = drawRequest;
	}
	,addScissorRequest: function(x,y,w,h) {
		this.batchSource.closeRenderRequests(this);
		var tmp = this.requests;
		var tmp1 = this.requestsLength++;
		var _this = this.requestFactory;
		var rt = this.rtStack.first();
		var it = _this.scissorRequests[_this.scissorRequestLength];
		var scissorRequest = (it != null ? it : _this.scissorRequests[_this.scissorRequestLength] = new banan_render_render2_request_ScissorRequest()).configure(rt,x,y,w,h);
		_this.scissorRequestLength++;
		tmp[tmp1] = scissorRequest;
	}
	,addDisableScissorRequest: function() {
		this.batchSource.closeRenderRequests(this);
		var tmp = this.requests;
		var tmp1 = this.requestsLength++;
		var _this = this.requestFactory;
		var rt = this.rtStack.first();
		var it = _this.disableScissorRequests[_this.disableScissorRequestLength];
		var disableScissorRequest = (it != null ? it : _this.disableScissorRequests[_this.disableScissorRequestLength] = new banan_render_render2_request_DisableScissorRequest()).configure(rt);
		_this.disableScissorRequestLength++;
		tmp[tmp1] = disableScissorRequest;
	}
	,addEndRequest: function(doFlush) {
		this.batchSource.closeRenderRequests(this);
		this.rtStack.pop();
		if(doFlush) {
			this.flush();
		}
	}
	,getBatchFor: function(material,indexCount,themeId) {
		return this.batchSource.getFor(material,this,indexCount,themeId);
	}
	,writeMvp: function() {
		this.batchSource.closeRenderRequests(this);
		var _this = this.projStack.first();
		var m = this.viewStack.first();
		this.mvp = new kha_math_FastMatrix4(_this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02 + _this._30 * m._03,_this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12 + _this._30 * m._13,_this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22 + _this._30 * m._23,_this._00 * m._30 + _this._10 * m._31 + _this._20 * m._32 + _this._30 * m._33,_this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02 + _this._31 * m._03,_this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12 + _this._31 * m._13,_this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22 + _this._31 * m._23,_this._01 * m._30 + _this._11 * m._31 + _this._21 * m._32 + _this._31 * m._33,_this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02 + _this._32 * m._03,_this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12 + _this._32 * m._13,_this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22 + _this._32 * m._23,_this._02 * m._30 + _this._12 * m._31 + _this._22 * m._32 + _this._32 * m._33,_this._03 * m._00 + _this._13 * m._01 + _this._23 * m._02 + _this._33 * m._03,_this._03 * m._10 + _this._13 * m._11 + _this._23 * m._12 + _this._33 * m._13,_this._03 * m._20 + _this._13 * m._21 + _this._23 * m._22 + _this._33 * m._23,_this._03 * m._30 + _this._13 * m._31 + _this._23 * m._32 + _this._33 * m._33);
	}
	,__class__: banan_render_render2_Renderer2
};
var banan_render_render2_SharedRenderTarget = function() {
};
$hxClasses["banan.render.render2.SharedRenderTarget"] = banan_render_render2_SharedRenderTarget;
banan_render_render2_SharedRenderTarget.__name__ = "banan.render.render2.SharedRenderTarget";
banan_render_render2_SharedRenderTarget.prototype = {
	current: null
	,switchRt: function(rt) {
		if(rt != this.current) {
			if(this.current != null) {
				this.current.end();
			}
			this.current = rt;
			if(this.current != null) {
				this.current.begin();
			}
		}
	}
	,__class__: banan_render_render2_SharedRenderTarget
};
var banan_render_render2_atlas_Chunk = function(id,batchEntry) {
	this.usageCounter = 0;
	this.id = id;
	this.batchEntry = batchEntry;
	this.batchEntry.isDirty = true;
	this.rect = null;
	this.target = null;
	this.alias = null;
	this.isDirty = true;
	if(this.usageCounter != 0) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Chunk.hx:38","usageCounter == 0",null));
	}
};
$hxClasses["banan.render.render2.atlas.Chunk"] = banan_render_render2_atlas_Chunk;
banan_render_render2_atlas_Chunk.__name__ = "banan.render.render2.atlas.Chunk";
banan_render_render2_atlas_Chunk.prototype = {
	id: null
	,batchEntry: null
	,rect: null
	,target: null
	,alias: null
	,isDirty: null
	,usageCounter: null
	,reset: function() {
		this.batchEntry.isDirty = true;
		this.rect = null;
		this.target = null;
		this.alias = null;
		this.isDirty = true;
		if(this.usageCounter != 0) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Chunk.hx:38","usageCounter == 0",null));
		}
	}
	,markDirty: function() {
		this.isDirty = true;
	}
	,markNotDirty: function() {
		this.isDirty = false;
	}
	,__class__: banan_render_render2_atlas_Chunk
};
var banan_render_render2_atlas_DynamicAtlas = function(render2Context,resourceManager) {
	var tpl = new haxe_Template("::shortName::::id::");
	this.batchSource = new banan_render_render2_atlas_ParallelBatchSource([{ poolSize : 1, shortName : "cle", sigTpl : tpl, primitiveCount : 100},{ poolSize : 10, shortName : "mai", sigTpl : tpl, primitiveCount : 500},{ poolSize : 5, shortName : "spi", sigTpl : tpl, primitiveCount : 1000},{ poolSize : 2, shortName : "fog", sigTpl : tpl, primitiveCount : 200}]);
	this.chunkIdSource = new banan_basis_IdSource();
	this.chunkPool = new haxe_ds_List();
	this.chunkMap = new haxe_ds_StringMap();
	this.clearTexture = resourceManager.getFillImage(0).get_texture();
	this.clearMaterial = banan_render_render2_material_MaterialHelper.makeCopyMaterial(render2Context.materialFactory,banan_render_render2_material_EPrimitiveType.Quad,null,this.clearTexture).setTextureAddressing(0);
	this.target = resourceManager.getRenderTarget(4096,4096,true);
	this.rectPacker = new banan_rectpack_RectPacker(this.target.tSizeX,this.target.tSizeY);
	this.token = new banan_resource_ResourceToken();
	this.render2Context = render2Context;
	this.releaseSet = new haxe_ds_IntMap();
	this.releaseSetSize = 0;
	this.isCollecting = false;
	this.clearTexture.claim(this.token);
	this.target.claim(this.token);
	this.target.clear(this.token);
	this.renderer = render2Context.createRenderer(this.batchSource);
	var _this = this.renderer;
	_this.viewStack.push(new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1));
	_this.batchSource.closeRenderRequests(_this);
	var _this1 = _this.projStack.first();
	var m = _this.viewStack.first();
	_this.mvp = new kha_math_FastMatrix4(_this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03,_this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13,_this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23,_this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33,_this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03,_this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13,_this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23,_this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33,_this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03,_this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13,_this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23,_this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33,_this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03,_this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13,_this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23,_this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33);
	var _this2 = this.renderer;
	var right = this.target.tSizeX;
	var top = this.target.tSizeY;
	_this2.projStack.push(new kha_math_FastMatrix4(2 / right,0,0,-right / right,0,2.0 / top,0,-top / top,0,0,-0.002000200020002,-1.0002000200020003,0,0,0,1));
	_this2.batchSource.closeRenderRequests(_this2);
	var _this3 = _this2.projStack.first();
	var m1 = _this2.viewStack.first();
	_this2.mvp = new kha_math_FastMatrix4(_this3._00 * m1._00 + _this3._10 * m1._01 + _this3._20 * m1._02 + _this3._30 * m1._03,_this3._00 * m1._10 + _this3._10 * m1._11 + _this3._20 * m1._12 + _this3._30 * m1._13,_this3._00 * m1._20 + _this3._10 * m1._21 + _this3._20 * m1._22 + _this3._30 * m1._23,_this3._00 * m1._30 + _this3._10 * m1._31 + _this3._20 * m1._32 + _this3._30 * m1._33,_this3._01 * m1._00 + _this3._11 * m1._01 + _this3._21 * m1._02 + _this3._31 * m1._03,_this3._01 * m1._10 + _this3._11 * m1._11 + _this3._21 * m1._12 + _this3._31 * m1._13,_this3._01 * m1._20 + _this3._11 * m1._21 + _this3._21 * m1._22 + _this3._31 * m1._23,_this3._01 * m1._30 + _this3._11 * m1._31 + _this3._21 * m1._32 + _this3._31 * m1._33,_this3._02 * m1._00 + _this3._12 * m1._01 + _this3._22 * m1._02 + _this3._32 * m1._03,_this3._02 * m1._10 + _this3._12 * m1._11 + _this3._22 * m1._12 + _this3._32 * m1._13,_this3._02 * m1._20 + _this3._12 * m1._21 + _this3._22 * m1._22 + _this3._32 * m1._23,_this3._02 * m1._30 + _this3._12 * m1._31 + _this3._22 * m1._32 + _this3._32 * m1._33,_this3._03 * m1._00 + _this3._13 * m1._01 + _this3._23 * m1._02 + _this3._33 * m1._03,_this3._03 * m1._10 + _this3._13 * m1._11 + _this3._23 * m1._12 + _this3._33 * m1._13,_this3._03 * m1._20 + _this3._13 * m1._21 + _this3._23 * m1._22 + _this3._33 * m1._23,_this3._03 * m1._30 + _this3._13 * m1._31 + _this3._23 * m1._32 + _this3._33 * m1._33);
};
$hxClasses["banan.render.render2.atlas.DynamicAtlas"] = banan_render_render2_atlas_DynamicAtlas;
banan_render_render2_atlas_DynamicAtlas.__name__ = "banan.render.render2.atlas.DynamicAtlas";
banan_render_render2_atlas_DynamicAtlas.prototype = {
	renderer: null
	,batchSource: null
	,chunkIdSource: null
	,chunkPool: null
	,chunkMap: null
	,clearTexture: null
	,clearMaterial: null
	,target: null
	,rectPacker: null
	,token: null
	,render2Context: null
	,releaseSet: null
	,releaseSetSize: null
	,isCollecting: null
	,dispose: function() {
		this.batchSource.dispose();
		this.clearTexture.release(this.token);
		this.target.release(this.token);
	}
	,beforeCollect: function() {
		var _this = this.renderer;
		var it = this.target.current.get_texture().data;
		var g4 = it != null ? it.get_g4() : null;
		_this.batchSource.closeRenderRequests(_this);
		_this.rtStack.push(new banan_render_render2_RenderTarget().configure("dynamic atlas",g4,null));
		this.isCollecting = true;
	}
	,afterCollect: function() {
		this.renderer.addEndRequest(true);
		this.isCollecting = false;
	}
	,clearChunk: function(chunk) {
		if(!this.isCollecting) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"DynamicAtlas.hx:121","isCollecting",null));
		}
		this.batchSource.setOrder(0);
		var batchEntry = chunk.batchEntry;
		var x = chunk.rect.x;
		var y = chunk.rect.y;
		var sizeX = chunk.rect.sizeX;
		var sizeY = chunk.rect.sizeY;
		var uvRect_x = 0;
		var uvRect_y = 0;
		var batch = this.renderer.getBatchFor(this.clearMaterial,6,batchEntry.themeId);
		if(batchEntry.check(batch,4,6)) {
			batchEntry.sync(batch,4,6);
		} else {
			batchEntry.isDirty = false;
		}
		var batch1 = batch;
		if(batchEntry.isDirty) {
			if(batch1._vertices == null) {
				batch1._vertices = batch1.vertexBuffer.lock();
				if(batch1.isDynamicIndices) {
					batch1._indices = batch1.indexBuffer.lock();
				}
			}
			var vbuff = batch1._vertices;
			var vfrom = batch1.vertexCount;
			var position = vfrom * 5;
			vbuff[position] = x;
			vbuff[position + 1] = y;
			vbuff[position + 2] = -5.0;
			vbuff[position + 3] = uvRect_x;
			vbuff[position + 4] = uvRect_y;
			var position1 = (vfrom + 1) * 5;
			vbuff[position1] = x + sizeX;
			vbuff[position1 + 1] = y;
			vbuff[position1 + 2] = -5.0;
			vbuff[position1 + 3] = 1.;
			vbuff[position1 + 4] = uvRect_y;
			var position2 = (vfrom + 2) * 5;
			vbuff[position2] = x + sizeX;
			vbuff[position2 + 1] = y + sizeY;
			vbuff[position2 + 2] = -5.0;
			vbuff[position2 + 3] = 1.;
			vbuff[position2 + 4] = 1.;
			var position3 = (vfrom + 3) * 5;
			vbuff[position3] = x;
			vbuff[position3 + 1] = y + sizeY;
			vbuff[position3 + 2] = -5.0;
			vbuff[position3 + 3] = uvRect_x;
			vbuff[position3 + 4] = 1.;
		}
		batchEntry.shiftCounters();
	}
	,getChunk: function(sizeX,sizeY,alias) {
		var _gthis = this;
		var found = null;
		var originalAlias = alias;
		if(alias != null) {
			alias = "" + alias + "_" + sizeX + "_" + sizeY;
			var _this = this.chunkMap;
			var chunk = __map_reserved[alias] != null ? _this.getReserved(alias) : _this.h[alias];
			if(chunk != null) {
				found = chunk;
				if(found.usageCounter == 0) {
					if(!this.releaseSet.remove(chunk.id)) {
						throw new js__$Boot_HaxeError(banan_error_Error.e(121,"DynamicAtlas.hx:145","releaseSet.remove(chunk.id)",null));
					}
					this.releaseSetSize--;
				}
			}
		}
		if(found == null) {
			var rect = this.rectPacker.findPlace(sizeX,sizeY);
			if(rect != null) {
				var it = this.chunkPool.pop();
				found = it != null ? it : new banan_render_render2_atlas_Chunk(_gthis.chunkIdSource.next++,new banan_render_render2_batch_BatchEntryExt(_gthis.render2Context));
				found.rect = rect;
				found.target = this.target;
			}
		}
		if(found != null) {
			found.usageCounter++;
			if(alias != null) {
				found.alias = alias;
				var _this1 = this.chunkMap;
				if(__map_reserved[alias] != null) {
					_this1.setReserved(alias,found);
				} else {
					_this1.h[alias] = found;
				}
			}
			return found;
		} else if(this.releaseSetSize > 0) {
			var chunk1 = this.releaseSet.iterator();
			while(chunk1.hasNext()) {
				var chunk2 = chunk1.next();
				if(chunk2.usageCounter != 0) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(121,"DynamicAtlas.hx:226","chunk.usageCounter == 0",null));
				}
				if(!this.isCollecting) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(121,"DynamicAtlas.hx:121","isCollecting",null));
				}
				this.batchSource.setOrder(0);
				var batchEntry = chunk2.batchEntry;
				var x = chunk2.rect.x;
				var y = chunk2.rect.y;
				var sizeX1 = chunk2.rect.sizeX;
				var sizeY1 = chunk2.rect.sizeY;
				var uvRect_x = 0;
				var uvRect_y = 0;
				var batch = this.renderer.getBatchFor(this.clearMaterial,6,batchEntry.themeId);
				if(batchEntry.check(batch,4,6)) {
					batchEntry.sync(batch,4,6);
				} else {
					batchEntry.isDirty = false;
				}
				var batch1 = batch;
				if(batchEntry.isDirty) {
					if(batch1._vertices == null) {
						batch1._vertices = batch1.vertexBuffer.lock();
						if(batch1.isDynamicIndices) {
							batch1._indices = batch1.indexBuffer.lock();
						}
					}
					var vbuff = batch1._vertices;
					var vfrom = batch1.vertexCount;
					var position = vfrom * 5;
					vbuff[position] = x;
					vbuff[position + 1] = y;
					vbuff[position + 2] = -5.0;
					vbuff[position + 3] = uvRect_x;
					vbuff[position + 4] = uvRect_y;
					var position1 = (vfrom + 1) * 5;
					vbuff[position1] = x + sizeX1;
					vbuff[position1 + 1] = y;
					vbuff[position1 + 2] = -5.0;
					vbuff[position1 + 3] = 1.;
					vbuff[position1 + 4] = uvRect_y;
					var position2 = (vfrom + 2) * 5;
					vbuff[position2] = x + sizeX1;
					vbuff[position2 + 1] = y + sizeY1;
					vbuff[position2 + 2] = -5.0;
					vbuff[position2 + 3] = 1.;
					vbuff[position2 + 4] = 1.;
					var position3 = (vfrom + 3) * 5;
					vbuff[position3] = x;
					vbuff[position3 + 1] = y + sizeY1;
					vbuff[position3 + 2] = -5.0;
					vbuff[position3 + 3] = uvRect_x;
					vbuff[position3 + 4] = 1.;
				}
				batchEntry.shiftCounters();
				this.rectPacker.remove(chunk2.rect);
				if(chunk2.alias != null) {
					this.chunkMap.remove(chunk2.alias);
				}
				chunk2.batchEntry.isDirty = true;
				chunk2.rect = null;
				chunk2.target = null;
				chunk2.alias = null;
				chunk2.isDirty = true;
				if(chunk2.usageCounter != 0) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Chunk.hx:38","usageCounter == 0",null));
				}
				this.chunkPool.push(chunk2);
			}
			this.releaseSet.h = { };
			this.releaseSetSize = 0;
			return this.getChunk(sizeX,sizeY,originalAlias);
		} else {
			return null;
		}
	}
	,releaseChunk: function(chunk) {
		chunk.usageCounter--;
		if(chunk.usageCounter == 0) {
			if(!this.releaseSet.h.hasOwnProperty(chunk.id)) {
				this.releaseSetSize++;
				this.releaseSet.h[chunk.id] = chunk;
			}
		}
	}
	,setOrder: function(order) {
		this.batchSource.setOrder(order);
	}
	,clearReleaseList: function() {
		var chunk = this.releaseSet.iterator();
		while(chunk.hasNext()) {
			var chunk1 = chunk.next();
			if(chunk1.usageCounter != 0) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"DynamicAtlas.hx:226","chunk.usageCounter == 0",null));
			}
			if(!this.isCollecting) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"DynamicAtlas.hx:121","isCollecting",null));
			}
			this.batchSource.setOrder(0);
			var batchEntry = chunk1.batchEntry;
			var x = chunk1.rect.x;
			var y = chunk1.rect.y;
			var sizeX = chunk1.rect.sizeX;
			var sizeY = chunk1.rect.sizeY;
			var uvRect_x = 0;
			var uvRect_y = 0;
			var batch = this.renderer.getBatchFor(this.clearMaterial,6,batchEntry.themeId);
			if(batchEntry.check(batch,4,6)) {
				batchEntry.sync(batch,4,6);
			} else {
				batchEntry.isDirty = false;
			}
			var batch1 = batch;
			if(batchEntry.isDirty) {
				if(batch1._vertices == null) {
					batch1._vertices = batch1.vertexBuffer.lock();
					if(batch1.isDynamicIndices) {
						batch1._indices = batch1.indexBuffer.lock();
					}
				}
				var vbuff = batch1._vertices;
				var vfrom = batch1.vertexCount;
				var position = vfrom * 5;
				vbuff[position] = x;
				vbuff[position + 1] = y;
				vbuff[position + 2] = -5.0;
				vbuff[position + 3] = uvRect_x;
				vbuff[position + 4] = uvRect_y;
				var position1 = (vfrom + 1) * 5;
				vbuff[position1] = x + sizeX;
				vbuff[position1 + 1] = y;
				vbuff[position1 + 2] = -5.0;
				vbuff[position1 + 3] = 1.;
				vbuff[position1 + 4] = uvRect_y;
				var position2 = (vfrom + 2) * 5;
				vbuff[position2] = x + sizeX;
				vbuff[position2 + 1] = y + sizeY;
				vbuff[position2 + 2] = -5.0;
				vbuff[position2 + 3] = 1.;
				vbuff[position2 + 4] = 1.;
				var position3 = (vfrom + 3) * 5;
				vbuff[position3] = x;
				vbuff[position3 + 1] = y + sizeY;
				vbuff[position3 + 2] = -5.0;
				vbuff[position3 + 3] = uvRect_x;
				vbuff[position3 + 4] = 1.;
			}
			batchEntry.shiftCounters();
			this.rectPacker.remove(chunk1.rect);
			if(chunk1.alias != null) {
				this.chunkMap.remove(chunk1.alias);
			}
			chunk1.batchEntry.isDirty = true;
			chunk1.rect = null;
			chunk1.target = null;
			chunk1.alias = null;
			chunk1.isDirty = true;
			if(chunk1.usageCounter != 0) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Chunk.hx:38","usageCounter == 0",null));
			}
			this.chunkPool.push(chunk1);
		}
		this.releaseSet.h = { };
		this.releaseSetSize = 0;
	}
	,__class__: banan_render_render2_atlas_DynamicAtlas
};
var banan_render_render2_atlas__$ParallelBatchSource_BatchPool = function(poolSize,shortName,type,sigTpl,primitiveCount) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < poolSize) {
		++_g1;
		_g.push(banan_render_render2_batch_MaterialBatch.create(shortName,type,sigTpl,primitiveCount));
	}
	this.pool = _g;
	this.vacantIdx = 0;
};
$hxClasses["banan.render.render2.atlas._ParallelBatchSource.BatchPool"] = banan_render_render2_atlas__$ParallelBatchSource_BatchPool;
banan_render_render2_atlas__$ParallelBatchSource_BatchPool.__name__ = "banan.render.render2.atlas._ParallelBatchSource.BatchPool";
banan_render_render2_atlas__$ParallelBatchSource_BatchPool.prototype = {
	pool: null
	,vacantIdx: null
	,getActive: function(material) {
		var _g = 0;
		var _g1 = this.vacantIdx;
		while(_g < _g1) {
			var i = _g++;
			var tmp = this.pool[i].material;
			if(tmp == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ParallelBatchSource.hx:33","pool[i].material" + " is null",null));
			}
			if(material.batchType != tmp.batchType ? false : material.materialRenderer != tmp.materialRenderer ? false : material.materialRenderer.isEqual(material,tmp)) {
				return this.pool[i];
			}
		}
		return null;
	}
	,hasVacant: function() {
		return this.vacantIdx < this.pool.length;
	}
	,activate: function(material) {
		var result = this.pool[this.vacantIdx++];
		result.material = material;
		return result;
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.vacantIdx;
		while(_g < _g1) this.pool[_g++].material = null;
		this.vacantIdx = 0;
	}
	,__class__: banan_render_render2_atlas__$ParallelBatchSource_BatchPool
};
var banan_render_render2_batch_BatchSource = function() {
	this.materials = [];
	this.materialsLength = 0;
};
$hxClasses["banan.render.render2.batch.BatchSource"] = banan_render_render2_batch_BatchSource;
banan_render_render2_batch_BatchSource.__name__ = "banan.render.render2.batch.BatchSource";
banan_render_render2_batch_BatchSource.prototype = {
	materials: null
	,materialsLength: null
	,dispose: function() {
	}
	,getFor: function(material,renderer,indexCount,themeId) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"BatchSource.hx:21","",null));
	}
	,closeRenderRequests: function(renderer) {
	}
	,rendererIsFlushing: function(renderer) {
		this.closeRenderRequests(renderer);
	}
	,addDrawRequest: function(renderer,batch) {
		renderer.addDrawRequest(batch,batch.lastIndexCount,batch.indexCount,batch.material);
		batch.lastIndexCount = batch.indexCount;
	}
	,storeMaterial: function(material) {
		this.materials[this.materialsLength++] = material;
		material.renderLinks++;
	}
	,clearMaterials: function() {
		var _g = 0;
		var _g1 = this.materialsLength;
		while(_g < _g1) {
			var _this = this.materials[_g++];
			_this.renderLinks--;
		}
		this.materialsLength = 0;
	}
	,__class__: banan_render_render2_batch_BatchSource
};
var banan_render_render2_atlas_ParallelBatchSource = function(poolConfigs) {
	banan_render_render2_batch_BatchSource.call(this);
	var _g = [];
	var _g1 = 0;
	var _g2 = poolConfigs.length;
	while(_g1 < _g2) {
		++_g1;
		_g.push(new haxe_ds_IntMap());
	}
	this.orderArray = _g;
	this.atomicBatches = [];
	this.poolConfigs = poolConfigs;
	this.order = 0;
};
$hxClasses["banan.render.render2.atlas.ParallelBatchSource"] = banan_render_render2_atlas_ParallelBatchSource;
banan_render_render2_atlas_ParallelBatchSource.__name__ = "banan.render.render2.atlas.ParallelBatchSource";
banan_render_render2_atlas_ParallelBatchSource.__super__ = banan_render_render2_batch_BatchSource;
banan_render_render2_atlas_ParallelBatchSource.prototype = $extend(banan_render_render2_batch_BatchSource.prototype,{
	orderArray: null
	,atomicBatches: null
	,poolConfigs: null
	,order: null
	,get_poolConfig: function() {
		return this.poolConfigs[this.order];
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.orderArray.length;
		while(_g < _g1) {
			var pool = this.orderArray[_g++].iterator();
			while(pool.hasNext()) {
				var _g11 = 0;
				var _g2 = pool.next().pool;
				while(_g11 < _g2.length) _g2[_g11++].dispose();
			}
		}
		this.orderArray = null;
	}
	,setOrder: function(order) {
		this.atomicBatches[order] = null;
		this.order = order;
	}
	,getFor: function(material,renderer,indexCount,themeId) {
		var _gthis = this;
		this.materials[this.materialsLength++] = material;
		material.renderLinks++;
		var batchTypeId = material.batchType.id;
		var poolMap = this.orderArray[this.order];
		var it = poolMap.h[batchTypeId];
		var pool;
		if(it != null) {
			pool = it;
		} else {
			var v = new banan_render_render2_atlas__$ParallelBatchSource_BatchPool(_gthis.poolConfigs[_gthis.order].poolSize,_gthis.poolConfigs[_gthis.order].shortName,material.batchType,_gthis.poolConfigs[_gthis.order].sigTpl,_gthis.poolConfigs[_gthis.order].primitiveCount);
			poolMap.h[batchTypeId] = v;
			pool = v;
		}
		var found = pool.getActive(material);
		if(found == null) {
			if(pool.vacantIdx >= pool.pool.length) {
				renderer.flush();
			}
			var result = pool.pool[pool.vacantIdx++];
			result.material = material;
			found = result;
		}
		var atomicBatch = this.atomicBatches[this.order];
		this.atomicBatches[this.order] = found;
		if(atomicBatch != null && atomicBatch != found || found.indexBufferLength - found.indexCount < indexCount) {
			renderer.flush();
			return this.getFor(material,renderer,indexCount,themeId);
		} else {
			return found;
		}
	}
	,closeRenderRequests: function(renderer) {
		var _g = 0;
		var _g1 = this.orderArray.length;
		while(_g < _g1) {
			var i = _g++;
			this.atomicBatches[i] = null;
			var pool = this.orderArray[i].iterator();
			while(pool.hasNext()) {
				var pool1 = pool.next();
				var _g11 = 0;
				var _g2 = pool1.vacantIdx;
				while(_g11 < _g2) {
					var batch = pool1.pool[_g11++];
					renderer.addDrawRequest(batch,batch.lastIndexCount,batch.indexCount,batch.material);
					batch.lastIndexCount = batch.indexCount;
				}
				var _g3 = 0;
				var _g12 = pool1.vacantIdx;
				while(_g3 < _g12) pool1.pool[_g3++].material = null;
				pool1.vacantIdx = 0;
			}
		}
	}
	,rendererIsFlushing: function(renderer) {
		banan_render_render2_batch_BatchSource.prototype.rendererIsFlushing.call(this,renderer);
		var _g = 0;
		var _g1 = this.materialsLength;
		while(_g < _g1) {
			var _this = this.materials[_g++];
			_this.renderLinks--;
		}
		this.materialsLength = 0;
	}
	,__class__: banan_render_render2_atlas_ParallelBatchSource
	,__properties__: {get_poolConfig:"get_poolConfig"}
});
var banan_render_render2_batch_BatchEntry = function(drawableId) {
	this.muteDebug = false;
	this.themeId = 0;
	this.isDirty = true;
	this.batch = null;
	this.vertexFrom = null;
	this.indexFrom = null;
	this.vertexCount = null;
	this.indexCount = null;
	this.drawableId = drawableId;
};
$hxClasses["banan.render.render2.batch.BatchEntry"] = banan_render_render2_batch_BatchEntry;
banan_render_render2_batch_BatchEntry.__name__ = "banan.render.render2.batch.BatchEntry";
banan_render_render2_batch_BatchEntry.prototype = {
	muteDebug: null
	,themeId: null
	,isDirty: null
	,batch: null
	,vertexFrom: null
	,indexFrom: null
	,vertexCount: null
	,indexCount: null
	,drawableId: null
	,getBatchForWeak: function(material,renderer2,vertexCount,indexCount) {
		var batch = renderer2.getBatchFor(material,indexCount,this.themeId);
		if(this.check(batch,vertexCount,indexCount)) {
			this.sync(batch,vertexCount,indexCount);
		} else {
			this.isDirty = false;
		}
		return batch;
	}
	,getBatchForStrong: function(material,renderer2,vertexCount,indexCount) {
		var batch = renderer2.getBatchFor(material,indexCount,this.themeId);
		if(this.checkExt(batch,vertexCount,indexCount)) {
			this.syncExt(batch,vertexCount,indexCount);
		} else {
			this.isDirty = false;
		}
		return batch;
	}
	,shiftCounters: function() {
		var _this = this.batch;
		_this.vertexCount += this.vertexCount;
		_this.indexCount += this.indexCount;
		this.isDirty = false;
	}
	,markAsDirty: function(test) {
		if(test == null) {
			test = true;
		}
		this.isDirty = this.isDirty || test;
	}
	,markAsClean: function() {
		this.isDirty = false;
	}
	,getBatchFor: function(material,renderer2,vertexCount,indexCount,checkFn,syncFn) {
		var batch = renderer2.getBatchFor(material,indexCount,this.themeId);
		if(checkFn(batch,vertexCount,indexCount)) {
			syncFn(batch,vertexCount,indexCount);
		} else {
			this.isDirty = false;
		}
		return batch;
	}
	,check: function(batch,vertexCount,indexCount) {
		if(!(this.isDirty || this.batch != batch || this.indexFrom != batch.indexCount || this.indexCount != indexCount)) {
			return !batch.checkIndex(this.drawableId,this.indexFrom);
		} else {
			return true;
		}
	}
	,checkExt: function(batch,vertexCount,indexCount) {
		if(!(this.isDirty || this.batch != batch || this.indexFrom != batch.indexCount || this.indexCount != this.indexFrom || !batch.checkIndex(this.drawableId,this.indexFrom) || this.vertexFrom != batch.vertexCount || this.vertexCount != vertexCount)) {
			return !batch.checkVertex(this.drawableId,this.vertexFrom);
		} else {
			return true;
		}
	}
	,sync: function(batch,vertexCount,indexCount) {
		this.isDirty = true;
		this.batch = batch;
		this.indexFrom = batch.indexCount;
		this.vertexCount = vertexCount;
		this.indexCount = indexCount;
		batch.registerIndeices(this.drawableId,this.indexFrom,indexCount);
	}
	,syncExt: function(batch,vertexCount,indexCount) {
		this.isDirty = true;
		this.batch = batch;
		this.indexFrom = batch.indexCount;
		this.vertexCount = vertexCount;
		this.indexCount = indexCount;
		batch.registerIndeices(this.drawableId,this.indexFrom,indexCount);
		this.vertexFrom = batch.vertexCount;
		batch.registerVertices(this.drawableId,this.vertexFrom,vertexCount);
	}
	,prepareDebugInfo: function() {
	}
	,__class__: banan_render_render2_batch_BatchEntry
};
var banan_render_render2_batch_BatchEntryExt = function(render2Context) {
	this.currentIdx = 0;
	this.ext = null;
	this._dirtyOnShift = false;
	this.render2Context = render2Context;
	banan_render_render2_batch_BatchEntry.call(this,this.render2Context.getDrawableId());
};
$hxClasses["banan.render.render2.batch.BatchEntryExt"] = banan_render_render2_batch_BatchEntryExt;
banan_render_render2_batch_BatchEntryExt.__name__ = "banan.render.render2.batch.BatchEntryExt";
banan_render_render2_batch_BatchEntryExt.__super__ = banan_render_render2_batch_BatchEntry;
banan_render_render2_batch_BatchEntryExt.prototype = $extend(banan_render_render2_batch_BatchEntry.prototype,{
	get_dirtyOnShift: function() {
		return this._dirtyOnShift;
	}
	,set_dirtyOnShift: function(value) {
		return this._dirtyOnShift = this._dirtyOnShift || value;
	}
	,_dirtyOnShift: null
	,ext: null
	,currentIdx: null
	,render2Context: null
	,getThenShift: function() {
		if(this.ext == null) {
			this.ext = [this];
		}
		if(this.ext[this.currentIdx] == null) {
			var batchEntry = new banan_render_render2_batch_BatchEntry(this.render2Context.getDrawableId());
			batchEntry.themeId = this.themeId;
			this.ext[this.currentIdx] = batchEntry;
		}
		var result = this.ext[this.currentIdx++];
		var test = this._dirtyOnShift;
		if(test == null) {
			test = true;
		}
		result.isDirty = result.isDirty || test;
		return result;
	}
	,reset: function(idx) {
		this._dirtyOnShift = false;
		this.currentIdx = idx;
		return this;
	}
	,ensureExt: function() {
		if(this.ext == null) {
			this.ext = [this];
		}
	}
	,getDrawableId: function() {
		return this.render2Context.getDrawableId();
	}
	,__class__: banan_render_render2_batch_BatchEntryExt
	,__properties__: {set_dirtyOnShift:"set_dirtyOnShift",get_dirtyOnShift:"get_dirtyOnShift"}
});
var banan_render_render2_batch_LongBatch = function(shortName,type,sigTpl,primitiveCount) {
	this.shortName = shortName;
	this.type = type;
	this.sigTpl = sigTpl;
	this.primitiveCount = primitiveCount;
	this.batches = [banan_render_render2_batch_MaterialBatch.create(shortName,type,sigTpl,primitiveCount)];
	this.count = 1;
	this.idx = 0;
};
$hxClasses["banan.render.render2.batch.LongBatch"] = banan_render_render2_batch_LongBatch;
banan_render_render2_batch_LongBatch.__name__ = "banan.render.render2.batch.LongBatch";
banan_render_render2_batch_LongBatch.prototype = {
	shortName: null
	,type: null
	,sigTpl: null
	,primitiveCount: null
	,batches: null
	,count: null
	,idx: null
	,dispose: function() {
		var _g = 0;
		var _g1 = this.batches;
		while(_g < _g1.length) _g1[_g++].dispose();
		this.batches = null;
	}
	,getBatch: function(indexCount) {
		if(indexCount > this.batches[0].indexBufferLength) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"LongBatch.hx:40","indexCount <= batches[0].indexBufferLength",null));
		}
		var _this = this.batches[this.idx];
		if(_this.indexBufferLength - _this.indexCount < indexCount) {
			if(++this.idx == this.count) {
				this.batches[this.idx] = banan_render_render2_batch_MaterialBatch.create(this.shortName,this.type,this.sigTpl,this.primitiveCount);
				this.count++;
			}
		}
		return this.batches[this.idx];
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.count;
		while(_g < _g1) this.batches[_g++].material = null;
		this.idx = 0;
	}
	,__class__: banan_render_render2_batch_LongBatch
};
var banan_render_render2_batch_MaterialBatch = function(shortName,type,sigTpl,vertexBufferLength,indexBufferLength,isDynamicIndices) {
	banan_render_Batch.call(this,shortName,type,sigTpl,vertexBufferLength,indexBufferLength,isDynamicIndices);
};
$hxClasses["banan.render.render2.batch.MaterialBatch"] = banan_render_render2_batch_MaterialBatch;
banan_render_render2_batch_MaterialBatch.__name__ = "banan.render.render2.batch.MaterialBatch";
banan_render_render2_batch_MaterialBatch.create = function(shortName,type,sigTpl,primitiveCount) {
	switch(type.primitiveType._hx_index) {
	case 0:
		var batch = new banan_render_render2_batch_MaterialBatch(shortName,type,sigTpl,primitiveCount * 4,primitiveCount * 6,false);
		var indices = batch.indexBuffer.lock();
		var _g = 0;
		while(_g < primitiveCount) {
			var i = _g++;
			var iidx = i * 6;
			var vidx = i << 2;
			indices[iidx] = vidx;
			indices[iidx + 1] = vidx + 1;
			indices[iidx + 2] = vidx + 2;
			indices[iidx + 3] = vidx;
			indices[iidx + 4] = vidx + 2;
			indices[iidx + 5] = vidx + 3;
		}
		batch.indexBuffer.unlock();
		return batch;
	case 1:
		return new banan_render_render2_batch_MaterialBatch(shortName,type,sigTpl,primitiveCount * 3,primitiveCount * 3,true);
	}
};
banan_render_render2_batch_MaterialBatch.__super__ = banan_render_Batch;
banan_render_render2_batch_MaterialBatch.prototype = $extend(banan_render_Batch.prototype,{
	material: null
	,lastIndexCount: null
	,catchIndexCount: function() {
		this.lastIndexCount = this.indexCount;
	}
	,bindMaterial: function(material) {
		this.material = material;
	}
	,clear: function() {
		banan_render_Batch.prototype.clear.call(this);
		this.lastIndexCount = 0;
	}
	,__class__: banan_render_render2_batch_MaterialBatch
});
var banan_render_render2_batch_SerialBatchSource = function(batchThemeManifest) {
	banan_render_render2_batch_BatchSource.call(this);
	this.themedBatches = [];
	this.currentBatch = null;
	this.batchThemeManifest = batchThemeManifest;
};
$hxClasses["banan.render.render2.batch.SerialBatchSource"] = banan_render_render2_batch_SerialBatchSource;
banan_render_render2_batch_SerialBatchSource.__name__ = "banan.render.render2.batch.SerialBatchSource";
banan_render_render2_batch_SerialBatchSource.__super__ = banan_render_render2_batch_BatchSource;
banan_render_render2_batch_SerialBatchSource.prototype = $extend(banan_render_render2_batch_BatchSource.prototype,{
	themedBatches: null
	,currentBatch: null
	,batchThemeManifest: null
	,dispose: function() {
		var _g = 0;
		var _g1 = this.themedBatches;
		while(_g < _g1.length) {
			var batches = _g1[_g];
			++_g;
			if(batches != null) {
				var batch = batches.iterator();
				while(batch.hasNext()) batch.next().dispose();
			}
		}
		this.themedBatches = null;
	}
	,getFor: function(material,renderer,indexCount,themeId) {
		this.materials[this.materialsLength++] = material;
		material.renderLinks++;
		if(this.themedBatches[themeId] == null) {
			this.themedBatches[themeId] = new haxe_ds_IntMap();
		}
		var batches = this.themedBatches[themeId];
		var batchType = material.batchType;
		var batchTypeId = batchType.id;
		var it = batches.h[batchTypeId];
		var batch;
		if(it != null) {
			batch = it;
		} else {
			var config = this.batchThemeManifest.configs[themeId];
			var v = new banan_render_render2_batch_LongBatch(config.shortName,batchType,config.sigTpl,config.primitiveCount.get(batchType.primitiveType));
			batches.h[batchTypeId] = v;
			batch = v;
		}
		var batch1 = batch.getBatch(indexCount);
		if(this.currentBatch != batch1) {
			if(this.currentBatch != null) {
				var batch2 = this.currentBatch;
				renderer.addDrawRequest(batch2,batch2.lastIndexCount,batch2.indexCount,batch2.material);
				batch2.lastIndexCount = batch2.indexCount;
			}
			this.currentBatch = batch1;
			this.currentBatch.material = material;
		} else {
			var _this = this.currentBatch.material;
			if(!(_this.batchType != material.batchType ? false : _this.materialRenderer != material.materialRenderer ? false : _this.materialRenderer.isEqual(_this,material))) {
				var batch3 = this.currentBatch;
				renderer.addDrawRequest(batch3,batch3.lastIndexCount,batch3.indexCount,batch3.material);
				batch3.lastIndexCount = batch3.indexCount;
				this.currentBatch.material = material;
			}
		}
		return this.currentBatch;
	}
	,closeRenderRequests: function(renderer) {
		if(this.currentBatch != null) {
			var batch = this.currentBatch;
			renderer.addDrawRequest(batch,batch.lastIndexCount,batch.indexCount,batch.material);
			batch.lastIndexCount = batch.indexCount;
			this.currentBatch = null;
		}
	}
	,rendererIsFlushing: function(renderer) {
		banan_render_render2_batch_BatchSource.prototype.rendererIsFlushing.call(this,renderer);
		var _g = 0;
		var _g1 = this.materialsLength;
		while(_g < _g1) {
			var _this = this.materials[_g++];
			_this.renderLinks--;
		}
		this.materialsLength = 0;
		var _g2 = 0;
		var _g11 = this.themedBatches;
		while(_g2 < _g11.length) {
			var batches = _g11[_g2];
			++_g2;
			if(batches != null) {
				var batch = batches.iterator();
				while(batch.hasNext()) batch.next().reset();
			}
		}
	}
	,getBatches: function(themeId) {
		if(this.themedBatches[themeId] == null) {
			this.themedBatches[themeId] = new haxe_ds_IntMap();
		}
		return this.themedBatches[themeId];
	}
	,__class__: banan_render_render2_batch_SerialBatchSource
});
var banan_render_render2_batch_EBatchTheme = $hxEnums["banan.render.render2.batch.EBatchTheme"] = { __ename__ : true, __constructs__ : ["Default","Debug","Jetgui","PostEffect","JetguiText"]
	,Default: {_hx_index:0,__enum__:"banan.render.render2.batch.EBatchTheme",toString:$estr}
	,Debug: {_hx_index:1,__enum__:"banan.render.render2.batch.EBatchTheme",toString:$estr}
	,Jetgui: {_hx_index:2,__enum__:"banan.render.render2.batch.EBatchTheme",toString:$estr}
	,PostEffect: {_hx_index:3,__enum__:"banan.render.render2.batch.EBatchTheme",toString:$estr}
	,JetguiText: {_hx_index:4,__enum__:"banan.render.render2.batch.EBatchTheme",toString:$estr}
};
banan_render_render2_batch_EBatchTheme.__empty_constructs__ = [banan_render_render2_batch_EBatchTheme.Default,banan_render_render2_batch_EBatchTheme.Debug,banan_render_render2_batch_EBatchTheme.Jetgui,banan_render_render2_batch_EBatchTheme.PostEffect,banan_render_render2_batch_EBatchTheme.JetguiText];
var banan_render_render2_material_BatchType = function(id,structure,structureType,primitiveType) {
	this.id = id;
	this.structure = structure;
	this.structureType = structureType;
	this.primitiveType = primitiveType;
};
$hxClasses["banan.render.render2.material.BatchType"] = banan_render_render2_material_BatchType;
banan_render_render2_material_BatchType.__name__ = "banan.render.render2.material.BatchType";
banan_render_render2_material_BatchType.prototype = {
	id: null
	,structure: null
	,structureType: null
	,primitiveType: null
	,__class__: banan_render_render2_material_BatchType
};
var banan_render_render2_material_EPrimitiveType = $hxEnums["banan.render.render2.material.EPrimitiveType"] = { __ename__ : true, __constructs__ : ["Quad","Triangle"]
	,Quad: {_hx_index:0,__enum__:"banan.render.render2.material.EPrimitiveType",toString:$estr}
	,Triangle: {_hx_index:1,__enum__:"banan.render.render2.material.EPrimitiveType",toString:$estr}
};
banan_render_render2_material_EPrimitiveType.__empty_constructs__ = [banan_render_render2_material_EPrimitiveType.Quad,banan_render_render2_material_EPrimitiveType.Triangle];
var banan_render_render2_material_EStructureType = $hxEnums["banan.render.render2.material.EStructureType"] = { __ename__ : true, __constructs__ : ["Uv","Uv_Color","Uv_Color_Color2_Af"]
	,Uv: {_hx_index:0,__enum__:"banan.render.render2.material.EStructureType",toString:$estr}
	,Uv_Color: {_hx_index:1,__enum__:"banan.render.render2.material.EStructureType",toString:$estr}
	,Uv_Color_Color2_Af: {_hx_index:2,__enum__:"banan.render.render2.material.EStructureType",toString:$estr}
};
banan_render_render2_material_EStructureType.__empty_constructs__ = [banan_render_render2_material_EStructureType.Uv,banan_render_render2_material_EStructureType.Uv_Color,banan_render_render2_material_EStructureType.Uv_Color_Color2_Af];
var banan_render_render2_material_Material = function() {
	this.copy = null;
	this.renderLinks = 0;
	this.clippingMaskConfig = null;
	this.xRayConfig = null;
	this.alphaMultiplier = null;
	this.outlineColor = null;
	this.colorTransform = null;
	this.textureAddressing = null;
	this.texture = null;
};
$hxClasses["banan.render.render2.material.Material"] = banan_render_render2_material_Material;
banan_render_render2_material_Material.__name__ = "banan.render.render2.material.Material";
banan_render_render2_material_Material.prototype = {
	batchType: null
	,materialRenderer: null
	,texture: null
	,textureAddressing: null
	,colorTransform: null
	,outlineColor: null
	,alphaMultiplier: null
	,xRayConfig: null
	,clippingMaskConfig: null
	,renderLinks: null
	,copy: null
	,isRendering: function() {
		return this.renderLinks > 0;
	}
	,incRenderLinks: function() {
		this.renderLinks++;
	}
	,decRenderLinks: function() {
		this.renderLinks--;
	}
	,clone: function() {
		var m = new banan_render_render2_material_Material();
		m.materialRenderer = this.materialRenderer;
		m.batchType = this.batchType;
		this.materialRenderer.copy(this,m);
		return m;
	}
	,isEqual: function(m) {
		if(this.batchType != m.batchType) {
			return false;
		}
		if(this.materialRenderer != m.materialRenderer) {
			return false;
		}
		return this.materialRenderer.isEqual(this,m);
	}
	,getCopy: function() {
		if(this.copy == null) {
			var m = new banan_render_render2_material_Material();
			m.materialRenderer = this.materialRenderer;
			m.batchType = this.batchType;
			this.materialRenderer.copy(this,m);
			this.copy = m;
		}
		this.materialRenderer.copy(this,this.copy);
		return this.copy;
	}
	,setTexture: function(value) {
		if(value != this.texture) {
			if(this.renderLinks > 0) {
				if(this.copy == null) {
					var m = new banan_render_render2_material_Material();
					m.materialRenderer = this.materialRenderer;
					m.batchType = this.batchType;
					this.materialRenderer.copy(this,m);
					this.copy = m;
				}
				this.materialRenderer.copy(this,this.copy);
				return this.copy.setTexture(value);
			}
			this.texture = value;
		}
		return this;
	}
	,setTextureAddressing: function(value) {
		if(value != this.textureAddressing) {
			if(this.renderLinks > 0) {
				if(this.copy == null) {
					var m = new banan_render_render2_material_Material();
					m.materialRenderer = this.materialRenderer;
					m.batchType = this.batchType;
					this.materialRenderer.copy(this,m);
					this.copy = m;
				}
				this.materialRenderer.copy(this,this.copy);
				return this.copy.setTextureAddressing(value);
			}
			this.textureAddressing = value;
		}
		return this;
	}
	,setColorTransform: function(value) {
		var rhs = this.colorTransform;
		var result = true;
		var rhsimpl = rhs;
		if(value != null && rhsimpl != null) {
			var _g = 0;
			while(_g < 12) {
				var i = _g++;
				if(value[i] != rhs[i]) {
					result = false;
					break;
				}
			}
		} else {
			result = value == rhsimpl;
		}
		if(!result) {
			if(this.renderLinks > 0) {
				if(this.copy == null) {
					var m = new banan_render_render2_material_Material();
					m.materialRenderer = this.materialRenderer;
					m.batchType = this.batchType;
					this.materialRenderer.copy(this,m);
					this.copy = m;
				}
				this.materialRenderer.copy(this,this.copy);
				return this.copy.setColorTransform(value);
			}
			this.colorTransform = value;
		}
		return this;
	}
	,setOutlineColor: function(value) {
		if(value != this.outlineColor) {
			if(this.renderLinks > 0) {
				if(this.copy == null) {
					var m = new banan_render_render2_material_Material();
					m.materialRenderer = this.materialRenderer;
					m.batchType = this.batchType;
					this.materialRenderer.copy(this,m);
					this.copy = m;
				}
				this.materialRenderer.copy(this,this.copy);
				return this.copy.setOutlineColor(value);
			}
			this.outlineColor = value;
		}
		return this;
	}
	,setAlphaMultiplier: function(value) {
		if(value != this.alphaMultiplier) {
			if(this.renderLinks > 0) {
				if(this.copy == null) {
					var m = new banan_render_render2_material_Material();
					m.materialRenderer = this.materialRenderer;
					m.batchType = this.batchType;
					this.materialRenderer.copy(this,m);
					this.copy = m;
				}
				this.materialRenderer.copy(this,this.copy);
				return this.copy.setAlphaMultiplier(value);
			}
			this.alphaMultiplier = value;
		}
		return this;
	}
	,setXRayConfig: function(value) {
		if(value != this.xRayConfig) {
			if(this.renderLinks > 0) {
				if(this.copy == null) {
					var m = new banan_render_render2_material_Material();
					m.materialRenderer = this.materialRenderer;
					m.batchType = this.batchType;
					this.materialRenderer.copy(this,m);
					this.copy = m;
				}
				this.materialRenderer.copy(this,this.copy);
				return this.copy.setXRayConfig(value);
			}
			this.xRayConfig = value;
		}
		return this;
	}
	,setClippingMaskConfig: function(value) {
		if(value != this.clippingMaskConfig) {
			if(this.renderLinks > 0) {
				if(this.copy == null) {
					var m = new banan_render_render2_material_Material();
					m.materialRenderer = this.materialRenderer;
					m.batchType = this.batchType;
					this.materialRenderer.copy(this,m);
					this.copy = m;
				}
				this.materialRenderer.copy(this,this.copy);
				return this.copy.setClippingMaskConfig(value);
			}
			this.clippingMaskConfig = value;
		}
		return this;
	}
	,__class__: banan_render_render2_material_Material
};
var banan_render_render2_material_EShaderType = $hxEnums["banan.render.render2.material.EShaderType"] = { __ename__ : true, __constructs__ : ["Copy","Outline","ColorTransform","XRay","ClippingMask","Default","Spine"]
	,Copy: {_hx_index:0,__enum__:"banan.render.render2.material.EShaderType",toString:$estr}
	,Outline: {_hx_index:1,__enum__:"banan.render.render2.material.EShaderType",toString:$estr}
	,ColorTransform: {_hx_index:2,__enum__:"banan.render.render2.material.EShaderType",toString:$estr}
	,XRay: {_hx_index:3,__enum__:"banan.render.render2.material.EShaderType",toString:$estr}
	,ClippingMask: {_hx_index:4,__enum__:"banan.render.render2.material.EShaderType",toString:$estr}
	,Default: {_hx_index:5,__enum__:"banan.render.render2.material.EShaderType",toString:$estr}
	,Spine: {_hx_index:6,__enum__:"banan.render.render2.material.EShaderType",toString:$estr}
};
banan_render_render2_material_EShaderType.__empty_constructs__ = [banan_render_render2_material_EShaderType.Copy,banan_render_render2_material_EShaderType.Outline,banan_render_render2_material_EShaderType.ColorTransform,banan_render_render2_material_EShaderType.XRay,banan_render_render2_material_EShaderType.ClippingMask,banan_render_render2_material_EShaderType.Default,banan_render_render2_material_EShaderType.Spine];
var banan_render_render2_material_MaterialFactory = function() {
	this.initializeStructures();
	this.initializeBatchTypes();
	this.initializeMaterialRenderers();
};
$hxClasses["banan.render.render2.material.MaterialFactory"] = banan_render_render2_material_MaterialFactory;
banan_render_render2_material_MaterialFactory.__name__ = "banan.render.render2.material.MaterialFactory";
banan_render_render2_material_MaterialFactory.prototype = {
	structures: null
	,batchTypes: null
	,materialRenderers: null
	,initializeStructures: function() {
		var uvStructure = new kha_graphics4_VertexStructure();
		uvStructure.add("vertexPosition",2);
		uvStructure.add("texPosition",1);
		var uvColStructure = new kha_graphics4_VertexStructure();
		uvColStructure.add("vertexPosition",2);
		uvColStructure.add("texPosition",1);
		uvColStructure.add("vertexColor",3);
		var uvColCol2AfStructure = new kha_graphics4_VertexStructure();
		uvColCol2AfStructure.add("vertexPosition",2);
		uvColCol2AfStructure.add("texPosition",1);
		uvColCol2AfStructure.add("vertexColor",3);
		uvColCol2AfStructure.add("vertexColor2",2);
		uvColCol2AfStructure.add("additiveFactor",0);
		var _g = new haxe_ds_EnumValueMap();
		_g.set(banan_render_render2_material_EStructureType.Uv,uvStructure);
		_g.set(banan_render_render2_material_EStructureType.Uv_Color,uvColStructure);
		_g.set(banan_render_render2_material_EStructureType.Uv_Color_Color2_Af,uvColCol2AfStructure);
		this.structures = _g;
	}
	,initializeBatchTypes: function() {
		var id = 0;
		this.batchTypes = new haxe_ds_EnumValueMap();
		var _g = 0;
		var _g1 = banan_render_render2_material_EStructureType.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var structureType = _g1[_g];
			++_g;
			this.batchTypes.set(structureType,new haxe_ds_EnumValueMap());
			var _g2 = 0;
			var _g11 = banan_render_render2_material_EPrimitiveType.__empty_constructs__.slice();
			while(_g2 < _g11.length) {
				var primitiveType = _g11[_g2];
				++_g2;
				this.batchTypes.get(structureType).set(primitiveType,new banan_render_render2_material_BatchType(id++,this.structures.get(structureType),structureType,primitiveType));
			}
		}
	}
	,initializeMaterialRenderers: function() {
		this.materialRenderers = new haxe_ds_EnumValueMap();
		var structureType = null;
		var pipeline = null;
		structureType = banan_render_render2_material_EStructureType.Uv;
		pipeline = this.createCopyPipeline(structureType,kha_Shaders.simple_vert,kha_Shaders.simple_frag);
		this.materialRenderers.set(banan_render_render2_material_EShaderType.Copy,new banan_render_render2_material_TextureMaterialRenderer(pipeline,structureType));
		pipeline = this.createCopyPipeline(structureType,kha_Shaders.simple_vert,kha_Shaders.outline_frag);
		this.materialRenderers.set(banan_render_render2_material_EShaderType.Outline,new banan_render_render2_material_OutlineMaterialRenderer(pipeline,structureType));
		pipeline = this.createCopyPipeline(structureType,kha_Shaders.simple_vert,kha_Shaders.colorTransform_frag);
		this.materialRenderers.set(banan_render_render2_material_EShaderType.ColorTransform,new banan_render_render2_material_ColorTransformMaterialRenderer(pipeline,structureType));
		pipeline = this.createCopyPipeline(structureType,kha_Shaders.xray_vert,kha_Shaders.xray_frag);
		this.materialRenderers.set(banan_render_render2_material_EShaderType.XRay,new banan_render_render2_material_XRayMaterialRenderer(pipeline,structureType));
		pipeline = this.createCopyPipeline(structureType,kha_Shaders.simple_vert,kha_Shaders.clippingMask_frag);
		this.materialRenderers.set(banan_render_render2_material_EShaderType.ClippingMask,new banan_render_render2_material_ClippingMaskMaterialRenderer(pipeline,structureType));
		structureType = banan_render_render2_material_EStructureType.Uv_Color;
		pipeline = this.createRenderPipeline(structureType,kha_Shaders.default_vert,kha_Shaders.default_frag);
		this.materialRenderers.set(banan_render_render2_material_EShaderType.Default,new banan_render_render2_material_TextureMaterialRenderer(pipeline,structureType));
		structureType = banan_render_render2_material_EStructureType.Uv_Color_Color2_Af;
		pipeline = this.createRenderPipeline(structureType,kha_Shaders.spine_vert,kha_Shaders.spine_frag);
		this.materialRenderers.set(banan_render_render2_material_EShaderType.Spine,new banan_render_render2_material_TextureMaterialRenderer(pipeline,structureType));
	}
	,initializeMaterial: function(material,shaderType,primitiveType) {
		var materialRenderer = this.materialRenderers.get(shaderType);
		material.materialRenderer = materialRenderer;
		material.batchType = this.batchTypes.get(materialRenderer.structureType).get(primitiveType);
		return material;
	}
	,createCopyPipeline: function(structureType,vertexShader,fragmentShder) {
		var structure = this.structures.get(structureType);
		var pipeline = new kha_graphics4_PipelineState();
		pipeline.vertexShader = vertexShader;
		pipeline.fragmentShader = fragmentShder;
		pipeline.inputLayout = [structure];
		pipeline.blendOperation = 0;
		pipeline.alphaBlendOperation = 0;
		pipeline.blendSource = 1;
		pipeline.blendDestination = 2;
		pipeline.alphaBlendSource = 1;
		pipeline.alphaBlendDestination = 2;
		pipeline.compile();
		return pipeline;
	}
	,createRenderPipeline: function(structureType,vertexShader,fragmentShder) {
		var structure = this.structures.get(structureType);
		var pipeline = new kha_graphics4_PipelineState();
		pipeline.vertexShader = vertexShader;
		pipeline.fragmentShader = fragmentShder;
		pipeline.inputLayout = [structure];
		pipeline.blendOperation = 0;
		pipeline.alphaBlendOperation = 0;
		pipeline.blendSource = 1;
		pipeline.blendDestination = 5;
		pipeline.alphaBlendSource = 1;
		pipeline.alphaBlendDestination = 5;
		pipeline.compile();
		return pipeline;
	}
	,__class__: banan_render_render2_material_MaterialFactory
};
var banan_render_render2_material_MaterialHelper = function() { };
$hxClasses["banan.render.render2.material.MaterialHelper"] = banan_render_render2_material_MaterialHelper;
banan_render_render2_material_MaterialHelper.__name__ = "banan.render.render2.material.MaterialHelper";
banan_render_render2_material_MaterialHelper.makeTextureMaterial = function(materialFactory,shaderType,primitiveType,material,texture,textureAddressing) {
	if(textureAddressing == null) {
		textureAddressing = 2;
	}
	if(material == null) {
		material = new banan_render_render2_material_Material();
	}
	materialFactory.initializeMaterial(material,shaderType,primitiveType);
	return material.setTexture(texture).setTextureAddressing(textureAddressing);
};
banan_render_render2_material_MaterialHelper.makeDefaultMaterial = function(materialFactory,primitiveType,material,texture) {
	return banan_render_render2_material_MaterialHelper.makeTextureMaterial(materialFactory,banan_render_render2_material_EShaderType.Default,primitiveType,material,texture);
};
banan_render_render2_material_MaterialHelper.makeFillMaterial = function(materialFactory,primitiveType,material,texture) {
	return banan_render_render2_material_MaterialHelper.makeTextureMaterial(materialFactory,banan_render_render2_material_EShaderType.Default,primitiveType,material,texture,0);
};
banan_render_render2_material_MaterialHelper.makeCopyMaterial = function(materialFactory,primitiveType,material,texture) {
	return banan_render_render2_material_MaterialHelper.makeTextureMaterial(materialFactory,banan_render_render2_material_EShaderType.Copy,primitiveType,material,texture);
};
var banan_render_render2_material_MaterialRenderer = function(pipeline,structureType) {
	this.pipeline = pipeline;
	this.structureType = structureType;
	this.projection = pipeline.getConstantLocation("projectionMatrix");
};
$hxClasses["banan.render.render2.material.MaterialRenderer"] = banan_render_render2_material_MaterialRenderer;
banan_render_render2_material_MaterialRenderer.__name__ = "banan.render.render2.material.MaterialRenderer";
banan_render_render2_material_MaterialRenderer.prototype = {
	pipeline: null
	,structureType: null
	,projection: null
	,preRender: function(g4,m) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"MaterialRenderer.hx:24","",null));
	}
	,postRender: function(g4) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"MaterialRenderer.hx:28","",null));
	}
	,isEqual: function(m1,m2) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"MaterialRenderer.hx:32","",null));
	}
	,copy: function(from,to) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"MaterialRenderer.hx:36","",null));
	}
	,__class__: banan_render_render2_material_MaterialRenderer
};
var banan_render_render2_material_TextureMaterialRenderer = function(pipeline,structureType) {
	banan_render_render2_material_MaterialRenderer.call(this,pipeline,structureType);
	this.texture = pipeline.getTextureUnit("tex");
};
$hxClasses["banan.render.render2.material.TextureMaterialRenderer"] = banan_render_render2_material_TextureMaterialRenderer;
banan_render_render2_material_TextureMaterialRenderer.__name__ = "banan.render.render2.material.TextureMaterialRenderer";
banan_render_render2_material_TextureMaterialRenderer.__super__ = banan_render_render2_material_MaterialRenderer;
banan_render_render2_material_TextureMaterialRenderer.prototype = $extend(banan_render_render2_material_MaterialRenderer.prototype,{
	texture: null
	,preRender: function(g4,m) {
		g4.setTexture(this.texture,m.texture.data);
		g4.setTextureParameters(this.texture,m.textureAddressing,m.textureAddressing,1,1,0);
	}
	,postRender: function(g4) {
		g4.setTexture(this.texture,null);
	}
	,isEqual: function(m1,m2) {
		if(m1.texture == m2.texture) {
			return m1.textureAddressing == m2.textureAddressing;
		} else {
			return false;
		}
	}
	,copy: function(from,to) {
		to.texture = from.texture;
		to.textureAddressing = from.textureAddressing;
	}
	,__class__: banan_render_render2_material_TextureMaterialRenderer
});
var banan_render_render2_material_OutlineMaterialRenderer = function(pipeline,structureType) {
	banan_render_render2_material_TextureMaterialRenderer.call(this,pipeline,structureType);
	this.texSize = pipeline.getConstantLocation("texSize");
	this.outlineColor = pipeline.getConstantLocation("outlineColor");
	this.alphaMultiplier = pipeline.getConstantLocation("alphaMultiplier");
};
$hxClasses["banan.render.render2.material.OutlineMaterialRenderer"] = banan_render_render2_material_OutlineMaterialRenderer;
banan_render_render2_material_OutlineMaterialRenderer.__name__ = "banan.render.render2.material.OutlineMaterialRenderer";
banan_render_render2_material_OutlineMaterialRenderer.__super__ = banan_render_render2_material_TextureMaterialRenderer;
banan_render_render2_material_OutlineMaterialRenderer.prototype = $extend(banan_render_render2_material_TextureMaterialRenderer.prototype,{
	texSize: null
	,outlineColor: null
	,alphaMultiplier: null
	,preRender: function(g4,m) {
		banan_render_render2_material_TextureMaterialRenderer.prototype.preRender.call(this,g4,m);
		g4.setFloat2(this.texSize,m.texture.data.get_width(),m.texture.data.get_height());
		g4.setFloat3(this.outlineColor,((m.outlineColor & 16711680) >>> 16) * 0.00392156862745098,((m.outlineColor & 65280) >>> 8) * 0.00392156862745098,(m.outlineColor & 255) * 0.00392156862745098);
		g4.setFloat(this.alphaMultiplier,m.alphaMultiplier);
	}
	,isEqual: function(m1,m2) {
		if(banan_render_render2_material_TextureMaterialRenderer.prototype.isEqual.call(this,m1,m2) && m1.outlineColor == m2.outlineColor) {
			return m1.alphaMultiplier == m2.alphaMultiplier;
		} else {
			return false;
		}
	}
	,copy: function(from,to) {
		banan_render_render2_material_TextureMaterialRenderer.prototype.copy.call(this,from,to);
		to.outlineColor = from.outlineColor;
		to.alphaMultiplier = from.alphaMultiplier;
	}
	,__class__: banan_render_render2_material_OutlineMaterialRenderer
});
var banan_render_render2_material_ColorTransformMaterialRenderer = function(pipeline,structureType) {
	banan_render_render2_material_TextureMaterialRenderer.call(this,pipeline,structureType);
	this.colorTransform = pipeline.getConstantLocation("colorTransform");
};
$hxClasses["banan.render.render2.material.ColorTransformMaterialRenderer"] = banan_render_render2_material_ColorTransformMaterialRenderer;
banan_render_render2_material_ColorTransformMaterialRenderer.__name__ = "banan.render.render2.material.ColorTransformMaterialRenderer";
banan_render_render2_material_ColorTransformMaterialRenderer.__super__ = banan_render_render2_material_TextureMaterialRenderer;
banan_render_render2_material_ColorTransformMaterialRenderer.prototype = $extend(banan_render_render2_material_TextureMaterialRenderer.prototype,{
	colorTransform: null
	,preRender: function(g4,m) {
		banan_render_render2_material_TextureMaterialRenderer.prototype.preRender.call(this,g4,m);
		var this1 = m.colorTransform;
		g4.setMatrix(this.colorTransform,new kha_math_FastMatrix4(this1[0],this1[1],this1[2],this1[3],this1[4],this1[5],this1[6],this1[7],this1[8],this1[9],this1[10],this1[11],0.0,0.0,0.0,1.0));
	}
	,isEqual: function(m1,m2) {
		if(banan_render_render2_material_TextureMaterialRenderer.prototype.isEqual.call(this,m1,m2)) {
			var this1 = m1.colorTransform;
			var rhs = m2.colorTransform;
			var result = true;
			var rhsimpl = rhs;
			if(this1 != null && rhsimpl != null) {
				var _g = 0;
				while(_g < 12) {
					var i = _g++;
					if(this1[i] != rhs[i]) {
						result = false;
						break;
					}
				}
			} else {
				result = this1 == rhsimpl;
			}
			return result;
		} else {
			return false;
		}
	}
	,copy: function(from,to) {
		banan_render_render2_material_TextureMaterialRenderer.prototype.copy.call(this,from,to);
		to.colorTransform = from.colorTransform;
	}
	,__class__: banan_render_render2_material_ColorTransformMaterialRenderer
});
var banan_render_render2_material_XRayMaterialRenderer = function(pipeline,structureType) {
	banan_render_render2_material_TextureMaterialRenderer.call(this,pipeline,structureType);
	this.xRayPosition = pipeline.getConstantLocation("xRayPosition");
	this.xRayRadius = pipeline.getConstantLocation("xRayRadius");
};
$hxClasses["banan.render.render2.material.XRayMaterialRenderer"] = banan_render_render2_material_XRayMaterialRenderer;
banan_render_render2_material_XRayMaterialRenderer.__name__ = "banan.render.render2.material.XRayMaterialRenderer";
banan_render_render2_material_XRayMaterialRenderer.__super__ = banan_render_render2_material_TextureMaterialRenderer;
banan_render_render2_material_XRayMaterialRenderer.prototype = $extend(banan_render_render2_material_TextureMaterialRenderer.prototype,{
	xRayPosition: null
	,xRayRadius: null
	,preRender: function(g4,m) {
		banan_render_render2_material_TextureMaterialRenderer.prototype.preRender.call(this,g4,m);
		g4.setFloat2(this.xRayPosition,m.xRayConfig.sourceX,m.xRayConfig.sourceY);
		g4.setFloat(this.xRayRadius,m.xRayConfig.radius);
	}
	,isEqual: function(m1,m2) {
		if(banan_render_render2_material_TextureMaterialRenderer.prototype.isEqual.call(this,m1,m2)) {
			return m1.xRayConfig == m2.xRayConfig;
		} else {
			return false;
		}
	}
	,copy: function(from,to) {
		banan_render_render2_material_TextureMaterialRenderer.prototype.copy.call(this,from,to);
		to.xRayConfig = from.xRayConfig;
	}
	,__class__: banan_render_render2_material_XRayMaterialRenderer
});
var banan_render_render2_material_ClippingMaskMaterialRenderer = function(pipeline,structureType) {
	banan_render_render2_material_TextureMaterialRenderer.call(this,pipeline,structureType);
	this.mask = pipeline.getTextureUnit("mask");
	this.mask9slice = pipeline.getConstantLocation("mask9slice");
	this.maskIsTile = pipeline.getConstantLocation("maskIsTile");
	this.maskSizeBase = pipeline.getConstantLocation("maskSizeBase");
	this.maskSize = pipeline.getConstantLocation("maskSize");
	this.maskUvConversion = pipeline.getConstantLocation("maskUvConversion");
	this.tex9slice = pipeline.getConstantLocation("tex9slice");
	this.texIsTile = pipeline.getConstantLocation("texIsTile");
	this.texSizeBase = pipeline.getConstantLocation("texSizeBase");
	this.texSize = pipeline.getConstantLocation("texSize");
	this.texOffset = pipeline.getConstantLocation("texOffset");
	this.texUvConversion = pipeline.getConstantLocation("texUvConversion");
};
$hxClasses["banan.render.render2.material.ClippingMaskMaterialRenderer"] = banan_render_render2_material_ClippingMaskMaterialRenderer;
banan_render_render2_material_ClippingMaskMaterialRenderer.__name__ = "banan.render.render2.material.ClippingMaskMaterialRenderer";
banan_render_render2_material_ClippingMaskMaterialRenderer.__super__ = banan_render_render2_material_TextureMaterialRenderer;
banan_render_render2_material_ClippingMaskMaterialRenderer.prototype = $extend(banan_render_render2_material_TextureMaterialRenderer.prototype,{
	mask: null
	,mask9slice: null
	,maskIsTile: null
	,maskSizeBase: null
	,maskSize: null
	,maskUvConversion: null
	,tex9slice: null
	,texIsTile: null
	,texSizeBase: null
	,texSize: null
	,texOffset: null
	,texUvConversion: null
	,preRender: function(g4,m) {
		banan_render_render2_material_TextureMaterialRenderer.prototype.preRender.call(this,g4,m);
		g4.setTexture(this.mask,m.clippingMaskConfig.mask.data);
		g4.setTextureParameters(this.mask,2,2,1,1,0);
		g4.setVector4(this.mask9slice,m.clippingMaskConfig.mask9slice);
		g4.setFloat(this.maskIsTile,m.clippingMaskConfig.maskIsTile);
		g4.setVector2(this.maskSizeBase,m.clippingMaskConfig.maskSizeBase);
		g4.setVector2(this.maskSize,m.clippingMaskConfig.maskSize);
		g4.setVector4(this.maskUvConversion,m.clippingMaskConfig.maskUvConversion);
		g4.setVector4(this.tex9slice,m.clippingMaskConfig.tex9slice);
		g4.setFloat(this.texIsTile,m.clippingMaskConfig.texIsTile);
		g4.setVector2(this.texSizeBase,m.clippingMaskConfig.texSizeBase);
		g4.setVector2(this.texSize,m.clippingMaskConfig.texSize);
		g4.setVector2(this.texOffset,m.clippingMaskConfig.texOffset);
		g4.setVector4(this.texUvConversion,m.clippingMaskConfig.texUvConversion);
	}
	,postRender: function(g4) {
		banan_render_render2_material_TextureMaterialRenderer.prototype.postRender.call(this,g4);
		g4.setTexture(this.mask,null);
	}
	,isEqual: function(m1,m2) {
		if(banan_render_render2_material_TextureMaterialRenderer.prototype.isEqual.call(this,m1,m2)) {
			return m1.clippingMaskConfig == m2.clippingMaskConfig;
		} else {
			return false;
		}
	}
	,copy: function(from,to) {
		banan_render_render2_material_TextureMaterialRenderer.prototype.copy.call(this,from,to);
		to.clippingMaskConfig = from.clippingMaskConfig;
	}
	,__class__: banan_render_render2_material_ClippingMaskMaterialRenderer
});
var banan_render_render2_node_NodeRenderContext = function() {
};
$hxClasses["banan.render.render2.node.NodeRenderContext"] = banan_render_render2_node_NodeRenderContext;
banan_render_render2_node_NodeRenderContext.__name__ = "banan.render.render2.node.NodeRenderContext";
banan_render_render2_node_NodeRenderContext.prototype = {
	renderer2: null
	,scissor: null
	,__class__: banan_render_render2_node_NodeRenderContext
};
var banan_render_render2_node_NodeRenderer = function(resourceManager,render2Context) {
	this.ctx = new banan_render_render2_node_NodeRenderContext();
	this.delayedRender = [];
	this.delayedLength = 0;
	this.resourceManager = resourceManager;
	this.render2Context = render2Context;
};
$hxClasses["banan.render.render2.node.NodeRenderer"] = banan_render_render2_node_NodeRenderer;
banan_render_render2_node_NodeRenderer.__name__ = "banan.render.render2.node.NodeRenderer";
banan_render_render2_node_NodeRenderer.debugGetFont = function() {
	return null;
};
banan_render_render2_node_NodeRenderer.prototype = {
	ctx: null
	,delayedRender: null
	,delayedLength: null
	,resourceManager: null
	,render2Context: null
	,allowDebugDraw: null
	,beginRender: function(g4,proj,targetName,clearColor,allowDebugDraw) {
		var _this = this.render2Context;
		var _this1 = _this.renderer2;
		_this1.batchSource.closeRenderRequests(_this1);
		_this1.rtStack.push(new banan_render_render2_RenderTarget().configure(targetName,g4,clearColor));
		var renderer2 = _this.renderer2;
		renderer2.projStack.push(proj);
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this2 = renderer2.projStack.first();
		var m = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this2._00 * m._00 + _this2._10 * m._01 + _this2._20 * m._02 + _this2._30 * m._03,_this2._00 * m._10 + _this2._10 * m._11 + _this2._20 * m._12 + _this2._30 * m._13,_this2._00 * m._20 + _this2._10 * m._21 + _this2._20 * m._22 + _this2._30 * m._23,_this2._00 * m._30 + _this2._10 * m._31 + _this2._20 * m._32 + _this2._30 * m._33,_this2._01 * m._00 + _this2._11 * m._01 + _this2._21 * m._02 + _this2._31 * m._03,_this2._01 * m._10 + _this2._11 * m._11 + _this2._21 * m._12 + _this2._31 * m._13,_this2._01 * m._20 + _this2._11 * m._21 + _this2._21 * m._22 + _this2._31 * m._23,_this2._01 * m._30 + _this2._11 * m._31 + _this2._21 * m._32 + _this2._31 * m._33,_this2._02 * m._00 + _this2._12 * m._01 + _this2._22 * m._02 + _this2._32 * m._03,_this2._02 * m._10 + _this2._12 * m._11 + _this2._22 * m._12 + _this2._32 * m._13,_this2._02 * m._20 + _this2._12 * m._21 + _this2._22 * m._22 + _this2._32 * m._23,_this2._02 * m._30 + _this2._12 * m._31 + _this2._22 * m._32 + _this2._32 * m._33,_this2._03 * m._00 + _this2._13 * m._01 + _this2._23 * m._02 + _this2._33 * m._03,_this2._03 * m._10 + _this2._13 * m._11 + _this2._23 * m._12 + _this2._33 * m._13,_this2._03 * m._20 + _this2._13 * m._21 + _this2._23 * m._22 + _this2._33 * m._23,_this2._03 * m._30 + _this2._13 * m._31 + _this2._23 * m._32 + _this2._33 * m._33);
		this.ctx.renderer2 = renderer2;
		this.allowDebugDraw = allowDebugDraw;
	}
	,endRender: function(doFlush) {
		if(doFlush == null) {
			doFlush = false;
		}
		var doFlush1 = doFlush;
		if(doFlush == null) {
			doFlush1 = false;
		}
		this.render2Context.renderer2.addEndRequest(doFlush1);
		var _this = this.ctx.renderer2;
		_this.projStack.pop();
		_this.batchSource.closeRenderRequests(_this);
		var _this1 = _this.projStack.first();
		var m = _this.viewStack.first();
		_this.mvp = new kha_math_FastMatrix4(_this1._00 * m._00 + _this1._10 * m._01 + _this1._20 * m._02 + _this1._30 * m._03,_this1._00 * m._10 + _this1._10 * m._11 + _this1._20 * m._12 + _this1._30 * m._13,_this1._00 * m._20 + _this1._10 * m._21 + _this1._20 * m._22 + _this1._30 * m._23,_this1._00 * m._30 + _this1._10 * m._31 + _this1._20 * m._32 + _this1._30 * m._33,_this1._01 * m._00 + _this1._11 * m._01 + _this1._21 * m._02 + _this1._31 * m._03,_this1._01 * m._10 + _this1._11 * m._11 + _this1._21 * m._12 + _this1._31 * m._13,_this1._01 * m._20 + _this1._11 * m._21 + _this1._21 * m._22 + _this1._31 * m._23,_this1._01 * m._30 + _this1._11 * m._31 + _this1._21 * m._32 + _this1._31 * m._33,_this1._02 * m._00 + _this1._12 * m._01 + _this1._22 * m._02 + _this1._32 * m._03,_this1._02 * m._10 + _this1._12 * m._11 + _this1._22 * m._12 + _this1._32 * m._13,_this1._02 * m._20 + _this1._12 * m._21 + _this1._22 * m._22 + _this1._32 * m._23,_this1._02 * m._30 + _this1._12 * m._31 + _this1._22 * m._32 + _this1._32 * m._33,_this1._03 * m._00 + _this1._13 * m._01 + _this1._23 * m._02 + _this1._33 * m._03,_this1._03 * m._10 + _this1._13 * m._11 + _this1._23 * m._12 + _this1._33 * m._13,_this1._03 * m._20 + _this1._13 * m._21 + _this1._23 * m._22 + _this1._33 * m._23,_this1._03 * m._30 + _this1._13 * m._31 + _this1._23 * m._32 + _this1._33 * m._33);
		this.ctx.renderer2 = null;
	}
	,renderRenderList: function(renderList,view,resolutionScale) {
		if(resolutionScale == null) {
			resolutionScale = 1.0;
		}
		var renderer2 = this.ctx.renderer2;
		renderer2.viewStack.push(view);
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this = renderer2.projStack.first();
		var m = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this._00 * m._00 + _this._10 * m._01 + _this._20 * m._02 + _this._30 * m._03,_this._00 * m._10 + _this._10 * m._11 + _this._20 * m._12 + _this._30 * m._13,_this._00 * m._20 + _this._10 * m._21 + _this._20 * m._22 + _this._30 * m._23,_this._00 * m._30 + _this._10 * m._31 + _this._20 * m._32 + _this._30 * m._33,_this._01 * m._00 + _this._11 * m._01 + _this._21 * m._02 + _this._31 * m._03,_this._01 * m._10 + _this._11 * m._11 + _this._21 * m._12 + _this._31 * m._13,_this._01 * m._20 + _this._11 * m._21 + _this._21 * m._22 + _this._31 * m._23,_this._01 * m._30 + _this._11 * m._31 + _this._21 * m._32 + _this._31 * m._33,_this._02 * m._00 + _this._12 * m._01 + _this._22 * m._02 + _this._32 * m._03,_this._02 * m._10 + _this._12 * m._11 + _this._22 * m._12 + _this._32 * m._13,_this._02 * m._20 + _this._12 * m._21 + _this._22 * m._22 + _this._32 * m._23,_this._02 * m._30 + _this._12 * m._31 + _this._22 * m._32 + _this._32 * m._33,_this._03 * m._00 + _this._13 * m._01 + _this._23 * m._02 + _this._33 * m._03,_this._03 * m._10 + _this._13 * m._11 + _this._23 * m._12 + _this._33 * m._13,_this._03 * m._20 + _this._13 * m._21 + _this._23 * m._22 + _this._33 * m._23,_this._03 * m._30 + _this._13 * m._31 + _this._23 * m._32 + _this._33 * m._33);
		var scissor = renderList.renderList.scissor;
		this.ctx.scissor = scissor;
		var scissorIndex = -1;
		var i = 0;
		while(i < renderList.count) {
			var node = renderList.renderList.nodes[renderList.from + i];
			if(node._entity == null) {
				continue;
			}
			var pipeline = node.postEffectPipeline;
			if(pipeline != null && !pipeline.isValidating) {
				pipeline.clearRemoved();
				if(pipeline.isEmpty()) {
					pipeline.dispose();
					node.postEffectPipeline = null;
					++i;
				} else {
					var i_abs = renderList.from + i;
					pipeline.validate(renderList.renderList.slice(i_abs,node.exitIdx - i_abs));
					i = node.exitIdx;
					scissorIndex = -1;
				}
			} else {
				++i;
			}
			if(node.isFlushDelayed || node.isRenderFlushDelayed) {
				this.flushDelayed();
			}
			if(node.renderScissorIndex != scissorIndex) {
				this.flushDelayed();
				scissorIndex = node.renderScissorIndex;
				var _this1 = scissor.worldRectList;
				var idx = node.renderScissorIndex * 4;
				var x = _this1.raw[idx];
				var y = _this1.raw[idx + 1];
				var x1 = x;
				var y1 = y;
				if(y == null) {
					y1 = 0;
				}
				if(x == null) {
					x1 = 0;
				}
				var value_x = x1;
				var value_y = y1;
				var tl_x = 0;
				var tl_y = 0;
				var tl_z = 0;
				var tl_w = 1;
				tl_x = view._00 * value_x + view._10 * value_y + view._20 * 0.0 + view._30;
				tl_y = view._01 * value_x + view._11 * value_y + view._21 * 0.0 + view._31;
				tl_z = view._02 * value_x + view._12 * value_y + view._22 * 0.0 + view._32;
				tl_w = view._03 * value_x + view._13 * value_y + view._23 * 0.0 + view._33;
				var x2 = x + _this1.raw[idx + 2];
				var y2 = y + _this1.raw[idx + 3];
				var x3 = x2;
				var y3 = y2;
				if(y2 == null) {
					y3 = 0;
				}
				if(x2 == null) {
					x3 = 0;
				}
				var value_x1 = x3;
				var value_y1 = y3;
				var _this_x = 0;
				var _this_y = 0;
				var _this_z = 0;
				var _this_w = 1;
				_this_x = view._00 * value_x1 + view._10 * value_y1 + view._20 * 0.0 + view._30;
				_this_y = view._01 * value_x1 + view._11 * value_y1 + view._21 * 0.0 + view._31;
				_this_z = view._02 * value_x1 + view._12 * value_y1 + view._22 * 0.0 + view._32;
				_this_w = view._03 * value_x1 + view._13 * value_y1 + view._23 * 0.0 + view._33;
				var x4 = _this_x - tl_x;
				var y4 = _this_y - tl_y;
				var z = _this_z - tl_z;
				var w = _this_w - tl_w;
				if(w == null) {
					w = 1;
				}
				if(z == null) {
					z = 0;
				}
				if(y4 == null) {
					y4 = 0;
				}
				if(x4 == null) {
					x4 = 0;
				}
				renderer2.batchSource.closeRenderRequests(renderer2);
				var renderer21 = renderer2.requests;
				var tmp = renderer2.requestsLength++;
				var _this2 = renderer2.requestFactory;
				var rt = renderer2.rtStack.first();
				var it = _this2.scissorRequests[_this2.scissorRequestLength];
				var scissorRequest = (it != null ? it : _this2.scissorRequests[_this2.scissorRequestLength] = new banan_render_render2_request_ScissorRequest()).configure(rt,tl_x * resolutionScale | 0,tl_y * resolutionScale | 0,x4 * resolutionScale | 0,y4 * resolutionScale | 0);
				_this2.scissorRequestLength++;
				renderer21[tmp] = scissorRequest;
			}
			var sThis = node._entity;
			if(sThis == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
			}
			var this1 = sThis.__component__banan_display_DisplayEdge;
			if(this1 != null && this1.type == banan_display_DisplayEdgeType.Text) {
				this.delayedRender[this.delayedLength++] = node;
			} else {
				var sThis1 = node._entity;
				if(sThis1 == null) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
				}
				var displayEdge = sThis1.__component__banan_display_DisplayEdge;
				var pipeline1 = node.postEffectPipeline;
				if(pipeline1 != null && !pipeline1.isValidating) {
					pipeline1.render(node,this.ctx);
				} else if(displayEdge != null) {
					displayEdge.render(node,this.ctx);
				}
			}
			if(this.allowDebugDraw) {
				if(banan_render_render2_node_NodeRenderer.DEBUG_DRAW_NODES || node.isDebugDraw) {
					if(node.globalTransformId == -1 || node.parent != node._globalTransformParent) {
						node.validateGlobalTransformRecursively();
					}
					var p00 = node._v00;
					var p10 = node._v10;
					var p20 = node._v20;
					var p01 = node._v01;
					var p11 = node._v11;
					var p21 = node._v21;
					if(p21 == null) {
						p21 = 0.0;
					}
					if(p11 == null) {
						p11 = 1.0;
					}
					if(p01 == null) {
						p01 = 0.0;
					}
					if(p20 == null) {
						p20 = 0.0;
					}
					if(p10 == null) {
						p10 = 0.0;
					}
					if(p00 == null) {
						p00 = 1.0;
					}
					var transform_v00 = p00;
					var transform_v10 = p10;
					var transform_v20 = p20;
					var transform_v01 = p01;
					var transform_v11 = p11;
					var transform_v21 = p21;
					var x5 = node.areaX;
					var y5 = node.areaY;
					var sizeX = node.areaSizeX;
					var sizeY = node.areaSizeY;
					var colorA = (node.debugColor >>> 24) * 0.00392156862745098;
					var colorR = ((node.debugColor & 16711680) >>> 16) * 0.00392156862745098;
					var colorG = ((node.debugColor & 65280) >>> 8) * 0.00392156862745098;
					var colorB = (node.debugColor & 255) * 0.00392156862745098;
					var strength = node.debugStrength;
					if(strength == null) {
						strength = 1.0;
					}
					var cameraScale = this.ctx.renderer2.viewStack.first()._00;
					var strengthX = strength / cameraScale / Math.sqrt(transform_v00 * transform_v00 + transform_v01 * transform_v01);
					var strengthY = strength / cameraScale / Math.sqrt(transform_v10 * transform_v10 + transform_v11 * transform_v11);
					if(this.debugFillDisplay == null) {
						this.debugFillDisplay = new banan_display_FillDisplayEdge(this.resourceManager,this.render2Context);
					}
					var _this3 = this.debugFillDisplay;
					_this3.transformId = null;
					_this3.batchEntry.isDirty = true;
					var _this4 = _this3.quad;
					var x11 = x5 + sizeX;
					var y11 = y5 + strengthY;
					_this4.texture = _this3.material.texture;
					_this4.x0 = x5;
					_this4.y0 = y5;
					_this4.x1 = x11;
					_this4.y1 = y5;
					_this4.x2 = x11;
					_this4.y2 = y11;
					_this4.x3 = x5;
					_this4.y3 = y11;
					_this4.tx0 = _this3.fillImage.tx + 1;
					_this4.ty0 = _this3.fillImage.ty + 1;
					_this4.tx1 = _this3.fillImage.tx + _this3.fillImage.tSizeX - 1;
					_this4.ty1 = _this3.fillImage.ty + _this3.fillImage.tSizeY - 1;
					_this4.isNormalizedCalculated = false;
					var x6 = _this4.x0;
					var y6 = _this4.y0;
					var x7 = _this4.x1;
					var y7 = _this4.y1;
					var x8 = _this4.x2;
					var y8 = _this4.y2;
					var x9 = _this4.x3;
					var y9 = _this4.y3;
					_this4.x0 = transform_v00 * x6 + transform_v10 * y6 + transform_v20;
					_this4.y0 = transform_v01 * x6 + transform_v11 * y6 + transform_v21;
					_this4.x1 = transform_v00 * x7 + transform_v10 * y7 + transform_v20;
					_this4.y1 = transform_v01 * x7 + transform_v11 * y7 + transform_v21;
					_this4.x2 = transform_v00 * x8 + transform_v10 * y8 + transform_v20;
					_this4.y2 = transform_v01 * x8 + transform_v11 * y8 + transform_v21;
					_this4.x3 = transform_v00 * x9 + transform_v10 * y9 + transform_v20;
					_this4.y3 = transform_v01 * x9 + transform_v11 * y9 + transform_v21;
					var batchEntry = _this3.batchEntry;
					var quad = _this3.quad;
					var batch = this.ctx.renderer2.getBatchFor(_this3.material,6,batchEntry.themeId);
					if(batchEntry.check(batch,4,6)) {
						batchEntry.sync(batch,4,6);
					} else {
						batchEntry.isDirty = false;
					}
					var batch1 = batch;
					if(batchEntry.isDirty) {
						if(batch1._vertices == null) {
							batch1._vertices = batch1.vertexBuffer.lock();
							if(batch1.isDynamicIndices) {
								batch1._indices = batch1.indexBuffer.lock();
							}
						}
						var vbuff = batch1._vertices;
						var vfrom = batch1.vertexCount;
						if(!quad.isNormalizedCalculated) {
							quad.isNormalizedCalculated = true;
							quad.tx0_norm = quad.tx0 / quad.texture.sizeX;
							quad.tx1_norm = quad.tx1 / quad.texture.sizeX;
							quad.ty0_norm = quad.ty0 / quad.texture.sizeY;
							quad.ty1_norm = quad.ty1 / quad.texture.sizeY;
						}
						var tx0 = quad.tx0_norm;
						var ty0 = quad.ty0_norm;
						var tx1 = quad.tx1_norm;
						var ty1 = quad.ty1_norm;
						var position = vfrom * 9;
						vbuff[position] = quad.x0;
						vbuff[position + 1] = quad.y0;
						vbuff[position + 2] = -5.0;
						vbuff[position + 3] = tx0;
						vbuff[position + 4] = ty0;
						vbuff[position + 5] = colorA;
						vbuff[position + 6] = colorR;
						vbuff[position + 7] = colorG;
						vbuff[position + 8] = colorB;
						var position1 = (vfrom + 1) * 9;
						vbuff[position1] = quad.x1;
						vbuff[position1 + 1] = quad.y1;
						vbuff[position1 + 2] = -5.0;
						vbuff[position1 + 3] = tx1;
						vbuff[position1 + 4] = ty0;
						vbuff[position1 + 5] = colorA;
						vbuff[position1 + 6] = colorR;
						vbuff[position1 + 7] = colorG;
						vbuff[position1 + 8] = colorB;
						var position2 = (vfrom + 2) * 9;
						vbuff[position2] = quad.x2;
						vbuff[position2 + 1] = quad.y2;
						vbuff[position2 + 2] = -5.0;
						vbuff[position2 + 3] = tx1;
						vbuff[position2 + 4] = ty1;
						vbuff[position2 + 5] = colorA;
						vbuff[position2 + 6] = colorR;
						vbuff[position2 + 7] = colorG;
						vbuff[position2 + 8] = colorB;
						var position3 = (vfrom + 3) * 9;
						vbuff[position3] = quad.x3;
						vbuff[position3 + 1] = quad.y3;
						vbuff[position3 + 2] = -5.0;
						vbuff[position3 + 3] = tx0;
						vbuff[position3 + 4] = ty1;
						vbuff[position3 + 5] = colorA;
						vbuff[position3 + 6] = colorR;
						vbuff[position3 + 7] = colorG;
						vbuff[position3 + 8] = colorB;
					}
					batchEntry.shiftCounters();
					if(this.debugFillDisplay == null) {
						this.debugFillDisplay = new banan_display_FillDisplayEdge(this.resourceManager,this.render2Context);
					}
					var _this5 = this.debugFillDisplay;
					var y10 = y5 + sizeY - strengthY;
					_this5.transformId = null;
					_this5.batchEntry.isDirty = true;
					var _this6 = _this5.quad;
					var x12 = x5 + sizeX;
					var y12 = y10 + strengthY;
					_this6.texture = _this5.material.texture;
					_this6.x0 = x5;
					_this6.y0 = y10;
					_this6.x1 = x12;
					_this6.y1 = y10;
					_this6.x2 = x12;
					_this6.y2 = y12;
					_this6.x3 = x5;
					_this6.y3 = y12;
					_this6.tx0 = _this5.fillImage.tx + 1;
					_this6.ty0 = _this5.fillImage.ty + 1;
					_this6.tx1 = _this5.fillImage.tx + _this5.fillImage.tSizeX - 1;
					_this6.ty1 = _this5.fillImage.ty + _this5.fillImage.tSizeY - 1;
					_this6.isNormalizedCalculated = false;
					var x10 = _this6.x0;
					var y13 = _this6.y0;
					var x13 = _this6.x1;
					var y14 = _this6.y1;
					var x14 = _this6.x2;
					var y15 = _this6.y2;
					var x15 = _this6.x3;
					var y16 = _this6.y3;
					_this6.x0 = transform_v00 * x10 + transform_v10 * y13 + transform_v20;
					_this6.y0 = transform_v01 * x10 + transform_v11 * y13 + transform_v21;
					_this6.x1 = transform_v00 * x13 + transform_v10 * y14 + transform_v20;
					_this6.y1 = transform_v01 * x13 + transform_v11 * y14 + transform_v21;
					_this6.x2 = transform_v00 * x14 + transform_v10 * y15 + transform_v20;
					_this6.y2 = transform_v01 * x14 + transform_v11 * y15 + transform_v21;
					_this6.x3 = transform_v00 * x15 + transform_v10 * y16 + transform_v20;
					_this6.y3 = transform_v01 * x15 + transform_v11 * y16 + transform_v21;
					var batchEntry1 = _this5.batchEntry;
					var quad1 = _this5.quad;
					var batch2 = this.ctx.renderer2.getBatchFor(_this5.material,6,batchEntry1.themeId);
					if(batchEntry1.check(batch2,4,6)) {
						batchEntry1.sync(batch2,4,6);
					} else {
						batchEntry1.isDirty = false;
					}
					var batch3 = batch2;
					if(batchEntry1.isDirty) {
						if(batch3._vertices == null) {
							batch3._vertices = batch3.vertexBuffer.lock();
							if(batch3.isDynamicIndices) {
								batch3._indices = batch3.indexBuffer.lock();
							}
						}
						var vbuff1 = batch3._vertices;
						var vfrom1 = batch3.vertexCount;
						if(!quad1.isNormalizedCalculated) {
							quad1.isNormalizedCalculated = true;
							quad1.tx0_norm = quad1.tx0 / quad1.texture.sizeX;
							quad1.tx1_norm = quad1.tx1 / quad1.texture.sizeX;
							quad1.ty0_norm = quad1.ty0 / quad1.texture.sizeY;
							quad1.ty1_norm = quad1.ty1 / quad1.texture.sizeY;
						}
						var tx01 = quad1.tx0_norm;
						var ty01 = quad1.ty0_norm;
						var tx11 = quad1.tx1_norm;
						var ty11 = quad1.ty1_norm;
						var position4 = vfrom1 * 9;
						vbuff1[position4] = quad1.x0;
						vbuff1[position4 + 1] = quad1.y0;
						vbuff1[position4 + 2] = -5.0;
						vbuff1[position4 + 3] = tx01;
						vbuff1[position4 + 4] = ty01;
						vbuff1[position4 + 5] = colorA;
						vbuff1[position4 + 6] = colorR;
						vbuff1[position4 + 7] = colorG;
						vbuff1[position4 + 8] = colorB;
						var position5 = (vfrom1 + 1) * 9;
						vbuff1[position5] = quad1.x1;
						vbuff1[position5 + 1] = quad1.y1;
						vbuff1[position5 + 2] = -5.0;
						vbuff1[position5 + 3] = tx11;
						vbuff1[position5 + 4] = ty01;
						vbuff1[position5 + 5] = colorA;
						vbuff1[position5 + 6] = colorR;
						vbuff1[position5 + 7] = colorG;
						vbuff1[position5 + 8] = colorB;
						var position6 = (vfrom1 + 2) * 9;
						vbuff1[position6] = quad1.x2;
						vbuff1[position6 + 1] = quad1.y2;
						vbuff1[position6 + 2] = -5.0;
						vbuff1[position6 + 3] = tx11;
						vbuff1[position6 + 4] = ty11;
						vbuff1[position6 + 5] = colorA;
						vbuff1[position6 + 6] = colorR;
						vbuff1[position6 + 7] = colorG;
						vbuff1[position6 + 8] = colorB;
						var position7 = (vfrom1 + 3) * 9;
						vbuff1[position7] = quad1.x3;
						vbuff1[position7 + 1] = quad1.y3;
						vbuff1[position7 + 2] = -5.0;
						vbuff1[position7 + 3] = tx01;
						vbuff1[position7 + 4] = ty11;
						vbuff1[position7 + 5] = colorA;
						vbuff1[position7 + 6] = colorR;
						vbuff1[position7 + 7] = colorG;
						vbuff1[position7 + 8] = colorB;
					}
					batchEntry1.shiftCounters();
					if(this.debugFillDisplay == null) {
						this.debugFillDisplay = new banan_display_FillDisplayEdge(this.resourceManager,this.render2Context);
					}
					var _this7 = this.debugFillDisplay;
					_this7.transformId = null;
					_this7.batchEntry.isDirty = true;
					var _this8 = _this7.quad;
					var x16 = x5 + strengthX;
					var y17 = y5 + sizeY;
					_this8.texture = _this7.material.texture;
					_this8.x0 = x5;
					_this8.y0 = y5;
					_this8.x1 = x16;
					_this8.y1 = y5;
					_this8.x2 = x16;
					_this8.y2 = y17;
					_this8.x3 = x5;
					_this8.y3 = y17;
					_this8.tx0 = _this7.fillImage.tx + 1;
					_this8.ty0 = _this7.fillImage.ty + 1;
					_this8.tx1 = _this7.fillImage.tx + _this7.fillImage.tSizeX - 1;
					_this8.ty1 = _this7.fillImage.ty + _this7.fillImage.tSizeY - 1;
					_this8.isNormalizedCalculated = false;
					var x17 = _this8.x0;
					var y18 = _this8.y0;
					var x18 = _this8.x1;
					var y19 = _this8.y1;
					var x19 = _this8.x2;
					var y20 = _this8.y2;
					var x20 = _this8.x3;
					var y21 = _this8.y3;
					_this8.x0 = transform_v00 * x17 + transform_v10 * y18 + transform_v20;
					_this8.y0 = transform_v01 * x17 + transform_v11 * y18 + transform_v21;
					_this8.x1 = transform_v00 * x18 + transform_v10 * y19 + transform_v20;
					_this8.y1 = transform_v01 * x18 + transform_v11 * y19 + transform_v21;
					_this8.x2 = transform_v00 * x19 + transform_v10 * y20 + transform_v20;
					_this8.y2 = transform_v01 * x19 + transform_v11 * y20 + transform_v21;
					_this8.x3 = transform_v00 * x20 + transform_v10 * y21 + transform_v20;
					_this8.y3 = transform_v01 * x20 + transform_v11 * y21 + transform_v21;
					var batchEntry2 = _this7.batchEntry;
					var quad2 = _this7.quad;
					var batch4 = this.ctx.renderer2.getBatchFor(_this7.material,6,batchEntry2.themeId);
					if(batchEntry2.check(batch4,4,6)) {
						batchEntry2.sync(batch4,4,6);
					} else {
						batchEntry2.isDirty = false;
					}
					var batch5 = batch4;
					if(batchEntry2.isDirty) {
						if(batch5._vertices == null) {
							batch5._vertices = batch5.vertexBuffer.lock();
							if(batch5.isDynamicIndices) {
								batch5._indices = batch5.indexBuffer.lock();
							}
						}
						var vbuff2 = batch5._vertices;
						var vfrom2 = batch5.vertexCount;
						if(!quad2.isNormalizedCalculated) {
							quad2.isNormalizedCalculated = true;
							quad2.tx0_norm = quad2.tx0 / quad2.texture.sizeX;
							quad2.tx1_norm = quad2.tx1 / quad2.texture.sizeX;
							quad2.ty0_norm = quad2.ty0 / quad2.texture.sizeY;
							quad2.ty1_norm = quad2.ty1 / quad2.texture.sizeY;
						}
						var tx02 = quad2.tx0_norm;
						var ty02 = quad2.ty0_norm;
						var tx12 = quad2.tx1_norm;
						var ty12 = quad2.ty1_norm;
						var position8 = vfrom2 * 9;
						vbuff2[position8] = quad2.x0;
						vbuff2[position8 + 1] = quad2.y0;
						vbuff2[position8 + 2] = -5.0;
						vbuff2[position8 + 3] = tx02;
						vbuff2[position8 + 4] = ty02;
						vbuff2[position8 + 5] = colorA;
						vbuff2[position8 + 6] = colorR;
						vbuff2[position8 + 7] = colorG;
						vbuff2[position8 + 8] = colorB;
						var position9 = (vfrom2 + 1) * 9;
						vbuff2[position9] = quad2.x1;
						vbuff2[position9 + 1] = quad2.y1;
						vbuff2[position9 + 2] = -5.0;
						vbuff2[position9 + 3] = tx12;
						vbuff2[position9 + 4] = ty02;
						vbuff2[position9 + 5] = colorA;
						vbuff2[position9 + 6] = colorR;
						vbuff2[position9 + 7] = colorG;
						vbuff2[position9 + 8] = colorB;
						var position10 = (vfrom2 + 2) * 9;
						vbuff2[position10] = quad2.x2;
						vbuff2[position10 + 1] = quad2.y2;
						vbuff2[position10 + 2] = -5.0;
						vbuff2[position10 + 3] = tx12;
						vbuff2[position10 + 4] = ty12;
						vbuff2[position10 + 5] = colorA;
						vbuff2[position10 + 6] = colorR;
						vbuff2[position10 + 7] = colorG;
						vbuff2[position10 + 8] = colorB;
						var position11 = (vfrom2 + 3) * 9;
						vbuff2[position11] = quad2.x3;
						vbuff2[position11 + 1] = quad2.y3;
						vbuff2[position11 + 2] = -5.0;
						vbuff2[position11 + 3] = tx02;
						vbuff2[position11 + 4] = ty12;
						vbuff2[position11 + 5] = colorA;
						vbuff2[position11 + 6] = colorR;
						vbuff2[position11 + 7] = colorG;
						vbuff2[position11 + 8] = colorB;
					}
					batchEntry2.shiftCounters();
					if(this.debugFillDisplay == null) {
						this.debugFillDisplay = new banan_display_FillDisplayEdge(this.resourceManager,this.render2Context);
					}
					var _this9 = this.debugFillDisplay;
					var x21 = x5 + sizeX - strengthX;
					_this9.transformId = null;
					_this9.batchEntry.isDirty = true;
					var _this10 = _this9.quad;
					var x110 = x21 + strengthX;
					var y110 = y5 + sizeY;
					_this10.texture = _this9.material.texture;
					_this10.x0 = x21;
					_this10.y0 = y5;
					_this10.x1 = x110;
					_this10.y1 = y5;
					_this10.x2 = x110;
					_this10.y2 = y110;
					_this10.x3 = x21;
					_this10.y3 = y110;
					_this10.tx0 = _this9.fillImage.tx + 1;
					_this10.ty0 = _this9.fillImage.ty + 1;
					_this10.tx1 = _this9.fillImage.tx + _this9.fillImage.tSizeX - 1;
					_this10.ty1 = _this9.fillImage.ty + _this9.fillImage.tSizeY - 1;
					_this10.isNormalizedCalculated = false;
					var x22 = _this10.x0;
					var y22 = _this10.y0;
					var x23 = _this10.x1;
					var y23 = _this10.y1;
					var x24 = _this10.x2;
					var y24 = _this10.y2;
					var x25 = _this10.x3;
					var y25 = _this10.y3;
					_this10.x0 = transform_v00 * x22 + transform_v10 * y22 + transform_v20;
					_this10.y0 = transform_v01 * x22 + transform_v11 * y22 + transform_v21;
					_this10.x1 = transform_v00 * x23 + transform_v10 * y23 + transform_v20;
					_this10.y1 = transform_v01 * x23 + transform_v11 * y23 + transform_v21;
					_this10.x2 = transform_v00 * x24 + transform_v10 * y24 + transform_v20;
					_this10.y2 = transform_v01 * x24 + transform_v11 * y24 + transform_v21;
					_this10.x3 = transform_v00 * x25 + transform_v10 * y25 + transform_v20;
					_this10.y3 = transform_v01 * x25 + transform_v11 * y25 + transform_v21;
					var batchEntry3 = _this9.batchEntry;
					var quad3 = _this9.quad;
					var batch6 = this.ctx.renderer2.getBatchFor(_this9.material,6,batchEntry3.themeId);
					if(batchEntry3.check(batch6,4,6)) {
						batchEntry3.sync(batch6,4,6);
					} else {
						batchEntry3.isDirty = false;
					}
					var batch7 = batch6;
					if(batchEntry3.isDirty) {
						if(batch7._vertices == null) {
							batch7._vertices = batch7.vertexBuffer.lock();
							if(batch7.isDynamicIndices) {
								batch7._indices = batch7.indexBuffer.lock();
							}
						}
						var vbuff3 = batch7._vertices;
						var vfrom3 = batch7.vertexCount;
						if(!quad3.isNormalizedCalculated) {
							quad3.isNormalizedCalculated = true;
							quad3.tx0_norm = quad3.tx0 / quad3.texture.sizeX;
							quad3.tx1_norm = quad3.tx1 / quad3.texture.sizeX;
							quad3.ty0_norm = quad3.ty0 / quad3.texture.sizeY;
							quad3.ty1_norm = quad3.ty1 / quad3.texture.sizeY;
						}
						var tx03 = quad3.tx0_norm;
						var ty03 = quad3.ty0_norm;
						var tx13 = quad3.tx1_norm;
						var ty13 = quad3.ty1_norm;
						var position12 = vfrom3 * 9;
						vbuff3[position12] = quad3.x0;
						vbuff3[position12 + 1] = quad3.y0;
						vbuff3[position12 + 2] = -5.0;
						vbuff3[position12 + 3] = tx03;
						vbuff3[position12 + 4] = ty03;
						vbuff3[position12 + 5] = colorA;
						vbuff3[position12 + 6] = colorR;
						vbuff3[position12 + 7] = colorG;
						vbuff3[position12 + 8] = colorB;
						var position13 = (vfrom3 + 1) * 9;
						vbuff3[position13] = quad3.x1;
						vbuff3[position13 + 1] = quad3.y1;
						vbuff3[position13 + 2] = -5.0;
						vbuff3[position13 + 3] = tx13;
						vbuff3[position13 + 4] = ty03;
						vbuff3[position13 + 5] = colorA;
						vbuff3[position13 + 6] = colorR;
						vbuff3[position13 + 7] = colorG;
						vbuff3[position13 + 8] = colorB;
						var position14 = (vfrom3 + 2) * 9;
						vbuff3[position14] = quad3.x2;
						vbuff3[position14 + 1] = quad3.y2;
						vbuff3[position14 + 2] = -5.0;
						vbuff3[position14 + 3] = tx13;
						vbuff3[position14 + 4] = ty13;
						vbuff3[position14 + 5] = colorA;
						vbuff3[position14 + 6] = colorR;
						vbuff3[position14 + 7] = colorG;
						vbuff3[position14 + 8] = colorB;
						var position15 = (vfrom3 + 3) * 9;
						vbuff3[position15] = quad3.x3;
						vbuff3[position15 + 1] = quad3.y3;
						vbuff3[position15 + 2] = -5.0;
						vbuff3[position15 + 3] = tx03;
						vbuff3[position15 + 4] = ty13;
						vbuff3[position15 + 5] = colorA;
						vbuff3[position15 + 6] = colorR;
						vbuff3[position15 + 7] = colorG;
						vbuff3[position15 + 8] = colorB;
					}
					batchEntry3.shiftCounters();
				}
				if(banan_render_render2_node_NodeRenderer.DEBUG_DRAW_NODE_NAMES || node.isDebugDraw) {
					var sThis2 = node._entity;
					if(sThis2 == null) {
						throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
					}
					var nodeName = sThis2.name;
					if(nodeName != "") {
						var fontData = banan_render_render2_node_NodeRenderer.debugGetFont();
						var this2 = node.debugTextDisplay;
						var textDisplay;
						if(this2 != null) {
							textDisplay = this2;
						} else {
							node.debugTextDisplay = new banan_display_TextDisplayEdge(this.render2Context,fontData.font,"",fontData.size,banan_display_TextHAlign.Left,banan_display_TextVAlign.Top,banan_display_TextWrap.None);
							textDisplay = node.debugTextDisplay;
						}
						textDisplay.set_text(nodeName);
						if(this.debugFillDisplay == null) {
							this.debugFillDisplay = new banan_display_FillDisplayEdge(this.resourceManager,this.render2Context);
						}
						var _this11 = this.debugFillDisplay;
						var ctx = this.ctx;
						if(node.globalTransformId == -1 || node.parent != node._globalTransformParent) {
							node.validateGlobalTransformRecursively();
						}
						var p001 = node._v00;
						var p101 = node._v10;
						var p201 = node._v20;
						var p011 = node._v01;
						var p111 = node._v11;
						var p211 = node._v21;
						if(p211 == null) {
							p211 = 0.0;
						}
						if(p111 == null) {
							p111 = 1.0;
						}
						if(p011 == null) {
							p011 = 0.0;
						}
						if(p201 == null) {
							p201 = 0.0;
						}
						if(p101 == null) {
							p101 = 0.0;
						}
						if(p001 == null) {
							p001 = 1.0;
						}
						var transform_v001 = p001;
						var transform_v101 = p101;
						var transform_v201 = p201;
						var transform_v011 = p011;
						var transform_v111 = p111;
						var transform_v211 = p211;
						var x26 = node.areaX;
						var y26 = node.areaY;
						var may = textDisplay.textDesigner;
						var this3 = may != null ? may.textSizeX : null;
						var may1 = textDisplay.textDesigner;
						var this4 = may1 != null ? may1.textSizeY : null;
						_this11.transformId = null;
						_this11.batchEntry.isDirty = true;
						var _this12 = _this11.quad;
						var x111 = x26 + ((this3 != null ? this3 : 0) + textDisplay.paddingLeft + textDisplay.paddingRight + 2);
						var y111 = y26 + ((this4 != null ? this4 : 0) + textDisplay.paddingTop + textDisplay.paddingBottom + 2);
						_this12.texture = _this11.material.texture;
						_this12.x0 = x26;
						_this12.y0 = y26;
						_this12.x1 = x111;
						_this12.y1 = y26;
						_this12.x2 = x111;
						_this12.y2 = y111;
						_this12.x3 = x26;
						_this12.y3 = y111;
						_this12.tx0 = _this11.fillImage.tx + 1;
						_this12.ty0 = _this11.fillImage.ty + 1;
						_this12.tx1 = _this11.fillImage.tx + _this11.fillImage.tSizeX - 1;
						_this12.ty1 = _this11.fillImage.ty + _this11.fillImage.tSizeY - 1;
						_this12.isNormalizedCalculated = false;
						var x27 = _this12.x0;
						var y27 = _this12.y0;
						var x28 = _this12.x1;
						var y28 = _this12.y1;
						var x29 = _this12.x2;
						var y29 = _this12.y2;
						var x30 = _this12.x3;
						var y30 = _this12.y3;
						_this12.x0 = transform_v001 * x27 + transform_v101 * y27 + transform_v201;
						_this12.y0 = transform_v011 * x27 + transform_v111 * y27 + transform_v211;
						_this12.x1 = transform_v001 * x28 + transform_v101 * y28 + transform_v201;
						_this12.y1 = transform_v011 * x28 + transform_v111 * y28 + transform_v211;
						_this12.x2 = transform_v001 * x29 + transform_v101 * y29 + transform_v201;
						_this12.y2 = transform_v011 * x29 + transform_v111 * y29 + transform_v211;
						_this12.x3 = transform_v001 * x30 + transform_v101 * y30 + transform_v201;
						_this12.y3 = transform_v011 * x30 + transform_v111 * y30 + transform_v211;
						var batchEntry4 = _this11.batchEntry;
						var quad4 = _this11.quad;
						var batch8 = ctx.renderer2.getBatchFor(_this11.material,6,batchEntry4.themeId);
						if(batchEntry4.check(batch8,4,6)) {
							batchEntry4.sync(batch8,4,6);
						} else {
							batchEntry4.isDirty = false;
						}
						var batch9 = batch8;
						if(batchEntry4.isDirty) {
							if(batch9._vertices == null) {
								batch9._vertices = batch9.vertexBuffer.lock();
								if(batch9.isDynamicIndices) {
									batch9._indices = batch9.indexBuffer.lock();
								}
							}
							var vbuff4 = batch9._vertices;
							var vfrom4 = batch9.vertexCount;
							if(!quad4.isNormalizedCalculated) {
								quad4.isNormalizedCalculated = true;
								quad4.tx0_norm = quad4.tx0 / quad4.texture.sizeX;
								quad4.tx1_norm = quad4.tx1 / quad4.texture.sizeX;
								quad4.ty0_norm = quad4.ty0 / quad4.texture.sizeY;
								quad4.ty1_norm = quad4.ty1 / quad4.texture.sizeY;
							}
							var tx04 = quad4.tx0_norm;
							var ty04 = quad4.ty0_norm;
							var tx14 = quad4.tx1_norm;
							var ty14 = quad4.ty1_norm;
							var g = 1;
							var b = 1;
							var a = 1;
							var position16 = vfrom4 * 9;
							vbuff4[position16] = quad4.x0;
							vbuff4[position16 + 1] = quad4.y0;
							vbuff4[position16 + 2] = -5.0;
							vbuff4[position16 + 3] = tx04;
							vbuff4[position16 + 4] = ty04;
							vbuff4[position16 + 5] = 0.6;
							vbuff4[position16 + 6] = g;
							vbuff4[position16 + 7] = b;
							vbuff4[position16 + 8] = a;
							var position17 = (vfrom4 + 1) * 9;
							vbuff4[position17] = quad4.x1;
							vbuff4[position17 + 1] = quad4.y1;
							vbuff4[position17 + 2] = -5.0;
							vbuff4[position17 + 3] = tx14;
							vbuff4[position17 + 4] = ty04;
							vbuff4[position17 + 5] = 0.6;
							vbuff4[position17 + 6] = g;
							vbuff4[position17 + 7] = b;
							vbuff4[position17 + 8] = a;
							var position18 = (vfrom4 + 2) * 9;
							vbuff4[position18] = quad4.x2;
							vbuff4[position18 + 1] = quad4.y2;
							vbuff4[position18 + 2] = -5.0;
							vbuff4[position18 + 3] = tx14;
							vbuff4[position18 + 4] = ty14;
							vbuff4[position18 + 5] = 0.6;
							vbuff4[position18 + 6] = g;
							vbuff4[position18 + 7] = b;
							vbuff4[position18 + 8] = a;
							var position19 = (vfrom4 + 3) * 9;
							vbuff4[position19] = quad4.x3;
							vbuff4[position19 + 1] = quad4.y3;
							vbuff4[position19 + 2] = -5.0;
							vbuff4[position19 + 3] = tx04;
							vbuff4[position19 + 4] = ty14;
							vbuff4[position19 + 5] = 0.6;
							vbuff4[position19 + 6] = g;
							vbuff4[position19 + 7] = b;
							vbuff4[position19 + 8] = a;
						}
						batchEntry4.shiftCounters();
						textDisplay.renderImpl(node,this.ctx,0.6,1,1,1,1,1,1);
					}
				}
			}
		}
		this.flushDelayed();
		renderer2.batchSource.closeRenderRequests(renderer2);
		var renderer22 = renderer2.requests;
		var tmp1 = renderer2.requestsLength++;
		var _this13 = renderer2.requestFactory;
		var rt1 = renderer2.rtStack.first();
		var it1 = _this13.disableScissorRequests[_this13.disableScissorRequestLength];
		var disableScissorRequest = (it1 != null ? it1 : _this13.disableScissorRequests[_this13.disableScissorRequestLength] = new banan_render_render2_request_DisableScissorRequest()).configure(rt1);
		_this13.disableScissorRequestLength++;
		renderer22[tmp1] = disableScissorRequest;
		renderer2.viewStack.pop();
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this14 = renderer2.projStack.first();
		var m1 = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this14._00 * m1._00 + _this14._10 * m1._01 + _this14._20 * m1._02 + _this14._30 * m1._03,_this14._00 * m1._10 + _this14._10 * m1._11 + _this14._20 * m1._12 + _this14._30 * m1._13,_this14._00 * m1._20 + _this14._10 * m1._21 + _this14._20 * m1._22 + _this14._30 * m1._23,_this14._00 * m1._30 + _this14._10 * m1._31 + _this14._20 * m1._32 + _this14._30 * m1._33,_this14._01 * m1._00 + _this14._11 * m1._01 + _this14._21 * m1._02 + _this14._31 * m1._03,_this14._01 * m1._10 + _this14._11 * m1._11 + _this14._21 * m1._12 + _this14._31 * m1._13,_this14._01 * m1._20 + _this14._11 * m1._21 + _this14._21 * m1._22 + _this14._31 * m1._23,_this14._01 * m1._30 + _this14._11 * m1._31 + _this14._21 * m1._32 + _this14._31 * m1._33,_this14._02 * m1._00 + _this14._12 * m1._01 + _this14._22 * m1._02 + _this14._32 * m1._03,_this14._02 * m1._10 + _this14._12 * m1._11 + _this14._22 * m1._12 + _this14._32 * m1._13,_this14._02 * m1._20 + _this14._12 * m1._21 + _this14._22 * m1._22 + _this14._32 * m1._23,_this14._02 * m1._30 + _this14._12 * m1._31 + _this14._22 * m1._32 + _this14._32 * m1._33,_this14._03 * m1._00 + _this14._13 * m1._01 + _this14._23 * m1._02 + _this14._33 * m1._03,_this14._03 * m1._10 + _this14._13 * m1._11 + _this14._23 * m1._12 + _this14._33 * m1._13,_this14._03 * m1._20 + _this14._13 * m1._21 + _this14._23 * m1._22 + _this14._33 * m1._23,_this14._03 * m1._30 + _this14._13 * m1._31 + _this14._23 * m1._32 + _this14._33 * m1._33);
	}
	,flushDelayed: function() {
		var _g = 0;
		var _g1 = this.delayedLength;
		while(_g < _g1) {
			var node = this.delayedRender[_g++];
			var sThis = node._entity;
			if(sThis == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
			}
			var displayEdge = sThis.__component__banan_display_DisplayEdge;
			var pipeline = node.postEffectPipeline;
			if(pipeline != null && !pipeline.isValidating) {
				pipeline.render(node,this.ctx);
			} else if(displayEdge != null) {
				displayEdge.render(node,this.ctx);
			}
		}
		this.delayedLength = 0;
	}
	,debugFillDisplay: null
	,get_debugFillDisplay: function() {
		if(this.debugFillDisplay == null) {
			this.debugFillDisplay = new banan_display_FillDisplayEdge(this.resourceManager,this.render2Context);
		}
		return this.debugFillDisplay;
	}
	,__class__: banan_render_render2_node_NodeRenderer
	,__properties__: {get_debugFillDisplay:"get_debugFillDisplay"}
};
var banan_render_render2_request_RenderRequest = function() {
};
$hxClasses["banan.render.render2.request.RenderRequest"] = banan_render_render2_request_RenderRequest;
banan_render_render2_request_RenderRequest.__name__ = "banan.render.render2.request.RenderRequest";
banan_render_render2_request_RenderRequest.prototype = {
	rt: null
	,process: function() {
	}
	,__class__: banan_render_render2_request_RenderRequest
};
var banan_render_render2_request_DisableScissorRequest = function() {
	banan_render_render2_request_RenderRequest.call(this);
};
$hxClasses["banan.render.render2.request.DisableScissorRequest"] = banan_render_render2_request_DisableScissorRequest;
banan_render_render2_request_DisableScissorRequest.__name__ = "banan.render.render2.request.DisableScissorRequest";
banan_render_render2_request_DisableScissorRequest.__super__ = banan_render_render2_request_RenderRequest;
banan_render_render2_request_DisableScissorRequest.prototype = $extend(banan_render_render2_request_RenderRequest.prototype,{
	configure: function(rt) {
		this.rt = rt;
		return this;
	}
	,process: function() {
		this.rt.g4.disableScissor();
	}
	,__class__: banan_render_render2_request_DisableScissorRequest
});
var banan_render_render2_request_DrawRequest = function() {
	banan_render_render2_request_RenderRequest.call(this);
};
$hxClasses["banan.render.render2.request.DrawRequest"] = banan_render_render2_request_DrawRequest;
banan_render_render2_request_DrawRequest.__name__ = "banan.render.render2.request.DrawRequest";
banan_render_render2_request_DrawRequest.incDrawCalls = function(indexCount) {
	banan_render_render2_request_DrawRequest.drawCalls++;
};
banan_render_render2_request_DrawRequest.resetDebugCounters = function() {
	banan_render_render2_request_DrawRequest.drawCalls = 0;
};
banan_render_render2_request_DrawRequest.__super__ = banan_render_render2_request_RenderRequest;
banan_render_render2_request_DrawRequest.prototype = $extend(banan_render_render2_request_RenderRequest.prototype,{
	batch: null
	,from: null
	,to: null
	,material: null
	,mvp: null
	,configure: function(rt,batch,from,to,material,mvp) {
		this.rt = rt;
		this.batch = batch;
		this.from = from;
		this.to = to;
		this.material = material;
		this.mvp = mvp;
		return this;
	}
	,process: function() {
		var g4 = this.rt.g4;
		var materialRenderer = this.material.materialRenderer;
		var _this = this.batch;
		if(_this._vertices != null) {
			_this.vertexBuffer.unlock();
			if(_this.isDynamicIndices) {
				_this.indexBuffer.unlock();
			}
			_this._vertices = null;
			_this._indices = null;
		}
		_this.clear();
		g4.setPipeline(materialRenderer.pipeline);
		g4.setVertexBuffer(this.batch.vertexBuffer);
		g4.setIndexBuffer(this.batch.indexBuffer);
		g4.setMatrix(materialRenderer.projection,this.mvp);
		materialRenderer.preRender(g4,this.material);
		g4.drawIndexedVertices(this.from,this.to - this.from);
		materialRenderer.postRender(g4);
		banan_render_render2_request_DrawRequest.drawCalls++;
	}
	,__class__: banan_render_render2_request_DrawRequest
});
var banan_render_render2_request_RenderRequestFactory = function() {
	this.drawRequests = [];
	this.scissorRequests = [];
	this.disableScissorRequests = [];
	this.resetPools();
};
$hxClasses["banan.render.render2.request.RenderRequestFactory"] = banan_render_render2_request_RenderRequestFactory;
banan_render_render2_request_RenderRequestFactory.__name__ = "banan.render.render2.request.RenderRequestFactory";
banan_render_render2_request_RenderRequestFactory.prototype = {
	drawRequests: null
	,scissorRequests: null
	,disableScissorRequests: null
	,drawRequestLength: null
	,scissorRequestLength: null
	,disableScissorRequestLength: null
	,getDrawRequest: function(rt,batch,from,to,material,mvp) {
		var _gthis = this;
		var it = this.drawRequests[this.drawRequestLength];
		var drawRequest = (it != null ? it : _gthis.drawRequests[_gthis.drawRequestLength] = new banan_render_render2_request_DrawRequest()).configure(rt,batch,from,to,material,mvp);
		this.drawRequestLength++;
		return drawRequest;
	}
	,getScissorRequest: function(rt,x,y,w,h) {
		var _gthis = this;
		var it = this.scissorRequests[this.scissorRequestLength];
		var scissorRequest = (it != null ? it : _gthis.scissorRequests[_gthis.scissorRequestLength] = new banan_render_render2_request_ScissorRequest()).configure(rt,x,y,w,h);
		this.scissorRequestLength++;
		return scissorRequest;
	}
	,getDisableScissorRequest: function(rt) {
		var _gthis = this;
		var it = this.disableScissorRequests[this.disableScissorRequestLength];
		var disableScissorRequest = (it != null ? it : _gthis.disableScissorRequests[_gthis.disableScissorRequestLength] = new banan_render_render2_request_DisableScissorRequest()).configure(rt);
		this.disableScissorRequestLength++;
		return disableScissorRequest;
	}
	,resetPools: function() {
		this.drawRequestLength = 0;
		this.scissorRequestLength = 0;
		this.disableScissorRequestLength = 0;
	}
	,__class__: banan_render_render2_request_RenderRequestFactory
};
var banan_render_render2_request_ScissorRequest = function() {
	banan_render_render2_request_RenderRequest.call(this);
};
$hxClasses["banan.render.render2.request.ScissorRequest"] = banan_render_render2_request_ScissorRequest;
banan_render_render2_request_ScissorRequest.__name__ = "banan.render.render2.request.ScissorRequest";
banan_render_render2_request_ScissorRequest.__super__ = banan_render_render2_request_RenderRequest;
banan_render_render2_request_ScissorRequest.prototype = $extend(banan_render_render2_request_RenderRequest.prototype,{
	x: null
	,y: null
	,w: null
	,h: null
	,configure: function(rt,x,y,w,h) {
		this.rt = rt;
		this.x = x;
		this.y = y;
		this.w = w;
		this.h = h;
		return this;
	}
	,process: function() {
		this.rt.g4.scissor(this.x,this.y,this.w,this.h);
	}
	,__class__: banan_render_render2_request_ScissorRequest
});
var banan_render_renderlist_RenderList = function() {
	this.nodes = [];
	this.nodesCount = 0;
	this.scissor = new banan_render_renderlist_Scissor();
};
$hxClasses["banan.render.renderlist.RenderList"] = banan_render_renderlist_RenderList;
banan_render_renderlist_RenderList.__name__ = "banan.render.renderlist.RenderList";
banan_render_renderlist_RenderList.prototype = {
	nodes: null
	,nodesCount: null
	,scissor: null
	,collectNodes: function(root,wX,wY,wSizeX,wSizeY) {
		this.scissor.reset(wX,wY,wSizeX,wSizeY);
	}
	,slice: function(from,count) {
		if(count == null) {
			count = this.nodesCount - from;
		}
		return banan_render_renderlist__$RenderListSlice_RenderListSlice_$Impl_$._new(this,from,count);
	}
	,__class__: banan_render_renderlist_RenderList
};
var banan_render_renderlist_GuiRenderList = function() {
	banan_render_renderlist_RenderList.call(this);
};
$hxClasses["banan.render.renderlist.GuiRenderList"] = banan_render_renderlist_GuiRenderList;
banan_render_renderlist_GuiRenderList.__name__ = "banan.render.renderlist.GuiRenderList";
banan_render_renderlist_GuiRenderList.__super__ = banan_render_renderlist_RenderList;
banan_render_renderlist_GuiRenderList.prototype = $extend(banan_render_renderlist_RenderList.prototype,{
	isNeedFlushBeforeNextNode: null
	,collectNodes: function(root,wX,wY,wSizeX,wSizeY) {
		var _gthis = this;
		banan_render_renderlist_RenderList.prototype.collectNodes.call(this,root,wX,wY,wSizeX,wSizeY);
		this.nodesCount = 0;
		this.isNeedFlushBeforeNextNode = false;
		var entity = root;
		var sThis = entity.__component__banan_display_NodeEdge;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"GuiRenderList.hx:22","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
		}
		var rootNode = sThis;
		var into = true;
		var nodeEdge = rootNode;
		while(true) {
			if(into) {
				if(nodeEdge._isVisible.valueImpl.get_value() && nodeEdge.scaleX != 0.0 && nodeEdge.scaleY != 0.0) {
					if(!nodeEdge._isBoundsValid) {
						nodeEdge.validateGlobalBounds();
					}
					var left = nodeEdge._boundsLeft;
					var top = nodeEdge._boundsTop;
					var nodeRectWorld_x = left;
					var nodeRectWorld_y = top;
					var tmp;
					if(_gthis.scissor.visible) {
						var _this = _gthis.scissor;
						var _this1 = _this.worldRectList;
						var idx = _this.index * 4;
						var another_x = _this1.raw[idx];
						var another_y = _this1.raw[idx + 1];
						tmp = !(nodeRectWorld_x >= another_x + _this1.raw[idx + 2] || nodeRectWorld_x + (nodeEdge._boundsRight - left) <= another_x || nodeRectWorld_y >= another_y + _this1.raw[idx + 3] || nodeRectWorld_y + (nodeEdge._boundsBottom - top) <= another_y);
					} else {
						tmp = false;
					}
					if(tmp) {
						_gthis.nodes[_gthis.nodesCount++] = nodeEdge;
						nodeEdge.renderScissorIndex = _gthis.scissor.index;
						nodeEdge.isRenderFlushDelayed = _gthis.isNeedFlushBeforeNextNode;
						_gthis.isNeedFlushBeforeNextNode = false;
					}
				}
				if(nodeEdge.isScissorChildren) {
					var _this2 = _gthis.scissor;
					if(!nodeEdge._isBoundsValid) {
						nodeEdge.validateGlobalBounds();
					}
					var left1 = nodeEdge._boundsLeft;
					var top1 = nodeEdge._boundsTop;
					var wRectNew_x = left1;
					var wRectNew_y = top1;
					var _this3 = _this2.worldRectList;
					var idx1 = _this2.index * 4;
					var wRectOld_x = _this3.raw[idx1];
					var wRectOld_y = _this3.raw[idx1 + 1];
					var left2 = Math.max(wRectOld_x,wRectNew_x);
					var top2 = Math.max(wRectOld_y,wRectNew_y);
					var wRect_sizeX = Math.min(wRectOld_x + _this3.raw[idx1 + 2],wRectNew_x + (nodeEdge._boundsRight - left1)) - left2;
					var wRect_sizeY = Math.min(wRectOld_y + _this3.raw[idx1 + 3],wRectNew_y + (nodeEdge._boundsBottom - top1)) - top2;
					_this2.indexStack.push(_this2.index);
					_this2.index = _this2.nextIndex++;
					var _this4 = _this2.worldRectList;
					var idx2 = _this2.index * 4;
					_this4.raw[idx2] = left2;
					_this4.raw[idx2 + 1] = top2;
					_this4.raw[idx2 + 2] = wRect_sizeX;
					_this4.raw[idx2 + 3] = wRect_sizeY;
					_this2.visible = wRect_sizeX > 0 && wRect_sizeY > 0;
				}
			}
			var first = nodeEdge._isChildrenVisible.valueImpl.get_value() && nodeEdge.scaleX != 0.0 && nodeEdge.scaleY != 0.0 ? nodeEdge.firstChild : null;
			if(into && first != null) {
				nodeEdge = first;
			} else {
				if(nodeEdge.isFlushDelayed) {
					_gthis.isNeedFlushBeforeNextNode = true;
				}
				if(nodeEdge.isScissorChildren) {
					_gthis.scissor.popRect();
				}
				nodeEdge.exitIdx = _gthis.nodesCount;
				if(nodeEdge == rootNode) {
					break;
				}
				var next = nodeEdge.next;
				if(next != null) {
					into = true;
					nodeEdge = next;
				} else {
					into = false;
					var sThis1 = nodeEdge.parent;
					if(sThis1 == null) {
						throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:721","",null));
					}
					nodeEdge = sThis1;
				}
			}
		}
		this.nodes.length = this.nodesCount;
	}
	,__class__: banan_render_renderlist_GuiRenderList
});
var banan_render_renderlist__$RenderListSlice_RenderListSlice_$Impl_$ = {};
$hxClasses["banan.render.renderlist._RenderListSlice.RenderListSlice_Impl_"] = banan_render_renderlist__$RenderListSlice_RenderListSlice_$Impl_$;
banan_render_renderlist__$RenderListSlice_RenderListSlice_$Impl_$.__name__ = "banan.render.renderlist._RenderListSlice.RenderListSlice_Impl_";
banan_render_renderlist__$RenderListSlice_RenderListSlice_$Impl_$._new = function(renderList,from,count) {
	return new banan_render_renderlist__$RenderListSlice_RenderListSliceUnderlying(renderList,from,count);
};
banan_render_renderlist__$RenderListSlice_RenderListSlice_$Impl_$.sliceAbs = function(this1,from,count) {
	return this1.renderList.slice(from,count);
};
banan_render_renderlist__$RenderListSlice_RenderListSlice_$Impl_$.abs = function(this1,idx) {
	return this1.from + idx;
};
banan_render_renderlist__$RenderListSlice_RenderListSlice_$Impl_$.getScissor = function(this1) {
	return this1.renderList.scissor;
};
banan_render_renderlist__$RenderListSlice_RenderListSlice_$Impl_$.getNode = function(this1,idx) {
	return this1.renderList.nodes[this1.from + idx];
};
banan_render_renderlist__$RenderListSlice_RenderListSlice_$Impl_$.firstNode = function(this1) {
	return this1.renderList.nodes[this1.from];
};
banan_render_renderlist__$RenderListSlice_RenderListSlice_$Impl_$.lastNode = function(this1) {
	return this1.renderList.nodes[this1.from + (this1.count - 1)];
};
var banan_render_renderlist__$RenderListSlice_RenderListSliceUnderlying = function(renderList,from,count) {
	this.renderList = renderList;
	this.from = from;
	this.count = count;
};
$hxClasses["banan.render.renderlist._RenderListSlice.RenderListSliceUnderlying"] = banan_render_renderlist__$RenderListSlice_RenderListSliceUnderlying;
banan_render_renderlist__$RenderListSlice_RenderListSliceUnderlying.__name__ = "banan.render.renderlist._RenderListSlice.RenderListSliceUnderlying";
banan_render_renderlist__$RenderListSlice_RenderListSliceUnderlying.prototype = {
	renderList: null
	,from: null
	,count: null
	,__class__: banan_render_renderlist__$RenderListSlice_RenderListSliceUnderlying
};
var banan_render_renderlist_Scissor = function() {
	this.indexStack = [];
	this.worldRectList = new banan_utils_RectangleList();
};
$hxClasses["banan.render.renderlist.Scissor"] = banan_render_renderlist_Scissor;
banan_render_renderlist_Scissor.__name__ = "banan.render.renderlist.Scissor";
banan_render_renderlist_Scissor.prototype = {
	visible: null
	,index: null
	,worldRectList: null
	,indexStack: null
	,nextIndex: null
	,reset: function(wX,wY,wSizeX,wSizeY) {
		this.visible = true;
		this.index = 0;
		var _this = this.worldRectList;
		_this.raw[0] = wX;
		_this.raw[1] = wY;
		_this.raw[2] = wSizeX;
		_this.raw[3] = wSizeY;
		this.indexStack.length = 0;
		this.nextIndex = 1;
	}
	,popRect: function() {
		this.index = this.indexStack.pop();
		var _this = this.worldRectList;
		var idx = this.index * 4;
		this.visible = _this.raw[idx + 2] > 0 && _this.raw[idx + 3] > 0;
	}
	,__class__: banan_render_renderlist_Scissor
};
var banan_resource_IResourceSetting = function() { };
$hxClasses["banan.resource.IResourceSetting"] = banan_resource_IResourceSetting;
banan_resource_IResourceSetting.__name__ = "banan.resource.IResourceSetting";
banan_resource_IResourceSetting.__isInterface__ = true;
banan_resource_IResourceSetting.prototype = {
	defaultFont: null
	,atlases: null
	,placeholderPath: null
	,textureScale: null
	,preloadPacks: null
	,getAtlasNameByImagePath: null
	,getScaledTexturePath: null
	,getUnscaledTexturePath: null
	,__class__: banan_resource_IResourceSetting
};
var banan_resource_IResourceTask = function() { };
$hxClasses["banan.resource.IResourceTask"] = banan_resource_IResourceTask;
banan_resource_IResourceTask.__name__ = "banan.resource.IResourceTask";
banan_resource_IResourceTask.__isInterface__ = true;
banan_resource_IResourceTask.prototype = {
	execute: null
	,isExecutionDone: null
	,__class__: banan_resource_IResourceTask
};
var banan_resource__$LoaderResource_ELoaderResourceState = $hxEnums["banan.resource._LoaderResource.ELoaderResourceState"] = { __ename__ : true, __constructs__ : ["DELAYING_BEFORE_LOAD","LOADING","LOADED","IN_CACHE","UNLOADING","UNLOADED"]
	,DELAYING_BEFORE_LOAD: {_hx_index:0,__enum__:"banan.resource._LoaderResource.ELoaderResourceState",toString:$estr}
	,LOADING: {_hx_index:1,__enum__:"banan.resource._LoaderResource.ELoaderResourceState",toString:$estr}
	,LOADED: {_hx_index:2,__enum__:"banan.resource._LoaderResource.ELoaderResourceState",toString:$estr}
	,IN_CACHE: {_hx_index:3,__enum__:"banan.resource._LoaderResource.ELoaderResourceState",toString:$estr}
	,UNLOADING: {_hx_index:4,__enum__:"banan.resource._LoaderResource.ELoaderResourceState",toString:$estr}
	,UNLOADED: {_hx_index:5,__enum__:"banan.resource._LoaderResource.ELoaderResourceState",toString:$estr}
};
banan_resource__$LoaderResource_ELoaderResourceState.__empty_constructs__ = [banan_resource__$LoaderResource_ELoaderResourceState.DELAYING_BEFORE_LOAD,banan_resource__$LoaderResource_ELoaderResourceState.LOADING,banan_resource__$LoaderResource_ELoaderResourceState.LOADED,banan_resource__$LoaderResource_ELoaderResourceState.IN_CACHE,banan_resource__$LoaderResource_ELoaderResourceState.UNLOADING,banan_resource__$LoaderResource_ELoaderResourceState.UNLOADED];
var banan_resource_ResourceBase = function() {
	this.name = "unknown";
	this.type = "unknown";
	this.id = banan_resource_ResourceBase.nextId++;
	this.tokens = [];
};
$hxClasses["banan.resource.ResourceBase"] = banan_resource_ResourceBase;
banan_resource_ResourceBase.__name__ = "banan.resource.ResourceBase";
banan_resource_ResourceBase.prototype = {
	type: null
	,id: null
	,name: null
	,set_name: function(value) {
		this.name = value;
		return this.name;
	}
	,get_isUsed: function() {
		return this.tokens.length > 0;
	}
	,tokens: null
	,claim: function(token) {
		if(!token.isClaimed(this)) {
			token.claim(this);
			this.tokens.push(token);
			if(this.tokens.length == 1) {
				this.onUsed();
			}
		}
	}
	,release: function(token) {
		if(token.isClaimed(this)) {
			token.release(this);
			HxOverrides.remove(this.tokens,token);
			if(this.tokens.length == 0) {
				this.onNotUsed();
			}
		}
	}
	,onUsed: function() {
	}
	,onNotUsed: function() {
	}
	,__class__: banan_resource_ResourceBase
	,__properties__: {get_isUsed:"get_isUsed",set_name:"set_name"}
};
var banan_resource_Resource = function() {
	banan_resource_ResourceBase.call(this);
};
$hxClasses["banan.resource.Resource"] = banan_resource_Resource;
banan_resource_Resource.__name__ = "banan.resource.Resource";
banan_resource_Resource.__super__ = banan_resource_ResourceBase;
banan_resource_Resource.prototype = $extend(banan_resource_ResourceBase.prototype,{
	data: null
	,__class__: banan_resource_Resource
});
var banan_resource_LoaderResource = function(resourceTaskScope) {
	this.cacheTimeRemaining = banan_resource_LoaderResource.DEFAULT_CACHE_TIME;
	this.state = banan_resource__$LoaderResource_ELoaderResourceState.UNLOADED;
	this.isDelayUnloading = false;
	this.isDelayLoading = false;
	banan_resource_Resource.call(this);
	this.resourceTaskScope = resourceTaskScope;
	this.onLoadedSig = new msignal_Signal1();
};
$hxClasses["banan.resource.LoaderResource"] = banan_resource_LoaderResource;
banan_resource_LoaderResource.__name__ = "banan.resource.LoaderResource";
banan_resource_LoaderResource.__interfaces__ = [banan_resource_IResourceTask];
banan_resource_LoaderResource.getCacheTime = function() {
	return 1.0 + Math.random();
};
banan_resource_LoaderResource.__super__ = banan_resource_Resource;
banan_resource_LoaderResource.prototype = $extend(banan_resource_Resource.prototype,{
	isDelayLoading: null
	,isDelayUnloading: null
	,onLoadedSig: null
	,resourceTaskScope: null
	,state: null
	,cacheTimeRemaining: null
	,waitLoaded: function(cb) {
		if(this.get_isLoaded()) {
			cb();
		} else {
			this.onLoadedSig.addOnce(function(_) {
				cb();
				return;
			});
		}
	}
	,execute: function(dt) {
		switch(this.state._hx_index) {
		case 0:
			this.state = banan_resource__$LoaderResource_ELoaderResourceState.LOADING;
			this.loadImpl();
			break;
		case 3:
			this.cacheTimeRemaining -= dt;
			if(this.cacheTimeRemaining <= 0) {
				this.state = banan_resource__$LoaderResource_ELoaderResourceState.UNLOADING;
				this.unloadImpl();
			}
			break;
		default:
		}
	}
	,isExecutionDone: function() {
		if(this.state != banan_resource__$LoaderResource_ELoaderResourceState.DELAYING_BEFORE_LOAD) {
			return this.state != banan_resource__$LoaderResource_ELoaderResourceState.IN_CACHE;
		} else {
			return false;
		}
	}
	,onUsed: function() {
		switch(this.state._hx_index) {
		case 0:case 2:
			throw new js__$Boot_HaxeError(banan_error_Error.e(117,"LoaderResource.hx:84","",null));
		case 3:
			this.state = banan_resource__$LoaderResource_ELoaderResourceState.LOADED;
			break;
		case 1:case 4:
			break;
		case 5:
			this.load();
			break;
		}
	}
	,onNotUsed: function() {
		switch(this.state._hx_index) {
		case 0:
			this.state = banan_resource__$LoaderResource_ELoaderResourceState.UNLOADED;
			break;
		case 2:
			this.unload();
			break;
		case 1:case 4:
			break;
		case 3:case 5:
			throw new js__$Boot_HaxeError(banan_error_Error.e(117,"LoaderResource.hx:94","",null));
		}
	}
	,load: function() {
		if(this.isDelayLoading) {
			this.state = banan_resource__$LoaderResource_ELoaderResourceState.DELAYING_BEFORE_LOAD;
			this.resourceTaskScope.addTask(this);
		} else {
			this.state = banan_resource__$LoaderResource_ELoaderResourceState.LOADING;
			this.loadImpl();
		}
	}
	,unload: function() {
		if(this.isDelayUnloading) {
			this.state = banan_resource__$LoaderResource_ELoaderResourceState.IN_CACHE;
			this.cacheTimeRemaining = 1.0 + Math.random();
			this.resourceTaskScope.addTask(this);
		} else {
			this.state = banan_resource__$LoaderResource_ELoaderResourceState.UNLOADING;
			this.unloadImpl();
		}
	}
	,onLoaded: function() {
		this.state = banan_resource__$LoaderResource_ELoaderResourceState.LOADED;
		this.onLoadedState();
		if(this.get_isUsed()) {
			this.onLoadedSig.dispatch(this);
		} else {
			this.unload();
		}
	}
	,onUnloaded: function() {
		this.state = banan_resource__$LoaderResource_ELoaderResourceState.UNLOADED;
		this.onUnloadedState();
		if(this.get_isUsed()) {
			this.load();
		}
	}
	,onLoadedState: function() {
	}
	,onUnloadedState: function() {
	}
	,loadImpl: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"LoaderResource.hx:157","",null));
	}
	,unloadImpl: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"LoaderResource.hx:161","",null));
	}
	,setState: function(newState) {
		this.state = newState;
	}
	,get_isLoading: function() {
		return this.state == banan_resource__$LoaderResource_ELoaderResourceState.LOADING;
	}
	,get_isLoaded: function() {
		if(this.state != banan_resource__$LoaderResource_ELoaderResourceState.LOADED) {
			return this.state == banan_resource__$LoaderResource_ELoaderResourceState.IN_CACHE;
		} else {
			return true;
		}
	}
	,get_isUnloading: function() {
		return this.state == banan_resource__$LoaderResource_ELoaderResourceState.UNLOADING;
	}
	,get_isUnloaded: function() {
		return this.state == banan_resource__$LoaderResource_ELoaderResourceState.UNLOADED;
	}
	,__class__: banan_resource_LoaderResource
	,__properties__: $extend(banan_resource_Resource.prototype.__properties__,{get_isUnloaded:"get_isUnloaded",get_isUnloading:"get_isUnloading",get_isLoaded:"get_isLoaded",get_isLoading:"get_isLoading"})
});
var banan_resource_IResourceTaskScope = function() { };
$hxClasses["banan.resource.IResourceTaskScope"] = banan_resource_IResourceTaskScope;
banan_resource_IResourceTaskScope.__name__ = "banan.resource.IResourceTaskScope";
banan_resource_IResourceTaskScope.__isInterface__ = true;
banan_resource_IResourceTaskScope.prototype = {
	addTask: null
	,__class__: banan_resource_IResourceTaskScope
};
var banan_resource_ITextureResourceScope = function() { };
$hxClasses["banan.resource.ITextureResourceScope"] = banan_resource_ITextureResourceScope;
banan_resource_ITextureResourceScope.__name__ = "banan.resource.ITextureResourceScope";
banan_resource_ITextureResourceScope.__isInterface__ = true;
banan_resource_ITextureResourceScope.__interfaces__ = [banan_resource_IResourceTaskScope];
banan_resource_ITextureResourceScope.prototype = {
	textureClear: null
	,getPlaceholderPath: null
	,onTextureResourceUsed: null
	,onTextureResourceNotUsed: null
	,onTextureResourceLoaded: null
	,onTextureResourceUnloaded: null
	,__class__: banan_resource_ITextureResourceScope
};
var banan_resource_ResourceManager = function(updatePriority) {
	this.usedMemory = 0;
	this.usedImages = 0;
	this.usedTextures = 0;
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.resource.ResourceManager"] = banan_resource_ResourceManager;
banan_resource_ResourceManager.__name__ = "banan.resource.ResourceManager";
banan_resource_ResourceManager.__interfaces__ = [banan_resource_ITextureResourceScope];
banan_resource_ResourceManager.__super__ = banan_module_Module;
banan_resource_ResourceManager.prototype = $extend(banan_module_Module.prototype,{
	usedTextures: null
	,usedImages: null
	,usedMemory: null
	,ext: null
	,get_ext: function() {
		var _gthis = this;
		var it = this.ext;
		if(it != null) {
			return it;
		} else {
			return _gthis.ext = new banan_resource_ResourceManagerExt(_gthis);
		}
	}
	,textures: null
	,images: null
	,nineSlices: null
	,atlases: null
	,zips: null
	,spineAtlases: null
	,spineSkeletons: null
	,sounds: null
	,rAreas: null
	,rTargets: null
	,rtCounter: null
	,tasks: null
	,decodeQueue: null
	,resourceSetting: null
	,fileSystem: null
	,timeProvider: null
	,render2Context: null
	,initialize: function() {
		this.textures = new haxe_ds_StringMap();
		this.images = new haxe_ds_StringMap();
		this.nineSlices = new haxe_ds_StringMap();
		this.atlases = new haxe_ds_StringMap();
		this.zips = new haxe_ds_StringMap();
		this.spineAtlases = new haxe_ds_StringMap();
		this.spineSkeletons = new haxe_ds_StringMap();
		this.sounds = new haxe_ds_StringMap();
		this.rAreas = [];
		this.rTargets = new haxe_ds_IntMap();
		this.rtCounter = 0;
		this.tasks = new banan_utils_GrowingArray();
		this.decodeQueue = new banan_utils_CallbackQueue(100);
		var _g = new haxe_iterators_MapKeyValueIterator(this.resourceSetting.atlases);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var atlasDef = _g1.value;
			this.createAtlas(_g1.key,atlasDef.atlasSize,atlasDef.drawPriority);
		}
		this.moduleInfo.setInitialized();
	}
	,update: function() {
		var i = this.tasks.length;
		while(i > 0) {
			var task = this.tasks.array[--i];
			task.execute(this.timeProvider.provider.dt);
			if(task.isExecutionDone()) {
				var _this = this.tasks;
				_this.array[i] = _this.array[_this.length - 1];
				_this.length--;
			}
		}
		this.decodeQueue.update();
	}
	,addTask: function(task) {
		if(!this.tasks.has(task)) {
			var _this = this.tasks;
			_this.array[_this.length++] = task;
		}
	}
	,createAtlas: function(atlasName,atlasSize,drawPriority) {
		var _this = this.atlases;
		if((__map_reserved[atlasName] != null ? _this.getReserved(atlasName) : _this.h[atlasName]) == null) {
			var v = new banan_resource_atlas_Atlas(atlasName,atlasSize,drawPriority,this);
			var _this1 = this.atlases;
			if(__map_reserved[atlasName] != null) {
				_this1.setReserved(atlasName,v);
			} else {
				_this1.h[atlasName] = v;
			}
		}
	}
	,addImageToAtlas: function(image,atlasName) {
		var _this = this.atlases;
		var atlas = __map_reserved[atlasName] != null ? _this.getReserved(atlasName) : _this.h[atlasName];
		if(atlas == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ResourceManager.hx:148","atlas" + " is null" + ": " + Std.string({ name : atlasName}),null));
		}
		image.addToAtlas(atlas);
	}
	,getFsSubImage: function(path,tx,ty,tSizeX,tSizeY,offsetX,offsetY,sizeX,sizeY,scale) {
		var textureKey = "" + path;
		var imageKey = "" + offsetX + "_" + offsetY + "_" + sizeX + "_" + sizeY + "_" + tx + "_" + ty + "_" + tSizeX + "_" + tSizeY + "_" + textureKey + "_" + scale;
		var _this = this.images;
		if(!(__map_reserved[imageKey] != null ? _this.existsReserved(imageKey) : _this.h.hasOwnProperty(imageKey))) {
			var image = banan_resource_image_ImageResource.createWithCoords(this.getFsTexture(textureKey),tx,ty,tSizeX,tSizeY,offsetX,offsetY,sizeX,sizeY,scale);
			image.set_name(imageKey);
			var k = image.name;
			var _this1 = this.images;
			if(__map_reserved[k] != null) {
				_this1.setReserved(k,image);
			} else {
				_this1.h[k] = image;
			}
		}
		var _this2 = this.images;
		if(__map_reserved[imageKey] != null) {
			return _this2.getReserved(imageKey);
		} else {
			return _this2.h[imageKey];
		}
	}
	,getFsImage: function(path) {
		var textureKey = "" + path;
		var imageKey = "" + textureKey;
		var _this = this.images;
		if(!(__map_reserved[imageKey] != null ? _this.existsReserved(imageKey) : _this.h.hasOwnProperty(imageKey))) {
			var texture = this.getFsTexture(textureKey);
			var sizeX = texture.sizeX;
			var sizeY = texture.sizeY;
			var scaledTexture = this.getFsScaledTexture(textureKey);
			var image = scaledTexture != null ? banan_resource_image_ImageResource.createWithSize(scaledTexture,sizeX,sizeY,scaledTexture.sizeX,scaledTexture.sizeY,this.resourceSetting.textureScale) : banan_resource_image_ImageResource.createWithSize(texture,sizeX,sizeY,sizeX,sizeY,1.0);
			image.set_name(imageKey);
			var k = image.name;
			var _this1 = this.images;
			if(__map_reserved[k] != null) {
				_this1.setReserved(k,image);
			} else {
				_this1.h[k] = image;
			}
			var atlasName = this.resourceSetting.getAtlasNameByImagePath(path);
			if(atlasName != null) {
				this.addImageToAtlas(image,atlasName);
			}
		}
		var _this2 = this.images;
		if(__map_reserved[imageKey] != null) {
			return _this2.getReserved(imageKey);
		} else {
			return _this2.h[imageKey];
		}
	}
	,getFsImageNineSlice: function(imagePath) {
		var _this = this.nineSlices;
		if(!(__map_reserved[imagePath] != null ? _this.existsReserved(imagePath) : _this.h.hasOwnProperty(imagePath))) {
			var nineSlicePath = imagePath + ".json.9slice";
			var this1 = this.nineSlices;
			var v = this.fileSystem.hasFile(nineSlicePath) ? new banan_resource_image_NineSliceResource(this.fileSystem.getFile(nineSlicePath),this) : null;
			var _this1 = this1;
			if(__map_reserved[imagePath] != null) {
				_this1.setReserved(imagePath,v);
			} else {
				_this1.h[imagePath] = v;
			}
		}
		var _this2 = this.nineSlices;
		if(__map_reserved[imagePath] != null) {
			return _this2.getReserved(imagePath);
		} else {
			return _this2.h[imagePath];
		}
	}
	,getZipImage: function(zipPath,fileName,tx,ty,tSizeX,tSizeY) {
		var textureKey = "" + zipPath + "_" + fileName;
		var imageKey = "" + tx + "_" + ty + "_" + tSizeX + "_" + tSizeY + "_" + textureKey;
		var _this = this.images;
		if(!(__map_reserved[imageKey] != null ? _this.existsReserved(imageKey) : _this.h.hasOwnProperty(imageKey))) {
			var image = banan_resource_image_ImageResource.createWithCoords(this.getZipTexture(textureKey,zipPath,fileName),tx,ty,tSizeX,tSizeY,0,0,tSizeX,tSizeY,1.0);
			image.set_name(imageKey);
			var k = image.name;
			var _this1 = this.images;
			if(__map_reserved[k] != null) {
				_this1.setReserved(k,image);
			} else {
				_this1.h[k] = image;
			}
		}
		var _this2 = this.images;
		if(__map_reserved[imageKey] != null) {
			return _this2.getReserved(imageKey);
		} else {
			return _this2.h[imageKey];
		}
	}
	,getExternalImage: function(url,altFsPath) {
		var imageKey = "" + url;
		var _this = this.images;
		if(!(__map_reserved[imageKey] != null ? _this.existsReserved(imageKey) : _this.h.hasOwnProperty(imageKey))) {
			var image = banan_resource_image_ImageResource.createUnknown(this.getHttpTexture("" + url,altFsPath));
			image.set_name(imageKey);
			var k = image.name;
			var _this1 = this.images;
			if(__map_reserved[k] != null) {
				_this1.setReserved(k,image);
			} else {
				_this1.h[k] = image;
			}
		}
		var _this2 = this.images;
		if(__map_reserved[imageKey] != null) {
			return _this2.getReserved(imageKey);
		} else {
			return _this2.h[imageKey];
		}
	}
	,getFillImage: function(color) {
		var imageKey = "fill.image." + Std.string(color);
		var _this = this.images;
		if(!(__map_reserved[imageKey] != null ? _this.existsReserved(imageKey) : _this.h.hasOwnProperty(imageKey))) {
			var texture = new banan_resource_texture_RenderTargetTexture(color,16,16,this);
			texture.set_name(imageKey);
			var image = banan_resource_image_ImageResource.createWithSize(texture,16,16,16,16,1.0);
			image.set_name(imageKey);
			var k = image.name;
			var _this1 = this.images;
			if(__map_reserved[k] != null) {
				_this1.setReserved(k,image);
			} else {
				_this1.h[k] = image;
			}
		}
		var _this2 = this.images;
		if(__map_reserved[imageKey] != null) {
			return _this2.getReserved(imageKey);
		} else {
			return _this2.h[imageKey];
		}
	}
	,getRenderTarget: function(sizeX,sizeY,isTransparent,allowBigger) {
		if(allowBigger == null) {
			allowBigger = true;
		}
		if(isTransparent == null) {
			isTransparent = true;
		}
		var area = sizeX * sizeY;
		var idx = this.rAreas.length;
		var rt = null;
		var _g = 0;
		var _g1 = this.rAreas.length;
		while(_g < _g1) {
			var i = _g++;
			if(allowBigger && this.rAreas[i] > area || this.rAreas[i] == area) {
				idx = i;
				break;
			}
		}
		var _g2 = idx;
		var _g3 = this.rAreas.length;
		while(_g2 < _g3) {
			var _g21 = 0;
			var _g31 = this.rTargets.h[this.rAreas[_g2++]];
			while(_g21 < _g31.length) {
				var rTarget = _g31[_g21];
				++_g21;
				if(!rTarget.get_isUsed() && rTarget.isTransparent == isTransparent && rTarget.textureWidth >= sizeX && rTarget.textureHeight >= sizeY) {
					rt = rTarget;
					break;
				}
			}
			if(rt != null || !allowBigger) {
				break;
			}
		}
		if(rt == null) {
			if(this.rAreas[idx] != area) {
				this.rAreas.splice(idx,0,area);
				this.rTargets.h[area] = [];
			}
			rt = new banan_resource_image_RenderTargetImage(sizeX,sizeY,isTransparent,this);
			rt.set_name("rt_" + area + "_" + this.rTargets.h[area].length);
			this.rTargets.h[area].push(rt);
		}
		if(!(rt.textureWidth < sizeX || rt.textureHeight < sizeY)) {
			rt.configure(0,0,sizeX,sizeY);
		}
		return rt;
	}
	,checkRenderTargetSize: function(rt,sizeX,sizeY) {
		if(rt.tSizeX == sizeX) {
			return rt.tSizeY == sizeY;
		} else {
			return false;
		}
	}
	,changeRenderTargetSize: function(rt,sizeX,sizeY) {
		if(rt.textureWidth < sizeX || rt.textureHeight < sizeY) {
			return false;
		}
		rt.configure(0,0,sizeX,sizeY);
		return true;
	}
	,getMaskedImage: function(source,mask) {
		var sourceTexture = source.get_texture();
		var maskTexture = mask.get_texture();
		var imageKey = "masked_" + source.name + "_" + mask.name;
		var textureKey = "masked_" + sourceTexture.name + "_" + maskTexture.name;
		var _this = this.images;
		if(!(__map_reserved[imageKey] != null ? _this.existsReserved(imageKey) : _this.h.hasOwnProperty(imageKey))) {
			var _this1 = this.textures;
			if(!(__map_reserved[textureKey] != null ? _this1.existsReserved(textureKey) : _this1.h.hasOwnProperty(textureKey))) {
				var maskedTexture = new banan_resource_texture_MaskedTexture(sourceTexture,maskTexture,this);
				maskedTexture.set_name(textureKey);
				var _this2 = this.textures;
				if(__map_reserved[textureKey] != null) {
					_this2.setReserved(textureKey,maskedTexture);
				} else {
					_this2.h[textureKey] = maskedTexture;
				}
			}
			var _this3 = this.textures;
			var image = banan_resource_image_ImageResource.createUnknown(__map_reserved[textureKey] != null ? _this3.getReserved(textureKey) : _this3.h[textureKey]);
			image.set_name(imageKey);
			var k = image.name;
			var _this4 = this.images;
			if(__map_reserved[k] != null) {
				_this4.setReserved(k,image);
			} else {
				_this4.h[k] = image;
			}
		}
		var _this5 = this.images;
		if(__map_reserved[imageKey] != null) {
			return _this5.getReserved(imageKey);
		} else {
			return _this5.h[imageKey];
		}
	}
	,getZip: function(path) {
		var _this = this.zips;
		if(!(__map_reserved[path] != null ? _this.existsReserved(path) : _this.h.hasOwnProperty(path))) {
			var zip = new banan_resource_ZipResource(this.fileSystem.getFile(path));
			var _this1 = this.zips;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,zip);
			} else {
				_this1.h[path] = zip;
			}
		}
		var _this2 = this.zips;
		if(__map_reserved[path] != null) {
			return _this2.getReserved(path);
		} else {
			return _this2.h[path];
		}
	}
	,getSpineSkeleton: function(skeletonPath,atlasPath) {
		var _this = this.spineSkeletons;
		if(!(__map_reserved[skeletonPath] != null ? _this.existsReserved(skeletonPath) : _this.h.hasOwnProperty(skeletonPath))) {
			var spineSkeleton = new banan_spine_resource_SpineSkeletonResource(skeletonPath,this.getSpineAtlas(atlasPath),this.fileSystem,this);
			var _this1 = this.spineSkeletons;
			if(__map_reserved[skeletonPath] != null) {
				_this1.setReserved(skeletonPath,spineSkeleton);
			} else {
				_this1.h[skeletonPath] = spineSkeleton;
			}
		}
		var _this2 = this.spineSkeletons;
		if(__map_reserved[skeletonPath] != null) {
			return _this2.getReserved(skeletonPath);
		} else {
			return _this2.h[skeletonPath];
		}
	}
	,getSpineAtlas: function(atlasPath) {
		var _this = this.spineAtlases;
		if(!(__map_reserved[atlasPath] != null ? _this.existsReserved(atlasPath) : _this.h.hasOwnProperty(atlasPath))) {
			var spineAtlas = new banan_spine_resource_SpineAtlasResource(atlasPath,this,this.fileSystem,this);
			var _this1 = this.spineAtlases;
			if(__map_reserved[atlasPath] != null) {
				_this1.setReserved(atlasPath,spineAtlas);
			} else {
				_this1.h[atlasPath] = spineAtlas;
			}
		}
		var _this2 = this.spineAtlases;
		if(__map_reserved[atlasPath] != null) {
			return _this2.getReserved(atlasPath);
		} else {
			return _this2.h[atlasPath];
		}
	}
	,getSoundResource: function(path) {
		var _this = this.sounds;
		if(!(__map_reserved[path] != null ? _this.existsReserved(path) : _this.h.hasOwnProperty(path))) {
			var sound = new banan_resource_sound_SoundResource(path,this.fileSystem,this);
			var _this1 = this.sounds;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,sound);
			} else {
				_this1.h[path] = sound;
			}
		}
		var _this2 = this.sounds;
		if(__map_reserved[path] != null) {
			return _this2.getReserved(path);
		} else {
			return _this2.h[path];
		}
	}
	,textureClear: function(texture,color) {
		this.render2Context.clear(texture.data.get_g4(),color);
	}
	,getPlaceholderPath: function() {
		return this.resourceSetting.placeholderPath;
	}
	,onTextureResourceUsed: function() {
	}
	,onTextureResourceNotUsed: function() {
	}
	,onTextureResourceLoaded: function(texture) {
		this.usedTextures++;
		this.usedMemory += texture.memory;
	}
	,onTextureResourceUnloaded: function(texture) {
		this.usedTextures--;
		this.usedMemory -= texture.memory;
	}
	,getFsScaledTexture: function(path) {
		var scaledPath = this.resourceSetting.getScaledTexturePath(path);
		if(scaledPath != null && this.fileSystem.hasFile(scaledPath)) {
			return this.getFsTexture(scaledPath);
		}
		return null;
	}
	,getFsTexture: function(path) {
		var _this = this.textures;
		if(!(__map_reserved[path] != null ? _this.existsReserved(path) : _this.h.hasOwnProperty(path))) {
			var texture = new banan_resource_texture_FsLoaderTexture(path,this.fileSystem,this.decodeQueue,this);
			texture.isDelayLoading = true;
			texture.isDelayUnloading = true;
			texture.set_name(path);
			var _this1 = this.textures;
			if(__map_reserved[path] != null) {
				_this1.setReserved(path,texture);
			} else {
				_this1.h[path] = texture;
			}
		}
		var _this2 = this.textures;
		if(__map_reserved[path] != null) {
			return _this2.getReserved(path);
		} else {
			return _this2.h[path];
		}
	}
	,getZipTexture: function(textureKey,zipPath,fileName) {
		var _this = this.textures;
		if(!(__map_reserved[textureKey] != null ? _this.existsReserved(textureKey) : _this.h.hasOwnProperty(textureKey))) {
			var texture = new banan_resource_texture_ZipLoaderTexture(this.getZip(zipPath),fileName,this);
			texture.set_name(textureKey);
			var _this1 = this.textures;
			if(__map_reserved[textureKey] != null) {
				_this1.setReserved(textureKey,texture);
			} else {
				_this1.h[textureKey] = texture;
			}
		}
		var _this2 = this.textures;
		if(__map_reserved[textureKey] != null) {
			return _this2.getReserved(textureKey);
		} else {
			return _this2.h[textureKey];
		}
	}
	,getHttpTexture: function(url,altFsPath) {
		var _this = this.textures;
		if(!(__map_reserved[url] != null ? _this.existsReserved(url) : _this.h.hasOwnProperty(url))) {
			var texture = new banan_resource_texture_HttpLoaderTexture(url,null,altFsPath != null ? this.getFsTexture(altFsPath) : null,this);
			texture.set_name(url);
			var _this1 = this.textures;
			if(__map_reserved[url] != null) {
				_this1.setReserved(url,texture);
			} else {
				_this1.h[url] = texture;
			}
		}
		var _this2 = this.textures;
		if(__map_reserved[url] != null) {
			return _this2.getReserved(url);
		} else {
			return _this2.h[url];
		}
	}
	,makeModuleInfo: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["banan.resource.IResourceSetting"] != null) {
			_g.setReserved("banan.resource.IResourceSetting","resourceSetting");
		} else {
			_g.h["banan.resource.IResourceSetting"] = "resourceSetting";
		}
		if(__map_reserved["banan.filesystem.IFsModule"] != null) {
			_g.setReserved("banan.filesystem.IFsModule","fileSystem");
		} else {
			_g.h["banan.filesystem.IFsModule"] = "fileSystem";
		}
		if(__map_reserved["banan.time.TimeProviderModule"] != null) {
			_g.setReserved("banan.time.TimeProviderModule","timeProvider");
		} else {
			_g.h["banan.time.TimeProviderModule"] = "timeProvider";
		}
		if(__map_reserved["banan.render.render2.Render2Context"] != null) {
			_g.setReserved("banan.render.render2.Render2Context","render2Context");
		} else {
			_g.h["banan.render.render2.Render2Context"] = "render2Context";
		}
		return new banan_module_ModuleInfo("banan.resource.ResourceManager",[],[],_g,["banan.resource.IResourceSetting"]);
	}
	,__class__: banan_resource_ResourceManager
	,__properties__: {get_ext:"get_ext"}
});
var banan_resource_ResourceManagerExt = function(resourceManager) {
	this.textures = resourceManager.textures;
	this.images = resourceManager.images;
	this.resourceManager = resourceManager;
	this.render2Context = resourceManager.render2Context;
	this.batchEntry = new banan_render_render2_batch_BatchEntryExt(this.render2Context);
};
$hxClasses["banan.resource.ResourceManagerExt"] = banan_resource_ResourceManagerExt;
banan_resource_ResourceManagerExt.__name__ = "banan.resource.ResourceManagerExt";
banan_resource_ResourceManagerExt.prototype = {
	textures: null
	,images: null
	,resourceManager: null
	,render2Context: null
	,batchEntry: null
	,getClippingMaskImage: function(imagePath,maskPath,maskedSizeX,maskedSizeY,maskedOffsetX,maskedOffsetY,maskWidth,maskHeight) {
		var key = "clippingMask_" + imagePath + "_" + maskPath;
		key += "_" + maskedSizeX + "_" + maskedSizeY + "_" + maskedOffsetX + "_" + maskedOffsetY;
		key += "_" + maskWidth + "_" + maskHeight;
		var _this = this.images;
		if(!(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key))) {
			var _this1 = this.textures;
			if(!(__map_reserved[key] != null ? _this1.existsReserved(key) : _this1.h.hasOwnProperty(key))) {
				var texture = this.resourceManager;
				var texture1 = this.render2Context;
				var _this2 = this.batchEntry;
				if(_this2.ext == null) {
					_this2.ext = [_this2];
				}
				if(_this2.ext[_this2.currentIdx] == null) {
					var batchEntry = new banan_render_render2_batch_BatchEntry(_this2.render2Context.getDrawableId());
					batchEntry.themeId = _this2.themeId;
					_this2.ext[_this2.currentIdx] = batchEntry;
				}
				var result = _this2.ext[_this2.currentIdx++];
				var test = _this2._dirtyOnShift;
				if(test == null) {
					test = true;
				}
				result.isDirty = result.isDirty || test;
				var texture2 = new banan_resource_texture_ext_ClippingMaskTexture(imagePath,maskedSizeX,maskedSizeY,maskedOffsetX,maskedOffsetY,maskPath,maskWidth,maskHeight,texture,texture1,result,this.resourceManager);
				texture2.set_name(key);
				var _this3 = this.textures;
				if(__map_reserved[key] != null) {
					_this3.setReserved(key,texture2);
				} else {
					_this3.h[key] = texture2;
				}
			}
			var _this4 = this.textures;
			var image = banan_resource_image_ImageResource.createWithSize(__map_reserved[key] != null ? _this4.getReserved(key) : _this4.h[key],maskWidth,maskHeight,maskWidth,maskHeight,1.0);
			image.set_name(key);
			var _this5 = this.images;
			if(__map_reserved[key] != null) {
				_this5.setReserved(key,image);
			} else {
				_this5.h[key] = image;
			}
		}
		var _this6 = this.images;
		if(__map_reserved[key] != null) {
			return _this6.getReserved(key);
		} else {
			return _this6.h[key];
		}
	}
	,__class__: banan_resource_ResourceManagerExt
};
var banan_resource_ResourceToken = function() {
	this.claimMap = new haxe_ds_ObjectMap();
};
$hxClasses["banan.resource.ResourceToken"] = banan_resource_ResourceToken;
banan_resource_ResourceToken.__name__ = "banan.resource.ResourceToken";
banan_resource_ResourceToken.addGlobalToken = function() {
	var token = new banan_resource_ResourceToken();
	banan_resource_ResourceToken.globalTokenMap.set(token,true);
	banan_resource_ResourceToken.globalTokenCount++;
	return token;
};
banan_resource_ResourceToken.removeGlobalToken = function(token) {
	var this1 = banan_resource_ResourceToken.globalTokenMap.h[token.__id__];
	if(this1 != null && this1) {
		var _g = new haxe_iterators_MapKeyValueIterator(token.claimMap);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var isClaimed = _g1.value;
			if(isClaimed != null && isClaimed) {
				_g1.key.release(token);
			}
		}
		banan_resource_ResourceToken.globalTokenMap.remove(token);
		banan_resource_ResourceToken.updateGlobalTokenCount();
	}
};
banan_resource_ResourceToken.updateGlobalTokenCount = function() {
	banan_resource_ResourceToken.globalTokenCount = 0;
	var token = banan_resource_ResourceToken.globalTokenMap.keys();
	while(token.hasNext()) {
		token.next();
		banan_resource_ResourceToken.globalTokenCount++;
	}
};
banan_resource_ResourceToken.prototype = {
	claimMap: null
	,claim: function(resource) {
		this.claimMap.set(resource,true);
		if(banan_resource_ResourceToken.globalTokenCount > 0 && !banan_resource_ResourceToken.globalTokenClaimLock) {
			banan_resource_ResourceToken.globalTokenClaimLock = true;
			var token = banan_resource_ResourceToken.globalTokenMap.keys();
			while(token.hasNext()) resource.claim(token.next());
			banan_resource_ResourceToken.globalTokenClaimLock = false;
		}
	}
	,release: function(resource) {
		this.claimMap.set(resource,false);
	}
	,releaseAll: function() {
		var resource = this.claimMap.keys();
		while(resource.hasNext()) {
			var resource1 = resource.next();
			this.claimMap.set(resource1,false);
		}
	}
	,isClaimed: function(resource) {
		var this1 = this.claimMap.h[resource.__id__];
		if(this1 != null) {
			return this1;
		} else {
			return false;
		}
	}
	,__class__: banan_resource_ResourceToken
};
var banan_resource_ZipResource = function(file) {
	this.file = file;
	this.path = file.get_name();
	banan_resource_Resource.call(this);
};
$hxClasses["banan.resource.ZipResource"] = banan_resource_ZipResource;
banan_resource_ZipResource.__name__ = "banan.resource.ZipResource";
banan_resource_ZipResource.__super__ = banan_resource_Resource;
banan_resource_ZipResource.prototype = $extend(banan_resource_Resource.prototype,{
	path: null
	,onLoadedSig: null
	,file: null
	,get_isLoaded: function() {
		return this.data != null;
	}
	,get_onLoadedSig: function() {
		if(this.onLoadedSig == null) {
			this.onLoadedSig = new msignal_Signal1();
		}
		return this.onLoadedSig;
	}
	,getBytes: function(fileName) {
		if(this.data == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ZipResource.hx:45","data" + " is null" + ": " + Std.string({ path : this.path}),null));
		}
		var entry = Lambda.find(this.data,function(entry1) {
			return entry1.fileName == fileName;
		});
		if(entry == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ZipResource.hx:48","entry" + " is null" + ": " + Std.string({ fileName : fileName}),null));
		}
		banan_utils_Zip.unzipEntry(entry);
		return entry.data;
	}
	,onUsed: function() {
		this.file.load(true).then($bind(this,this.onFile));
	}
	,onNotUsed: function() {
		this.file.unload();
		this.data = null;
	}
	,onFile: function(bytes) {
		this.data = haxe_zip_Reader.readZip(new haxe_io_BytesInput(bytes));
		this.get_onLoadedSig().dispatch(this);
	}
	,__class__: banan_resource_ZipResource
	,__properties__: $extend(banan_resource_Resource.prototype.__properties__,{get_onLoadedSig:"get_onLoadedSig",get_isLoaded:"get_isLoaded"})
});
var banan_resource_atlas_Atlas = function(name,atlasSize,drawPriority,resourceManager) {
	if(drawPriority == null) {
		drawPriority = 0.0;
	}
	this.name = name;
	this.drawPriority = drawPriority;
	this.atlasSize = atlasSize;
	this.pages = [];
	this.isEntriesToRegisterSorted = true;
	this.entriesToRegister = [];
	this.rejectedEntries = [];
	this.entriesToRender = new haxe_ds_List();
	this.entries = [];
	this.resourceManager = resourceManager;
};
$hxClasses["banan.resource.atlas.Atlas"] = banan_resource_atlas_Atlas;
banan_resource_atlas_Atlas.__name__ = "banan.resource.atlas.Atlas";
banan_resource_atlas_Atlas.__interfaces__ = [banan_resource_IResourceTask];
banan_resource_atlas_Atlas.prototype = {
	name: null
	,drawPriority: null
	,atlasSize: null
	,pages: null
	,isEntriesToRegisterSorted: null
	,entriesToRegister: null
	,rejectedEntries: null
	,entriesToRender: null
	,entries: null
	,resourceManager: null
	,addEntry: function(entry) {
		this.resourceManager.addTask(this);
		this.isEntriesToRegisterSorted = false;
		this.entriesToRegister.push(entry);
		return entry;
	}
	,removeEntry: function(entry) {
		if(!HxOverrides.remove(this.entriesToRegister,entry) && !HxOverrides.remove(this.rejectedEntries,entry) && !this.entriesToRender.remove(entry)) {
			if(!HxOverrides.remove(this.entries,entry)) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Atlas.hx:65","entries.remove(entry)",{ "entry.area" : entry.area, "entry.state" : entry.state}));
			}
		}
	}
	,execute: function(dt) {
		if(!this.isEntriesToRegisterSorted) {
			this.isEntriesToRegisterSorted = true;
			this.entriesToRegister.sort(function(a,b) {
				return a.area - b.area;
			});
		}
		var iterationsRemain = 10 > this.entriesToRegister.length ? this.entriesToRegister.length : 10;
		while(iterationsRemain > 0) {
			--iterationsRemain;
			var entry = this.entriesToRegister.pop();
			if(entry.checkSize(512)) {
				var i = 0;
				while(true) {
					if(i == this.pages.length) {
						var page = new banan_resource_atlas_Page(this.atlasSize,this.atlasSize,2,this.resourceManager);
						page.set_name("atlas_" + this.name + "_page_" + i);
						this.pages.push(page);
					}
					if(entry.register(this.pages[i++])) {
						this.entriesToRender.push(entry);
						break;
					}
				}
			} else {
				this.rejectedEntries.push(entry);
			}
		}
		iterationsRemain = 10 > this.entriesToRender.length ? this.entriesToRender.length : 10;
		while(iterationsRemain > 0) {
			--iterationsRemain;
			var entry1 = this.entriesToRender.pop();
			if(entry1.synchronize()) {
				this.entries.push(entry1);
			} else {
				this.entriesToRender.add(entry1);
			}
		}
	}
	,isExecutionDone: function() {
		if(this.entriesToRegister.length == 0) {
			return this.entriesToRender.length == 0;
		} else {
			return false;
		}
	}
	,__class__: banan_resource_atlas_Atlas
};
var banan_resource_atlas_EAtlasEntryState = $hxEnums["banan.resource.atlas.EAtlasEntryState"] = { __ename__ : true, __constructs__ : ["Added","Registered","Synchronized","Removed"]
	,Added: {_hx_index:0,__enum__:"banan.resource.atlas.EAtlasEntryState",toString:$estr}
	,Registered: {_hx_index:1,__enum__:"banan.resource.atlas.EAtlasEntryState",toString:$estr}
	,Synchronized: ($_=function(region) { return {_hx_index:2,region:region,__enum__:"banan.resource.atlas.EAtlasEntryState",toString:$estr}; },$_.__params__ = ["region"],$_)
	,Removed: {_hx_index:3,__enum__:"banan.resource.atlas.EAtlasEntryState",toString:$estr}
};
banan_resource_atlas_EAtlasEntryState.__empty_constructs__ = [banan_resource_atlas_EAtlasEntryState.Added,banan_resource_atlas_EAtlasEntryState.Registered,banan_resource_atlas_EAtlasEntryState.Removed];
var banan_resource_atlas_AtlasEntry = function(atlas,source) {
	this.source = source;
	this.area = source.tSizeX * source.tSizeY;
	this.state = banan_resource_atlas_EAtlasEntryState.Removed;
	this.onStateChangedSig = new msignal_Signal1();
	this.pageEntry = null;
	this.atlas = atlas;
};
$hxClasses["banan.resource.atlas.AtlasEntry"] = banan_resource_atlas_AtlasEntry;
banan_resource_atlas_AtlasEntry.__name__ = "banan.resource.atlas.AtlasEntry";
banan_resource_atlas_AtlasEntry.prototype = {
	area: null
	,state: null
	,onStateChangedSig: null
	,atlas: null
	,source: null
	,pageEntry: null
	,get_drawPriority: function() {
		return this.atlas.drawPriority;
	}
	,add: function() {
		this.atlas.addEntry(this);
		this.changeState(banan_resource_atlas_EAtlasEntryState.Added);
	}
	,remove: function() {
		this.atlas.removeEntry(this);
		if(this.pageEntry != null) {
			this.pageEntry.remove();
			this.pageEntry = null;
		}
		this.changeState(banan_resource_atlas_EAtlasEntryState.Removed);
	}
	,checkSize: function(maxSize) {
		if(this.source.tSizeX == 0 || this.source.tSizeY == 0) {
			return false;
		} else if(this.source.tSizeX > maxSize) {
			return this.source.tSizeY <= maxSize;
		} else {
			return true;
		}
	}
	,register: function(page) {
		var pageEntry = page.addEntry(this.source.tSizeX,this.source.tSizeY);
		if(pageEntry != null) {
			this.pageEntry = pageEntry;
			this.changeState(banan_resource_atlas_EAtlasEntryState.Registered);
			return true;
		}
		return false;
	}
	,synchronize: function() {
		if(this.pageEntry == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"AtlasEntry.hx:90","pageEntry" + " is null",null));
		}
		var page = this.pageEntry.page;
		var sourceTexture = this.source.get_texture();
		if(page.get_isLoaded() && sourceTexture.get_isLoaded()) {
			page.renderToEntry(sourceTexture,new banan_math_Rect(this.source.tx,this.source.ty,this.source.tSizeX,this.source.tSizeY),this.pageEntry);
			this.changeState(banan_resource_atlas_EAtlasEntryState.Synchronized(this.pageEntry));
			return true;
		} else {
			return false;
		}
	}
	,changeState: function(toState) {
		var isValidTransition;
		switch(this.state._hx_index) {
		case 0:
			switch(toState._hx_index) {
			case 1:
				isValidTransition = true;
				break;
			case 3:
				isValidTransition = true;
				break;
			default:
				isValidTransition = false;
			}
			break;
		case 1:
			switch(toState._hx_index) {
			case 2:
				isValidTransition = true;
				break;
			case 3:
				isValidTransition = true;
				break;
			default:
				isValidTransition = false;
			}
			break;
		case 3:
			switch(toState._hx_index) {
			case 0:
				isValidTransition = true;
				break;
			case 3:
				isValidTransition = true;
				break;
			default:
				isValidTransition = false;
			}
			break;
		default:
			isValidTransition = toState._hx_index == 3;
		}
		if(!isValidTransition) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"AtlasEntry.hx:133","isValidTransition",{ "state" : this.state, "toState" : toState}));
		}
		this.state = toState;
		this.onStateChangedSig.dispatch(this);
	}
	,__class__: banan_resource_atlas_AtlasEntry
	,__properties__: {get_drawPriority:"get_drawPriority"}
};
var banan_resource_texture_TextureResource = function(textureResourceScope) {
	this.sizeY = null;
	this.sizeX = null;
	this.memory = 0;
	banan_resource_LoaderResource.call(this,textureResourceScope);
	this.type = "texture";
	this.textureResourceScope = textureResourceScope;
};
$hxClasses["banan.resource.texture.TextureResource"] = banan_resource_texture_TextureResource;
banan_resource_texture_TextureResource.__name__ = "banan.resource.texture.TextureResource";
banan_resource_texture_TextureResource.__super__ = banan_resource_LoaderResource;
banan_resource_texture_TextureResource.prototype = $extend(banan_resource_LoaderResource.prototype,{
	memory: null
	,sizeX: null
	,sizeY: null
	,textureResourceScope: null
	,setSize: function(sizeX,sizeY) {
		this.sizeX = sizeX;
		this.sizeY = sizeY;
	}
	,onUsed: function() {
		this.textureResourceScope.onTextureResourceUsed();
		banan_resource_LoaderResource.prototype.onUsed.call(this);
	}
	,onNotUsed: function() {
		this.textureResourceScope.onTextureResourceNotUsed();
		banan_resource_LoaderResource.prototype.onNotUsed.call(this);
	}
	,onLoadedState: function() {
		if(this.sizeX == null || this.sizeY == null) {
			this.setSize(this.data.get_width(),this.data.get_height());
		}
		this.memory = this.data.get_width() * this.data.get_height() * 4;
		this.textureResourceScope.onTextureResourceLoaded(this);
	}
	,onUnloadedState: function() {
		this.textureResourceScope.onTextureResourceUnloaded(this);
		this.memory = 0;
	}
	,__class__: banan_resource_texture_TextureResource
});
var banan_resource_texture_RenderTargetTexture = function(color,sizeX,sizeY,scope) {
	banan_resource_texture_TextureResource.call(this,scope);
	this.type = "rt_texture";
	this.color = color;
	this.setSize(sizeX,sizeY);
};
$hxClasses["banan.resource.texture.RenderTargetTexture"] = banan_resource_texture_RenderTargetTexture;
banan_resource_texture_RenderTargetTexture.__name__ = "banan.resource.texture.RenderTargetTexture";
banan_resource_texture_RenderTargetTexture.__super__ = banan_resource_texture_TextureResource;
banan_resource_texture_RenderTargetTexture.prototype = $extend(banan_resource_texture_TextureResource.prototype,{
	color: null
	,clear: function() {
		this.textureResourceScope.textureClear(this,this.color);
	}
	,loadImpl: function() {
		this.data = kha_Image.createRenderTarget(this.sizeX,this.sizeY);
		this.clear();
		this.onRenderTargetLoaded();
		this.onLoaded();
	}
	,unloadImpl: function() {
		this.data.unload();
		this.data = null;
		this.onRenderTargetUnloaded();
		this.onUnloaded();
	}
	,onRenderTargetLoaded: function() {
	}
	,onRenderTargetUnloaded: function() {
	}
	,__class__: banan_resource_texture_RenderTargetTexture
});
var banan_resource_atlas_Page = function(sizeX,sizeY,padding,scope) {
	banan_resource_texture_RenderTargetTexture.call(this,0,sizeX,sizeY,scope);
	this.padding = padding;
	this.rectPacker = new banan_rectpack_RectPacker(sizeX,sizeY);
	this.entries = [];
};
$hxClasses["banan.resource.atlas.Page"] = banan_resource_atlas_Page;
banan_resource_atlas_Page.__name__ = "banan.resource.atlas.Page";
banan_resource_atlas_Page.__properties__ = {get_clearImage:"get_clearImage"};
banan_resource_atlas_Page.get_clearImage = function() {
	if(banan_resource_atlas_Page.clearImage == null) {
		banan_resource_atlas_Page.clearImage = kha_Image.create(1,1,0);
		banan_resource_atlas_Page.clearImage.lock();
		banan_resource_atlas_Page.clearImage.unlock();
	}
	return banan_resource_atlas_Page.clearImage;
};
banan_resource_atlas_Page.__super__ = banan_resource_texture_RenderTargetTexture;
banan_resource_atlas_Page.prototype = $extend(banan_resource_texture_RenderTargetTexture.prototype,{
	padding: null
	,rectPacker: null
	,entries: null
	,addEntry: function(sizeX,sizeY) {
		var rect = this.rectPacker.findPlace(sizeX + this.padding * 2,sizeY + this.padding * 2);
		if(rect != null) {
			var entry = new banan_resource_atlas_PageEntry(this,rect,this.padding);
			this.entries.push(entry);
			return entry;
		}
		return null;
	}
	,removeEntry: function(entry) {
		var rect = entry.asRect();
		rect.expand(1,1,1,1);
		if(banan_resource_atlas_Page.clearImage == null) {
			banan_resource_atlas_Page.clearImage = kha_Image.create(1,1,0);
			banan_resource_atlas_Page.clearImage.lock();
			banan_resource_atlas_Page.clearImage.unlock();
		}
		banan_backend_kha_display_KhaImageCopier.simpleCopy(banan_resource_atlas_Page.clearImage,new banan_math_Rect(0,0,1,1),this.data,rect);
		if(!HxOverrides.remove(this.entries,entry)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Page.hx:69","entries.remove(entry)",null));
		}
		this.rectPacker.remove(entry.rect);
	}
	,renderToEntry: function(source,sourceRect,entry) {
		banan_backend_kha_display_KhaImageCopier.copyWithClamp(source.data,sourceRect,this.data,entry.asRect(),1);
	}
	,__class__: banan_resource_atlas_Page
});
var banan_resource_texture_ITextureRegion = function() { };
$hxClasses["banan.resource.texture.ITextureRegion"] = banan_resource_texture_ITextureRegion;
banan_resource_texture_ITextureRegion.__name__ = "banan.resource.texture.ITextureRegion";
banan_resource_texture_ITextureRegion.__isInterface__ = true;
banan_resource_texture_ITextureRegion.prototype = {
	get_texture: null
	,tx: null
	,ty: null
	,tSizeX: null
	,tSizeY: null
	,__class__: banan_resource_texture_ITextureRegion
	,__properties__: {get_texture:"get_texture"}
};
var banan_resource_atlas_PageEntry = function(page,rect,padding) {
	this.token = new banan_resource_ResourceToken();
	this.page = page;
	this.rect = rect;
	this.tx = rect.x + padding;
	this.ty = rect.y + padding;
	this.tSizeX = rect.sizeX - padding * 2;
	this.tSizeY = rect.sizeY - padding * 2;
	page.claim(this.token);
};
$hxClasses["banan.resource.atlas.PageEntry"] = banan_resource_atlas_PageEntry;
banan_resource_atlas_PageEntry.__name__ = "banan.resource.atlas.PageEntry";
banan_resource_atlas_PageEntry.__interfaces__ = [banan_resource_texture_ITextureRegion];
banan_resource_atlas_PageEntry.prototype = {
	page: null
	,rect: null
	,tx: null
	,ty: null
	,tSizeX: null
	,tSizeY: null
	,token: null
	,get_texture: function() {
		return this.page;
	}
	,remove: function() {
		this.page.removeEntry(this);
		this.page.release(this.token);
	}
	,asRect: function() {
		return new banan_math_Rect(this.tx,this.ty,this.tSizeX,this.tSizeY);
	}
	,__class__: banan_resource_atlas_PageEntry
	,__properties__: {get_texture:"get_texture"}
};
var banan_resource_image_ImageResource = function(texture,tx,ty,tSizeX,tSizeY,offsetX,offsetY,sizeX,sizeY,textureScale,isCoordsKnown) {
	this.token = new banan_resource_ResourceToken();
	banan_resource_Resource.call(this);
	this.type = "image";
	this.data = texture;
	this.tx = tx;
	this.ty = ty;
	this.tSizeX = tSizeX;
	this.tSizeY = tSizeY;
	this.stOffsetX = offsetX;
	this.stOffsetY = offsetY;
	this.tOffsetX = Math.floor(offsetX * textureScale);
	this.tOffsetY = Math.floor(offsetY * textureScale);
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.textureScale = textureScale;
	this.isCoordsKnown = isCoordsKnown;
	this.validateScaledSizes();
	this.atlases = [];
	this.atlasEntries = [];
	this.currentChangedSig = new msignal_Signal0();
	this.validateCurrent();
	if(texture.get_isLoaded()) {
		this.onTextureLoaded();
	} else {
		texture.onLoadedSig.add($bind(this,this.onTextureLoaded));
	}
};
$hxClasses["banan.resource.image.ImageResource"] = banan_resource_image_ImageResource;
banan_resource_image_ImageResource.__name__ = "banan.resource.image.ImageResource";
banan_resource_image_ImageResource.__interfaces__ = [banan_resource_texture_ITextureRegion];
banan_resource_image_ImageResource.createUnknown = function(texture) {
	return new banan_resource_image_ImageResource(texture,0,0,0,0,0,0,0,0,1.0,false);
};
banan_resource_image_ImageResource.createWithSize = function(texture,sizeX,sizeY,tSizeX,tSizeY,textureScale) {
	return new banan_resource_image_ImageResource(texture,0,0,tSizeX,tSizeY,0,0,sizeX,sizeY,textureScale,true);
};
banan_resource_image_ImageResource.createWithCoords = function(texture,tx,ty,tSizeX,tSizeY,offsetX,offsetY,sizeX,sizeY,textureScale) {
	return new banan_resource_image_ImageResource(texture,tx,ty,tSizeX,tSizeY,offsetX,offsetY,sizeX,sizeY,textureScale,true);
};
banan_resource_image_ImageResource.__super__ = banan_resource_Resource;
banan_resource_image_ImageResource.prototype = $extend(banan_resource_Resource.prototype,{
	tx: null
	,ty: null
	,tSizeX: null
	,tSizeY: null
	,tOffsetX: null
	,tOffsetY: null
	,tImageSizeX: null
	,tImageSizeY: null
	,sizeX: null
	,sizeY: null
	,stSizeX: null
	,stSizeY: null
	,stOffsetX: null
	,stOffsetY: null
	,textureScale: null
	,isCoordsKnown: null
	,get_currentTexture: function() {
		return this.current.get_texture();
	}
	,get_nativeWidth: function() {
		var it = this.current.get_texture().data;
		if(it != null) {
			return it.get_width();
		} else {
			return null;
		}
	}
	,get_nativeHeight: function() {
		var it = this.current.get_texture().data;
		if(it != null) {
			return it.get_height();
		} else {
			return null;
		}
	}
	,get_graphics4: function() {
		var it = this.current.get_texture().data;
		if(it != null) {
			return it.get_g4();
		} else {
			return null;
		}
	}
	,current: null
	,currentChangedSig: null
	,atlases: null
	,atlasEntries: null
	,token: null
	,get_texture: function() {
		return this.data;
	}
	,addToAtlas: function(atlas) {
		this.atlases.push(atlas);
		if(this.get_isUsed()) {
			this.addAtlasEntry(atlas);
		}
	}
	,waitLoaded: function(cb) {
		var _gthis = this;
		if(this.current.get_texture().get_isLoaded()) {
			cb();
		} else {
			this.currentChangedSig.addOnce(function() {
				_gthis.waitLoaded(cb);
				return;
			});
		}
	}
	,onUsed: function() {
		this.validateTextureClaim();
		var _g = 0;
		var _g1 = this.atlases;
		while(_g < _g1.length) this.addAtlasEntry(_g1[_g++]);
	}
	,onNotUsed: function() {
		this.validateTextureClaim();
		var _g = 0;
		var _g1 = this.atlasEntries;
		while(_g < _g1.length) this.removeAtlasEntry(_g1[_g++]);
	}
	,removeAtlasEntry: function(entry) {
		entry.remove();
		entry.onStateChangedSig.remove($bind(this,this.onAtlasEntryStateChanged));
		HxOverrides.remove(this.atlasEntries,entry);
	}
	,addAtlasEntry: function(atlas) {
		var entry = new banan_resource_atlas_AtlasEntry(atlas,this);
		var inserted = false;
		var _g = 0;
		var _g1 = this.atlasEntries.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.atlasEntries[i].atlas.drawPriority < entry.atlas.drawPriority) {
				this.atlasEntries.splice(i,0,entry);
				inserted = true;
				break;
			}
		}
		if(!inserted) {
			this.atlasEntries.push(entry);
		}
		entry.onStateChangedSig.add($bind(this,this.onAtlasEntryStateChanged));
		entry.add();
	}
	,onTextureLoaded: function(_) {
		var forceSig;
		if(!this.isCoordsKnown) {
			this.sizeX = this.tSizeX = this.data.sizeX;
			this.sizeY = this.tSizeY = this.data.sizeY;
			this.isCoordsKnown = true;
			this.validateScaledSizes();
			forceSig = true;
		} else {
			forceSig = this.current == this;
		}
		this.validateCurrent(forceSig);
	}
	,onAtlasEntryStateChanged: function(entry) {
		switch(entry.state._hx_index) {
		case 2:
			this.validateCurrent();
			break;
		case 3:
			this.validateCurrent();
			break;
		default:
		}
	}
	,validateCurrent: function(forceSig) {
		if(forceSig == null) {
			forceSig = false;
		}
		var oldCurrent = this.current;
		this.current = this;
		var _g = 0;
		var _g1 = this.atlasEntries;
		while(_g < _g1.length) {
			var _g2 = _g1[_g++].state;
			if(_g2._hx_index == 2) {
				var _g11 = _g2.region;
				if(!_g11.get_texture().get_isLoaded()) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ImageResource.hx:231","region.texture.isLoaded",null));
				}
				this.current = _g11;
				break;
			}
		}
		this.validateTextureClaim();
		if(forceSig || oldCurrent != null && oldCurrent != this.current) {
			this.currentChangedSig.dispatch();
		}
	}
	,validateTextureClaim: function() {
		if(this.current == this && this.get_isUsed()) {
			this.data.claim(this.token);
		} else {
			this.data.release(this.token);
		}
	}
	,validateScaledSizes: function() {
		this.stSizeX = Math.floor(this.tSizeX / this.textureScale);
		this.stSizeY = Math.floor(this.tSizeY / this.textureScale);
		this.tImageSizeX = Math.floor(this.sizeX * this.textureScale);
		this.tImageSizeY = Math.floor(this.sizeY * this.textureScale);
	}
	,__class__: banan_resource_image_ImageResource
	,__properties__: $extend(banan_resource_Resource.prototype.__properties__,{get_graphics4:"get_graphics4",get_nativeHeight:"get_nativeHeight",get_nativeWidth:"get_nativeWidth",get_currentTexture:"get_currentTexture",get_texture:"get_texture"})
});
var banan_resource_image_NineSlice = function(data) {
	this.top = js_Boot.__cast(Reflect.field(data,"top") , Int);
	this.bottom = js_Boot.__cast(Reflect.field(data,"bottom") , Int);
	this.left = js_Boot.__cast(Reflect.field(data,"left") , Int);
	this.right = js_Boot.__cast(Reflect.field(data,"right") , Int);
	var v = Reflect.field(data,"isDrawCenter");
	this.isDrawCenter = v != null ? js_Boot.__cast(v , Bool) : true;
	var v1 = Reflect.field(data,"isTile");
	this.isTile = v1 != null && js_Boot.__cast(v1 , Bool);
	var v2 = Reflect.field(data,"isTileLeft");
	this.isTileLeft = v2 != null ? js_Boot.__cast(v2 , Bool) : this.isTile;
	var v3 = Reflect.field(data,"isTileRight");
	this.isTileRight = v3 != null ? js_Boot.__cast(v3 , Bool) : this.isTile;
	var v4 = Reflect.field(data,"isTileTop");
	this.isTileTop = v4 != null ? js_Boot.__cast(v4 , Bool) : this.isTile;
	var v5 = Reflect.field(data,"isTileBottom");
	this.isTileBottom = v5 != null ? js_Boot.__cast(v5 , Bool) : this.isTile;
	var v6 = Reflect.field(data,"isTileCenter");
	var isTileCenter = v6 != null ? js_Boot.__cast(v6 , Bool) : this.isTile;
	var v7 = Reflect.field(data,"isTileCenterX");
	this.isTileCenterX = v7 != null ? js_Boot.__cast(v7 , Bool) : isTileCenter;
	var v8 = Reflect.field(data,"isTileCenterY");
	this.isTileCenterY = v8 != null ? js_Boot.__cast(v8 , Bool) : isTileCenter;
};
$hxClasses["banan.resource.image.NineSlice"] = banan_resource_image_NineSlice;
banan_resource_image_NineSlice.__name__ = "banan.resource.image.NineSlice";
banan_resource_image_NineSlice.prototype = {
	top: null
	,bottom: null
	,left: null
	,right: null
	,isDrawCenter: null
	,isTile: null
	,isTileLeft: null
	,isTileRight: null
	,isTileTop: null
	,isTileBottom: null
	,isTileCenterX: null
	,isTileCenterY: null
	,__class__: banan_resource_image_NineSlice
};
var banan_resource_image_NineSliceResource = function(file,scope) {
	banan_resource_LoaderResource.call(this,scope);
	this.file = file;
};
$hxClasses["banan.resource.image.NineSliceResource"] = banan_resource_image_NineSliceResource;
banan_resource_image_NineSliceResource.__name__ = "banan.resource.image.NineSliceResource";
banan_resource_image_NineSliceResource.__super__ = banan_resource_LoaderResource;
banan_resource_image_NineSliceResource.prototype = $extend(banan_resource_LoaderResource.prototype,{
	file: null
	,loadImpl: function() {
		this.file.load(false).then($bind(this,this.onFileBytes));
	}
	,unloadImpl: function() {
		this.data = null;
		this.onUnloaded();
	}
	,onFileBytes: function(bytes) {
		this.data = new banan_resource_image_NineSlice(JSON.parse(bytes.toString()));
		this.onLoaded();
	}
	,__class__: banan_resource_image_NineSliceResource
});
var banan_resource_image_RenderTargetImage = function(textureWidth,textureHeight,isTransparent,scope) {
	if(isTransparent == null) {
		isTransparent = true;
	}
	this.textureWidth = textureWidth;
	this.textureHeight = textureHeight;
	this.isTransparent = isTransparent;
	var texture = new banan_resource_texture_RenderTargetTexture(isTransparent ? 0 : -16777216,textureWidth,textureHeight,scope);
	texture.isDelayUnloading = true;
	banan_resource_image_ImageResource.call(this,texture,0,0,textureWidth,textureHeight,0,0,textureWidth,textureHeight,1.0,true);
};
$hxClasses["banan.resource.image.RenderTargetImage"] = banan_resource_image_RenderTargetImage;
banan_resource_image_RenderTargetImage.__name__ = "banan.resource.image.RenderTargetImage";
banan_resource_image_RenderTargetImage.__super__ = banan_resource_image_ImageResource;
banan_resource_image_RenderTargetImage.prototype = $extend(banan_resource_image_ImageResource.prototype,{
	textureWidth: null
	,textureHeight: null
	,isTransparent: null
	,set_name: function(value) {
		this.get_texture().set_name(value);
		return banan_resource_image_ImageResource.prototype.set_name.call(this,value);
	}
	,clear: function(token) {
		if(!token.isClaimed(this)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"RenderTargetImage.hx:35","token.isClaimed(this)",null));
		}
		var value = this.get_texture();
		(((value) instanceof banan_resource_texture_RenderTargetTexture) ? value : null).clear();
	}
	,configure: function(tx,ty,tSizeX,tSizeY) {
		if(!(!this.get_isUsed())) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"RenderTargetImage.hx:41","!isUsed",null));
		}
		this.tx = tx;
		this.ty = ty;
		this.tSizeX = tSizeX;
		this.tSizeY = tSizeY;
		this.sizeX = tSizeX;
		this.sizeY = tSizeY;
		this.validateScaledSizes();
	}
	,__class__: banan_resource_image_RenderTargetImage
});
var banan_resource_sound_SoundResource = function(path,fileSystem,scope) {
	this.path = path;
	this.fileSystem = fileSystem;
	banan_resource_LoaderResource.call(this,scope);
	this.type = "sound";
};
$hxClasses["banan.resource.sound.SoundResource"] = banan_resource_sound_SoundResource;
banan_resource_sound_SoundResource.__name__ = "banan.resource.sound.SoundResource";
banan_resource_sound_SoundResource.__super__ = banan_resource_LoaderResource;
banan_resource_sound_SoundResource.prototype = $extend(banan_resource_LoaderResource.prototype,{
	path: null
	,fileSystem: null
	,loadImpl: function() {
		this.getFile().load(false).then($bind(this,this.onFile));
	}
	,unloadImpl: function() {
		this.data.unload();
		this.data = null;
		this.onUnloaded();
	}
	,getFile: function() {
		return this.fileSystem.getFile(this.path);
	}
	,onFile: function(bytes) {
		var sound = new kha_Sound();
		sound.compressedData = bytes;
		sound.uncompressedData = null;
		sound.channels = 0;
		sound.sampleRate = 0;
		sound.length = 0;
		var f = $bind(this,this.onUncompressed);
		var sound1 = sound;
		sound.uncompress(function() {
			f(sound1);
		});
	}
	,onUncompressed: function(sound) {
		this.data = sound;
		this.onLoaded();
	}
	,__class__: banan_resource_sound_SoundResource
});
var banan_resource_texture_FsLoaderTexture = function(path,fileSystem,decodeQueue,scope) {
	this.originalPath = path;
	this.altPath = scope.getPlaceholderPath();
	this.fileSystem = fileSystem;
	this.decodeQueue = decodeQueue;
	var tmp;
	if(this.fileSystem.hasFile(this.originalPath)) {
		tmp = this.originalPath;
	} else if(this.fileSystem.hasFile(this.altPath)) {
		tmp = this.altPath;
	} else {
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"FsLoaderTexture.hx:28","there is no file with path " + this.originalPath + " in file system",null));
	}
	this.file = fileSystem.getFile(tmp);
	banan_resource_texture_TextureResource.call(this,scope);
	this.setSize(this.file.get_width(),this.file.get_height());
};
$hxClasses["banan.resource.texture.FsLoaderTexture"] = banan_resource_texture_FsLoaderTexture;
banan_resource_texture_FsLoaderTexture.__name__ = "banan.resource.texture.FsLoaderTexture";
banan_resource_texture_FsLoaderTexture.__super__ = banan_resource_texture_TextureResource;
banan_resource_texture_FsLoaderTexture.prototype = $extend(banan_resource_texture_TextureResource.prototype,{
	originalPath: null
	,altPath: null
	,get_loadPath: function() {
		if(this.fileSystem.hasFile(this.originalPath)) {
			return this.originalPath;
		} else if(this.fileSystem.hasFile(this.altPath)) {
			return this.altPath;
		} else {
			throw new js__$Boot_HaxeError(banan_error_Error.e(122,"FsLoaderTexture.hx:28","there is no file with path " + this.originalPath + " in file system",null));
		}
	}
	,fileSystem: null
	,decodeQueue: null
	,file: null
	,loadImpl: function() {
		this.file.load(false).then($bind(this,this.onFile));
	}
	,unloadImpl: function() {
		this.data.unload();
		this.data = null;
		this.onUnloaded();
	}
	,onFile: function(bytes) {
		var f = $bind(this,this.doDecode);
		var bytes1 = bytes;
		var tmp = function(_) {
			f(bytes1,_);
		};
		this.decodeQueue.add(tmp);
	}
	,doDecode: function(bytes,_) {
		banan_resource_texture_decode_TextureDecoder.decode(bytes,haxe_io_Path.extension(this.file.get_name()).toLowerCase(),$bind(this,this.onDecodeDone),$bind(this,this.onDecodeError));
	}
	,onDecodeDone: function(decodedTexture) {
		this.data = decodedTexture;
		this.decodeQueue.callbackDone();
		this.onLoaded();
	}
	,onDecodeError: function(errorMsg) {
		var tmp;
		if(this.fileSystem.hasFile(this.originalPath)) {
			tmp = this.originalPath;
		} else if(this.fileSystem.hasFile(this.altPath)) {
			tmp = this.altPath;
		} else {
			throw new js__$Boot_HaxeError(banan_error_Error.e(122,"FsLoaderTexture.hx:28","there is no file with path " + this.originalPath + " in file system",null));
		}
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"FsLoaderTexture.hx:84","decoding of " + tmp + " has been failed with message: " + errorMsg,null));
	}
	,__class__: banan_resource_texture_FsLoaderTexture
	,__properties__: $extend(banan_resource_texture_TextureResource.prototype.__properties__,{get_loadPath:"get_loadPath"})
});
var banan_resource_texture_HttpLoaderTexture = function(url,expectedCrc32,altTexture,scope) {
	this.url = url;
	this.expectedCrc32 = expectedCrc32;
	this.altTexture = altTexture;
	banan_resource_texture_TextureResource.call(this,scope);
};
$hxClasses["banan.resource.texture.HttpLoaderTexture"] = banan_resource_texture_HttpLoaderTexture;
banan_resource_texture_HttpLoaderTexture.__name__ = "banan.resource.texture.HttpLoaderTexture";
banan_resource_texture_HttpLoaderTexture.__super__ = banan_resource_texture_TextureResource;
banan_resource_texture_HttpLoaderTexture.prototype = $extend(banan_resource_texture_TextureResource.prototype,{
	url: null
	,expectedCrc32: null
	,altTexture: null
	,token: null
	,get_token: function() {
		if(this.token == null) {
			this.token = new banan_resource_ResourceToken();
		}
		return this.token;
	}
	,setUrl: function(url,expectedCrc32) {
		if(!(this.url == null && this.expectedCrc32 == null)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"HttpLoaderTexture.hx:38","this.url == null && this.expectedCrc32 == null" + ": " + Std.string({ url : this.url, md5 : this.expectedCrc32}),null));
		}
		this.url = url;
		this.expectedCrc32 = expectedCrc32;
		if(this.get_isLoading()) {
			this.loadImpl();
		}
	}
	,loadImpl: function() {
		if(this.url != null) {
			var url = this.url;
			var expectedCrc32 = this.expectedCrc32;
			var wrappedCallbacks = banan_http_HttpBytes.statsHelper.watchRequest($bind(this,this.onBytesLoaded),$bind(this,this.onLoadError));
			new banan_http_MultiTryDownload(url,expectedCrc32,$bind(wrappedCallbacks,wrappedCallbacks.onSuccess),$bind(this,this.onProgress),$bind(wrappedCallbacks,wrappedCallbacks.onFailure),5);
		}
	}
	,unloadImpl: function() {
		this.data.unload();
		this.data = null;
		if(this.altTexture != null) {
			if(this.token == null) {
				this.token = new banan_resource_ResourceToken();
			}
			this.altTexture.release(this.token);
		}
		this.onUnloaded();
	}
	,isPngExtension: function(bytes) {
		if(137 != bytes.b[0]) {
			return false;
		}
		if(80 != bytes.b[1]) {
			return false;
		}
		if(78 != bytes.b[2]) {
			return false;
		}
		if(71 != bytes.b[3]) {
			return false;
		}
		if(13 != bytes.b[4]) {
			return false;
		}
		if(10 != bytes.b[5]) {
			return false;
		}
		if(26 != bytes.b[6]) {
			return false;
		}
		if(10 != bytes.b[7]) {
			return false;
		}
		return true;
	}
	,onBytesLoaded: function(bytes) {
		banan_resource_texture_decode_TextureDecoder.decode(bytes,this.isPngExtension(bytes) ? "png" : "jpg",$bind(this,this.onImageParsed),$bind(this,this.onParseError));
	}
	,onProgress: function(length) {
	}
	,onLoadError: function(message) {
		this.onFail();
	}
	,onImageParsed: function(parsedData) {
		this.data = parsedData;
		this.onLoaded();
	}
	,onParseError: function(message) {
		this.onFail();
	}
	,onFail: function() {
		if(this.altTexture != null) {
			if(this.token == null) {
				this.token = new banan_resource_ResourceToken();
			}
			this.altTexture.claim(this.token);
			if(this.altTexture.get_isLoaded()) {
				this.onAlternativeLoaded(this.altTexture);
			} else {
				this.altTexture.onLoadedSig.addOnce($bind(this,this.onAlternativeLoaded));
			}
		}
	}
	,onAlternativeLoaded: function(texture) {
		this.data = texture.data;
		this.onLoaded();
	}
	,__class__: banan_resource_texture_HttpLoaderTexture
	,__properties__: $extend(banan_resource_texture_TextureResource.prototype.__properties__,{get_token:"get_token"})
});
var banan_resource_texture__$MaskedTexture_EMaskingStep = $hxEnums["banan.resource.texture._MaskedTexture.EMaskingStep"] = { __ename__ : true, __constructs__ : ["SourceLoading","MaskLoading","MaskedCreation","Masking"]
	,SourceLoading: {_hx_index:0,__enum__:"banan.resource.texture._MaskedTexture.EMaskingStep",toString:$estr}
	,MaskLoading: {_hx_index:1,__enum__:"banan.resource.texture._MaskedTexture.EMaskingStep",toString:$estr}
	,MaskedCreation: {_hx_index:2,__enum__:"banan.resource.texture._MaskedTexture.EMaskingStep",toString:$estr}
	,Masking: {_hx_index:3,__enum__:"banan.resource.texture._MaskedTexture.EMaskingStep",toString:$estr}
};
banan_resource_texture__$MaskedTexture_EMaskingStep.__empty_constructs__ = [banan_resource_texture__$MaskedTexture_EMaskingStep.SourceLoading,banan_resource_texture__$MaskedTexture_EMaskingStep.MaskLoading,banan_resource_texture__$MaskedTexture_EMaskingStep.MaskedCreation,banan_resource_texture__$MaskedTexture_EMaskingStep.Masking];
var banan_resource_texture_MaskedTexture = function(source,mask,scope) {
	this.source = source;
	this.mask = mask;
	banan_resource_texture_TextureResource.call(this,scope);
};
$hxClasses["banan.resource.texture.MaskedTexture"] = banan_resource_texture_MaskedTexture;
banan_resource_texture_MaskedTexture.__name__ = "banan.resource.texture.MaskedTexture";
banan_resource_texture_MaskedTexture.__super__ = banan_resource_texture_TextureResource;
banan_resource_texture_MaskedTexture.prototype = $extend(banan_resource_texture_TextureResource.prototype,{
	source: null
	,mask: null
	,token: null
	,get_token: function() {
		if(this.token == null) {
			this.token = new banan_resource_ResourceToken();
		}
		return this.token;
	}
	,loadImpl: function() {
		this.source.claim(this.get_token());
		this.mask.claim(this.get_token());
		this.doStep(banan_resource_texture__$MaskedTexture_EMaskingStep.SourceLoading);
	}
	,unloadImpl: function() {
		this.data.unload();
		this.data = null;
		this.source.release(this.get_token());
		this.mask.release(this.get_token());
		this.onUnloaded();
	}
	,doStep: function(step) {
		switch(step._hx_index) {
		case 0:
			if(this.source.get_isLoaded()) {
				this.doStep(banan_resource_texture__$MaskedTexture_EMaskingStep.MaskLoading);
			} else {
				this.source.onLoadedSig.add($bind(this,this.onSourceLoaded));
			}
			break;
		case 1:
			if(this.mask.get_isLoaded()) {
				this.doStep(banan_resource_texture__$MaskedTexture_EMaskingStep.MaskedCreation);
			} else {
				this.mask.onLoadedSig.add($bind(this,this.onMaskLoaded));
			}
			break;
		case 2:
			if(this.source.data == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"MaskedTexture.hx:81","source.data" + " is null" + ": " + Std.string({ state : this.source.state}),null));
			}
			if(this.mask.data == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"MaskedTexture.hx:82","mask.data" + " is null" + ": " + Std.string({ state : this.mask.state}),null));
			}
			this.data = kha_Image.createRenderTarget(this.mask.data.get_width(),this.mask.data.get_height());
			this.doStep(banan_resource_texture__$MaskedTexture_EMaskingStep.Masking);
			break;
		case 3:
			var sourceData = this.source.data;
			var maskData = this.mask.data;
			var maskedData = this.data;
			banan_backend_kha_display_KhaImageCopier.copyWithMask(sourceData,new banan_math_Rect(0.0,0.0,sourceData.get_width(),sourceData.get_height()),maskData,new banan_math_Rect(0.0,0.0,maskData.get_width(),maskData.get_height()),maskedData,new banan_math_Rect(0.0,0.0,maskedData.get_width(),maskedData.get_height()));
			this.onLoaded();
			break;
		}
	}
	,onSourceLoaded: function(_) {
		this.source.onLoadedSig.remove($bind(this,this.onSourceLoaded));
		this.doStep(banan_resource_texture__$MaskedTexture_EMaskingStep.MaskLoading);
	}
	,onMaskLoaded: function(_) {
		this.mask.onLoadedSig.remove($bind(this,this.onMaskLoaded));
		this.doStep(banan_resource_texture__$MaskedTexture_EMaskingStep.MaskedCreation);
	}
	,__class__: banan_resource_texture_MaskedTexture
	,__properties__: $extend(banan_resource_texture_TextureResource.prototype.__properties__,{get_token:"get_token"})
});
var banan_resource_texture_ZipLoaderTexture = function(zip,fileName,scope) {
	this.zip = zip;
	this.fileName = fileName;
	banan_resource_texture_TextureResource.call(this,scope);
};
$hxClasses["banan.resource.texture.ZipLoaderTexture"] = banan_resource_texture_ZipLoaderTexture;
banan_resource_texture_ZipLoaderTexture.__name__ = "banan.resource.texture.ZipLoaderTexture";
banan_resource_texture_ZipLoaderTexture.__super__ = banan_resource_texture_TextureResource;
banan_resource_texture_ZipLoaderTexture.prototype = $extend(banan_resource_texture_TextureResource.prototype,{
	zip: null
	,fileName: null
	,token: null
	,get_token: function() {
		if(this.token == null) {
			this.token = new banan_resource_ResourceToken();
		}
		return this.token;
	}
	,loadImpl: function() {
		if(this.token == null) {
			this.token = new banan_resource_ResourceToken();
		}
		this.zip.claim(this.token);
		if(this.zip.get_isLoaded()) {
			this.onZipLoaded(null);
		} else {
			this.zip.get_onLoadedSig().add($bind(this,this.onZipLoaded));
		}
	}
	,unloadImpl: function() {
		this.zip.get_onLoadedSig().remove($bind(this,this.onZipLoaded));
		if(this.token == null) {
			this.token = new banan_resource_ResourceToken();
		}
		this.zip.release(this.token);
		this.data.unload();
		this.data = null;
		this.onUnloaded();
	}
	,onZipLoaded: function(_) {
		banan_resource_texture_decode_TextureDecoder.decode(this.zip.getBytes(this.fileName),haxe_io_Path.extension(this.fileName).toLowerCase(),$bind(this,this.onDecodeDone),$bind(this,this.onDecodeError));
	}
	,onDecodeDone: function(decodedTexture) {
		this.data = decodedTexture;
		this.onLoaded();
	}
	,onDecodeError: function(errorMsg) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"ZipLoaderTexture.hx:72","decoding of " + this.fileName + " of zip " + this.zip.path + " has been failed with message: " + errorMsg,null));
	}
	,__class__: banan_resource_texture_ZipLoaderTexture
	,__properties__: $extend(banan_resource_texture_TextureResource.prototype.__properties__,{get_token:"get_token"})
});
var banan_resource_texture_decode_DecodeAgent = function() {
};
$hxClasses["banan.resource.texture.decode.DecodeAgent"] = banan_resource_texture_decode_DecodeAgent;
banan_resource_texture_decode_DecodeAgent.__name__ = "banan.resource.texture.decode.DecodeAgent";
banan_resource_texture_decode_DecodeAgent.prototype = {
	decode: function(bytes,ext,cbDone,cbError) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"DecodeAgent.hx:30","",null));
	}
	,update: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"DecodeAgent.hx:34","",null));
	}
	,getStats: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"DecodeAgent.hx:38","",null));
	}
	,__class__: banan_resource_texture_decode_DecodeAgent
};
var banan_resource_texture_decode_DecodeStatsHelper = function() {
	this.stats = { minSpeed : 1073741824, averageSpeed : -1, count : 0};
};
$hxClasses["banan.resource.texture.decode.DecodeStatsHelper"] = banan_resource_texture_decode_DecodeStatsHelper;
banan_resource_texture_decode_DecodeStatsHelper.__name__ = "banan.resource.texture.decode.DecodeStatsHelper";
banan_resource_texture_decode_DecodeStatsHelper.prototype = {
	stats: null
	,getStats: function() {
		return this.stats;
	}
	,updateSpeedStats: function(bytes,decodeTime) {
		var speed = bytes / banan_utils__$Time_Time_$Impl_$.toFloat(decodeTime);
		var currentCount = this.stats.count;
		this.stats.count++;
		this.stats.averageSpeed = (currentCount * this.stats.averageSpeed + speed) / this.stats.count | 0;
		if(speed < this.stats.minSpeed) {
			this.stats.minSpeed = speed | 0;
		}
	}
	,__class__: banan_resource_texture_decode_DecodeStatsHelper
};
var banan_resource_texture_decode_KhaDecodeAgent = function() {
	this.statsHelper = new banan_resource_texture_decode_DecodeStatsHelper();
	banan_resource_texture_decode_DecodeAgent.call(this);
};
$hxClasses["banan.resource.texture.decode.KhaDecodeAgent"] = banan_resource_texture_decode_KhaDecodeAgent;
banan_resource_texture_decode_KhaDecodeAgent.__name__ = "banan.resource.texture.decode.KhaDecodeAgent";
banan_resource_texture_decode_KhaDecodeAgent.__super__ = banan_resource_texture_decode_DecodeAgent;
banan_resource_texture_decode_KhaDecodeAgent.prototype = $extend(banan_resource_texture_decode_DecodeAgent.prototype,{
	statsHelper: null
	,decode: function(bytes,ext,cbDone,cbError) {
		var _gthis = this;
		var startTime = banan_utils_TimeUtils.currentTime();
		var onImageDone = function(image) {
			_gthis.statsHelper.updateSpeedStats(bytes.length,banan_utils__$Time_Time_$Impl_$.toFloat(banan_utils_TimeUtils.currentTime()) - banan_utils__$Time_Time_$Impl_$.toFloat(startTime));
			cbDone(image);
		};
		kha_Image.fromEncodedBytes(bytes,ext,onImageDone,cbError,false);
	}
	,update: function() {
	}
	,getStats: function() {
		return this.statsHelper.getStats();
	}
	,__class__: banan_resource_texture_decode_KhaDecodeAgent
});
var banan_resource_texture_decode_TextureDecoder = function() { };
$hxClasses["banan.resource.texture.decode.TextureDecoder"] = banan_resource_texture_decode_TextureDecoder;
banan_resource_texture_decode_TextureDecoder.__name__ = "banan.resource.texture.decode.TextureDecoder";
banan_resource_texture_decode_TextureDecoder.__properties__ = {get_currentAgent:"get_currentAgent"};
banan_resource_texture_decode_TextureDecoder.get_currentAgent = function() {
	if(banan_resource_texture_decode_TextureDecoder.customAgent == null) {
		if(banan_resource_texture_decode_TextureDecoder.defaultAgent == null) {
			banan_resource_texture_decode_TextureDecoder.defaultAgent = new banan_resource_texture_decode_KhaDecodeAgent();
		}
		return banan_resource_texture_decode_TextureDecoder.defaultAgent;
	} else {
		return banan_resource_texture_decode_TextureDecoder.customAgent;
	}
};
banan_resource_texture_decode_TextureDecoder.decode = function(bytes,ext,cbDone,cbError) {
	banan_resource_texture_decode_TextureDecoder.get_currentAgent().decode(bytes,ext,cbDone,cbError);
};
banan_resource_texture_decode_TextureDecoder.update = function() {
	banan_resource_texture_decode_TextureDecoder.get_currentAgent().update();
};
banan_resource_texture_decode_TextureDecoder.getDefaultAgent = function() {
	if(banan_resource_texture_decode_TextureDecoder.defaultAgent == null) {
		banan_resource_texture_decode_TextureDecoder.defaultAgent = new banan_resource_texture_decode_KhaDecodeAgent();
	}
	return banan_resource_texture_decode_TextureDecoder.defaultAgent;
};
var banan_resource_texture_ext_ClippingMaskTexture = function(imagePath,maskedSizeX,maskedSizeY,maskedOffsetX,maskedOffsetY,maskPath,maskWidth,maskHeight,resourceManager,render2Context,batchEntry,scope) {
	this.resourceManager = resourceManager;
	this.render2Context = render2Context;
	this.materialFactory = render2Context.materialFactory;
	this.batchEntry = batchEntry;
	banan_resource_texture_RenderTargetTexture.call(this,0,maskWidth,maskHeight,scope);
	this.image = resourceManager.getFsImage(imagePath);
	this.imageNineSlice = resourceManager.getFsImageNineSlice(imagePath);
	this.maskedSizeX = maskedSizeX;
	this.maskedSizeY = maskedSizeY;
	this.maskedOffsetX = maskedOffsetX;
	this.maskedOffsetY = maskedOffsetY;
	this.mask = resourceManager.getFsImage(maskPath);
	this.maskNineSlice = resourceManager.getFsImageNineSlice(maskPath);
	this.token = new banan_resource_ResourceToken();
};
$hxClasses["banan.resource.texture.ext.ClippingMaskTexture"] = banan_resource_texture_ext_ClippingMaskTexture;
banan_resource_texture_ext_ClippingMaskTexture.__name__ = "banan.resource.texture.ext.ClippingMaskTexture";
banan_resource_texture_ext_ClippingMaskTexture.__super__ = banan_resource_texture_RenderTargetTexture;
banan_resource_texture_ext_ClippingMaskTexture.prototype = $extend(banan_resource_texture_RenderTargetTexture.prototype,{
	resourceManager: null
	,render2Context: null
	,materialFactory: null
	,batchEntry: null
	,image: null
	,imageNineSlice: null
	,maskedSizeX: null
	,maskedSizeY: null
	,maskedOffsetX: null
	,maskedOffsetY: null
	,mask: null
	,maskNineSlice: null
	,token: null
	,loadCounter: null
	,material: null
	,onRenderTargetLoaded: function() {
		this.loadCounter = 2;
		this.image.claim(this.token);
		if(this.imageNineSlice != null) {
			this.loadCounter++;
			this.imageNineSlice.claim(this.token);
			this.imageNineSlice.waitLoaded($bind(this,this.onResourceLoaded));
		}
		this.mask.claim(this.token);
		if(this.maskNineSlice != null) {
			this.loadCounter++;
			this.maskNineSlice.claim(this.token);
			this.maskNineSlice.waitLoaded($bind(this,this.onResourceLoaded));
		}
		this.image.waitLoaded($bind(this,this.onResourceLoaded));
		this.mask.waitLoaded($bind(this,this.onResourceLoaded));
	}
	,onRenderTargetUnloaded: function() {
		this.image.release(this.token);
		if(this.imageNineSlice != null) {
			this.imageNineSlice.release(this.token);
		}
		this.mask.release(this.token);
		if(this.maskNineSlice != null) {
			this.maskNineSlice.release(this.token);
		}
	}
	,onResourceLoaded: function() {
		if(--this.loadCounter == 0) {
			this.material = this.render2Context.materialFactory.initializeMaterial(new banan_render_render2_material_Material(),banan_render_render2_material_EShaderType.ClippingMask,banan_render_render2_material_EPrimitiveType.Quad);
			this.render();
		}
	}
	,render: function() {
		var _gthis = this;
		var _this = this.render2Context;
		var g4 = this.data.get_g4();
		var _this1 = _this.renderer2;
		_this1.batchSource.closeRenderRequests(_this1);
		_this1.rtStack.push(new banan_render_render2_RenderTarget().configure("clipping mask texture",g4,0));
		var renderer2 = _this.renderer2;
		var right = this.data.get_width();
		var top = this.data.get_height();
		var view = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
		renderer2.projStack.push(new kha_math_FastMatrix4(2 / right,0,0,-right / right,0,2.0 / top,0,-top / top,0,0,-0.002000200020002,-1.0002000200020003,0,0,0,1));
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this2 = renderer2.projStack.first();
		var m = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this2._00 * m._00 + _this2._10 * m._01 + _this2._20 * m._02 + _this2._30 * m._03,_this2._00 * m._10 + _this2._10 * m._11 + _this2._20 * m._12 + _this2._30 * m._13,_this2._00 * m._20 + _this2._10 * m._21 + _this2._20 * m._22 + _this2._30 * m._23,_this2._00 * m._30 + _this2._10 * m._31 + _this2._20 * m._32 + _this2._30 * m._33,_this2._01 * m._00 + _this2._11 * m._01 + _this2._21 * m._02 + _this2._31 * m._03,_this2._01 * m._10 + _this2._11 * m._11 + _this2._21 * m._12 + _this2._31 * m._13,_this2._01 * m._20 + _this2._11 * m._21 + _this2._21 * m._22 + _this2._31 * m._23,_this2._01 * m._30 + _this2._11 * m._31 + _this2._21 * m._32 + _this2._31 * m._33,_this2._02 * m._00 + _this2._12 * m._01 + _this2._22 * m._02 + _this2._32 * m._03,_this2._02 * m._10 + _this2._12 * m._11 + _this2._22 * m._12 + _this2._32 * m._13,_this2._02 * m._20 + _this2._12 * m._21 + _this2._22 * m._22 + _this2._32 * m._23,_this2._02 * m._30 + _this2._12 * m._31 + _this2._22 * m._32 + _this2._32 * m._33,_this2._03 * m._00 + _this2._13 * m._01 + _this2._23 * m._02 + _this2._33 * m._03,_this2._03 * m._10 + _this2._13 * m._11 + _this2._23 * m._12 + _this2._33 * m._13,_this2._03 * m._20 + _this2._13 * m._21 + _this2._23 * m._22 + _this2._33 * m._23,_this2._03 * m._30 + _this2._13 * m._31 + _this2._23 * m._32 + _this2._33 * m._33);
		renderer2.viewStack.push(view);
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this3 = renderer2.projStack.first();
		var m1 = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this3._00 * m1._00 + _this3._10 * m1._01 + _this3._20 * m1._02 + _this3._30 * m1._03,_this3._00 * m1._10 + _this3._10 * m1._11 + _this3._20 * m1._12 + _this3._30 * m1._13,_this3._00 * m1._20 + _this3._10 * m1._21 + _this3._20 * m1._22 + _this3._30 * m1._23,_this3._00 * m1._30 + _this3._10 * m1._31 + _this3._20 * m1._32 + _this3._30 * m1._33,_this3._01 * m1._00 + _this3._11 * m1._01 + _this3._21 * m1._02 + _this3._31 * m1._03,_this3._01 * m1._10 + _this3._11 * m1._11 + _this3._21 * m1._12 + _this3._31 * m1._13,_this3._01 * m1._20 + _this3._11 * m1._21 + _this3._21 * m1._22 + _this3._31 * m1._23,_this3._01 * m1._30 + _this3._11 * m1._31 + _this3._21 * m1._32 + _this3._31 * m1._33,_this3._02 * m1._00 + _this3._12 * m1._01 + _this3._22 * m1._02 + _this3._32 * m1._03,_this3._02 * m1._10 + _this3._12 * m1._11 + _this3._22 * m1._12 + _this3._32 * m1._13,_this3._02 * m1._20 + _this3._12 * m1._21 + _this3._22 * m1._22 + _this3._32 * m1._23,_this3._02 * m1._30 + _this3._12 * m1._31 + _this3._22 * m1._32 + _this3._32 * m1._33,_this3._03 * m1._00 + _this3._13 * m1._01 + _this3._23 * m1._02 + _this3._33 * m1._03,_this3._03 * m1._10 + _this3._13 * m1._11 + _this3._23 * m1._12 + _this3._33 * m1._13,_this3._03 * m1._20 + _this3._13 * m1._21 + _this3._23 * m1._22 + _this3._33 * m1._23,_this3._03 * m1._30 + _this3._13 * m1._31 + _this3._23 * m1._32 + _this3._33 * m1._33);
		var clippingMaskConfig = this.mask.current.get_texture();
		var nineSliceRes = this.maskNineSlice;
		var it = nineSliceRes != null ? nineSliceRes.data : null;
		var it1 = it != null ? new kha_math_FastVector4(it.left,it.top,it.right,it.bottom) : null;
		var clippingMaskConfig1 = it1 != null ? it1 : new kha_math_FastVector4(0.0,0.0,0.0,0.0);
		var nineSliceRes1 = this.maskNineSlice;
		var it2 = nineSliceRes1 != null ? nineSliceRes1.data : null;
		var a = it2 != null ? it2.isTile ? 1.0 : 0.0 : null;
		var it3 = this.mask.current;
		var clippingMaskConfig2 = new kha_math_FastVector2(it3.tSizeX,it3.tSizeY);
		var clippingMaskConfig3 = new kha_math_FastVector2(this.sizeX,this.sizeY);
		var it4 = this.mask.current;
		var it5 = it4.tx;
		var it6 = _gthis.mask.current.get_texture().data;
		var clippingMaskConfig4 = it6 != null ? it6.get_width() : null;
		var it7 = it4.ty;
		var it8 = _gthis.mask.current.get_texture().data;
		var clippingMaskConfig5 = it8 != null ? it8.get_height() : null;
		var it9 = it4.tSizeX;
		var it10 = _gthis.mask.current.get_texture().data;
		var clippingMaskConfig6 = it10 != null ? it10.get_width() : null;
		var it11 = it4.tSizeY;
		var it12 = _gthis.mask.current.get_texture().data;
		var clippingMaskConfig7 = new kha_math_FastVector4(it5 / clippingMaskConfig4,it7 / clippingMaskConfig5,it9 / clippingMaskConfig6,it11 / (it12 != null ? it12.get_height() : null));
		var nineSliceRes2 = this.imageNineSlice;
		var it13 = nineSliceRes2 != null ? nineSliceRes2.data : null;
		var it14 = it13 != null ? new kha_math_FastVector4(it13.left,it13.top,it13.right,it13.bottom) : null;
		var clippingMaskConfig8 = it14 != null ? it14 : new kha_math_FastVector4(0.0,0.0,0.0,0.0);
		var nineSliceRes3 = this.imageNineSlice;
		var it15 = nineSliceRes3 != null ? nineSliceRes3.data : null;
		var a1 = it15 != null ? it15.isTile ? 1.0 : 0.0 : null;
		var it16 = this.image.current;
		var clippingMaskConfig9 = new kha_math_FastVector2(it16.tSizeX,it16.tSizeY);
		var clippingMaskConfig10 = new kha_math_FastVector2(_gthis.maskedSizeX,_gthis.maskedSizeY);
		var clippingMaskConfig11 = new kha_math_FastVector2(this.maskedOffsetX,this.maskedOffsetY);
		var it17 = this.image.current;
		var it18 = it17.tx;
		var it19 = _gthis.image.current.get_texture().data;
		var clippingMaskConfig12 = it19 != null ? it19.get_width() : null;
		var it20 = it17.ty;
		var it21 = _gthis.image.current.get_texture().data;
		var clippingMaskConfig13 = it21 != null ? it21.get_height() : null;
		var it22 = it17.tSizeX;
		var it23 = _gthis.image.current.get_texture().data;
		var clippingMaskConfig14 = it23 != null ? it23.get_width() : null;
		var it24 = it17.tSizeY;
		var it25 = _gthis.image.current.get_texture().data;
		var clippingMaskConfig15 = { mask : clippingMaskConfig, mask9slice : clippingMaskConfig1, maskIsTile : a != null ? a : 0.0, maskSizeBase : clippingMaskConfig2, maskSize : clippingMaskConfig3, maskUvConversion : clippingMaskConfig7, tex9slice : clippingMaskConfig8, texIsTile : a1 != null ? a1 : 0.0, texSizeBase : clippingMaskConfig9, texSize : clippingMaskConfig10, texOffset : clippingMaskConfig11, texUvConversion : new kha_math_FastVector4(it18 / clippingMaskConfig12,it20 / clippingMaskConfig13,it22 / clippingMaskConfig14,it24 / (it25 != null ? it25.get_height() : null))};
		this.material.setTexture(this.image.current.get_texture()).setTextureAddressing(2).setClippingMaskConfig(clippingMaskConfig15);
		this.batchEntry.isDirty = true;
		var batchEntry = this.batchEntry;
		var sizeX = this.sizeX;
		var sizeY = this.sizeY;
		var rect_x = 0;
		var rect_y = 0;
		var uvRect_x = 0;
		var uvRect_y = 0;
		var batch = renderer2.getBatchFor(this.material,6,batchEntry.themeId);
		if(batchEntry.check(batch,4,6)) {
			batchEntry.sync(batch,4,6);
		} else {
			batchEntry.isDirty = false;
		}
		var batch1 = batch;
		if(batchEntry.isDirty) {
			if(batch1._vertices == null) {
				batch1._vertices = batch1.vertexBuffer.lock();
				if(batch1.isDynamicIndices) {
					batch1._indices = batch1.indexBuffer.lock();
				}
			}
			var vbuff = batch1._vertices;
			var vfrom = batch1.vertexCount;
			var position = vfrom * 5;
			vbuff[position] = rect_x;
			vbuff[position + 1] = rect_y;
			vbuff[position + 2] = -5.0;
			vbuff[position + 3] = uvRect_x;
			vbuff[position + 4] = uvRect_y;
			var position1 = (vfrom + 1) * 5;
			vbuff[position1] = rect_x + sizeX;
			vbuff[position1 + 1] = rect_y;
			vbuff[position1 + 2] = -5.0;
			vbuff[position1 + 3] = 1.;
			vbuff[position1 + 4] = uvRect_y;
			var position2 = (vfrom + 2) * 5;
			vbuff[position2] = rect_x + sizeX;
			vbuff[position2 + 1] = rect_y + sizeY;
			vbuff[position2 + 2] = -5.0;
			vbuff[position2 + 3] = 1.;
			vbuff[position2 + 4] = 1.;
			var position3 = (vfrom + 3) * 5;
			vbuff[position3] = rect_x;
			vbuff[position3 + 1] = rect_y + sizeY;
			vbuff[position3 + 2] = -5.0;
			vbuff[position3 + 3] = uvRect_x;
			vbuff[position3 + 4] = 1.;
		}
		batchEntry.shiftCounters();
		renderer2.viewStack.pop();
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this4 = renderer2.projStack.first();
		var m2 = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this4._00 * m2._00 + _this4._10 * m2._01 + _this4._20 * m2._02 + _this4._30 * m2._03,_this4._00 * m2._10 + _this4._10 * m2._11 + _this4._20 * m2._12 + _this4._30 * m2._13,_this4._00 * m2._20 + _this4._10 * m2._21 + _this4._20 * m2._22 + _this4._30 * m2._23,_this4._00 * m2._30 + _this4._10 * m2._31 + _this4._20 * m2._32 + _this4._30 * m2._33,_this4._01 * m2._00 + _this4._11 * m2._01 + _this4._21 * m2._02 + _this4._31 * m2._03,_this4._01 * m2._10 + _this4._11 * m2._11 + _this4._21 * m2._12 + _this4._31 * m2._13,_this4._01 * m2._20 + _this4._11 * m2._21 + _this4._21 * m2._22 + _this4._31 * m2._23,_this4._01 * m2._30 + _this4._11 * m2._31 + _this4._21 * m2._32 + _this4._31 * m2._33,_this4._02 * m2._00 + _this4._12 * m2._01 + _this4._22 * m2._02 + _this4._32 * m2._03,_this4._02 * m2._10 + _this4._12 * m2._11 + _this4._22 * m2._12 + _this4._32 * m2._13,_this4._02 * m2._20 + _this4._12 * m2._21 + _this4._22 * m2._22 + _this4._32 * m2._23,_this4._02 * m2._30 + _this4._12 * m2._31 + _this4._22 * m2._32 + _this4._32 * m2._33,_this4._03 * m2._00 + _this4._13 * m2._01 + _this4._23 * m2._02 + _this4._33 * m2._03,_this4._03 * m2._10 + _this4._13 * m2._11 + _this4._23 * m2._12 + _this4._33 * m2._13,_this4._03 * m2._20 + _this4._13 * m2._21 + _this4._23 * m2._22 + _this4._33 * m2._23,_this4._03 * m2._30 + _this4._13 * m2._31 + _this4._23 * m2._32 + _this4._33 * m2._33);
		renderer2.projStack.pop();
		renderer2.batchSource.closeRenderRequests(renderer2);
		var _this5 = renderer2.projStack.first();
		var m3 = renderer2.viewStack.first();
		renderer2.mvp = new kha_math_FastMatrix4(_this5._00 * m3._00 + _this5._10 * m3._01 + _this5._20 * m3._02 + _this5._30 * m3._03,_this5._00 * m3._10 + _this5._10 * m3._11 + _this5._20 * m3._12 + _this5._30 * m3._13,_this5._00 * m3._20 + _this5._10 * m3._21 + _this5._20 * m3._22 + _this5._30 * m3._23,_this5._00 * m3._30 + _this5._10 * m3._31 + _this5._20 * m3._32 + _this5._30 * m3._33,_this5._01 * m3._00 + _this5._11 * m3._01 + _this5._21 * m3._02 + _this5._31 * m3._03,_this5._01 * m3._10 + _this5._11 * m3._11 + _this5._21 * m3._12 + _this5._31 * m3._13,_this5._01 * m3._20 + _this5._11 * m3._21 + _this5._21 * m3._22 + _this5._31 * m3._23,_this5._01 * m3._30 + _this5._11 * m3._31 + _this5._21 * m3._32 + _this5._31 * m3._33,_this5._02 * m3._00 + _this5._12 * m3._01 + _this5._22 * m3._02 + _this5._32 * m3._03,_this5._02 * m3._10 + _this5._12 * m3._11 + _this5._22 * m3._12 + _this5._32 * m3._13,_this5._02 * m3._20 + _this5._12 * m3._21 + _this5._22 * m3._22 + _this5._32 * m3._23,_this5._02 * m3._30 + _this5._12 * m3._31 + _this5._22 * m3._32 + _this5._32 * m3._33,_this5._03 * m3._00 + _this5._13 * m3._01 + _this5._23 * m3._02 + _this5._33 * m3._03,_this5._03 * m3._10 + _this5._13 * m3._11 + _this5._23 * m3._12 + _this5._33 * m3._13,_this5._03 * m3._20 + _this5._13 * m3._21 + _this5._23 * m3._22 + _this5._33 * m3._23,_this5._03 * m3._30 + _this5._13 * m3._31 + _this5._23 * m3._32 + _this5._33 * m3._33);
		this.render2Context.renderer2.addEndRequest(true);
	}
	,__class__: banan_resource_texture_ext_ClippingMaskTexture
});
var spine_atlas_TextureLoader = function() { };
$hxClasses["spine.atlas.TextureLoader"] = spine_atlas_TextureLoader;
spine_atlas_TextureLoader.__name__ = "spine.atlas.TextureLoader";
spine_atlas_TextureLoader.__isInterface__ = true;
spine_atlas_TextureLoader.prototype = {
	loadPage: null
	,loadRegion: null
	,unloadPage: null
	,__class__: spine_atlas_TextureLoader
};
var banan_spine_BananTextureLoader = function(resourceManager,fileSystem,rootPath) {
	this.token = new banan_resource_ResourceToken();
	this.resourceManager = resourceManager;
	this.fileSystem = fileSystem;
	this.rootPath = rootPath;
	this.pageLoadCounter = 0;
};
$hxClasses["banan.spine.BananTextureLoader"] = banan_spine_BananTextureLoader;
banan_spine_BananTextureLoader.__name__ = "banan.spine.BananTextureLoader";
banan_spine_BananTextureLoader.__interfaces__ = [spine_atlas_TextureLoader];
banan_spine_BananTextureLoader.prototype = {
	resourceManager: null
	,fileSystem: null
	,rootPath: null
	,token: null
	,pageLoadCounter: null
	,loadCallback: null
	,loadPage: function(page,path) {
		if(this.loadCallback != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"BananTextureLoader.hx:34","loadCallback == null",null));
		}
		var fullPath = "" + this.rootPath + path;
		var textureResource = this.resourceManager.getFsTexture(fullPath);
		var imageResource = this.resourceManager.getFsSubImage(fullPath,0,0,textureResource.sizeX,textureResource.sizeY,0,0,textureResource.sizeX,textureResource.sizeY,1.0);
		if(imageResource.textureScale != 1.0) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"BananTextureLoader.hx:42","imageResource.textureScale == 1.0" + ": " + "scaled spine atlases not supported",null));
		}
		imageResource.claim(this.token);
		page.rendererObject = imageResource;
		page.width = imageResource.tSizeX;
		page.height = imageResource.tSizeY;
		++this.pageLoadCounter;
		imageResource.waitLoaded($bind(this,this.decPageLoadCounter));
	}
	,loadRegion: function(region) {
	}
	,unloadPage: function(page) {
		(js_Boot.__cast(page.rendererObject , banan_resource_image_ImageResource)).release(this.token);
	}
	,waitLoaded: function(cb) {
		if(this.loadCallback != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"BananTextureLoader.hx:64","loadCallback == null",null));
		}
		this.loadCallback = cb;
		if(this.pageLoadCounter == 0) {
			this.loadCallback();
		}
	}
	,decPageLoadCounter: function() {
		if(--this.pageLoadCounter == 0 && this.loadCallback != null) {
			this.loadCallback();
		}
	}
	,__class__: banan_spine_BananTextureLoader
};
var banan_spine_display_SpineRenderHelper = function() { };
$hxClasses["banan.spine.display.SpineRenderHelper"] = banan_spine_display_SpineRenderHelper;
banan_spine_display_SpineRenderHelper.__name__ = "banan.spine.display.SpineRenderHelper";
banan_spine_display_SpineRenderHelper.renderDrawOrder = function(renderer,material,batchEntry,drawOrder,ox,oy,r,g,b,a) {
	if(oy == null) {
		oy = 0.0;
	}
	if(ox == null) {
		ox = 0.0;
	}
	var _g = 0;
	var _g1 = drawOrder.length;
	while(_g < _g1) {
		var slot = drawOrder[_g++];
		var attachment = slot.get_attachment();
		if(((attachment) instanceof spine_attachments_RegionAttachment)) {
			var region = attachment;
			material = material.setTexture((js_Boot.__cast((js_Boot.__cast(region.rendererObject , spine_atlas_AtlasRegion)).page.rendererObject , banan_resource_image_ImageResource)).data);
			if(batchEntry.ext == null) {
				batchEntry.ext = [batchEntry];
			}
			if(batchEntry.ext[batchEntry.currentIdx] == null) {
				var batchEntry1 = new banan_render_render2_batch_BatchEntry(batchEntry.render2Context.getDrawableId());
				batchEntry1.themeId = batchEntry.themeId;
				batchEntry.ext[batchEntry.currentIdx] = batchEntry1;
			}
			var result = batchEntry.ext[batchEntry.currentIdx++];
			var test = batchEntry._dirtyOnShift;
			if(test == null) {
				test = true;
			}
			result.isDirty = result.isDirty || test;
			banan_spine_display_SpineRenderHelper.renderRegion(renderer,material,result,region,slot,ox,oy,r,g,b,a);
		} else if(!((attachment) instanceof spine_attachments_ClippingAttachment)) {
			if(((attachment) instanceof spine_attachments_MeshAttachment)) {
				var mesh = attachment;
				material = material.setTexture((js_Boot.__cast((js_Boot.__cast(mesh.rendererObject , spine_atlas_AtlasRegion)).page.rendererObject , banan_resource_image_ImageResource)).data);
				if(batchEntry.ext == null) {
					batchEntry.ext = [batchEntry];
				}
				if(batchEntry.ext[batchEntry.currentIdx] == null) {
					var batchEntry2 = new banan_render_render2_batch_BatchEntry(batchEntry.render2Context.getDrawableId());
					batchEntry2.themeId = batchEntry.themeId;
					batchEntry.ext[batchEntry.currentIdx] = batchEntry2;
				}
				var result1 = batchEntry.ext[batchEntry.currentIdx++];
				var test1 = batchEntry._dirtyOnShift;
				if(test1 == null) {
					test1 = true;
				}
				result1.isDirty = result1.isDirty || test1;
				banan_spine_display_SpineRenderHelper.renderMesh(renderer,material,result1,mesh,slot,ox,oy,r,g,b,a);
			}
		}
	}
};
banan_spine_display_SpineRenderHelper.renderMesh = function(renderer,material,batchEntry,mesh,slot,ox,oy,r,g,b,a) {
	if(oy == null) {
		oy = 0.0;
	}
	if(ox == null) {
		ox = 0.0;
	}
	var verticesLength = mesh.worldVerticesLength;
	var sc = slot.color;
	var mc = mesh.color;
	var it = slot.darkColor;
	var a1 = it != null ? kha__$Color_Color_$Impl_$.fromFloats(it.r,it.g,it.b,it.a) : null;
	var sc2 = a1 != null ? a1 : -16777216;
	var af = slot.get_data().blendMode == "additive" ? 0.0 : 1.0;
	mesh.computeWorldVertices(slot,0,verticesLength,banan_spine_display_SpineRenderHelper.worldVertices,0,2);
	banan_spine_display_SpineRenderHelper.renderArrays(renderer,material,batchEntry,banan_spine_display_SpineRenderHelper.worldVertices,mesh.uvs,mesh.triangles,verticesLength,mesh.triangles.length,ox,oy,sc.r * mc.r * r,sc.g * mc.g * g,sc.b * mc.b * b,sc.a * mc.a * a,((sc2 & 16711680) >>> 16) * 0.00392156862745098,((sc2 & 65280) >>> 8) * 0.00392156862745098,(sc2 & 255) * 0.00392156862745098,af);
};
banan_spine_display_SpineRenderHelper.renderRegion = function(renderer,material,batchEntry,region,slot,ox,oy,r,g,b,a) {
	if(oy == null) {
		oy = 0.0;
	}
	if(ox == null) {
		ox = 0.0;
	}
	var sc = slot.color;
	var rc = region.color;
	var it = slot.darkColor;
	var a1 = it != null ? kha__$Color_Color_$Impl_$.fromFloats(it.r,it.g,it.b,it.a) : null;
	var sc2 = a1 != null ? a1 : -16777216;
	var af = slot.get_data().blendMode == "additive" ? 0.0 : 1.0;
	region.computeWorldVertices(slot.get_bone(),banan_spine_display_SpineRenderHelper.worldVertices,0,2);
	banan_spine_display_SpineRenderHelper.renderArrays(renderer,material,batchEntry,banan_spine_display_SpineRenderHelper.worldVertices,region.uvs,banan_spine_display_SpineRenderHelper.regionIndices,8,6,ox,oy,sc.r * rc.r * r,sc.g * rc.g * g,sc.b * rc.b * b,sc.a * rc.a * a,((sc2 & 16711680) >>> 16) * 0.00392156862745098,((sc2 & 65280) >>> 8) * 0.00392156862745098,(sc2 & 255) * 0.00392156862745098,af);
};
banan_spine_display_SpineRenderHelper.configureMaterial = function(material,atlasRegion) {
	return material.setTexture((js_Boot.__cast(atlasRegion.page.rendererObject , banan_resource_image_ImageResource)).data);
};
banan_spine_display_SpineRenderHelper.getAdditiveFactor = function(slot) {
	if(slot.get_data().blendMode == "additive") {
		return 0.0;
	} else {
		return 1.0;
	}
};
banan_spine_display_SpineRenderHelper.getColor2 = function(slot) {
	var it = slot.darkColor;
	var a = it != null ? kha__$Color_Color_$Impl_$.fromFloats(it.r,it.g,it.b,it.a) : null;
	if(a != null) {
		return a;
	} else {
		return -16777216;
	}
};
banan_spine_display_SpineRenderHelper.renderArrays = function(renderer,material,batchEntry,verticesArray,uvsArray,indicesArray,verticesLength,indicesLength,ox,oy,r,g,b,a,r2,g2,b2,af) {
	if(!material.texture.get_isLoaded()) {
		return;
	}
	var vertexCount = Math.floor(verticesLength / 2);
	var batch = batchEntry.getBatchForStrong(material,renderer,vertexCount,indicesLength);
	if(batchEntry.isDirty) {
		if(batch._vertices == null) {
			batch._vertices = batch.vertexBuffer.lock();
			if(batch.isDynamicIndices) {
				batch._indices = batch.indexBuffer.lock();
			}
		}
		var vbuff = batch._vertices;
		if(batch._vertices == null) {
			batch._vertices = batch.vertexBuffer.lock();
			if(batch.isDynamicIndices) {
				batch._indices = batch.indexBuffer.lock();
			}
		}
		var ibuff = batch._indices;
		var vfrom = batch.vertexCount;
		var ifrom = batch.indexCount;
		var _g = 0;
		while(_g < vertexCount) {
			var i = _g++;
			var j = i << 1;
			var vy = verticesArray[j + 1] + oy;
			var tx = uvsArray[j];
			var ty = uvsArray[j + 1];
			var position = (vfrom + i) * 13;
			vbuff[position] = verticesArray[j] + ox;
			vbuff[position + 1] = vy;
			vbuff[position + 2] = -5.0;
			vbuff[position + 3] = tx;
			vbuff[position + 4] = ty;
			vbuff[position + 5] = r;
			vbuff[position + 6] = g;
			vbuff[position + 7] = b;
			vbuff[position + 8] = a;
			vbuff[position + 9] = r2;
			vbuff[position + 10] = g2;
			vbuff[position + 11] = b2;
			vbuff[position + 12] = af;
		}
		var _g2 = 0;
		while(_g2 < indicesLength) {
			var i1 = _g2++;
			ibuff[ifrom + i1] = indicesArray[i1] + vfrom;
		}
	}
	batchEntry.shiftCounters();
};
var banan_spine_display_animation2_ESpineAnimationEvent = $hxEnums["banan.spine.display.animation2.ESpineAnimationEvent"] = { __ename__ : true, __constructs__ : ["Started","LoopCompleted","LastLoopCompleted","Ended","Event","Interrupted","Disposed","ResourceChanged"]
	,Started: {_hx_index:0,__enum__:"banan.spine.display.animation2.ESpineAnimationEvent",toString:$estr}
	,LoopCompleted: {_hx_index:1,__enum__:"banan.spine.display.animation2.ESpineAnimationEvent",toString:$estr}
	,LastLoopCompleted: {_hx_index:2,__enum__:"banan.spine.display.animation2.ESpineAnimationEvent",toString:$estr}
	,Ended: {_hx_index:3,__enum__:"banan.spine.display.animation2.ESpineAnimationEvent",toString:$estr}
	,Event: ($_=function(event) { return {_hx_index:4,event:event,__enum__:"banan.spine.display.animation2.ESpineAnimationEvent",toString:$estr}; },$_.__params__ = ["event"],$_)
	,Interrupted: {_hx_index:5,__enum__:"banan.spine.display.animation2.ESpineAnimationEvent",toString:$estr}
	,Disposed: {_hx_index:6,__enum__:"banan.spine.display.animation2.ESpineAnimationEvent",toString:$estr}
	,ResourceChanged: {_hx_index:7,__enum__:"banan.spine.display.animation2.ESpineAnimationEvent",toString:$estr}
};
banan_spine_display_animation2_ESpineAnimationEvent.__empty_constructs__ = [banan_spine_display_animation2_ESpineAnimationEvent.Started,banan_spine_display_animation2_ESpineAnimationEvent.LoopCompleted,banan_spine_display_animation2_ESpineAnimationEvent.LastLoopCompleted,banan_spine_display_animation2_ESpineAnimationEvent.Ended,banan_spine_display_animation2_ESpineAnimationEvent.Interrupted,banan_spine_display_animation2_ESpineAnimationEvent.Disposed,banan_spine_display_animation2_ESpineAnimationEvent.ResourceChanged];
var banan_spine_display_animation2__$SpinePlayer2_EPlayAnimatioMode = $hxEnums["banan.spine.display.animation2._SpinePlayer2.EPlayAnimatioMode"] = { __ename__ : true, __constructs__ : ["Add","Set"]
	,Add: ($_=function(delay) { return {_hx_index:0,delay:delay,__enum__:"banan.spine.display.animation2._SpinePlayer2.EPlayAnimatioMode",toString:$estr}; },$_.__params__ = ["delay"],$_)
	,Set: ($_=function(position) { return {_hx_index:1,position:position,__enum__:"banan.spine.display.animation2._SpinePlayer2.EPlayAnimatioMode",toString:$estr}; },$_.__params__ = ["position"],$_)
};
banan_spine_display_animation2__$SpinePlayer2_EPlayAnimatioMode.__empty_constructs__ = [];
var banan_spine_display_animation2__$SpinePlayer2_PlayerTimer = function(fps,randomizeStartTime) {
	this.timeStep = 1.0 / fps;
	this.timeOffset = randomizeStartTime ? Math.random() * this.timeStep : 0.0;
	this.reset();
	this.enableUpdate = true;
};
$hxClasses["banan.spine.display.animation2._SpinePlayer2.PlayerTimer"] = banan_spine_display_animation2__$SpinePlayer2_PlayerTimer;
banan_spine_display_animation2__$SpinePlayer2_PlayerTimer.__name__ = "banan.spine.display.animation2._SpinePlayer2.PlayerTimer";
banan_spine_display_animation2__$SpinePlayer2_PlayerTimer.prototype = {
	enableUpdate: null
	,timeStep: null
	,timeOffset: null
	,lastTime: null
	,frameTime: null
	,update: function(time) {
		if(!this.enableUpdate) {
			return null;
		}
		if(this.lastTime == null) {
			this.lastTime = time;
		}
		time -= this.timeOffset;
		var dt = time - this.lastTime;
		this.lastTime = time;
		this.frameTime += dt;
		if(this.frameTime >= this.timeStep) {
			var dtReal = Math.floor(this.frameTime / this.timeStep) * this.timeStep;
			this.frameTime -= dtReal;
			return dtReal;
		} else {
			return null;
		}
	}
	,reset: function() {
		this.enableUpdate = false;
		this.lastTime = null;
		this.frameTime = 0.0;
	}
	,__class__: banan_spine_display_animation2__$SpinePlayer2_PlayerTimer
};
var banan_spine_display_animation2_SpinePlayer2 = function(fps,randomizeStartTime) {
	if(randomizeStartTime == null) {
		randomizeStartTime = false;
	}
	if(fps == null) {
		fps = 16.0;
	}
	spine_Bone.yDown = true;
	this.resource = null;
	this.token = new banan_resource_ResourceToken();
	this.skeleton = null;
	this.animationState = null;
	this.drawOrderValid = false;
	this.timer = new banan_spine_display_animation2__$SpinePlayer2_PlayerTimer(fps,randomizeStartTime);
	this.pendingAnimations = [];
	this.activeAnimations = [];
	this.mixMap = new banan_ds_Map2KImpl_$String_$String();
	this.defaultMix = 0.0;
	this.scaleX = 1.0;
	this.scaleY = 1.0;
};
$hxClasses["banan.spine.display.animation2.SpinePlayer2"] = banan_spine_display_animation2_SpinePlayer2;
banan_spine_display_animation2_SpinePlayer2.__name__ = "banan.spine.display.animation2.SpinePlayer2";
banan_spine_display_animation2_SpinePlayer2.prototype = {
	resource: null
	,token: null
	,skeleton: null
	,animationState: null
	,drawOrderValid: null
	,timer: null
	,pendingAnimations: null
	,activeAnimations: null
	,mixMap: null
	,defaultMix: null
	,scaleX: null
	,scaleY: null
	,addMix: function(from,to,duration) {
		banan_ds__$Map2K_Map2K_$Impl_$.set(this.mixMap,from,to,duration);
		this.syncMix();
	}
	,setDefaultMix: function(value) {
		this.defaultMix = value;
		this.syncMix();
	}
	,getDrawOrder: function() {
		var _gthis = this;
		var a;
		if(this.skeleton != null) {
			if(!_gthis.drawOrderValid) {
				_gthis.drawOrderValid = true;
				_gthis.skeleton.scaleX = _gthis.scaleX;
				_gthis.skeleton.scaleY = _gthis.scaleY;
				_gthis.skeleton.updateWorldTransform();
			}
			a = _gthis.skeleton.drawOrder;
		} else {
			a = null;
		}
		if(a != null) {
			return a;
		} else {
			return banan_spine_display_animation2_SpinePlayer2.nullDrawOrder;
		}
	}
	,calculateBbVertices: function(bbVertices,bbName) {
		var _g = 0;
		var _g1 = this.getDrawOrder();
		while(_g < _g1.length) {
			var slot = _g1[_g];
			++_g;
			var attachment = slot.get_attachment();
			var tmp;
			if(((attachment) instanceof spine_attachments_BoundingBoxAttachment)) {
				var a = bbName != null ? bbName.toLowerCase() == attachment.get_name().toLowerCase() : null;
				tmp = a != null ? a : true;
			} else {
				tmp = false;
			}
			if(tmp) {
				var bb = attachment;
				var verticesLength = bb.worldVerticesLength;
				bb.computeWorldVertices(slot,0,verticesLength,bbVertices,0,2);
				var _g2 = 0;
				var _g11 = bb.worldVerticesLength >> 1;
				while(_g2 < _g11) {
					var j = _g2++ << 1;
					bbVertices[j] /= this.scaleX;
					bbVertices[j + 1] /= this.scaleY;
				}
				return verticesLength >> 1;
			}
		}
		return null;
	}
	,setScale: function(scaleX,scaleY) {
		if(scaleX != this.scaleX || scaleY != this.scaleY) {
			this.scaleX = scaleX;
			this.scaleY = scaleY;
			this.drawOrderValid = false;
		}
	}
	,setResource: function(resource) {
		var _gthis = this;
		var oldResource = this.resource;
		if(oldResource == resource) {
			return;
		}
		if(oldResource != null) {
			oldResource.release(this.token);
			this.resource = null;
			if(this.isRuntimeStateReady()) {
				this.animationState.clearTracks();
				if(this.activeAnimations.length != 0) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(121,"SpinePlayer2.hx:234","activeAnimations.length == 0",null));
				}
				if(this.pendingAnimations.length > 0) {
					var _g = 0;
					var _g1 = this.pendingAnimations;
					while(_g < _g1.length) {
						var _g2 = 0;
						var _g11 = _g1[_g++].cbs;
						while(_g2 < _g11.length) _g11[_g2++](banan_spine_display_animation2_ESpineAnimationEvent.ResourceChanged);
					}
					this.pendingAnimations.length = 0;
				}
				this.skeleton = null;
				this.animationState = null;
				this.drawOrderValid = false;
			} else {
				oldResource.onLoadedSig.remove($bind(this,this.onResourceLoaded));
			}
		}
		if(resource != null) {
			resource.claim(this.token);
			this.resource = resource;
			if(resource.get_isLoaded()) {
				this.onResourceLoaded();
			} else {
				resource.onLoadedSig.addOnce(function(_) {
					_gthis.onResourceLoaded();
					return;
				});
			}
		}
	}
	,setAnimation: function(name,loopCount,position,cbs) {
		this.playAnimation(name,banan_spine_display_animation2__$SpinePlayer2_EPlayAnimatioMode.Set(position),loopCount,cbs);
	}
	,addAnimation: function(name,loopCount,delay,cbs) {
		this.playAnimation(name,banan_spine_display_animation2__$SpinePlayer2_EPlayAnimatioMode.Add(delay),loopCount,cbs);
	}
	,update: function(time) {
		if(!this.isRuntimeStateReady()) {
			return;
		}
		if(this.pendingAnimations.length > 0) {
			var _g = 0;
			var _g1 = this.pendingAnimations;
			while(_g < _g1.length) {
				var config = _g1[_g];
				++_g;
				this.animationState.queue.drainDisabled = true;
				var isLooped = config.loopCount == 0;
				var track;
				var _g2 = config.mode;
				switch(_g2._hx_index) {
				case 0:
					track = this.animationState.addAnimationByName(0,config.name,isLooped,_g2.delay);
					break;
				case 1:
					track = this.animationState.setAnimationByName(0,config.name,isLooped);
					break;
				}
				this.addListeners(config);
				this.activate(config,track);
				this.animationState.queue.drainDisabled = false;
				this.animationState.queue.drain();
			}
			this.pendingAnimations.length = 0;
		}
		var dt = this.timer.update(time);
		if(dt != null) {
			this.advanceRuntimeState(dt);
		}
	}
	,onResourceLoaded: function(_) {
		var skeletonData = this.resource.data;
		var animationStateData = new spine_animation_AnimationStateData(skeletonData);
		this.skeleton = new spine_Skeleton(skeletonData);
		this.animationState = new spine_animation_AnimationState(animationStateData);
		this.syncMix();
	}
	,syncMix: function() {
		if(this.animationState == null) {
			return;
		}
		var _g = new haxe_iterators_MapKeyValueIterator(this.mixMap.map);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var from = _g1.key;
			var _g2 = _g1.value.keyValueIterator();
			while(_g2.hasNext()) {
				var _g3 = _g2.next();
				var to = _g3.key;
				var duration = _g3.value;
				var data = this.animationState.data;
				var skeletonData = data.get_skeletonData();
				if(skeletonData.findAnimation(from) != null && skeletonData.findAnimation(to) != null) {
					data.setMixByName(from,to,duration);
				}
			}
		}
		this.animationState.data.defaultMix = this.defaultMix;
	}
	,playAnimation: function(name,mode,loopCount,cbs) {
		this.pendingAnimations.push({ name : name, loopCount : loopCount, cbs : cbs != null ? cbs : [], mode : mode, track : null, loopsCompleted : 0});
	}
	,animationCallback: function(track,event) {
		var tmp = this.getActiveAnimation(track);
		if(tmp == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"SpinePlayer2.hx:364","getActiveAnimation(track)" + " is null",null));
		}
		switch(event._hx_index) {
		case 0:
			this.skeleton.setToSetupPose();
			var _g = tmp.mode;
			switch(_g._hx_index) {
			case 0:
				this.advanceRuntimeState(0.0);
				break;
			case 1:
				this.advanceRuntimeState(_g.position * tmp.loopCount * (track.animationEnd - track.animationStart));
				break;
			}
			break;
		case 1:
			tmp.loopsCompleted++;
			if(tmp.loopCount > 0 && tmp.loopsCompleted >= tmp.loopCount) {
				track.loop = false;
				event = banan_spine_display_animation2_ESpineAnimationEvent.LastLoopCompleted;
			}
			break;
		case 2:case 7:
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		case 6:
			this.removeListeners(tmp);
			this.deactive(tmp);
			break;
		}
		var _g1 = 0;
		var _g2 = tmp.cbs;
		while(_g1 < _g2.length) _g2[_g1++](event);
	}
	,addListeners: function(config) {
		var _gthis = this;
		var getListeners = function(event) {
			if(!_gthis.isRuntimeStateReady()) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"SpinePlayer2.hx:418","isRuntimeStateReady()",null));
			}
			switch(event._hx_index) {
			case 0:
				return _gthis.animationState.onStart;
			case 1:
				return _gthis.animationState.onComplete;
			case 2:case 7:
				return null;
			case 3:
				return _gthis.animationState.onEnd;
			case 4:
				return _gthis.animationState.onEvent;
			case 5:
				return _gthis.animationState.onInterrupt;
			case 6:
				return _gthis.animationState.onDispose;
			}
		};
		var addListener = function(config1,event1) {
			var f = $bind(_gthis,_gthis.animationCallback);
			var event2 = event1;
			var listener = function(track) {
				f(track,event2);
			};
			getListeners(event1).add(listener);
			return listener;
		};
		config.onStart = addListener(config,banan_spine_display_animation2_ESpineAnimationEvent.Started);
		config.onComplete = addListener(config,banan_spine_display_animation2_ESpineAnimationEvent.LoopCompleted);
		config.onEnd = addListener(config,banan_spine_display_animation2_ESpineAnimationEvent.Ended);
		config.onInterrupt = addListener(config,banan_spine_display_animation2_ESpineAnimationEvent.Interrupted);
		config.onDispose = addListener(config,banan_spine_display_animation2_ESpineAnimationEvent.Disposed);
		var it = function(track1,event3) {
			_gthis.animationCallback(track1,banan_spine_display_animation2_ESpineAnimationEvent.Event(event3));
			return;
		};
		_gthis.animationState.onEvent.add(it);
		config.onEvent = it;
	}
	,removeListeners: function(config) {
		this.animationState.onStart.remove(config.onStart);
		this.animationState.onComplete.remove(config.onComplete);
		this.animationState.onEnd.remove(config.onEnd);
		this.animationState.onInterrupt.remove(config.onInterrupt);
		this.animationState.onDispose.remove(config.onDispose);
		this.animationState.onEvent.remove(config.onEvent);
		config.onStart = null;
		config.onComplete = null;
		config.onEnd = null;
		config.onInterrupt = null;
		config.onDispose = null;
		config.onEvent = null;
	}
	,activate: function(config,track) {
		if(config.track != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"SpinePlayer2.hx:467","config.track == null",null));
		}
		config.track = track;
		this.activeAnimations.push(config);
	}
	,deactive: function(config) {
		if(config.track == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"SpinePlayer2.hx:474","config.track" + " is null",null));
		}
		config.track = null;
		HxOverrides.remove(this.activeAnimations,config);
	}
	,getActiveAnimation: function(track) {
		var result = null;
		var _g = 0;
		var _g1 = this.activeAnimations;
		while(_g < _g1.length) {
			var it = _g1[_g];
			++_g;
			if(it.track == track) {
				result = it;
				break;
			}
		}
		return result;
	}
	,isRuntimeStateReady: function() {
		if(this.skeleton != null) {
			if(this.animationState == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"SpinePlayer2.hx:488","animationState != null",null));
			}
			return true;
		} else {
			if(this.animationState != null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"SpinePlayer2.hx:493","animationState == null",null));
			}
			return false;
		}
	}
	,advanceRuntimeState: function(dt) {
		this.animationState.update(dt);
		this.animationState.apply(this.skeleton);
		this.drawOrderValid = false;
	}
	,__class__: banan_spine_display_animation2_SpinePlayer2
};
var banan_spine_resource_SpineAtlasResource = function(atlasTexturePath,resourceManager,fileSystem,resourceTaskScope) {
	this.rootPath = haxe_io_Path.addTrailingSlash(haxe_io_Path.directory(atlasTexturePath));
	this.filePath = haxe_io_Path.withExtension(haxe_io_Path.withoutExtension(atlasTexturePath),"atlas");
	this.fileSystem = fileSystem;
	this.resourceManager = resourceManager;
	banan_resource_LoaderResource.call(this,resourceTaskScope);
	this.type = "spine_atlas";
};
$hxClasses["banan.spine.resource.SpineAtlasResource"] = banan_spine_resource_SpineAtlasResource;
banan_spine_resource_SpineAtlasResource.__name__ = "banan.spine.resource.SpineAtlasResource";
banan_spine_resource_SpineAtlasResource.__super__ = banan_resource_LoaderResource;
banan_spine_resource_SpineAtlasResource.prototype = $extend(banan_resource_LoaderResource.prototype,{
	rootPath: null
	,filePath: null
	,resourceManager: null
	,fileSystem: null
	,loadImpl: function() {
		this.fileSystem.getFile(this.filePath).load(false).then($bind(this,this.onBytes));
	}
	,unloadImpl: function() {
		this.data.dispose();
		this.data = null;
		this.onUnloaded();
	}
	,onBytes: function(bytes) {
		var _gthis = this;
		var textureLoader = new banan_spine_BananTextureLoader(this.resourceManager,this.fileSystem,this.rootPath);
		this.data = new spine_atlas_Atlas(bytes.toString(),textureLoader);
		textureLoader.waitLoaded(function() {
			_gthis.onLoaded();
			return;
		});
	}
	,__class__: banan_spine_resource_SpineAtlasResource
});
var banan_spine_resource_SpineSkeletonResource = function(skeletonPath,atlasResource,fileSystem,resoureTaskScope) {
	this.filePath = skeletonPath;
	this.fileSystem = fileSystem;
	this.atlasResource = atlasResource;
	this.token = new banan_resource_ResourceToken();
	banan_resource_LoaderResource.call(this,this.resourceTaskScope);
	this.type = "spine_skeleton";
};
$hxClasses["banan.spine.resource.SpineSkeletonResource"] = banan_spine_resource_SpineSkeletonResource;
banan_spine_resource_SpineSkeletonResource.__name__ = "banan.spine.resource.SpineSkeletonResource";
banan_spine_resource_SpineSkeletonResource.__super__ = banan_resource_LoaderResource;
banan_spine_resource_SpineSkeletonResource.prototype = $extend(banan_resource_LoaderResource.prototype,{
	filePath: null
	,fileSystem: null
	,atlasResource: null
	,token: null
	,loadImpl: function() {
		this.atlasResource.claim(this.token);
		if(this.atlasResource.get_isLoaded()) {
			this.onAtlasResourceLoaded(this.atlasResource);
		} else {
			this.atlasResource.onLoadedSig.addOnce($bind(this,this.onAtlasResourceLoaded));
		}
	}
	,unloadImpl: function() {
		this.data = null;
		this.atlasResource.release(this.token);
		this.onUnloaded();
	}
	,onAtlasResourceLoaded: function(atlasResource) {
		this.fileSystem.getFile(this.filePath).load(false).then($bind(this,this.onBytes));
	}
	,onBytes: function(bytes) {
		this.data = new spine_SkeletonJson(new spine_attachments_AtlasAttachmentLoader(this.atlasResource.data)).readSkeletonData(bytes.toString());
		this.onLoaded();
	}
	,__class__: banan_spine_resource_SpineSkeletonResource
});
var banan_time_ITimeSource = function() { };
$hxClasses["banan.time.ITimeSource"] = banan_time_ITimeSource;
banan_time_ITimeSource.__name__ = "banan.time.ITimeSource";
banan_time_ITimeSource.__isInterface__ = true;
banan_time_ITimeSource.prototype = {
	get_appTime: null
	,get_appTimeReal: null
	,get_serverTime: null
	,get_localTime: null
	,get_dt: null
	,__class__: banan_time_ITimeSource
	,__properties__: {get_dt:"get_dt",get_localTime:"get_localTime",get_serverTime:"get_serverTime",get_appTimeReal:"get_appTimeReal",get_appTime:"get_appTime"}
};
var banan_time_TimeProvider = function() {
	this.lastServerAppTime = NaN;
	this.lastServerTime = NaN;
	this.speedMultiplier = 1.0;
	this.localTime = new Date().getTime() / 1000.0;
	this.appTimeReal = 0.0;
	this.appTime = 0.0;
	this.dtReal = 0.0;
	this.dt = 0.0;
	this.frame = 0;
};
$hxClasses["banan.time.TimeProvider"] = banan_time_TimeProvider;
banan_time_TimeProvider.__name__ = "banan.time.TimeProvider";
banan_time_TimeProvider.prototype = {
	frame: null
	,dt: null
	,dtReal: null
	,appTime: null
	,appTimeReal: null
	,localTime: null
	,get_serverTime: function() {
		return this.lastServerTime + this.appTimeReal - this.lastServerAppTime;
	}
	,get_nextFrame: function() {
		return (this.frame + 1) % 10000;
	}
	,speedMultiplier: null
	,lastServerTime: null
	,lastServerAppTime: null
	,update: function() {
		if(!kha_Scheduler.isStopped()) {
			this.dtReal = kha_Scheduler.realTime() - this.appTimeReal;
			var dt = Math.min(this.dtReal,0.1);
			dt *= this.speedMultiplier;
			this.dt = dt;
			this.appTime += dt;
			this.appTimeReal += this.dtReal;
		}
		this.localTime = new Date().getTime() / 1000.0;
	}
	,newFrame: function() {
		this.frame = (this.frame + 1) % 10000;
	}
	,updateServerTime: function(serverTime) {
		var estimatedServerTime = this.lastServerTime + this.appTimeReal - this.lastServerAppTime;
		if(!isFinite(this.lastServerTime) && isFinite(serverTime)) {
			haxe_Log.trace("server date and time are now known: " + banan_utils__$Time_Time_$Impl_$.toStringAsServerTime(serverTime,true),{ fileName : "banan/time/TimeProvider.hx", lineNumber : 63, className : "banan.time.TimeProvider", methodName : "updateServerTime"});
		}
		this.lastServerTime = serverTime;
		this.lastServerAppTime = this.appTimeReal;
		var diff = estimatedServerTime - serverTime;
		if((diff >= 0 ? diff : -diff) >= 0.1) {
			haxe_Log.trace("=====TIME_PROVIDER=====: server time diff " + diff,{ fileName : "banan/time/TimeProvider.hx", lineNumber : 71, className : "banan.time.TimeProvider", methodName : "updateServerTime"});
		}
	}
	,__class__: banan_time_TimeProvider
	,__properties__: {get_nextFrame:"get_nextFrame",get_serverTime:"get_serverTime"}
};
var banan_time_TimeProviderModule = function(provider,updatePriority) {
	this.provider = provider;
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["banan.time.TimeProviderModule"] = banan_time_TimeProviderModule;
banan_time_TimeProviderModule.__name__ = "banan.time.TimeProviderModule";
banan_time_TimeProviderModule.__interfaces__ = [banan_time_ITimeSource];
banan_time_TimeProviderModule.__super__ = banan_module_Module;
banan_time_TimeProviderModule.prototype = $extend(banan_module_Module.prototype,{
	get_nextFrame: function() {
		return (this.provider.frame + 1) % 10000;
	}
	,get_frame: function() {
		return this.provider.frame;
	}
	,get_dt: function() {
		return this.provider.dt;
	}
	,get_dtReal: function() {
		return this.provider.dtReal;
	}
	,get_appTime: function() {
		return this.provider.appTime;
	}
	,get_appTimeReal: function() {
		return this.provider.appTimeReal;
	}
	,get_localTime: function() {
		return this.provider.localTime;
	}
	,get_serverTime: function() {
		var _this = this.provider;
		return _this.lastServerTime + _this.appTimeReal - _this.lastServerAppTime;
	}
	,provider: null
	,updateServerTime: function(serverTime) {
		this.provider.updateServerTime(serverTime);
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("banan.time.TimeProviderModule",["banan.time.ITimeSource"],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: banan_time_TimeProviderModule
	,__properties__: {get_serverTime:"get_serverTime",get_localTime:"get_localTime",get_appTimeReal:"get_appTimeReal",get_appTime:"get_appTime",get_dtReal:"get_dtReal",get_dt:"get_dt",get_frame:"get_frame",get_nextFrame:"get_nextFrame"}
});
var banan_transform_GlobalTransform = function(p00,p10,p20,p01,p11,p21) {
	if(p21 == null) {
		p21 = 0.0;
	}
	if(p11 == null) {
		p11 = 1.0;
	}
	if(p01 == null) {
		p01 = 0.0;
	}
	if(p20 == null) {
		p20 = 0.0;
	}
	if(p10 == null) {
		p10 = 0.0;
	}
	if(p00 == null) {
		p00 = 1.0;
	}
	this.v00 = p00;
	this.v10 = p10;
	this.v20 = p20;
	this.v01 = p01;
	this.v11 = p11;
	this.v21 = p21;
};
$hxClasses["banan.transform.GlobalTransform"] = banan_transform_GlobalTransform;
banan_transform_GlobalTransform.__name__ = "banan.transform.GlobalTransform";
banan_transform_GlobalTransform.prototype = {
	v00: null
	,v10: null
	,v20: null
	,v01: null
	,v11: null
	,v21: null
	,get_isIdenity: function() {
		if(this.v00 == 1.0 && this.v10 == 0.0 && this.v01 == 0.0) {
			return this.v11 == 1.0;
		} else {
			return false;
		}
	}
	,set: function(p00,p10,p20,p01,p11,p21) {
		if(p21 == null) {
			p21 = 0.0;
		}
		if(p11 == null) {
			p11 = 1.0;
		}
		if(p01 == null) {
			p01 = 0.0;
		}
		if(p20 == null) {
			p20 = 0.0;
		}
		if(p10 == null) {
			p10 = 0.0;
		}
		if(p00 == null) {
			p00 = 1.0;
		}
		this.v00 = p00;
		this.v10 = p10;
		this.v20 = p20;
		this.v01 = p01;
		this.v11 = p11;
		this.v21 = p21;
	}
	,setFromMatrix: function(matrix) {
		this.v00 = matrix.v00;
		this.v10 = matrix.v10;
		this.v20 = matrix.v20;
		this.v01 = matrix.v01;
		this.v11 = matrix.v11;
		this.v21 = matrix.v21;
	}
	,identity: function() {
		this.v00 = 1.0;
		this.v10 = 0.0;
		this.v20 = 0.0;
		this.v01 = 0.0;
		this.v11 = 1.0;
		this.v21 = 0.0;
	}
	,applyLocalTransform: function(local) {
		if(local._angle == 0) {
			var v00 = local.scaleX;
			var v20 = v00 * -local.pivotX + local.x;
			var v11 = local.scaleY;
			var v21 = v11 * -local.pivotY + local.y;
			var p00 = v00;
			var p20 = v20;
			var p11 = v11;
			var p21 = v21;
			if(v21 == null) {
				p21 = 0.0;
			}
			if(v11 == null) {
				p11 = 1.0;
			}
			if(v20 == null) {
				p20 = 0.0;
			}
			if(v00 == null) {
				p00 = 1.0;
			}
			var local_v00 = p00;
			var local_v20 = p20;
			var local_v11 = p11;
			var local_v21 = p21;
			var p001 = this.v00;
			var p10 = this.v10;
			var p201 = this.v20;
			var p01 = this.v01;
			var p111 = this.v11;
			var p211 = this.v21;
			if(p211 == null) {
				p211 = 0.0;
			}
			if(p111 == null) {
				p111 = 1.0;
			}
			if(p01 == null) {
				p01 = 0.0;
			}
			if(p201 == null) {
				p201 = 0.0;
			}
			if(p10 == null) {
				p10 = 0.0;
			}
			if(p001 == null) {
				p001 = 1.0;
			}
			var _this_v00 = p001;
			var _this_v10 = p10;
			var _this_v01 = p01;
			var _this_v11 = p111;
			var p002 = _this_v00 * local_v00;
			var p101 = _this_v10 * local_v11;
			var p202 = _this_v00 * local_v20 + _this_v10 * local_v21 + p201;
			var p011 = _this_v01 * local_v00;
			var p112 = _this_v11 * local_v11;
			var p212 = _this_v01 * local_v20 + _this_v11 * local_v21 + p211;
			if(p212 == null) {
				p212 = 0.0;
			}
			if(p112 == null) {
				p112 = 1.0;
			}
			if(p011 == null) {
				p011 = 0.0;
			}
			if(p202 == null) {
				p202 = 0.0;
			}
			if(p101 == null) {
				p101 = 0.0;
			}
			if(p002 == null) {
				p002 = 1.0;
			}
			this.v00 = p002;
			this.v10 = p101;
			this.v20 = p202;
			this.v01 = p011;
			this.v11 = p112;
			this.v21 = p212;
		} else {
			var v001 = local.angleCos * local.scaleX;
			var v10 = -local.angleSin * local.scaleY;
			var v201 = v001 * -local.pivotX + v10 * -local.pivotY + local.x;
			var v01 = local.angleSin * local.scaleX;
			var v111 = local.angleCos * local.scaleY;
			var v211 = v01 * -local.pivotX + v111 * -local.pivotY + local.y;
			var p003 = v001;
			var p102 = v10;
			var p203 = v201;
			var p012 = v01;
			var p113 = v111;
			var p213 = v211;
			if(v211 == null) {
				p213 = 0.0;
			}
			if(v111 == null) {
				p113 = 1.0;
			}
			if(v01 == null) {
				p012 = 0.0;
			}
			if(v201 == null) {
				p203 = 0.0;
			}
			if(v10 == null) {
				p102 = 0.0;
			}
			if(v001 == null) {
				p003 = 1.0;
			}
			var local_v001 = p003;
			var local_v10 = p102;
			var local_v201 = p203;
			var local_v01 = p012;
			var local_v111 = p113;
			var local_v211 = p213;
			var p004 = this.v00;
			var p103 = this.v10;
			var p204 = this.v20;
			var p013 = this.v01;
			var p114 = this.v11;
			var p214 = this.v21;
			if(p214 == null) {
				p214 = 0.0;
			}
			if(p114 == null) {
				p114 = 1.0;
			}
			if(p013 == null) {
				p013 = 0.0;
			}
			if(p204 == null) {
				p204 = 0.0;
			}
			if(p103 == null) {
				p103 = 0.0;
			}
			if(p004 == null) {
				p004 = 1.0;
			}
			var _this_v001 = p004;
			var _this_v101 = p103;
			var _this_v011 = p013;
			var _this_v111 = p114;
			var p005 = _this_v001 * local_v001 + _this_v101 * local_v01;
			var p104 = _this_v001 * local_v10 + _this_v101 * local_v111;
			var p205 = _this_v001 * local_v201 + _this_v101 * local_v211 + p204;
			var p014 = _this_v011 * local_v001 + _this_v111 * local_v01;
			var p115 = _this_v011 * local_v10 + _this_v111 * local_v111;
			var p215 = _this_v011 * local_v201 + _this_v111 * local_v211 + p214;
			if(p215 == null) {
				p215 = 0.0;
			}
			if(p115 == null) {
				p115 = 1.0;
			}
			if(p014 == null) {
				p014 = 0.0;
			}
			if(p205 == null) {
				p205 = 0.0;
			}
			if(p104 == null) {
				p104 = 0.0;
			}
			if(p005 == null) {
				p005 = 1.0;
			}
			this.v00 = p005;
			this.v10 = p104;
			this.v20 = p205;
			this.v01 = p014;
			this.v11 = p115;
			this.v21 = p215;
		}
	}
	,applyLocalTransformWithoutAngle: function(local) {
		var v00 = local.scaleX;
		var v20 = v00 * -local.pivotX + local.x;
		var v11 = local.scaleY;
		var v21 = v11 * -local.pivotY + local.y;
		var p00 = v00;
		var p20 = v20;
		var p11 = v11;
		var p21 = v21;
		if(v21 == null) {
			p21 = 0.0;
		}
		if(v11 == null) {
			p11 = 1.0;
		}
		if(v20 == null) {
			p20 = 0.0;
		}
		if(v00 == null) {
			p00 = 1.0;
		}
		var local_v00 = p00;
		var local_v20 = p20;
		var local_v11 = p11;
		var local_v21 = p21;
		var p001 = this.v00;
		var p10 = this.v10;
		var p201 = this.v20;
		var p01 = this.v01;
		var p111 = this.v11;
		var p211 = this.v21;
		if(p211 == null) {
			p211 = 0.0;
		}
		if(p111 == null) {
			p111 = 1.0;
		}
		if(p01 == null) {
			p01 = 0.0;
		}
		if(p201 == null) {
			p201 = 0.0;
		}
		if(p10 == null) {
			p10 = 0.0;
		}
		if(p001 == null) {
			p001 = 1.0;
		}
		var _this_v00 = p001;
		var _this_v10 = p10;
		var _this_v01 = p01;
		var _this_v11 = p111;
		var p002 = _this_v00 * local_v00;
		var p101 = _this_v10 * local_v11;
		var p202 = _this_v00 * local_v20 + _this_v10 * local_v21 + p201;
		var p011 = _this_v01 * local_v00;
		var p112 = _this_v11 * local_v11;
		var p212 = _this_v01 * local_v20 + _this_v11 * local_v21 + p211;
		if(p212 == null) {
			p212 = 0.0;
		}
		if(p112 == null) {
			p112 = 1.0;
		}
		if(p011 == null) {
			p011 = 0.0;
		}
		if(p202 == null) {
			p202 = 0.0;
		}
		if(p101 == null) {
			p101 = 0.0;
		}
		if(p002 == null) {
			p002 = 1.0;
		}
		this.v00 = p002;
		this.v10 = p101;
		this.v20 = p202;
		this.v01 = p011;
		this.v11 = p112;
		this.v21 = p212;
	}
	,applyLocalTransformWithAngle: function(local) {
		var v00 = local.angleCos * local.scaleX;
		var v10 = -local.angleSin * local.scaleY;
		var v20 = v00 * -local.pivotX + v10 * -local.pivotY + local.x;
		var v01 = local.angleSin * local.scaleX;
		var v11 = local.angleCos * local.scaleY;
		var v21 = v01 * -local.pivotX + v11 * -local.pivotY + local.y;
		var p00 = v00;
		var p10 = v10;
		var p20 = v20;
		var p01 = v01;
		var p11 = v11;
		var p21 = v21;
		if(v21 == null) {
			p21 = 0.0;
		}
		if(v11 == null) {
			p11 = 1.0;
		}
		if(v01 == null) {
			p01 = 0.0;
		}
		if(v20 == null) {
			p20 = 0.0;
		}
		if(v10 == null) {
			p10 = 0.0;
		}
		if(v00 == null) {
			p00 = 1.0;
		}
		var local_v00 = p00;
		var local_v10 = p10;
		var local_v20 = p20;
		var local_v01 = p01;
		var local_v11 = p11;
		var local_v21 = p21;
		var p001 = this.v00;
		var p101 = this.v10;
		var p201 = this.v20;
		var p011 = this.v01;
		var p111 = this.v11;
		var p211 = this.v21;
		if(p211 == null) {
			p211 = 0.0;
		}
		if(p111 == null) {
			p111 = 1.0;
		}
		if(p011 == null) {
			p011 = 0.0;
		}
		if(p201 == null) {
			p201 = 0.0;
		}
		if(p101 == null) {
			p101 = 0.0;
		}
		if(p001 == null) {
			p001 = 1.0;
		}
		var _this_v00 = p001;
		var _this_v10 = p101;
		var _this_v01 = p011;
		var _this_v11 = p111;
		var p002 = _this_v00 * local_v00 + _this_v10 * local_v01;
		var p102 = _this_v00 * local_v10 + _this_v10 * local_v11;
		var p202 = _this_v00 * local_v20 + _this_v10 * local_v21 + p201;
		var p012 = _this_v01 * local_v00 + _this_v11 * local_v01;
		var p112 = _this_v01 * local_v10 + _this_v11 * local_v11;
		var p212 = _this_v01 * local_v20 + _this_v11 * local_v21 + p211;
		if(p212 == null) {
			p212 = 0.0;
		}
		if(p112 == null) {
			p112 = 1.0;
		}
		if(p012 == null) {
			p012 = 0.0;
		}
		if(p202 == null) {
			p202 = 0.0;
		}
		if(p102 == null) {
			p102 = 0.0;
		}
		if(p002 == null) {
			p002 = 1.0;
		}
		this.v00 = p002;
		this.v10 = p102;
		this.v20 = p202;
		this.v01 = p012;
		this.v11 = p112;
		this.v21 = p212;
	}
	,__class__: banan_transform_GlobalTransform
	,__properties__: {get_isIdenity:"get_isIdenity"}
};
var banan_transform_LocalTransform = function(x,y,pivotX,pivotY,scaleX,scaleY,angle,angleCos,angleSin) {
	if(angleSin == null) {
		angleSin = 0.0;
	}
	if(angleCos == null) {
		angleCos = 1.0;
	}
	if(angle == null) {
		angle = 0.0;
	}
	if(scaleY == null) {
		scaleY = 1.0;
	}
	if(scaleX == null) {
		scaleX = 1.0;
	}
	if(pivotY == null) {
		pivotY = 0.0;
	}
	if(pivotX == null) {
		pivotX = 0.0;
	}
	if(y == null) {
		y = 0.0;
	}
	if(x == null) {
		x = 0.0;
	}
	this.x = x;
	this.y = y;
	this.pivotX = pivotX;
	this.pivotY = pivotY;
	this.scaleX = scaleX;
	this.scaleY = scaleY;
	this._angle = angle;
	this.angleCos = angleCos;
	this.angleSin = angleSin;
};
$hxClasses["banan.transform.LocalTransform"] = banan_transform_LocalTransform;
banan_transform_LocalTransform.__name__ = "banan.transform.LocalTransform";
banan_transform_LocalTransform.prototype = {
	x: null
	,y: null
	,pivotX: null
	,pivotY: null
	,scaleX: null
	,scaleY: null
	,angleCos: null
	,angleSin: null
	,_angle: null
	,__class__: banan_transform_LocalTransform
};
var banan_transform_Matrix3x2 = function(p00,p10,p20,p01,p11,p21) {
	if(p21 == null) {
		p21 = 0.0;
	}
	if(p11 == null) {
		p11 = 1.0;
	}
	if(p01 == null) {
		p01 = 0.0;
	}
	if(p20 == null) {
		p20 = 0.0;
	}
	if(p10 == null) {
		p10 = 0.0;
	}
	if(p00 == null) {
		p00 = 1.0;
	}
	this.v00 = p00;
	this.v10 = p10;
	this.v20 = p20;
	this.v01 = p01;
	this.v11 = p11;
	this.v21 = p21;
};
$hxClasses["banan.transform.Matrix3x2"] = banan_transform_Matrix3x2;
banan_transform_Matrix3x2.__name__ = "banan.transform.Matrix3x2";
banan_transform_Matrix3x2.prototype = {
	v00: null
	,v10: null
	,v20: null
	,v01: null
	,v11: null
	,v21: null
	,setFrom: function(matrix) {
		this.v00 = matrix.v00;
		this.v10 = matrix.v10;
		this.v20 = matrix.v20;
		this.v01 = matrix.v01;
		this.v11 = matrix.v11;
		this.v21 = matrix.v21;
	}
	,toString: function() {
		return "Matrix3x2{ a: " + this.v00 + ", b: " + this.v10 + ", c: " + this.v01 + ", d: " + this.v11 + ", tx: " + this.v20 + ", ty: " + this.v21 + " }";
	}
	,__class__: banan_transform_Matrix3x2
};
var banan_utils_AnyTools = function() { };
$hxClasses["banan.utils.AnyTools"] = banan_utils_AnyTools;
banan_utils_AnyTools.__name__ = "banan.utils.AnyTools";
banan_utils_AnyTools.toBool = function(value) {
	var dynValue = value;
	if(typeof(dynValue) == "boolean") {
		return dynValue;
	} else if(typeof(dynValue) == "number" && ((dynValue | 0) === dynValue)) {
		return dynValue != 0;
	} else if(typeof(dynValue) == "number") {
		return dynValue != 0;
	} else if(typeof(dynValue) == "string") {
		return dynValue != "";
	} else {
		return dynValue != null;
	}
};
banan_utils_AnyTools.toNull = function(value) {
	var dynValue = value;
	if(typeof(dynValue) == "boolean" ? dynValue : typeof(dynValue) == "number" && ((dynValue | 0) === dynValue) ? dynValue != 0 : typeof(dynValue) == "number" ? dynValue != 0 : typeof(dynValue) == "string" ? dynValue != "" : dynValue != null) {
		return value;
	} else {
		return null;
	}
};
banan_utils_AnyTools.toFloat = function(value,defValue) {
	if(defValue == null) {
		defValue = 0.0;
	}
	if(typeof(value) == "number") {
		return value;
	} else if(typeof(value) == "string") {
		var v = parseFloat(value);
		if(isNaN(v)) {
			v = defValue;
		}
		return v;
	} else {
		return defValue;
	}
};
banan_utils_AnyTools.toInt = function(value,defValue) {
	if(defValue == null) {
		defValue = 0;
	}
	if(typeof(value) == "number" && ((value | 0) === value)) {
		return value;
	} else if(typeof(value) == "string") {
		var v = Std.parseInt(value);
		if(v == null) {
			v = defValue;
		}
		return v;
	} else {
		return defValue;
	}
};
banan_utils_AnyTools.convertToHash = function(value,keyType,valueType,defaultValue) {
	var result;
	if(js_Boot.__implements(value,haxe_IMap)) {
		var hash = value;
		var key = hash.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			if(!js_Boot.__instanceof(key1,keyType) || !js_Boot.__instanceof(hash.get(key1),valueType)) {
				return null;
			}
		}
		result = hash;
	} else if(((value) instanceof Array)) {
		var array = value;
		var map = new haxe_ds_ObjectMap();
		var _g = 0;
		while(_g < array.length) {
			var item = array[_g];
			++_g;
			if(!js_Boot.__instanceof(item,keyType)) {
				return null;
			}
			map.set(item,defaultValue);
		}
		result = map;
	} else if(js_Boot.__instanceof(value,keyType)) {
		var map1 = new haxe_ds_ObjectMap();
		map1.set(value,defaultValue);
		result = map1;
	} else {
		result = null;
	}
	return result;
};
var banan_utils_Assert = function() { };
$hxClasses["banan.utils.Assert"] = banan_utils_Assert;
banan_utils_Assert.__name__ = "banan.utils.Assert";
var banan_utils_Bounds = function(left,top,right,bottom) {
	this.left = left != null ? left : NaN;
	this.top = top != null ? top : NaN;
	this.right = right != null ? right : NaN;
	this.bottom = bottom != null ? bottom : NaN;
};
$hxClasses["banan.utils.Bounds"] = banan_utils_Bounds;
banan_utils_Bounds.__name__ = "banan.utils.Bounds";
banan_utils_Bounds.fromRect = function(rect) {
	return new banan_utils_Bounds(rect.x,rect.y,rect.x + rect.width,rect.y + rect.height);
};
banan_utils_Bounds.createImpossible = function() {
	var bounds = new banan_utils_Bounds();
	bounds.toImpossible();
	return bounds;
};
banan_utils_Bounds.prototype = {
	left: null
	,top: null
	,right: null
	,bottom: null
	,leftI: null
	,topI: null
	,rightI: null
	,bottomI: null
	,get_width: function() {
		return this.right - this.left;
	}
	,get_height: function() {
		return this.bottom - this.top;
	}
	,get_leftI: function() {
		return Math.floor(this.left);
	}
	,get_topI: function() {
		return Math.floor(this.top);
	}
	,get_rightI: function() {
		return Math.ceil(this.right);
	}
	,get_bottomI: function() {
		return Math.ceil(this.bottom);
	}
	,get_widthI: function() {
		return Math.ceil(this.right) - Math.floor(this.left);
	}
	,get_heightI: function() {
		return Math.ceil(this.bottom) - Math.floor(this.top);
	}
	,toImpossible: function() {
		this.left = Infinity;
		this.top = Infinity;
		this.right = -Infinity;
		this.bottom = -Infinity;
	}
	,offset: function(x,y) {
		this.left += x;
		this.top += y;
		this.right += x;
		this.bottom += y;
	}
	,expand: function(left,top,right,bottom) {
		this.left -= left;
		this.top -= top;
		this.right += right;
		this.bottom += bottom;
	}
	,copyFrom: function(bounds) {
		this.left = bounds.left;
		this.top = bounds.top;
		this.right = bounds.right;
		this.bottom = bounds.bottom;
	}
	,includeXy: function(x,y) {
		if(x < this.left) {
			this.left = x;
		}
		if(y < this.top) {
			this.top = y;
		}
		if(x > this.right) {
			this.right = x;
		}
		if(y > this.bottom) {
			this.bottom = y;
		}
	}
	,isEqual: function(bounds) {
		if(this.left == bounds.left && this.top == bounds.top && this.right == bounds.right) {
			return this.bottom == bounds.bottom;
		} else {
			return false;
		}
	}
	,clone: function() {
		return new banan_utils_Bounds(this.left,this.top,this.right,this.bottom);
	}
	,__class__: banan_utils_Bounds
	,__properties__: {get_heightI:"get_heightI",get_widthI:"get_widthI",get_bottomI:"get_bottomI",get_rightI:"get_rightI",get_topI:"get_topI",get_leftI:"get_leftI",get_height:"get_height",get_width:"get_width"}
};
var banan_utils_CallbackQueue = function(maxExecutingCount) {
	this.executingCount = 0;
	this.pending = new haxe_ds_List();
	this.maxExecutingCount = maxExecutingCount;
};
$hxClasses["banan.utils.CallbackQueue"] = banan_utils_CallbackQueue;
banan_utils_CallbackQueue.__name__ = "banan.utils.CallbackQueue";
banan_utils_CallbackQueue.prototype = {
	pending: null
	,executingCount: null
	,maxExecutingCount: null
	,get_length: function() {
		return this.pending.length;
	}
	,add: function(f) {
		this.pending.add(f);
	}
	,callbackDone: function() {
		this.executingCount--;
	}
	,update: function() {
		while(this.executingCount < this.maxExecutingCount && this.pending.length > 0) {
			this.executingCount++;
			(this.pending.pop())(this);
		}
	}
	,__class__: banan_utils_CallbackQueue
	,__properties__: {get_length:"get_length"}
};
var banan_utils_Crc32 = function() { };
$hxClasses["banan.utils.Crc32"] = banan_utils_Crc32;
banan_utils_Crc32.__name__ = "banan.utils.Crc32";
banan_utils_Crc32.make = function(bytes) {
	return haxe_crypto_Crc32.make(bytes);
};
var banan_utils_GrowingArray = function() {
	this.array = [];
	this.length = 0;
};
$hxClasses["banan.utils.GrowingArray"] = banan_utils_GrowingArray;
banan_utils_GrowingArray.__name__ = "banan.utils.GrowingArray";
banan_utils_GrowingArray.prototype = {
	array: null
	,length: null
	,clear: function() {
		this.length = 0;
	}
	,last: function() {
		return this.array[this.length - 1];
	}
	,isEmpty: function() {
		return this.length == 0;
	}
	,get: function(idx) {
		return this.array[idx];
	}
	,push: function(value) {
		this.array[this.length++] = value;
	}
	,has: function(value) {
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) if(this.array[_g++] == value) {
			return true;
		}
		return false;
	}
	,eat: function(other) {
		var _g = 0;
		var _g1 = other.length;
		while(_g < _g1) {
			var value = other.array[_g++];
			this.array[this.length++] = value;
		}
		other.length = 0;
		return this;
	}
	,copy: function(other,from,count) {
		if(from == null) {
			from = 0;
		}
		if(count == null) {
			count = other.length;
		}
		if(from + count > other.length) {
			count = other.length - from;
		}
		if(count > 0) {
			var _g = from;
			var _g1 = from + count;
			while(_g < _g1) {
				var value = other.array[_g++];
				this.array[this.length++] = value;
			}
		}
	}
	,swapRemove: function(idx) {
		this.array[idx] = this.array[this.length - 1];
		this.length--;
	}
	,match: function(other) {
		if(this.length != other.length) {
			return false;
		}
		var _g = 0;
		var _g1 = other.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.array[i] != other.array[i]) {
				return false;
			}
		}
		return true;
	}
	,map: function(f) {
		var result = [];
		var _g = 0;
		var _g1 = this.length;
		while(_g < _g1) result.push(f(this.array[_g++]));
		return result;
	}
	,__class__: banan_utils_GrowingArray
};
var banan_utils__$Maybe_Maybe_$Impl_$ = {};
$hxClasses["banan.utils._Maybe.Maybe_Impl_"] = banan_utils__$Maybe_Maybe_$Impl_$;
banan_utils__$Maybe_Maybe_$Impl_$.__name__ = "banan.utils._Maybe.Maybe_Impl_";
banan_utils__$Maybe_Maybe_$Impl_$.exists = function(this1) {
	return this1 != null;
};
banan_utils__$Maybe_Maybe_$Impl_$.sure = function(this1) {
	if(this1 != null) {
		return this1;
	} else {
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"Maybe.hx:26","no value",null));
	}
};
banan_utils__$Maybe_Maybe_$Impl_$.or = function(this1,def) {
	if(this1 != null) {
		return this1;
	} else {
		return def;
	}
};
banan_utils__$Maybe_Maybe_$Impl_$.may = function(this1,fn) {
	if(this1 != null) {
		fn(this1);
	}
};
banan_utils__$Maybe_Maybe_$Impl_$.map = function(this1,fn) {
	if(this1 != null) {
		return fn(this1);
	} else {
		return null;
	}
};
banan_utils__$Maybe_Maybe_$Impl_$.mapDefault = function(this1,fn,def) {
	if(this1 != null) {
		return fn(this1);
	} else {
		return def;
	}
};
var banan_utils_PromhxEventLoop = function() { };
$hxClasses["banan.utils.PromhxEventLoop"] = banan_utils_PromhxEventLoop;
banan_utils_PromhxEventLoop.__name__ = "banan.utils.PromhxEventLoop";
banan_utils_PromhxEventLoop.init = function() {
	promhx_base_EventLoop.nextLoop = banan_utils_PromhxEventLoop.pushCallback;
};
banan_utils_PromhxEventLoop.update = function() {
	var cbs = banan_utils_PromhxEventLoop.callbacks;
	banan_utils_PromhxEventLoop.callbacks = banan_utils_PromhxEventLoop.swapCallbacks;
	banan_utils_PromhxEventLoop.swapCallbacks = cbs;
	while(cbs.length > 0) (cbs.shift())();
};
banan_utils_PromhxEventLoop.pushCallback = function(cb) {
	banan_utils_PromhxEventLoop.callbacks.push(cb);
};
var banan_utils_RectangleList = function() {
	this.raw = [];
};
$hxClasses["banan.utils.RectangleList"] = banan_utils_RectangleList;
banan_utils_RectangleList.__name__ = "banan.utils.RectangleList";
banan_utils_RectangleList.prototype = {
	raw: null
	,__class__: banan_utils_RectangleList
};
var banan_utils_TextUtils = function() { };
$hxClasses["banan.utils.TextUtils"] = banan_utils_TextUtils;
banan_utils_TextUtils.__name__ = "banan.utils.TextUtils";
banan_utils_TextUtils.toLine = function(obj) {
	return StringTools.replace(StringTools.replace(Std.string(obj),"\n",""),"\t","");
};
banan_utils_TextUtils.format = function(template,parameters) {
	var _this = banan_utils_TextUtils.formatCache;
	var compiled = __map_reserved[template] != null ? _this.getReserved(template) : _this.h[template];
	if(compiled == null) {
		compiled = [];
		var _this1 = banan_utils_TextUtils.formatCache;
		if(__map_reserved[template] != null) {
			_this1.setReserved(template,compiled);
		} else {
			_this1.h[template] = compiled;
		}
		var regex = new EReg("{(\\w+)}","");
		var s = template;
		while(regex.match(s)) {
			compiled.push(regex.matchedLeft());
			compiled.push(regex.matched(1));
			s = regex.matchedRight();
		}
		compiled.push(s);
	}
	var result_b = "";
	result_b = "" + Std.string(compiled[0]);
	var _g = 1;
	var _g1 = Math.ceil(compiled.length / 2);
	while(_g < _g1) {
		var i = _g++;
		var paramValue = Std.string(Reflect.getProperty(parameters,compiled[i * 2 - 1]));
		var constString = compiled[i * 2];
		result_b += paramValue == null ? "null" : "" + paramValue;
		result_b += constString == null ? "null" : "" + constString;
	}
	return result_b;
};
banan_utils_TextUtils.formatFloat = function(value,delimiter,precision) {
	if(precision == null) {
		precision = 2;
	}
	if(delimiter == null) {
		delimiter = " ";
	}
	if(value == null || isNaN(value)) {
		return null;
	}
	var isNegative = false;
	if(value < 0.0) {
		isNegative = true;
		value = -value;
	}
	var intPart = Math.floor(value);
	var fracPart = value - intPart;
	var result = "";
	while(true) {
		var s = Std.string(intPart % 1000);
		intPart = Math.floor(intPart / 1000);
		if(intPart != 0) {
			s = StringTools.lpad(s,"0",3);
		}
		result = s + (result.length > 0 ? delimiter + result : result);
		if(!(intPart > 0)) {
			break;
		}
	}
	if(precision > 0) {
		var fracPartString = Std.string(Math.round(fracPart * Math.pow(10,precision)));
		fracPartString = StringTools.lpad(fracPartString,"0",precision);
		while(fracPartString.length > 0 && HxOverrides.cca(fracPartString,fracPartString.length - 1) == 48) fracPartString = HxOverrides.substr(fracPartString,0,fracPartString.length - 1);
		if(fracPartString.length > 0) {
			result += "." + fracPartString;
		}
	}
	if(isNegative) {
		result = "-" + result;
	}
	return result;
};
banan_utils_TextUtils.singleDepthStringify = function(raw,space,excludeKeys) {
	return JSON.stringify(raw,function(key,value) {
		if(key == "") {
			return value;
		}
		if(excludeKeys != null && excludeKeys.indexOf(key) >= 0) {
			return value;
		}
		try {
			return banan_utils_TextUtils.toLine(value);
		} catch( _ ) {
			haxe_CallStack.lastException = _;
			return value;
		}
	},space);
};
banan_utils_TextUtils.sortAlphabetically = function(array,getStr) {
	array = array.slice();
	var getStr1 = getStr;
	array.sort(function(a,b) {
		var aStr = getStr1(a).toUpperCase();
		var bStr = getStr1(b).toUpperCase();
		if(aStr < bStr) {
			return -1;
		} else if(aStr > bStr) {
			return 1;
		} else {
			return 0;
		}
	});
	return array;
};
banan_utils_TextUtils.compareStrings = function(a,b,getStr) {
	var aStr = getStr(a).toUpperCase();
	var bStr = getStr(b).toUpperCase();
	if(aStr < bStr) {
		return -1;
	} else if(aStr > bStr) {
		return 1;
	} else {
		return 0;
	}
};
var banan_utils__$Time_Time_$Impl_$ = {};
$hxClasses["banan.utils._Time.Time_Impl_"] = banan_utils__$Time_Time_$Impl_$;
banan_utils__$Time_Time_$Impl_$.__name__ = "banan.utils._Time.Time_Impl_";
banan_utils__$Time_Time_$Impl_$.fromDate = function(date) {
	return date.getTime() / 1000.0;
};
banan_utils__$Time_Time_$Impl_$.isFinite = function(this1) {
	return isFinite(this1);
};
banan_utils__$Time_Time_$Impl_$.toFloat = function(this1) {
	return this1;
};
banan_utils__$Time_Time_$Impl_$.toDate = function(this1) {
	return new Date(this1 * 1000.0);
};
banan_utils__$Time_Time_$Impl_$.toString = function(this1) {
	return HxOverrides.dateStr(banan_utils__$Time_Time_$Impl_$.toDate(this1));
};
banan_utils__$Time_Time_$Impl_$.toStringAsLocalTime = function(this1,includeDate) {
	if(includeDate == null) {
		includeDate = false;
	}
	var ms = haxe__$Int64_Int64_$Impl_$.divMod(haxe_Int64Helper.fromFloat(this1 * 1000.0),new haxe__$Int64__$_$_$Int64(0,1000)).modulus;
	return DateTools.format(new Date(this1 * 1000.0),includeDate ? "LOC %F %T." : "LOC %T.") + StringTools.lpad(haxe__$Int64_Int64_$Impl_$.toString(ms),"0",3);
};
banan_utils__$Time_Time_$Impl_$.toStringAsServerTime = function(this1,includeDate) {
	if(includeDate == null) {
		includeDate = false;
	}
	var srvLocal = this1 * 1000.0 - banan_utils_UtcDate.tzOffset / 1000 * 1000.0;
	var ms = haxe__$Int64_Int64_$Impl_$.divMod(haxe_Int64Helper.fromFloat(srvLocal),new haxe__$Int64__$_$_$Int64(0,1000)).modulus;
	return DateTools.format(new Date(srvLocal),includeDate ? "SRV %F %T." : "SRV %T.") + StringTools.lpad(haxe__$Int64_Int64_$Impl_$.toString(ms),"0",3);
};
var banan_utils_TimeUtils = function() { };
$hxClasses["banan.utils.TimeUtils"] = banan_utils_TimeUtils;
banan_utils_TimeUtils.__name__ = "banan.utils.TimeUtils";
banan_utils_TimeUtils.formatTimeIntervalExpr = function(timeIntervalSec) {
	var seconds = Math.ceil(Math.max(0,timeIntervalSec));
	var firstPartN = 0;
	var firstPartVal = 0;
	var firstPart = null;
	while(firstPartN < banan_utils_TimeUtils.timeParts.length) {
		firstPart = banan_utils_TimeUtils.timeParts[firstPartN];
		firstPartVal = Math.floor(seconds / firstPart.multiplier);
		if(firstPartVal > 0) {
			break;
		}
		++firstPartN;
	}
	var source = "\"" + firstPartVal + "\"+i18n(\"" + firstPart.text + "\")";
	if(firstPartN + 1 < banan_utils_TimeUtils.timeParts.length) {
		var secondPart = banan_utils_TimeUtils.timeParts[firstPartN + 1];
		seconds -= firstPartVal * firstPart.multiplier;
		var secondPartVal = Math.floor(seconds / secondPart.multiplier);
		if(secondPartVal != 0) {
			source += "+\" " + secondPartVal + "\"+i18n(\"" + secondPart.text + "\")";
		}
	}
	return source;
};
banan_utils_TimeUtils.formatDateExpr = function(time) {
	var date = new banan_utils_UtcDate(time * 1000);
	var day = date.date.getDate();
	var year = date.date.getFullYear();
	return "\"" + StringTools.lpad(day == null ? "null" : "" + day,"0",2) + " \"+i18n(\"textMonth" + Std.string(date.date.getMonth() + 1) + "\")+\" " + (year == null ? "null" : "" + year) + "\"";
};
banan_utils_TimeUtils.formatDateLocal = function(time,formatCode,i18n,tzOffsetSec) {
	if(tzOffsetSec != null) {
		time += tzOffsetSec - banan_utils_UtcDate.tzOffset / 1000;
	}
	var date = new Date(time * 1000);
	var monthN = date.getMonth() + 1;
	var monthS = i18n.getTranslation("textMonth" + monthN);
	var monthSN = i18n.getTranslation("textMonthName" + monthN);
	var hour = date.getHours();
	var hour12 = Std.parseInt(DateTools.format(date,"%I"));
	var tzOffsetSec1 = tzOffsetSec == null ? banan_utils_UtcDate.tzOffset / 1000 : tzOffsetSec;
	var sign = tzOffsetSec1 < 0 ? "-" : "+";
	tzOffsetSec1 = Math.abs(tzOffsetSec1);
	var tzOffsetHour = Math.floor(tzOffsetSec1 / 3600);
	var tzOffsetMin = Math.floor((tzOffsetSec1 - tzOffsetHour * 60 * 60) / 60);
	var z;
	var zz;
	if(tzOffsetHour == 0 && tzOffsetSec1 == 0) {
		z = "";
		zz = "";
	} else {
		z = sign + (tzOffsetHour == null ? "null" : "" + tzOffsetHour);
		zz = sign + StringTools.lpad(tzOffsetHour == null ? "null" : "" + tzOffsetHour,"0",2);
		if(tzOffsetMin != 0) {
			var zMin = ":" + StringTools.lpad(tzOffsetMin == null ? "null" : "" + tzOffsetMin,"0",2);
			z += zMin;
			zz += zMin;
		}
	}
	var param = { date_d : Std.string(date.getDate()), date_MMMM : monthS, date_MMMMN : monthSN, date_yyyy : StringTools.lpad(Std.string(date.getFullYear()),"0",4), date_h : hour12 == null ? "null" : "" + hour12, date_H : hour == null ? "null" : "" + hour, date_HH : StringTools.lpad(hour == null ? "null" : "" + hour,"0",2), date_mm : StringTools.lpad(Std.string(date.getMinutes()),"0",2), date_tt : DateTools.format(date,"%p"), date_z : z, date_zz : zz};
	var template = i18n.getTranslation(formatCode);
	var dynValue = template;
	if(!(typeof(dynValue) == "boolean" ? dynValue : typeof(dynValue) == "number" && ((dynValue | 0) === dynValue) ? dynValue != 0 : typeof(dynValue) == "number" ? dynValue != 0 : typeof(dynValue) == "string" ? dynValue != "" : dynValue != null)) {
		template = formatCode;
	}
	return banan_utils_TextUtils.format(template,param);
};
banan_utils_TimeUtils.currentTime = function() {
	return banan_utils__$Time_Time_$Impl_$.fromDate(new Date());
};
var banan_utils_UtcDate = function(time) {
	this.date = new Date(time - banan_utils_UtcDate.tzOffset);
};
$hxClasses["banan.utils.UtcDate"] = banan_utils_UtcDate;
banan_utils_UtcDate.__name__ = "banan.utils.UtcDate";
banan_utils_UtcDate.getTimezoneOffsetSec = function() {
	return banan_utils_UtcDate.tzOffset / 1000;
};
banan_utils_UtcDate.now = function() {
	return new banan_utils_UtcDate(new Date().getTime());
};
banan_utils_UtcDate.fromTime = function(time) {
	return new banan_utils_UtcDate(time);
};
banan_utils_UtcDate.fromLocalDate = function(date) {
	return new banan_utils_UtcDate(date.getTime());
};
banan_utils_UtcDate.fromParts = function(year,month,day,hour,min,sec) {
	return new banan_utils_UtcDate(new Date(year,month,day,hour,min,sec).getTime() + banan_utils_UtcDate.tzOffset);
};
banan_utils_UtcDate.prototype = {
	date: null
	,getTime: function() {
		return this.date.getTime() + banan_utils_UtcDate.tzOffset;
	}
	,getHours: function() {
		return this.date.getHours();
	}
	,getMinutes: function() {
		return this.date.getMinutes();
	}
	,getSeconds: function() {
		return this.date.getSeconds();
	}
	,getFullYear: function() {
		return this.date.getFullYear();
	}
	,getMonth: function() {
		return this.date.getMonth();
	}
	,getDate: function() {
		return this.date.getDate();
	}
	,getDay: function() {
		return this.date.getDay();
	}
	,toLocalDate: function() {
		return new Date(this.date.getTime() + banan_utils_UtcDate.tzOffset);
	}
	,toString: function() {
		return this.date.getFullYear() + "/" + StringTools.lpad(Std.string(this.date.getMonth() + 1),"0",2) + "/" + StringTools.lpad(Std.string(this.date.getDate()),"0",2) + " " + StringTools.lpad(Std.string(this.date.getHours()),"0",2) + ":" + StringTools.lpad(Std.string(this.date.getMinutes()),"0",2) + ":" + StringTools.lpad(Std.string(this.date.getSeconds()),"0",2);
	}
	,__class__: banan_utils_UtcDate
};
var banan_utils_Zip = function() { };
$hxClasses["banan.utils.Zip"] = banan_utils_Zip;
banan_utils_Zip.__name__ = "banan.utils.Zip";
banan_utils_Zip.unzipEntry = function(entry) {
	if(entry.compressed) {
		var entryData = entry.data.b.bufferValue;
		entryData = (js_Boot.__cast(window.pako.inflateRaw(entryData) , Uint8Array)).buffer;
		entry.data = haxe_io_Bytes.ofData(entryData);
		entry.compressed = false;
	}
};
var banan_utils_modifiable_LockModifiable = function(baseValue,getter) {
	banan_utils_modifiable_ModifiableBase.call(this,baseValue,getter);
	this.addModificatorInternal("base",getter.get_value());
};
$hxClasses["banan.utils.modifiable.LockModifiable"] = banan_utils_modifiable_LockModifiable;
banan_utils_modifiable_LockModifiable.__name__ = "banan.utils.modifiable.LockModifiable";
banan_utils_modifiable_LockModifiable.__super__ = banan_utils_modifiable_ModifiableBase;
banan_utils_modifiable_LockModifiable.prototype = $extend(banan_utils_modifiable_ModifiableBase.prototype,{
	modifyBase: function(value) {
		this.addModificatorInternal("base",value,true,false);
	}
	,lock: function(name,value,incCounter) {
		this.addModificatorInternal("lock",value,false,false);
		this.addModificatorInternal(name,value,false,incCounter);
	}
	,unlock: function(name) {
		this.removeModificatorInternal(name);
		if(!this.hasCustomModificators()) {
			this.removeModificatorInternal("lock");
		}
	}
	,calculateActualValue: function() {
		if(this.hasModificator("lock")) {
			var result = null;
			var _g = 0;
			var _g1 = this.modificators;
			while(_g < _g1.length) {
				var modificator = _g1[_g];
				++_g;
				if(modificator.name == "lock") {
					result = modificator;
					break;
				}
			}
			return result.value;
		} else if(this.hasModificator("base")) {
			var result1 = null;
			var _g2 = 0;
			var _g11 = this.modificators;
			while(_g2 < _g11.length) {
				var modificator1 = _g11[_g2];
				++_g2;
				if(modificator1.name == "base") {
					result1 = modificator1;
					break;
				}
			}
			return result1.value;
		} else {
			return this.baseValue;
		}
	}
	,hasCustomModificators: function() {
		var _g = 0;
		var _g1 = this.modificators;
		while(_g < _g1.length) switch(_g1[_g++].name) {
		case "base":case "lock":
			break;
		default:
			return true;
		}
		return false;
	}
	,__class__: banan_utils_modifiable_LockModifiable
});
var banan_utils_modifiable_Modificator = function(name,value) {
	this.name = name;
	this.value = value;
	this.isEnabled = true;
	this.counter = 1;
};
$hxClasses["banan.utils.modifiable.Modificator"] = banan_utils_modifiable_Modificator;
banan_utils_modifiable_Modificator.__name__ = "banan.utils.modifiable.Modificator";
banan_utils_modifiable_Modificator.prototype = {
	name: null
	,value: null
	,isEnabled: null
	,counter: null
	,changeValue: function(value) {
		this.value = value;
	}
	,enable: function() {
		this.isEnabled = true;
	}
	,disable: function() {
		this.isEnabled = false;
	}
	,incCounter: function() {
		this.counter++;
	}
	,decCounter: function() {
		this.counter--;
	}
	,__class__: banan_utils_modifiable_Modificator
};
var banan_utils_modifiable_merge_ColorMergeModifiable = function(baseValue,valueImpl) {
	banan_utils_modifiable_MergeModifiable.call(this,baseValue,valueImpl);
};
$hxClasses["banan.utils.modifiable.merge.ColorMergeModifiable"] = banan_utils_modifiable_merge_ColorMergeModifiable;
banan_utils_modifiable_merge_ColorMergeModifiable.__name__ = "banan.utils.modifiable.merge.ColorMergeModifiable";
banan_utils_modifiable_merge_ColorMergeModifiable.__super__ = banan_utils_modifiable_MergeModifiable;
banan_utils_modifiable_merge_ColorMergeModifiable.prototype = $extend(banan_utils_modifiable_MergeModifiable.prototype,{
	merge: function(currentValue,nextValue) {
		var a = (currentValue >>> 24) * 0.00392156862745098 * ((nextValue >>> 24) * 0.00392156862745098);
		var a1 = a;
		if(a == null) {
			a1 = 1;
		}
		return kha__$Color_Color_$Impl_$.fromFloats(((currentValue & 16711680) >>> 16) * 0.00392156862745098 * (((nextValue & 16711680) >>> 16) * 0.00392156862745098),((currentValue & 65280) >>> 8) * 0.00392156862745098 * (((nextValue & 65280) >>> 8) * 0.00392156862745098),(currentValue & 255) * 0.00392156862745098 * ((nextValue & 255) * 0.00392156862745098),a1);
	}
	,isEqual: function(a,b) {
		if(((a & 16711680) >>> 16) * 0.00392156862745098 == ((b & 16711680) >>> 16) * 0.00392156862745098 && ((a & 65280) >>> 8) * 0.00392156862745098 == ((b & 65280) >>> 8) * 0.00392156862745098 && (a & 255) * 0.00392156862745098 == (b & 255) * 0.00392156862745098) {
			return (a >>> 24) * 0.00392156862745098 == (b >>> 24) * 0.00392156862745098;
		} else {
			return false;
		}
	}
	,__class__: banan_utils_modifiable_merge_ColorMergeModifiable
});
var banan_utils_modifiable_merge_FloatMergeModifiable = function(baseValue,valueImpl) {
	banan_utils_modifiable_MergeModifiable.call(this,baseValue,valueImpl);
};
$hxClasses["banan.utils.modifiable.merge.FloatMergeModifiable"] = banan_utils_modifiable_merge_FloatMergeModifiable;
banan_utils_modifiable_merge_FloatMergeModifiable.__name__ = "banan.utils.modifiable.merge.FloatMergeModifiable";
banan_utils_modifiable_merge_FloatMergeModifiable.__super__ = banan_utils_modifiable_MergeModifiable;
banan_utils_modifiable_merge_FloatMergeModifiable.prototype = $extend(banan_utils_modifiable_MergeModifiable.prototype,{
	merge: function(currentValue,nextValue) {
		return currentValue * nextValue;
	}
	,isEqual: function(a,b) {
		return a == b;
	}
	,__class__: banan_utils_modifiable_merge_FloatMergeModifiable
});
var banan_utils_modifiable_value_ValueBase = function() {
	this.currentGetter = $bind(this,this.noValueGetter);
};
$hxClasses["banan.utils.modifiable.value.ValueBase"] = banan_utils_modifiable_value_ValueBase;
banan_utils_modifiable_value_ValueBase.__name__ = "banan.utils.modifiable.value.ValueBase";
banan_utils_modifiable_value_ValueBase.prototype = {
	currentGetter: null
	,get_value: function() {
		return this.currentGetter();
	}
	,set_value: function(v) {
		if(this.currentGetter == $bind(this,this.noValueGetter)) {
			this.currentGetter = $bind(this,this.defaultGetter);
		}
		return v;
	}
	,noValueGetter: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(122,"ValueBase.hx:31","value hasn't been assigned to it yet",null));
	}
	,defaultGetter: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"ValueBase.hx:35","",null));
	}
	,__class__: banan_utils_modifiable_value_ValueBase
	,__properties__: {set_value:"set_value",get_value:"get_value"}
};
var banan_utils_modifiable_value_SimpleValue = function() {
	banan_utils_modifiable_value_ValueBase.call(this);
};
$hxClasses["banan.utils.modifiable.value.SimpleValue"] = banan_utils_modifiable_value_SimpleValue;
banan_utils_modifiable_value_SimpleValue.__name__ = "banan.utils.modifiable.value.SimpleValue";
banan_utils_modifiable_value_SimpleValue.__super__ = banan_utils_modifiable_value_ValueBase;
banan_utils_modifiable_value_SimpleValue.prototype = $extend(banan_utils_modifiable_value_ValueBase.prototype,{
	_value: null
	,set_value: function(v) {
		this._value = banan_utils_modifiable_value_ValueBase.prototype.set_value.call(this,v);
		return this._value;
	}
	,defaultGetter: function() {
		return this._value;
	}
	,__class__: banan_utils_modifiable_value_SimpleValue
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__ : true, __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"]
	,CFunction: {_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_.__params__ = ["v"],$_)
};
haxe_StackItem.__empty_constructs__ = [haxe_StackItem.CFunction];
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = "haxe.CallStack";
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			var fileName = site.getFileName();
			var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
			if(haxe_CallStack.wrapCallSite != null && fileAddr > 0) {
				fileName = HxOverrides.substr(fileName,fileAddr + 6,null);
			}
			stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g++];
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var _g = s.m;
		b.b = (b.b += "module ") + (_g == null ? "null" : "" + _g);
		break;
	case 2:
		var _g7 = s.column;
		var _g6 = s.line;
		var _g5 = s.file;
		var _g4 = s.s;
		if(_g4 != null) {
			haxe_CallStack.itemToString(b,_g4);
			b.b += " (";
		}
		b.b = (b.b += _g5 == null ? "null" : "" + _g5) + " line ";
		b.b += _g6 == null ? "null" : "" + _g6;
		if(_g7 != null) {
			b.b = (b.b += " column ") + (_g7 == null ? "null" : "" + _g7);
		}
		if(_g4 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var _g2 = s.method;
		var _g1 = s.classname;
		b.b = (b.b += Std.string(_g1 == null ? "<unknown>" : _g1)) + ".";
		b.b += _g2 == null ? "null" : "" + _g2;
		break;
	case 4:
		var _g3 = s.v;
		b.b = (b.b += "local function #") + (_g3 == null ? "null" : "" + _g3);
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				var column = Std.parseInt(rie10.matched(4));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	get: null
	,set: null
	,exists: null
	,remove: null
	,keys: null
	,iterator: null
	,keyValueIterator: null
	,copy: null
	,clear: null
	,__class__: haxe_IMap
};
var haxe__$Int32_Int32_$Impl_$ = {};
$hxClasses["haxe._Int32.Int32_Impl_"] = haxe__$Int32_Int32_$Impl_$;
haxe__$Int32_Int32_$Impl_$.__name__ = "haxe._Int32.Int32_Impl_";
haxe__$Int32_Int32_$Impl_$.ucompare = function(a,b) {
	if(a < 0) {
		if(b < 0) {
			return ~b - ~a | 0;
		} else {
			return 1;
		}
	}
	if(b < 0) {
		return -1;
	} else {
		return a - b | 0;
	}
};
var haxe__$Int64_Int64_$Impl_$ = {};
$hxClasses["haxe._Int64.Int64_Impl_"] = haxe__$Int64_Int64_$Impl_$;
haxe__$Int64_Int64_$Impl_$.__name__ = "haxe._Int64.Int64_Impl_";
haxe__$Int64_Int64_$Impl_$.toString = function(this1) {
	var i = this1;
	if(i.high == 0 && i.low == 0) {
		return "0";
	}
	var str = "";
	var neg = false;
	if(i.high < 0) {
		neg = true;
	}
	var ten = new haxe__$Int64__$_$_$Int64(0,10);
	while(i.high != 0 || i.low != 0) {
		var r = haxe__$Int64_Int64_$Impl_$.divMod(i,ten);
		if(r.modulus.high < 0) {
			str = (~r.modulus.low + 1 | 0) + str;
			var x = r.quotient;
			var high = ~x.high;
			var low = ~x.low + 1 | 0;
			if(low == 0) {
				++high;
				high = high | 0;
			}
			i = new haxe__$Int64__$_$_$Int64(high,low);
		} else {
			str = r.modulus.low + str;
			i = r.quotient;
		}
	}
	if(neg) {
		str = "-" + str;
	}
	return str;
};
haxe__$Int64_Int64_$Impl_$.divMod = function(dividend,divisor) {
	if(divisor.high == 0) {
		switch(divisor.low) {
		case 0:
			throw new js__$Boot_HaxeError("divide by zero");
		case 1:
			return { quotient : new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low), modulus : new haxe__$Int64__$_$_$Int64(0,0)};
		}
	}
	var divSign = dividend.high < 0 != divisor.high < 0;
	var modulus;
	if(dividend.high < 0) {
		var high = ~dividend.high;
		var low = ~dividend.low + 1 | 0;
		if(low == 0) {
			++high;
			high = high | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high,low);
	} else {
		modulus = new haxe__$Int64__$_$_$Int64(dividend.high,dividend.low);
	}
	if(divisor.high < 0) {
		var high1 = ~divisor.high;
		var low1 = ~divisor.low + 1 | 0;
		if(low1 == 0) {
			++high1;
			high1 = high1 | 0;
		}
		divisor = new haxe__$Int64__$_$_$Int64(high1,low1);
	} else {
		divisor = divisor;
	}
	var quotient = new haxe__$Int64__$_$_$Int64(0,0);
	var mask = new haxe__$Int64__$_$_$Int64(0,1);
	while(!(divisor.high < 0)) {
		var v = haxe__$Int32_Int32_$Impl_$.ucompare(divisor.high,modulus.high);
		var cmp = v != 0 ? v : haxe__$Int32_Int32_$Impl_$.ucompare(divisor.low,modulus.low);
		divisor = new haxe__$Int64__$_$_$Int64(divisor.high << 1 | divisor.low >>> 31,divisor.low << 1);
		mask = new haxe__$Int64__$_$_$Int64(mask.high << 1 | mask.low >>> 31,mask.low << 1);
		if(cmp >= 0) {
			break;
		}
	}
	while(mask.high != 0 || mask.low != 0) {
		var v1 = haxe__$Int32_Int32_$Impl_$.ucompare(modulus.high,divisor.high);
		if((v1 != 0 ? v1 : haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low)) >= 0) {
			quotient = new haxe__$Int64__$_$_$Int64(quotient.high | mask.high,quotient.low | mask.low);
			var high2 = modulus.high - divisor.high | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(modulus.low,divisor.low) < 0) {
				--high2;
				high2 = high2 | 0;
			}
			modulus = new haxe__$Int64__$_$_$Int64(high2,modulus.low - divisor.low | 0);
		}
		mask = new haxe__$Int64__$_$_$Int64(mask.high >>> 1,mask.high << 31 | mask.low >>> 1);
		divisor = new haxe__$Int64__$_$_$Int64(divisor.high >>> 1,divisor.high << 31 | divisor.low >>> 1);
	}
	if(divSign) {
		var high3 = ~quotient.high;
		var low2 = ~quotient.low + 1 | 0;
		if(low2 == 0) {
			++high3;
			high3 = high3 | 0;
		}
		quotient = new haxe__$Int64__$_$_$Int64(high3,low2);
	}
	if(dividend.high < 0) {
		var high4 = ~modulus.high;
		var low3 = ~modulus.low + 1 | 0;
		if(low3 == 0) {
			++high4;
			high4 = high4 | 0;
		}
		modulus = new haxe__$Int64__$_$_$Int64(high4,low3);
	}
	return { quotient : quotient, modulus : modulus};
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Int64Helper = function() { };
$hxClasses["haxe.Int64Helper"] = haxe_Int64Helper;
haxe_Int64Helper.__name__ = "haxe.Int64Helper";
haxe_Int64Helper.fromFloat = function(f) {
	if(isNaN(f) || !isFinite(f)) {
		throw new js__$Boot_HaxeError("Number is NaN or Infinite");
	}
	var noFractions = f - f % 1;
	if(noFractions > 9007199254740991) {
		throw new js__$Boot_HaxeError("Conversion overflow");
	}
	if(noFractions < -9007199254740991) {
		throw new js__$Boot_HaxeError("Conversion underflow");
	}
	var result = new haxe__$Int64__$_$_$Int64(0,0);
	var neg = noFractions < 0;
	var rest = neg ? -noFractions : noFractions;
	var i = 0;
	while(rest >= 1) {
		var curr = rest % 2;
		rest /= 2;
		if(curr >= 1) {
			var a_high = 0;
			var a_low = 1;
			var b = i;
			b &= 63;
			var b1 = b == 0 ? new haxe__$Int64__$_$_$Int64(a_high,a_low) : b < 32 ? new haxe__$Int64__$_$_$Int64(a_high << b | a_low >>> 32 - b,a_low << b) : new haxe__$Int64__$_$_$Int64(a_low << b - 32,0);
			var high = result.high + b1.high | 0;
			var low = result.low + b1.low | 0;
			if(haxe__$Int32_Int32_$Impl_$.ucompare(low,result.low) < 0) {
				++high;
				high = high | 0;
			}
			result = new haxe__$Int64__$_$_$Int64(high,low);
		}
		++i;
	}
	if(neg) {
		var high1 = ~result.high;
		var low1 = ~result.low + 1 | 0;
		if(low1 == 0) {
			++high1;
			high1 = high1 | 0;
		}
		result = new haxe__$Int64__$_$_$Int64(high1,low1);
	}
	return result;
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) str += ", " + Std.string(_g1[_g++]);
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe__$Template_TemplateExpr = $hxEnums["haxe._Template.TemplateExpr"] = { __ename__ : true, __constructs__ : ["OpVar","OpExpr","OpIf","OpStr","OpBlock","OpForeach","OpMacro"]
	,OpVar: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["v"],$_)
	,OpExpr: ($_=function(expr) { return {_hx_index:1,expr:expr,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr"],$_)
	,OpIf: ($_=function(expr,eif,eelse) { return {_hx_index:2,expr:expr,eif:eif,eelse:eelse,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","eif","eelse"],$_)
	,OpStr: ($_=function(str) { return {_hx_index:3,str:str,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["str"],$_)
	,OpBlock: ($_=function(l) { return {_hx_index:4,l:l,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["l"],$_)
	,OpForeach: ($_=function(expr,loop) { return {_hx_index:5,expr:expr,loop:loop,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["expr","loop"],$_)
	,OpMacro: ($_=function(name,params) { return {_hx_index:6,name:name,params:params,__enum__:"haxe._Template.TemplateExpr",toString:$estr}; },$_.__params__ = ["name","params"],$_)
};
haxe__$Template_TemplateExpr.__empty_constructs__ = [];
var haxe_Template = function(str) {
	var tokens = this.parseTokens(str);
	this.expr = this.parseBlock(tokens);
	if(!tokens.isEmpty()) {
		throw new js__$Boot_HaxeError("Unexpected '" + Std.string(tokens.first().s) + "'");
	}
};
$hxClasses["haxe.Template"] = haxe_Template;
haxe_Template.__name__ = "haxe.Template";
haxe_Template.prototype = {
	expr: null
	,context: null
	,stack: null
	,resolve: function(v) {
		if(v == "__current__") {
			return this.context;
		}
		var value = Reflect.getProperty(this.context,v);
		if(value != null || Object.prototype.hasOwnProperty.call(this.context,v)) {
			return value;
		}
		var _g_head = this.stack.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			value = Reflect.getProperty(val,v);
			if(value != null || Object.prototype.hasOwnProperty.call(val,v)) {
				return value;
			}
		}
		return Reflect.field(haxe_Template.globals,v);
	}
	,parseTokens: function(data) {
		var tokens = new haxe_ds_List();
		while(haxe_Template.splitter.match(data)) {
			var p = haxe_Template.splitter.matchedPos();
			if(p.pos > 0) {
				tokens.add({ p : HxOverrides.substr(data,0,p.pos), s : true, l : null});
			}
			if(HxOverrides.cca(data,p.pos) == 58) {
				tokens.add({ p : HxOverrides.substr(data,p.pos + 2,p.len - 4), s : false, l : null});
				data = haxe_Template.splitter.matchedRight();
				continue;
			}
			var parp = p.pos + p.len;
			var npar = 1;
			var params = [];
			var part = "";
			while(true) {
				var c = HxOverrides.cca(data,parp);
				++parp;
				if(c == 40) {
					++npar;
				} else if(c == 41) {
					--npar;
					if(npar <= 0) {
						break;
					}
				} else if(c == null) {
					throw new js__$Boot_HaxeError("Unclosed macro parenthesis");
				}
				if(c == 44 && npar == 1) {
					params.push(part);
					part = "";
				} else {
					part += String.fromCodePoint(c);
				}
			}
			params.push(part);
			tokens.add({ p : haxe_Template.splitter.matched(2), s : false, l : params});
			data = HxOverrides.substr(data,parp,data.length - parp);
		}
		if(data.length > 0) {
			tokens.add({ p : data, s : true, l : null});
		}
		return tokens;
	}
	,parseBlock: function(tokens) {
		var l = new haxe_ds_List();
		while(true) {
			var t = tokens.first();
			if(t == null) {
				break;
			}
			if(!t.s && (t.p == "end" || t.p == "else" || HxOverrides.substr(t.p,0,7) == "elseif ")) {
				break;
			}
			l.add(this.parse(tokens));
		}
		if(l.length == 1) {
			return l.first();
		}
		return haxe__$Template_TemplateExpr.OpBlock(l);
	}
	,parse: function(tokens) {
		var t = tokens.pop();
		var p = t.p;
		if(t.s) {
			return haxe__$Template_TemplateExpr.OpStr(p);
		}
		if(t.l != null) {
			var pe = new haxe_ds_List();
			var _g = 0;
			var _g1 = t.l;
			while(_g < _g1.length) pe.add(this.parseBlock(this.parseTokens(_g1[_g++])));
			return haxe__$Template_TemplateExpr.OpMacro(p,pe);
		}
		var kwdEnd = function(kwd) {
			var pos = -1;
			var length = kwd.length;
			if(HxOverrides.substr(p,0,length) == kwd) {
				pos = length;
				var s = HxOverrides.substr(p,length,null);
				var _g_offset = 0;
				while(_g_offset < s.length) if(s.charCodeAt(_g_offset++) == 32) {
					++pos;
				} else {
					break;
				}
			}
			return pos;
		};
		var pos1 = kwdEnd("if");
		if(pos1 > 0) {
			p = HxOverrides.substr(p,pos1,p.length - pos1);
			var e = this.parseExpr(p);
			var eif = this.parseBlock(tokens);
			var t1 = tokens.first();
			var eelse;
			if(t1 == null) {
				throw new js__$Boot_HaxeError("Unclosed 'if'");
			}
			if(t1.p == "end") {
				tokens.pop();
				eelse = null;
			} else if(t1.p == "else") {
				tokens.pop();
				eelse = this.parseBlock(tokens);
				t1 = tokens.pop();
				if(t1 == null || t1.p != "end") {
					throw new js__$Boot_HaxeError("Unclosed 'else'");
				}
			} else {
				t1.p = HxOverrides.substr(t1.p,4,t1.p.length - 4);
				eelse = this.parse(tokens);
			}
			return haxe__$Template_TemplateExpr.OpIf(e,eif,eelse);
		}
		var pos2 = kwdEnd("foreach");
		if(pos2 >= 0) {
			p = HxOverrides.substr(p,pos2,p.length - pos2);
			var e1 = this.parseExpr(p);
			var efor = this.parseBlock(tokens);
			var t2 = tokens.pop();
			if(t2 == null || t2.p != "end") {
				throw new js__$Boot_HaxeError("Unclosed 'foreach'");
			}
			return haxe__$Template_TemplateExpr.OpForeach(e1,efor);
		}
		if(haxe_Template.expr_splitter.match(p)) {
			return haxe__$Template_TemplateExpr.OpExpr(this.parseExpr(p));
		}
		return haxe__$Template_TemplateExpr.OpVar(p);
	}
	,parseExpr: function(data) {
		var l = new haxe_ds_List();
		var expr = data;
		while(haxe_Template.expr_splitter.match(data)) {
			var p = haxe_Template.expr_splitter.matchedPos();
			if(p.pos != 0) {
				l.add({ p : HxOverrides.substr(data,0,p.pos), s : true});
			}
			var p1 = haxe_Template.expr_splitter.matched(0);
			l.add({ p : p1, s : p1.indexOf("\"") >= 0});
			data = haxe_Template.expr_splitter.matchedRight();
		}
		if(data.length != 0) {
			var _g_offset = 0;
			var _g_s = data;
			while(_g_offset < _g_s.length) {
				var _g1_key = _g_offset;
				if(_g_s.charCodeAt(_g_offset++) != 32) {
					l.add({ p : HxOverrides.substr(data,_g1_key,null), s : true});
					break;
				}
			}
		}
		var e;
		try {
			e = this.makeExpr(l);
			if(!l.isEmpty()) {
				throw new js__$Boot_HaxeError(l.first().p);
			}
		} catch( s ) {
			haxe_CallStack.lastException = s;
			var s1 = ((s) instanceof js__$Boot_HaxeError) ? s.val : s;
			if(typeof(s1) == "string") {
				throw new js__$Boot_HaxeError("Unexpected '" + s1 + "' in " + expr);
			} else {
				throw s;
			}
		}
		return function() {
			try {
				return e();
			} catch( exc ) {
				haxe_CallStack.lastException = exc;
				throw new js__$Boot_HaxeError("Error : " + Std.string(((exc) instanceof js__$Boot_HaxeError) ? exc.val : exc) + " in " + expr);
			}
		};
	}
	,makeConst: function(v) {
		haxe_Template.expr_trim.match(v);
		v = haxe_Template.expr_trim.matched(1);
		if(HxOverrides.cca(v,0) == 34) {
			var str = HxOverrides.substr(v,1,v.length - 2);
			return function() {
				return str;
			};
		}
		if(haxe_Template.expr_int.match(v)) {
			var i = Std.parseInt(v);
			return function() {
				return i;
			};
		}
		if(haxe_Template.expr_float.match(v)) {
			var f = parseFloat(v);
			return function() {
				return f;
			};
		}
		var me = this;
		return function() {
			return me.resolve(v);
		};
	}
	,makePath: function(e,l) {
		var p = l.first();
		if(p == null || p.p != ".") {
			return e;
		}
		l.pop();
		var field = l.pop();
		if(field == null || !field.s) {
			throw new js__$Boot_HaxeError(field.p);
		}
		var f = field.p;
		haxe_Template.expr_trim.match(f);
		f = haxe_Template.expr_trim.matched(1);
		return this.makePath(function() {
			return Reflect.field(e(),f);
		},l);
	}
	,makeExpr: function(l) {
		return this.makePath(this.makeExpr2(l),l);
	}
	,skipSpaces: function(l) {
		var p = l.first();
		while(p != null) {
			var s = p.p;
			var _g_offset = 0;
			while(_g_offset < s.length) if(s.charCodeAt(_g_offset++) != 32) {
				return;
			}
			l.pop();
			p = l.first();
		}
	}
	,makeExpr2: function(l) {
		this.skipSpaces(l);
		var p = l.pop();
		this.skipSpaces(l);
		if(p == null) {
			throw new js__$Boot_HaxeError("<eof>");
		}
		if(p.s) {
			return this.makeConst(p.p);
		}
		switch(p.p) {
		case "!":
			var e = this.makeExpr(l);
			return function() {
				var v = e();
				if(v != null) {
					return v == false;
				} else {
					return true;
				}
			};
		case "(":
			this.skipSpaces(l);
			var e1 = this.makeExpr(l);
			this.skipSpaces(l);
			var p1 = l.pop();
			if(p1 == null || p1.s) {
				throw new js__$Boot_HaxeError(p1);
			}
			if(p1.p == ")") {
				return e1;
			}
			this.skipSpaces(l);
			var e2 = this.makeExpr(l);
			this.skipSpaces(l);
			var p2 = l.pop();
			this.skipSpaces(l);
			if(p2 == null || p2.p != ")") {
				throw new js__$Boot_HaxeError(p2);
			}
			switch(p1.p) {
			case "!=":
				return function() {
					return e1() != e2();
				};
			case "&&":
				return function() {
					return e1() && e2();
				};
			case "*":
				return function() {
					return e1() * e2();
				};
			case "+":
				return function() {
					return e1() + e2();
				};
			case "-":
				return function() {
					return e1() - e2();
				};
			case "/":
				return function() {
					return e1() / e2();
				};
			case "<":
				return function() {
					return e1() < e2();
				};
			case "<=":
				return function() {
					return e1() <= e2();
				};
			case "==":
				return function() {
					return e1() == e2();
				};
			case ">":
				return function() {
					return e1() > e2();
				};
			case ">=":
				return function() {
					return e1() >= e2();
				};
			case "||":
				return function() {
					return e1() || e2();
				};
			default:
				throw new js__$Boot_HaxeError("Unknown operation " + p1.p);
			}
			break;
		case "-":
			var e3 = this.makeExpr(l);
			return function() {
				return -e3();
			};
		}
		throw new js__$Boot_HaxeError(p.p);
	}
	,__class__: haxe_Template
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = kha_Scheduler.addTimeTask(function() {
		me.run();
	},time_ms / 1000,time_ms / 1000);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = kha_Scheduler.realTime();
	var r = f();
	haxe_Log.trace(kha_Scheduler.realTime() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return kha_Scheduler.realTime();
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		kha_Scheduler.removeTimeTask(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			o[k] = this.unserialize();
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Object.create(cl1.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			while(this.buf.charCodeAt(this.pos) != 104) h.set(this.unserialize(),this.unserialize());
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s] != null) {
					h1.setReserved(s,value);
				} else {
					h1.h[s] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Object.create(cl2.prototype);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer((len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0)));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf.charCodeAt(i1++)];
				var c2 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = c11 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c12 = codes[buf.charCodeAt(i1++)];
				var c21 = codes[buf.charCodeAt(i1++)];
				bytes.b[bpos++] = c12 << 2 | c21 >> 4;
				if(rest == 3) {
					var c31 = codes[buf.charCodeAt(i1++)];
					bytes.b[bpos++] = c21 << 4 | c31 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s1 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s1 = decodeURIComponent(s1.split("+").join(" "));
			this.scache.push(s1);
			return s1;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	a.a1 = i.readByte() << 8 | i.readByte();
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	a1: null
	,a2: null
	,update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			a1 = (a1 + b.b[_g++]) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,sub: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		return new haxe_io_Bytes(this.b.buffer.slice(pos + this.b.byteOffset,pos + this.b.byteOffset + len));
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var code1 = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Crc32 = function() { };
$hxClasses["haxe.crypto.Crc32"] = haxe_crypto_Crc32;
haxe_crypto_Crc32.__name__ = "haxe.crypto.Crc32";
haxe_crypto_Crc32.make = function(data) {
	var c_crc = -1;
	var len = data.length;
	var b = data.b.bufferValue;
	var _g = 0;
	while(_g < len) {
		var tmp = (c_crc ^ b.bytes[_g++]) & 255;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
		c_crc = c_crc >>> 8 ^ tmp;
	}
	return c_crc ^ -1;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	root: null
	,set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if(typeof(((e) instanceof js__$Boot_HaxeError) ? e.val : e) == "string") {
				return false;
			} else {
				throw e;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,iterator: function() {
		var ret = [];
		this.iteratorLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return HxOverrides.iter(ret);
	}
	,copy: function() {
		var copied = new haxe_ds_BalancedTree();
		copied.root = this.root;
		return copied;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			return this.balance(this.setLoop(k,v,node.left),node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw new js__$Boot_HaxeError("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,iteratorLoop: function(node,acc) {
		if(node != null) {
			this.iteratorLoop(node.left,acc);
			acc.push(node.value);
			this.iteratorLoop(node.right,acc);
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw new js__$Boot_HaxeError("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,clear: function() {
		this.root = null;
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			tmp = _this2 == null ? 0 : _this2._height;
		} else {
			var _this3 = this.right;
			tmp = _this3 == null ? 0 : _this3._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	left: null
	,right: null
	,key: null
	,value: null
	,_height: null
	,__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,copy: function() {
		var copied = new haxe_ds_EnumValueMap();
		copied.root = this.root;
		return copied;
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) (this.h.hasOwnProperty(key) ? a.push(key | 0) : null);
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_IntMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.h[key1] = this.h[key1];
		}
		return copied;
	}
	,clear: function() {
		this.h = { };
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_ObjectMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			copied.set(key1,this.h[key1.__id__]);
		}
		return copied;
	}
	,clear: function() {
		this.h = { __keys__ : { }};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_Option = $hxEnums["haxe.ds.Option"] = { __ename__ : true, __constructs__ : ["Some","None"]
	,Some: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"haxe.ds.Option",toString:$estr}; },$_.__params__ = ["v"],$_)
	,None: {_hx_index:1,__enum__:"haxe.ds.Option",toString:$estr}
};
haxe_ds_Option.__empty_constructs__ = [haxe_ds_Option.None];
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = "haxe.ds._StringMap.StringMapIterator";
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,set: function(key,value) {
		if(__map_reserved[key] != null) {
			this.setReserved(key,value);
		} else {
			this.h[key] = value;
		}
	}
	,get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,keyValueIterator: function() {
		return new haxe_iterators_MapKeyValueIterator(this);
	}
	,copy: function() {
		var copied = new haxe_ds_StringMap();
		var key = this.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var value = __map_reserved[key1] != null ? this.getReserved(key1) : this.h[key1];
			if(__map_reserved[key1] != null) {
				copied.setReserved(key1,value);
			} else {
				copied.h[key1] = value;
			}
		}
		return copied;
	}
	,toString: function() {
		var s_b = "";
		s_b = "{";
		var keys = this.arrayKeys();
		var _g = 0;
		var _g1 = keys.length;
		while(_g < _g1) {
			var i = _g++;
			var k = keys[i];
			s_b += k == null ? "null" : "" + k;
			s_b += " => ";
			s_b += Std.string(Std.string(__map_reserved[k] != null ? this.getReserved(k) : this.h[k]));
			if(i < keys.length - 1) {
				s_b += ", ";
			}
		}
		s_b += "}";
		return s_b;
	}
	,clear: function() {
		this.h = { };
		this.rh = null;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	buffer: null
	,view: null
	,u8: null
	,pos: null
	,size: null
	,addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		this.u8.set(new Uint8Array(src.b.buffer,src.b.byteOffset,src.length),this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		this.u8.set(new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len),this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	bigEndian: null
	,readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( eof ) {
			haxe_CallStack.lastException = eof;
			if(!((((eof) instanceof js__$Boot_HaxeError) ? eof.val : eof) instanceof haxe_io_Eof)) {
				throw eof;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	b: null
	,pos: null
	,len: null
	,totlen: null
	,set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
	,__properties__: {set_position:"set_position"}
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	bigEndian: null
	,writeByte: function(c) {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,writeBytes: function(s,pos,len) {
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var b = s.b;
		var k = len;
		while(k > 0) {
			this.writeByte(b[pos]);
			++pos;
			--k;
		}
		return len;
	}
	,write: function(s) {
		var l = s.length;
		var p = 0;
		while(l > 0) {
			var k = this.writeBytes(s,p,l);
			if(k == 0) {
				throw new js__$Boot_HaxeError(haxe_io_Error.Blocked);
			}
			p += k;
			l -= k;
		}
	}
	,writeFloat: function(x) {
		this.writeInt32(haxe_io_FPHelper.floatToI32(x));
	}
	,writeInt32: function(x) {
		if(this.bigEndian) {
			this.writeByte(x >>> 24);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x & 255);
		} else {
			this.writeByte(x & 255);
			this.writeByte(x >> 8 & 255);
			this.writeByte(x >> 16 & 255);
			this.writeByte(x >>> 24);
		}
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	b: null
	,writeByte: function(c) {
		this.b.addByte(c);
	}
	,writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.floatToI32 = function(f) {
	haxe_io_FPHelper.helper.setFloat32(0,f,true);
	return haxe_io_FPHelper.helper.getInt32(0,true);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < paths.length) {
		var v = paths[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	if(_g.length == 0) {
		return "";
	}
	var path = _g[0];
	var _g2 = 1;
	var _g11 = _g.length;
	while(_g2 < _g11) {
		path = haxe_io_Path.addTrailingSlash(path);
		path += _g[_g2++];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = target.join(slash);
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_io__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["haxe.io._UInt8Array.UInt8Array_Impl_"] = haxe_io__$UInt8Array_UInt8Array_$Impl_$;
haxe_io__$UInt8Array_UInt8Array_$Impl_$.__name__ = "haxe.io._UInt8Array.UInt8Array_Impl_";
haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,bytePos,length) {
	if(bytePos == null) {
		bytePos = 0;
	}
	if(length == null) {
		length = bytes.length - bytePos;
	}
	return new Uint8Array(bytes.b.bufferValue,bytePos,length);
};
var haxe_iterators_MapKeyValueIterator = function(map) {
	this.map = map;
	this.keys = map.keys();
};
$hxClasses["haxe.iterators.MapKeyValueIterator"] = haxe_iterators_MapKeyValueIterator;
haxe_iterators_MapKeyValueIterator.__name__ = "haxe.iterators.MapKeyValueIterator";
haxe_iterators_MapKeyValueIterator.prototype = {
	map: null
	,keys: null
	,hasNext: function() {
		return this.keys.hasNext();
	}
	,next: function() {
		var key = this.keys.next();
		return { value : this.map.get(key), key : key};
	}
	,__class__: haxe_iterators_MapKeyValueIterator
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	while(_g < position) {
		var c = xml.charCodeAt(_g++);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				aname = HxOverrides.substr(str,start,p - start);
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				parent.addChild(Xml.createProcessingInstruction(HxOverrides.substr(str,start + 1,p - start - 2)));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createCData(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						buf.b += Std.string(__map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s]);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	output: null
	,pretty: null
	,writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) this.writeNode(child.next(),this.pretty ? tabs + "\t" : tabs);
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			this.output.b += Std.string(StringTools.trim(commentContent));
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var child1 = HxOverrides.iter(value.children);
			while(child1.hasNext()) this.writeNode(child1.next(),tabs);
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(child1.nodeType));
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__ : true, __constructs__ : ["FUnknown","FInfoZipUnicodePath","FUtf8"]
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
haxe_zip_ExtraField.__empty_constructs__ = [haxe_zip_ExtraField.FUtf8];
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			return 0;
		case 1:
			var da = this.treeDepth(t.left);
			var db = this.treeDepth(t.right);
			return 1 + (da < db ? da : db);
		case 2:
			throw new js__$Boot_HaxeError("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				return haxe_zip_Huffman.NeedBit(this.treeCompress(t.left),this.treeCompress(t.right));
			} else {
				throw new js__$Boot_HaxeError("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		while(_g < size) {
			++_g;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,t.left);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,t.right);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw new js__$Boot_HaxeError("Invalid huffman");
		}
		var _g = 0;
		while(_g < maxbits) {
			++_g;
			counts.push(0);
			tmp.push(0);
		}
		var _g2 = 0;
		while(_g2 < nlengths) {
			var p = lengths[_g2++ + pos];
			if(p >= maxbits) {
				throw new js__$Boot_HaxeError("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g4 = 1;
		var _g5 = maxbits - 1;
		while(_g4 < _g5) {
			var i = _g4++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g6 = 0;
		while(_g6 < nlengths) {
			var i1 = _g6++;
			var l = lengths[i1 + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i1;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	buffer: null
	,pos: null
	,crc: null
	,slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	nbits: null
	,bits: null
	,state: null
	,isFinal: null
	,huffman: null
	,huffdist: null
	,htools: null
	,len: null
	,dist: null
	,needed: null
	,output: null
	,outpos: null
	,input: null
	,lengths: null
	,window: null
	,buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		while(_g < n) {
			++_g;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			return h.i;
		case 1:
			return this.applyHuffman(this.getBit() ? h.right : h.left);
		case 2:
			return this.applyHuffman(h.table[this.getBits(h.n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				break;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			if((cmf & 15) != 8) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			var flg = this.input.readByte();
			if(((cmf << 8) + flg) % 31 != 0) {
				throw new js__$Boot_HaxeError("Invalid data");
			}
			if((flg & 32) != 0) {
				throw new js__$Boot_HaxeError("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				if(this.input.readUInt16() != 65535 - this.len) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				while(_g < hclen) this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[_g++]] = this.getBits(3);
				var _g2 = hclen;
				while(_g2 < 19) this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[_g2++]] = 0;
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g4 = 0;
				var _g5 = hlit + hdist;
				while(_g4 < _g5) {
					++_g4;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw new js__$Boot_HaxeError("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw new js__$Boot_HaxeError("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			if(!calc.equals(haxe_crypto_Adler32.read(this.input))) {
				throw new js__$Boot_HaxeError("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen1 = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen1);
				this.len -= rlen1;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen2 = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen2);
			this.len -= rlen2;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.readZip = function(i) {
	return new haxe_zip_Reader(i).read();
};
haxe_zip_Reader.prototype = {
	i: null
	,readZipDate: function() {
		var t = this.i.readUInt16();
		var d = this.i.readUInt16();
		return new Date((d >> 9) + 1980,(d >> 5 & 15) - 1,d & 31,t >> 11 & 31,t >> 5 & 63,(t & 31) << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw new js__$Boot_HaxeError("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw new js__$Boot_HaxeError("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(this.i.read(len - 5).toString(),crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw new js__$Boot_HaxeError("Invalid Zip Data");
		}
		i.readUInt16();
		var flags = i.readUInt16();
		if((flags & 63473) != 0) {
			throw new js__$Boot_HaxeError("Unsupported flags " + flags);
		}
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw new js__$Boot_HaxeError("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if((flags & 2048) != 0) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		if((flags & 8) != 0) {
			crc32 = null;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : null, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.crc32 == null) {
				if(e.compressed) {
					if(tmp == null) {
						tmp = new haxe_io_Bytes(new ArrayBuffer(65536));
					}
					var out = new haxe_io_BytesBuffer();
					var z = new haxe_zip_InflateImpl(this.i,false,false);
					while(true) {
						var n = z.readBytes(tmp,0,65536);
						out.addBytes(tmp,0,n);
						if(n < 65536) {
							break;
						}
					}
					e.data = out.getBytes();
				} else {
					e.data = this.i.read(e.dataSize);
				}
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var jetgui__$Axis_Axis_$Impl_$ = {};
$hxClasses["jetgui._Axis.Axis_Impl_"] = jetgui__$Axis_Axis_$Impl_$;
jetgui__$Axis_Axis_$Impl_$.__name__ = "jetgui._Axis.Axis_Impl_";
jetgui__$Axis_Axis_$Impl_$.__properties__ = {get_cross:"get_cross"};
jetgui__$Axis_Axis_$Impl_$.select = function(this1,xVal,yVal) {
	if(this1 == 0) {
		return xVal;
	} else {
		return yVal;
	}
};
jetgui__$Axis_Axis_$Impl_$.toString = function(this1) {
	return this1 == 0 ? "X" : "Y";
};
jetgui__$Axis_Axis_$Impl_$.get_cross = function(this1) {
	return this1 == 0 ? 1 : 0;
};
var jetgui__$ClassList_ClassList_$Impl_$ = {};
$hxClasses["jetgui._ClassList.ClassList_Impl_"] = jetgui__$ClassList_ClassList_$Impl_$;
jetgui__$ClassList_ClassList_$Impl_$.__name__ = "jetgui._ClassList.ClassList_Impl_";
jetgui__$ClassList_ClassList_$Impl_$._new = function() {
	return null;
};
jetgui__$ClassList_ClassList_$Impl_$.setValue = function(this1,attr) {
	var result = false;
	if(this1 != null || attr != null) {
		jetgui__$ClassList_ClassList_$Impl_$.counter++;
		if(this1 == null) {
			this1 = new haxe_ds_StringMap();
		}
		if(attr != null) {
			var i = 0;
			while(i < attr.length) {
				while(i < attr.length && StringTools.isSpace(attr,i)) ++i;
				var j = i;
				while(i < attr.length && !StringTools.isSpace(attr,i)) ++i;
				if(j != i) {
					var className = attr.substring(j,i);
					if((__map_reserved[className] != null ? this1.getReserved(className) : this1.h[className]) != jetgui__$ClassList_ClassList_$Impl_$.counter) {
						var value = jetgui__$ClassList_ClassList_$Impl_$.counter;
						if(__map_reserved[className] != null) {
							this1.setReserved(className,value);
						} else {
							this1.h[className] = value;
						}
						result = true;
					}
				}
			}
		}
		var _g = new haxe_iterators_MapKeyValueIterator(this1);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			if(_g1.value != jetgui__$ClassList_ClassList_$Impl_$.counter) {
				this1.remove(_g1.key);
				result = true;
			}
		}
	}
	return result;
};
jetgui__$ClassList_ClassList_$Impl_$.has = function(this1,className) {
	if(this1 == null) {
		return false;
	} else if(__map_reserved[className] != null) {
		return this1.existsReserved(className);
	} else {
		return this1.h.hasOwnProperty(className);
	}
};
var jetgui__$ClickAnimationName_ClickAnimationName_$Impl_$ = {};
$hxClasses["jetgui._ClickAnimationName.ClickAnimationName_Impl_"] = jetgui__$ClickAnimationName_ClickAnimationName_$Impl_$;
jetgui__$ClickAnimationName_ClickAnimationName_$Impl_$.__name__ = "jetgui._ClickAnimationName.ClickAnimationName_Impl_";
jetgui__$ClickAnimationName_ClickAnimationName_$Impl_$.fromBool = function(v) {
	if(v) {
		return "default";
	} else {
		return null;
	}
};
var jetgui_ClickAnimations = function() { };
$hxClasses["jetgui.ClickAnimations"] = jetgui_ClickAnimations;
jetgui_ClickAnimations.__name__ = "jetgui.ClickAnimations";
jetgui_ClickAnimations.get = function(name) {
	var _this = jetgui_ClickAnimations.map;
	var result = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
	if(result == null) {
		var _this1 = jetgui_ClickAnimations.map;
		result = __map_reserved["default"] != null ? _this1.getReserved("default") : _this1.h["default"];
	}
	return result;
};
var jetgui_Component = function() { };
$hxClasses["jetgui.Component"] = jetgui_Component;
jetgui_Component.__name__ = "jetgui.Component";
jetgui_Component.prototype = {
	ctx: null
	,render: function(vDom) {
		return null;
	}
	,applyVDomAttributes: function(vDom) {
		throw new js__$Boot_HaxeError("override applyVDomAttributes");
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: jetgui_Component
};
var jetgui_vdom_VDomInstance = function() { };
$hxClasses["jetgui.vdom.VDomInstance"] = jetgui_vdom_VDomInstance;
jetgui_vdom_VDomInstance.__name__ = "jetgui.vdom.VDomInstance";
jetgui_vdom_VDomInstance.prototype = {
	syncId: null
	,sync: function(jetGui,vDomNode,parentComponent,parentElement,prevElement) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"VDomInstance.hx:18","",null));
	}
	,willSync: function() {
		return true;
	}
	,needSync: function() {
	}
	,dispose: function(elementFactory) {
	}
	,__class__: jetgui_vdom_VDomInstance
};
var jetgui_data_IObserver = function() { };
$hxClasses["jetgui.data.IObserver"] = jetgui_data_IObserver;
jetgui_data_IObserver.__name__ = "jetgui.data.IObserver";
jetgui_data_IObserver.__isInterface__ = true;
jetgui_data_IObserver.prototype = {
	onSubscribed: null
	,onUnsubscribed: null
	,onObservableChanged: null
	,unsubscribeFromAll: null
	,__class__: jetgui_data_IObserver
};
var jetgui_ComponentProxy = function(component) {
	this.childInstanceMap = new haxe_ds_StringMap();
	this.observables = new haxe_ds_ObjectMap();
	this.isChildNeedSync = true;
	this.isNeedSync = true;
	this.componentSyncId = 1;
	this.component = component;
};
$hxClasses["jetgui.ComponentProxy"] = jetgui_ComponentProxy;
jetgui_ComponentProxy.__name__ = "jetgui.ComponentProxy";
jetgui_ComponentProxy.__interfaces__ = [jetgui_data_IObserver];
jetgui_ComponentProxy.prevChanged = function(lastSyncResult,prev) {
	var it = lastSyncResult[0];
	return (it != null ? it.getPrevSibling() : null) != prev;
};
jetgui_ComponentProxy.__super__ = jetgui_vdom_VDomInstance;
jetgui_ComponentProxy.prototype = $extend(jetgui_vdom_VDomInstance.prototype,{
	componentSyncId: null
	,component: null
	,parentComponent: null
	,isNeedSync: null
	,isChildNeedSync: null
	,lastSyncResult: null
	,lastRenderResult: null
	,observables: null
	,childInstanceMap: null
	,dispose: function(elementFactory) {
		this.unsubscribeFromAll();
		var _this = this.childInstanceMap;
		var instance = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(instance.hasNext()) instance.next().dispose(elementFactory);
		jetgui_data_Observable.clearContext();
	}
	,needSync: function() {
		if(!this.isNeedSync) {
			this.unsubscribeFromAll();
			this.isNeedSync = true;
			var p = this.parentComponent;
			while(p != null && !p.isChildNeedSync) {
				p.isChildNeedSync = true;
				p = p.parentComponent;
			}
		}
	}
	,onObservableChanged: function() {
		this.needSync();
	}
	,onSubscribed: function(o) {
		this.observables.set(o,true);
	}
	,onUnsubscribed: function(o) {
		this.observables.remove(o);
	}
	,unsubscribeFromAll: function() {
		var _gthis = this;
		var iterator = this.observables.keys();
		while(iterator.hasNext()) iterator.next().unsubscribe(_gthis);
	}
	,addRefElement: function(name,element) {
		this.component.ctx.addElementRef(name,element);
	}
	,removeRefElement: function(name,element) {
		this.component.ctx.removeElementRef(name,element);
	}
	,willSync: function() {
		if(!this.isNeedSync) {
			return this.isChildNeedSync;
		} else {
			return true;
		}
	}
	,sync: function(jetGui,vDomNode,parentComponent,parentElement,prevElement) {
		this.componentSyncId++;
		this.parentComponent = parentComponent;
		this.component.applyVDomAttributes(vDomNode.asComponent());
		if(this.willSync()) {
			this.lastSyncResult = this.syncFull(jetGui,vDomNode,parentElement,prevElement);
		} else {
			var it = this.lastSyncResult[0];
			var parent;
			if(it != null) {
				var parentNode = it.node.parent;
				parent = parentNode != null ? jetgui_JetHelper.element(parentNode) : null;
			} else {
				parent = null;
			}
			var it1 = this.lastSyncResult[0];
			if((it1 != null ? it1.getPrevSibling() : null) != prevElement || parentElement != parent) {
				var row = this.lastSyncResult;
				var _gthis = parentElement;
				if(!(prevElement == null || prevElement.isChildOf(parentElement))) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ElementBase.hx:194","target == null OR target.isChildOf(this)",null));
				}
				var it2 = row[0];
				if(it2 != null) {
					if(!_gthis.isChildAfter(it2,prevElement)) {
						var prev = prevElement;
						var _g = 0;
						while(_g < row.length) {
							var element = row[_g];
							++_g;
							_gthis.doAddChildAfter(element,prev);
							prev = element;
						}
					}
				}
			}
		}
		return this.lastSyncResult;
	}
	,syncFull: function(jetGui,vDomNode,parentElement,prevElement) {
		if(this.isNeedSync) {
			jetgui_data_Observable.pushObserver(this);
			this.lastRenderResult = this.component.render(vDomNode.asComponent());
			jetgui_data_Observable.popObserver();
		}
		this.isNeedSync = false;
		this.isChildNeedSync = false;
		var syncResult = [];
		if(this.lastRenderResult != null) {
			var _g = 0;
			var _g1 = this.lastRenderResult;
			while(_g < _g1.length) {
				var childSyncResult = jetGui.sync(_g1[_g++],this,parentElement,prevElement);
				if(childSyncResult != null && childSyncResult.length > 0) {
					syncResult = syncResult.concat(childSyncResult);
					prevElement = childSyncResult[childSyncResult.length - 1];
				}
			}
		}
		var _this = this.childInstanceMap;
		var childInstance = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(childInstance.hasNext()) {
			var childInstance1 = childInstance.next();
			if(childInstance1.syncId != this.componentSyncId) {
				childInstance1.needSync();
			}
		}
		return syncResult;
	}
	,__class__: jetgui_ComponentProxy
});
var jetgui_ElementFactory = function(entitySystem,entityDelayedDisposer,fontModule,resourceManager,render2Context,deviceProfileResolver) {
	this.entitySystem = entitySystem;
	this.fontModule = fontModule;
	this.entityDelayedDisposer = entityDelayedDisposer;
	this.resourceManager = resourceManager;
	this.render2Context = render2Context;
	this.deviceProfileResolver = deviceProfileResolver;
};
$hxClasses["jetgui.ElementFactory"] = jetgui_ElementFactory;
jetgui_ElementFactory.__name__ = "jetgui.ElementFactory";
jetgui_ElementFactory.prototype = {
	entitySystem: null
	,entityDelayedDisposer: null
	,fontModule: null
	,resourceManager: null
	,render2Context: null
	,deviceProfileResolver: null
	,disposeElement: function(element) {
		this.entityDelayedDisposer.asyncDisposeEntity(element.entity);
	}
	,createImage: function() {
		return new jetgui_element_ImageElement(this.entitySystem,this.resourceManager,this.render2Context,this.deviceProfileResolver);
	}
	,createText: function() {
		return new jetgui_element_TextElement(this.entitySystem,this.fontModule,this.resourceManager,this.render2Context,this.deviceProfileResolver);
	}
	,createVBox: function() {
		return new jetgui_element_VBoxElement(this.entitySystem,this.resourceManager,this.render2Context,this.deviceProfileResolver);
	}
	,createHBox: function() {
		return new jetgui_element_HBoxElement(this.entitySystem,this.resourceManager,this.render2Context,this.deviceProfileResolver);
	}
	,createBox: function() {
		return new jetgui_element_BoxElement(this.entitySystem,this.resourceManager,this.render2Context,this.deviceProfileResolver);
	}
	,createRoot: function() {
		return new jetgui_element_RootElement(this.entitySystem,this.resourceManager,this.render2Context,this.deviceProfileResolver);
	}
	,createSkipReflow: function() {
		return new jetgui_element_SkipReflowElement(this.entitySystem,this.resourceManager,this.render2Context,this.deviceProfileResolver);
	}
	,createHSlider: function() {
		return new jetgui_element_slider_HSliderElement(this.entitySystem,this.resourceManager,this.render2Context,this.deviceProfileResolver);
	}
	,createVSlider: function() {
		return new jetgui_element_slider_VSliderElement(this.entitySystem,this.resourceManager,this.render2Context,this.deviceProfileResolver);
	}
	,createDrag: function() {
		return new jetgui_element_DragElement(this.entitySystem,this.resourceManager,this.render2Context,this.deviceProfileResolver);
	}
	,createScroll: function() {
		return new jetgui_element_ScrollElement(this.entitySystem,this.resourceManager,this.render2Context,this.deviceProfileResolver);
	}
	,createArc: function() {
		return new jetgui_element_ArcElement(this.entitySystem,this.resourceManager,this.render2Context,this.deviceProfileResolver);
	}
	,__class__: jetgui_ElementFactory
};
var jetgui_IUpdatebleElement = function() { };
$hxClasses["jetgui.IUpdatebleElement"] = jetgui_IUpdatebleElement;
jetgui_IUpdatebleElement.__name__ = "jetgui.IUpdatebleElement";
jetgui_IUpdatebleElement.__isInterface__ = true;
jetgui_IUpdatebleElement.prototype = {
	isDisposed: null
	,isOnViewTree: null
	,update: null
	,__class__: jetgui_IUpdatebleElement
};
var jetgui__$JetAssetPath_JetAssetPath_$Impl_$ = {};
$hxClasses["jetgui._JetAssetPath.JetAssetPath_Impl_"] = jetgui__$JetAssetPath_JetAssetPath_$Impl_$;
jetgui__$JetAssetPath_JetAssetPath_$Impl_$.__name__ = "jetgui._JetAssetPath.JetAssetPath_Impl_";
jetgui__$JetAssetPath_JetAssetPath_$Impl_$._new = function(str) {
	return str;
};
jetgui__$JetAssetPath_JetAssetPath_$Impl_$.getPath = function(this1) {
	return this1;
};
jetgui__$JetAssetPath_JetAssetPath_$Impl_$.fromAssetPath = function(ap) {
	return ap;
};
var jetgui_JetContext = function() {
	this.elementRefMap = new haxe_ds_StringMap();
};
$hxClasses["jetgui.JetContext"] = jetgui_JetContext;
jetgui_JetContext.__name__ = "jetgui.JetContext";
jetgui_JetContext.prototype = {
	elementRefMap: null
	,notify: function(notification,arg0,arg1) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"JetContext.hx:13","",null));
	}
	,addElementRef: function(name,element) {
		var _this = this.elementRefMap;
		var arr = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(arr == null) {
			arr = [];
			var _this1 = this.elementRefMap;
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,arr);
			} else {
				_this1.h[name] = arr;
			}
		}
		if(arr.indexOf(element) < 0) {
			arr.push(element);
		}
	}
	,removeElementRef: function(name,element) {
		var _this = this.elementRefMap;
		var arr = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(arr != null) {
			HxOverrides.remove(arr,element);
			if(arr.length == 0) {
				this.elementRefMap.remove(name);
			}
		}
	}
	,getElementRefImpl: function(name,elementCls) {
		var _this = this.elementRefMap;
		var arr = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		var result = arr != null && arr.length > 0 ? arr[arr.length - 1] : null;
		if(js_Boot.__instanceof(result,elementCls)) {
			return result;
		} else {
			return null;
		}
	}
	,getElementRefArrayImpl: function(name,elementCls) {
		var _this = this.elementRefMap;
		var arr = __map_reserved[name] != null ? _this.getReserved(name) : _this.h[name];
		if(arr == null) {
			return [];
		} else {
			var result = new Array(arr.length);
			var _g = 0;
			var _g1 = arr.length;
			while(_g < _g1) {
				var i = _g++;
				var el = arr[i];
				result[i] = js_Boot.__instanceof(el,elementCls) ? el : null;
			}
			var _g2 = [];
			var _g11 = 0;
			while(_g11 < result.length) {
				var v = result[_g11];
				++_g11;
				if(v != null) {
					_g2.push(v);
				}
			}
			return _g2;
		}
	}
	,__class__: jetgui_JetContext
};
var jetgui_JetControllerContext = function(controller,moduleProvider) {
	jetgui_JetContext.call(this);
	this.controller = controller;
	this.moduleProvider = moduleProvider.getModule(banan_module_ModuleProvider);
	if(this.moduleProvider == null) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(121,"JetControllerContext.hx:23","this.moduleProvider != null" + ": " + "`@inject var moduleProvider: banan.module.ModuleProvider` failed.",null));
	}
};
$hxClasses["jetgui.JetControllerContext"] = jetgui_JetControllerContext;
jetgui_JetControllerContext.__name__ = "jetgui.JetControllerContext";
jetgui_JetControllerContext.__super__ = jetgui_JetContext;
jetgui_JetControllerContext.prototype = $extend(jetgui_JetContext.prototype,{
	moduleProvider: null
	,controller: null
	,mountPoint: null
	,setMountPoint: function(mountPoint) {
		this.mountPoint = mountPoint;
	}
	,getElementRef: function(name) {
		return this.getElementRefImpl(name,jetgui_element_Element);
	}
	,getElementRefArray: function(name) {
		return this.getElementRefArrayImpl(name,jetgui_element_Element);
	}
	,forceUpdate: function() {
		if(this.get_isMounted()) {
			this.mountPoint.forceUpdate();
		}
	}
	,get_isMounted: function() {
		return this.mountPoint != null;
	}
	,get_root: function() {
		var tmp = this.mountPoint;
		if(tmp == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"JetControllerContext.hx:50","mountPoint" + " is null",null));
		}
		return tmp.mountPoint.element;
	}
	,__class__: jetgui_JetControllerContext
	,__properties__: {get_isMounted:"get_isMounted",get_root:"get_root"}
});
var jetgui_JetDataEdge = function(dataMap) {
	this.reset(dataMap);
};
$hxClasses["jetgui.JetDataEdge"] = jetgui_JetDataEdge;
jetgui_JetDataEdge.__name__ = "jetgui.JetDataEdge";
jetgui_JetDataEdge.prototype = {
	dataMap: null
	,changed: null
	,reset: function(dataMap) {
		this.changed = true;
		this.dataMap = dataMap;
	}
	,__class__: jetgui_JetDataEdge
};
var jetgui_JetGui = function(elementFactory) {
	this.currentMountPoint = null;
	this.elementTypeMap = new haxe_ds_StringMap();
	this.elementFactory = elementFactory;
	this.registerElementType("HBox",$bind(elementFactory,elementFactory.createHBox));
	this.registerElementType("VBox",$bind(elementFactory,elementFactory.createVBox));
	this.registerElementType("Box",$bind(elementFactory,elementFactory.createBox));
	this.registerElementType("Img",$bind(elementFactory,elementFactory.createImage));
	this.registerElementType("Text",$bind(elementFactory,elementFactory.createText));
	this.registerElementType("SkipReflow",$bind(elementFactory,elementFactory.createSkipReflow));
	this.registerElementType("HSlider",$bind(elementFactory,elementFactory.createHSlider));
	this.registerElementType("VSlider",$bind(elementFactory,elementFactory.createVSlider));
	this.registerElementType("Drag",$bind(elementFactory,elementFactory.createDrag));
	this.registerElementType("Scroll",$bind(elementFactory,elementFactory.createScroll));
	this.registerElementType("Arc",$bind(elementFactory,elementFactory.createArc));
};
$hxClasses["jetgui.JetGui"] = jetgui_JetGui;
jetgui_JetGui.__name__ = "jetgui.JetGui";
jetgui_JetGui.prototype = {
	elementTypeMap: null
	,elementFactory: null
	,currentMountPoint: null
	,mount: function(vDomNode) {
		var root = this.elementFactory.createRoot();
		root.setTag("root");
		return new jetgui_MountPoint(this,root,vDomNode,this.createInstance(vDomNode),[root]);
	}
	,dispose: function(mountPoint) {
		mountPoint.element.dispose(this.elementFactory);
		mountPoint.component.dispose(this.elementFactory);
	}
	,updateMountPoint: function(mountPoint,rootWidth,rootHeight,dt) {
		if(this.currentMountPoint != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"JetGui.hx:61","currentMountPoint == null",null));
		}
		if(mountPoint.jetgui != this) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"JetGui.hx:62","mountPoint.jetgui == this",null));
		}
		this.currentMountPoint = mountPoint;
		var component = mountPoint.component;
		var root = mountPoint.element;
		var vDomNode = mountPoint.vDomNode;
		while(true) {
			var a = component.sync(this,vDomNode,null,root,null);
			var lastElement = a[a.length - 1];
			while(root.getLastChild() != lastElement) {
				var it = root.getLastChild();
				if(it != null) {
					root.removeChild(it);
				}
			}
			root.validateStyle();
			root.reflow(rootWidth,rootHeight);
			this.updateElements(mountPoint,dt);
			dt = 0;
			if(!component.willSync()) {
				break;
			}
		}
		this.currentMountPoint = null;
	}
	,updateElements: function(mountPoint,dt) {
		var i = 0;
		var _g = 0;
		var _g1 = mountPoint.updatableElements;
		while(_g < _g1.length) {
			var element = _g1[_g];
			++_g;
			if(!element.isDisposed) {
				mountPoint.updatableElements[i++] = element;
				if(element.isOnViewTree) {
					element.update(dt);
				}
			}
		}
		mountPoint.updatableElements.length = i;
	}
	,registerElementType: function(elementName,createFun) {
		var k = elementName.toLowerCase();
		var _this = this.elementTypeMap;
		if(__map_reserved[k] != null) {
			_this.setReserved(k,createFun);
		} else {
			_this.h[k] = createFun;
		}
	}
	,createInstance: function(vDomNode) {
		var instance;
		switch(vDomNode.vDomType) {
		case "component":
			instance = new jetgui_ComponentProxy(vDomNode.asComponent().createComponent());
			break;
		case "element":
			var key = vDomNode.tag;
			var _this = this.elementTypeMap;
			var fun = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
			if(fun == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"JetGui.hx:114","fun != null" + ": " + "unknown tag ${vDomNode.tag}",null));
			}
			var element = fun();
			element.setTag(vDomNode.tag);
			if(js_Boot.__implements(element,jetgui_IUpdatebleElement)) {
				this.currentMountPoint.updatableElements.push(element);
			}
			instance = element;
			break;
		}
		return instance;
	}
	,sync: function(vDomNode,parentComponent,parentElement,prevElement) {
		var instance = this.getOrCreateInstance(vDomNode,parentComponent,0);
		instance.syncId = parentComponent.componentSyncId;
		return instance.sync(this,vDomNode,parentComponent,parentElement,prevElement);
	}
	,getOrCreateInstance: function(vDomNode,parentComponent,idPostfix) {
		var vDomId = vDomNode.vDomId;
		if(vDomNode.vDomKey != null) {
			vDomId += Std.string(vDomNode.vDomKey);
		}
		if(idPostfix != 0) {
			vDomId = vDomId + "__" + idPostfix;
		}
		var _this = parentComponent.childInstanceMap;
		var instance = __map_reserved[vDomId] != null ? _this.getReserved(vDomId) : _this.h[vDomId];
		if(instance == null) {
			instance = this.createInstance(vDomNode);
			var _this1 = parentComponent.childInstanceMap;
			if(__map_reserved[vDomId] != null) {
				_this1.setReserved(vDomId,instance);
			} else {
				_this1.h[vDomId] = instance;
			}
		} else if(instance.syncId == parentComponent.componentSyncId) {
			instance = this.getOrCreateInstance(vDomNode,parentComponent,idPostfix + 1);
		}
		return instance;
	}
	,__class__: jetgui_JetGui
};
var jetgui_JetGuiController = function(vComponent,ctx) {
	this.vComponent = vComponent;
	this.ctx = ctx;
	vComponent.ctx = ctx;
};
$hxClasses["jetgui.JetGuiController"] = jetgui_JetGuiController;
jetgui_JetGuiController.__name__ = "jetgui.JetGuiController";
jetgui_JetGuiController.__interfaces__ = [banan_es_IEntityReferrer];
jetgui_JetGuiController.prototype = {
	vComponent: null
	,ctx: null
	,getEntityByRef: function(ref) {
		var refElement = this.ctx.getElementRef(ref);
		if(refElement != null) {
			return refElement.entity;
		} else {
			return null;
		}
	}
	,setMountPoint: function(mountPoint) {
		this.ctx.setMountPoint(mountPoint);
	}
	,beforeJetGuiUpdate: function() {
	}
	,afterJetGuiUpdate: function() {
	}
	,afterMount: function() {
	}
	,beforeUmount: function() {
	}
	,__class__: jetgui_JetGuiController
};
var jetgui_JetDataPlugin = function() {
};
$hxClasses["jetgui.JetDataPlugin"] = jetgui_JetDataPlugin;
jetgui_JetDataPlugin.__name__ = "jetgui.JetDataPlugin";
jetgui_JetDataPlugin.prototype = {
	execute: function(entity,jetDataEdge) {
	}
	,__class__: jetgui_JetDataPlugin
};
var jetgui_JetGuiSystem = function(updatePriority,jetDataPlugins) {
	banan_module_Module.call(this,updatePriority);
	this.jetDataPlugins = jetDataPlugins;
};
$hxClasses["jetgui.JetGuiSystem"] = jetgui_JetGuiSystem;
jetgui_JetGuiSystem.__name__ = "jetgui.JetGuiSystem";
jetgui_JetGuiSystem.__super__ = banan_module_Module;
jetgui_JetGuiSystem.prototype = $extend(banan_module_Module.prototype,{
	elementFactory: null
	,jetGui: null
	,jetDataPlugins: null
	,mountPoints: null
	,fontModule: null
	,system: null
	,deviceProfileResolver: null
	,entityDelayedDisposer: null
	,timeProvider: null
	,resourceManager: null
	,render2Context: null
	,onInitialized: function() {
		this.elementFactory = new jetgui_ElementFactory(this.system,this.entityDelayedDisposer,this.fontModule,this.resourceManager,this.render2Context,this.deviceProfileResolver);
		this.jetGui = new jetgui_JetGui(this.elementFactory);
		this.mountPoints = [];
	}
	,update: function() {
		jetgui_data_Observable.updateAllValue(this.timeProvider.provider.appTime);
		var rootSizeX = this.deviceProfileResolver.screenSizeX;
		var rootSizeY = this.deviceProfileResolver.screenSizeY;
		var _g = 0;
		var _g1 = this.mountPoints;
		while(_g < _g1.length) _g1[_g++].update(rootSizeX,rootSizeY,this.timeProvider.provider.dt,true);
		this.validateJetData();
	}
	,createAndMount: function(controller,positionSource,parent) {
		return this.createAndMountExt(controller,positionSource,parent);
	}
	,createAndMountExt: function(controller,positionSource,parent) {
		if(this.findMountPoint(controller) != null) {
			var c = js_Boot.getClass(controller);
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"JetGuiSystem.hx:80","findMountPoint(controller) == null" + ": " + "Mount point already created",{ controller : c.__name__}));
		}
		var jetMountPoint = new jetgui_JetMountPoint(this.jetGui.mount(controller.vComponent),controller,positionSource,this);
		controller.setMountPoint(jetMountPoint);
		this.mount(jetMountPoint,parent);
		return jetMountPoint;
	}
	,umountAndDispose: function(controller) {
		var mountPoint = this.findMountPoint(controller);
		if(mountPoint == null) {
			var c = js_Boot.getClass(controller);
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"JetGuiSystem.hx:96","mountPoint != null" + ": " + "Mount point already disposed",{ controller : c.__name__}));
		}
		this.umount(mountPoint);
		this.dispose(mountPoint);
	}
	,mount: function(mountPoint,parent) {
		var rootNode = mountPoint.getRootNode();
		rootNode.isFlushDelayed = true;
		var entity = parent;
		var sThis = entity.__component__banan_display_NodeEdge;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"JetGuiSystem.hx:109","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
		}
		var _this = sThis;
		if(rootNode.parent != null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:443","child.parent.isNone",null));
		}
		rootNode.parent = _this;
		if(_this.lastChild != null) {
			rootNode.prev = _this.lastChild;
			_this.lastChild.next = rootNode;
		} else {
			_this.firstChild = rootNode;
		}
		_this.lastChild = rootNode;
		rootNode.onAdded();
		mountPoint.mountPoint.element.addedToViewTree();
		this.forceUpdate(mountPoint);
		this.mountPoints.push(mountPoint);
		this.forceUpdate(mountPoint);
	}
	,umount: function(mountPoint) {
		var entity = mountPoint.mountPoint.element.entity;
		var sThis = entity.__component__banan_display_NodeEdge;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"JetGuiSystem.hx:129","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
		}
		sThis.removeFromParent();
		mountPoint.mountPoint.element.removedFromViewTree();
		HxOverrides.remove(this.mountPoints,mountPoint);
	}
	,dispose: function(mountPoint) {
		this.jetGui.dispose(mountPoint.mountPoint);
	}
	,forceUpdate: function(mountPoint) {
		mountPoint.update(this.deviceProfileResolver.screenSizeX,this.deviceProfileResolver.screenSizeY,0.0,false);
	}
	,validateJetData: function() {
		var _gthis = this;
		var list = this.system.__systemLists.__list__Some_jetgui_JetDataEdge;
		var i = list.length;
		while(--i >= 0) {
			var jetDataEdge = list[i].__component__jetgui_JetDataEdge;
			if(jetDataEdge.changed) {
				jetDataEdge.changed = false;
				var _g = 0;
				var _g1 = _gthis.jetDataPlugins;
				while(_g < _g1.length) ++_g;
			}
		}
	}
	,findMountPoint: function(controller) {
		return Lambda.find(this.mountPoints,function(mnt) {
			return mnt.controller == controller;
		});
	}
	,makeModuleInfo: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["banan.font.FontModule"] != null) {
			_g.setReserved("banan.font.FontModule","fontModule");
		} else {
			_g.h["banan.font.FontModule"] = "fontModule";
		}
		if(__map_reserved["banan.es.EntitySystem"] != null) {
			_g.setReserved("banan.es.EntitySystem","system");
		} else {
			_g.h["banan.es.EntitySystem"] = "system";
		}
		if(__map_reserved["banan.deviceprofile.DeviceProfileResolver"] != null) {
			_g.setReserved("banan.deviceprofile.DeviceProfileResolver","deviceProfileResolver");
		} else {
			_g.h["banan.deviceprofile.DeviceProfileResolver"] = "deviceProfileResolver";
		}
		if(__map_reserved["banan.es.EntityDelayedDisposer"] != null) {
			_g.setReserved("banan.es.EntityDelayedDisposer","entityDelayedDisposer");
		} else {
			_g.h["banan.es.EntityDelayedDisposer"] = "entityDelayedDisposer";
		}
		if(__map_reserved["banan.time.TimeProviderModule"] != null) {
			_g.setReserved("banan.time.TimeProviderModule","timeProvider");
		} else {
			_g.h["banan.time.TimeProviderModule"] = "timeProvider";
		}
		if(__map_reserved["banan.resource.ResourceManager"] != null) {
			_g.setReserved("banan.resource.ResourceManager","resourceManager");
		} else {
			_g.h["banan.resource.ResourceManager"] = "resourceManager";
		}
		if(__map_reserved["banan.render.render2.Render2Context"] != null) {
			_g.setReserved("banan.render.render2.Render2Context","render2Context");
		} else {
			_g.h["banan.render.render2.Render2Context"] = "render2Context";
		}
		return new banan_module_ModuleInfo("jetgui.JetGuiSystem",[],[],_g,[]);
	}
	,__class__: jetgui_JetGuiSystem
});
var jetgui_JetHelper = function() { };
$hxClasses["jetgui.JetHelper"] = jetgui_JetHelper;
jetgui_JetHelper.__name__ = "jetgui.JetHelper";
jetgui_JetHelper.asInteractMode = function(interact) {
	switch(interact._hx_index) {
	case 0:
		return banan_display_EInteractMode.None;
	case 1:
		return banan_display_EInteractMode.Hover;
	case 2:
		return banan_display_EInteractMode.Touch;
	}
};
jetgui_JetHelper.asColor = function(color) {
	switch(color._hx_index) {
	case 0:
		return banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
	case 1:
		return banan_backend_kha_display__$Color_Color_$Impl_$.RED;
	case 2:
		return banan_backend_kha_display__$Color_Color_$Impl_$.GREEN;
	case 3:
		return kha__$Color_Color_$Impl_$.fromFloats(1,1,0,1);
	case 4:
		return banan_backend_kha_display__$Color_Color_$Impl_$.BLUE;
	case 5:
		return banan_backend_kha_display__$Color_Color_$Impl_$.BLACK;
	case 6:
		var _g7 = color.a;
		var a = _g7;
		if(_g7 == null) {
			a = 1;
		}
		return kha__$Color_Color_$Impl_$.fromFloats(color.r / 255,color.g / 255,color.b / 255,a);
	case 7:
		return kha__$Color_Color_$Impl_$.fromFloats(color.r / 255,color.g / 255,color.b / 255,1);
	case 8:
		var _g3 = color.color;
		var color1 = _g3;
		if((_g3 & -16777216) == 0) {
			color1 = _g3 | -16777216;
		}
		return kha__$Color_Color_$Impl_$._new(color1);
	}
};
jetgui_JetHelper.asColorTransform = function(colorMatrix) {
	if(colorMatrix == null) {
		return null;
	} else {
		switch(colorMatrix._hx_index) {
		case 0:
			return banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([colorMatrix.r0,colorMatrix.r1,colorMatrix.r2,colorMatrix.r3,colorMatrix.g0,colorMatrix.g1,colorMatrix.g2,colorMatrix.g3,colorMatrix.b0,colorMatrix.b1,colorMatrix.b2,colorMatrix.b3]);
		case 1:
			var _g14 = colorMatrix.val;
			return banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([_g14,_g14,_g14,0.0,_g14,_g14,_g14,0.0,_g14,_g14,_g14,0.0]);
		case 2:
			var _g13 = colorMatrix.val;
			return banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([1.0,0.0,0.0,_g13,0.0,1.0,0.0,_g13,0.0,0.0,1.0,_g13]);
		case 3:
			var _g18 = colorMatrix.opacity;
			var opacity = _g18;
			if(_g18 == null) {
				opacity = 1.0;
			}
			var invOpacity = 1.0 - opacity;
			return banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([invOpacity,0.0,0.0,colorMatrix.r * opacity,0.0,invOpacity,0.0,colorMatrix.g * opacity,0.0,0.0,invOpacity,colorMatrix.b * opacity]);
		case 4:
			var _g12 = colorMatrix.val;
			var colorFillOpacity = 0.8 * _g12;
			var glowValue = 0.5 * _g12;
			var i = 1.0 - colorFillOpacity;
			return banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([i,0.0,0.0,colorFillOpacity + i * glowValue,0.0,i,0.0,colorFillOpacity + i * glowValue,0.0,0.0,i,colorFillOpacity + i * glowValue]);
		}
	}
};
jetgui_JetHelper.asTextVAlign = function(vAlign) {
	switch(vAlign._hx_index) {
	case 0:
		return banan_display_TextVAlign.Top;
	case 1:
		return banan_display_TextVAlign.Center;
	case 2:
		return banan_display_TextVAlign.Bottom;
	}
};
jetgui_JetHelper.asTextHAlign = function(align) {
	switch(align._hx_index) {
	case 0:
		return banan_display_TextHAlign.Left;
	case 1:
		return banan_display_TextHAlign.Center;
	case 2:
		return banan_display_TextHAlign.Right;
	}
};
jetgui_JetHelper.element = function(node) {
	var sThis = node._entity;
	if(sThis == null) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
	}
	return sThis.__component__jetgui_element_Element;
};
jetgui_JetHelper.resetAnimation = function(element) {
	element.set_extraOffsetX(0);
	element.set_extraOffsetY(0);
	var entity = element.entity;
	var sThis = entity.__component__banan_display_NodeEdge;
	if(sThis == null) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(120,"JetHelper.hx:102","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
	}
	var node = sThis;
	banan_animation_timeline_JetOpacityCurve.removeModificatorFromNode(node);
	if(node.scaleX != 1) {
		node.scaleX = 1;
		if(node.globalTransformId != -1) {
			node.invalidateTransform();
		}
	}
	if(node.scaleY != 1) {
		node.scaleY = 1;
		if(node.globalTransformId != -1) {
			node.invalidateTransform();
		}
	}
};
var jetgui_JetMountPoint = function(mountPoint,controller,positionSource,jetGuiSystem) {
	this.mountPoint = mountPoint;
	this.controller = controller;
	this.positionSource = positionSource;
	this.jetGuiSystem = jetGuiSystem;
	this.updateEnabled = true;
};
$hxClasses["jetgui.JetMountPoint"] = jetgui_JetMountPoint;
jetgui_JetMountPoint.__name__ = "jetgui.JetMountPoint";
jetgui_JetMountPoint.prototype = {
	mountPoint: null
	,controller: null
	,positionSource: null
	,get_isZeroSize: function() {
		return this.positionSource.isZeroSize;
	}
	,jetGuiSystem: null
	,updateEnabled: null
	,enable: function() {
		var entity = this.mountPoint.element.entity;
		var sThis = entity.__component__banan_display_NodeEdge;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"JetMountPoint.hx:31","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
		}
		sThis.isChildrenTouchable.unlock("mountpoint_disable");
		this.updateEnabled = true;
	}
	,disable: function() {
		var entity = this.mountPoint.element.entity;
		var sThis = entity.__component__banan_display_NodeEdge;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"JetMountPoint.hx:39","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
		}
		sThis.isChildrenTouchable.lock("mountpoint_disable",false,false);
		this.updateEnabled = false;
	}
	,update: function(rootSizeX,rootSizeY,dt,isUpdateController) {
		if(this.updateEnabled) {
			this.mountPoint.jetgui.updateMountPoint(this.mountPoint,this.positionSource.isZeroSize ? 0.0 : rootSizeX,this.positionSource.isZeroSize ? 0.0 : rootSizeY,dt);
			this.validatePosition();
		}
	}
	,umountAndDispose: function() {
		this.jetGuiSystem.umountAndDispose(this.controller);
	}
	,forceUpdate: function() {
		this.jetGuiSystem.forceUpdate(this);
	}
	,validatePosition: function() {
		var _this = this.getRootNode();
		var _this1 = this.positionSource;
		var x = _this1.positionX;
		var y = _this1.positionY;
		if(_this.x != x) {
			_this.x = x;
			if(_this.globalTransformId != -1) {
				_this.invalidateTransform();
			}
		}
		if(_this.y != y) {
			_this.y = y;
			if(_this.globalTransformId != -1) {
				_this.invalidateTransform();
			}
		}
	}
	,getRoot: function() {
		return this.mountPoint.element.entity;
	}
	,getRootNode: function() {
		var entity = this.getRoot();
		var sThis = entity.__component__banan_display_NodeEdge;
		if(sThis == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"JetMountPoint.hx:85","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
		}
		return sThis;
	}
	,__class__: jetgui_JetMountPoint
	,__properties__: {get_isZeroSize:"get_isZeroSize"}
};
var jetgui_JetTooltipEdge = function(configs) {
	this.reset(configs);
};
$hxClasses["jetgui.JetTooltipEdge"] = jetgui_JetTooltipEdge;
jetgui_JetTooltipEdge.__name__ = "jetgui.JetTooltipEdge";
jetgui_JetTooltipEdge.prototype = {
	needSync: null
	,configs: null
	,reset: function(configs) {
		this.configs = configs;
		this.needSync = true;
	}
	,dropNeedSyncFlag: function() {
		this.needSync = false;
	}
	,getConfig: function() {
		return this.configs[0];
	}
	,__class__: jetgui_JetTooltipEdge
};
var jetgui_MountPoint = function(jetgui1,element,vDomNode,component,updatableElements) {
	this.jetgui = jetgui1;
	this.element = element;
	this.vDomNode = vDomNode;
	this.component = component;
	this.updatableElements = updatableElements;
};
$hxClasses["jetgui.MountPoint"] = jetgui_MountPoint;
jetgui_MountPoint.__name__ = "jetgui.MountPoint";
jetgui_MountPoint.prototype = {
	jetgui: null
	,element: null
	,vDomNode: null
	,component: null
	,updatableElements: null
	,__class__: jetgui_MountPoint
};
var jetgui_PositionSource = function(positionX,positionY) {
	if(positionY == null) {
		positionY = 0.0;
	}
	if(positionX == null) {
		positionX = 0.0;
	}
	this.isZeroSize = false;
	this.positionX = positionX;
	this.positionY = positionY;
};
$hxClasses["jetgui.PositionSource"] = jetgui_PositionSource;
jetgui_PositionSource.__name__ = "jetgui.PositionSource";
jetgui_PositionSource.prototype = {
	isZeroSize: null
	,positionX: null
	,positionY: null
	,validatePosition: function() {
	}
	,__class__: jetgui_PositionSource
};
var jetgui_data_IJetPaginable = function() { };
$hxClasses["jetgui.data.IJetPaginable"] = jetgui_data_IJetPaginable;
jetgui_data_IJetPaginable.__name__ = "jetgui.data.IJetPaginable";
jetgui_data_IJetPaginable.__isInterface__ = true;
jetgui_data_IJetPaginable.prototype = {
	next: null
	,prev: null
	,toFirst: null
	,toLast: null
	,atFirst: null
	,atLast: null
	,gotoPage: null
	,getPageCount: null
	,getCurrentPage: null
	,__class__: jetgui_data_IJetPaginable
};
var jetgui_data__$JetArray_JetArray_$Impl_$ = {};
$hxClasses["jetgui.data._JetArray.JetArray_Impl_"] = jetgui_data__$JetArray_JetArray_$Impl_$;
jetgui_data__$JetArray_JetArray_$Impl_$.__name__ = "jetgui.data._JetArray.JetArray_Impl_";
jetgui_data__$JetArray_JetArray_$Impl_$._new = function() {
	return new jetgui_data__$JetArray_ArrayObservable(null);
};
jetgui_data__$JetArray_JetArray_$Impl_$.fromArray = function(array) {
	return new jetgui_data__$JetArray_ArrayObservable(array);
};
jetgui_data__$JetArray_JetArray_$Impl_$.fromConstArray = function(array) {
	return new jetgui_data__$JetArray_ArrayObservable(array);
};
jetgui_data__$JetArray_JetArray_$Impl_$.read = function(this1,idx) {
	return this1.read(idx);
};
jetgui_data__$JetArray_JetArray_$Impl_$.write = function(this1,idx,value) {
	return this1.write(idx,value);
};
var jetgui_data_ObservableContext = function() {
	this.globalObservables = new haxe_ds_ObjectMap();
	this.allInvalidValue = new haxe_ds_ObjectMap();
	this.observerStack = [];
};
$hxClasses["jetgui.data.ObservableContext"] = jetgui_data_ObservableContext;
jetgui_data_ObservableContext.__name__ = "jetgui.data.ObservableContext";
jetgui_data_ObservableContext.prototype = {
	time: null
	,currentObserver: null
	,observerStack: null
	,allInvalidValue: null
	,globalObservables: null
	,updateAllValue: function() {
		var value = this.allInvalidValue.keys();
		while(value.hasNext()) value.next().validate();
	}
	,addInvalidValue: function(value) {
		this.allInvalidValue.set(value,true);
	}
	,removeInvalidValue: function(value) {
		this.allInvalidValue.remove(value);
	}
	,pushObserver: function(observer) {
		if(this.currentObserver != null) {
			this.observerStack.push(this.currentObserver);
		}
		this.currentObserver = observer;
	}
	,popObserver: function() {
		this.currentObserver = this.observerStack.pop();
	}
	,notifyValueAccessed: function(observable) {
		this.globalObservables.set(observable,true);
		if(this.currentObserver != null) {
			observable.subscribe(this.currentObserver);
		}
	}
	,clear: function() {
		this.observerStack.length = 0;
		this.currentObserver = null;
		this.allInvalidValue.h = { __keys__ : { }};
		var iterator = this.globalObservables.keys();
		while(iterator.hasNext()) {
			var observer = iterator.next().observers.keys();
			while(observer.hasNext()) {
				var observer1 = observer.next();
				observer1.unsubscribeFromAll();
				observer1.onObservableChanged();
			}
		}
		this.globalObservables.h = { __keys__ : { }};
	}
	,__class__: jetgui_data_ObservableContext
};
var jetgui_data_Observable = function() {
	this.observers = new haxe_ds_ObjectMap();
};
$hxClasses["jetgui.data.Observable"] = jetgui_data_Observable;
jetgui_data_Observable.__name__ = "jetgui.data.Observable";
jetgui_data_Observable.replaceContext = function(o) {
	jetgui_data_Observable.context = o.context;
};
jetgui_data_Observable.updateAllValue = function(time) {
	jetgui_data_Observable.context.time = time;
	jetgui_data_Observable.context.updateAllValue();
};
jetgui_data_Observable.getTime = function() {
	return jetgui_data_Observable.context.time;
};
jetgui_data_Observable.pushObserver = function(observer) {
	jetgui_data_Observable.context.pushObserver(observer);
};
jetgui_data_Observable.popObserver = function() {
	jetgui_data_Observable.context.popObserver();
};
jetgui_data_Observable.clearContext = function() {
	jetgui_data_Observable.context.clear();
};
jetgui_data_Observable.debugCountObservables = function() {
	var it = jetgui_data_Observable.context.globalObservables.keys();
	var first = 0;
	while(it.hasNext()) {
		it.next();
		var count = first;
		++count;
		first = count;
	}
	return first;
};
jetgui_data_Observable.prototype = {
	observers: null
	,subscribe: function(observer) {
		this.observers.set(observer,true);
		observer.onSubscribed(this);
	}
	,unsubscribe: function(observer) {
		this.observers.remove(observer);
		observer.onUnsubscribed(this);
	}
	,unsubscribeAll: function() {
		var _gthis = this;
		var iterator = this.observers.keys();
		while(iterator.hasNext()) _gthis.unsubscribe(iterator.next());
	}
	,notifyValueChanged: function() {
		var observer = this.observers.keys();
		while(observer.hasNext()) {
			var observer1 = observer.next();
			observer1.unsubscribeFromAll();
			observer1.onObservableChanged();
		}
	}
	,notifyValueAccessed: function() {
		jetgui_data_Observable.context.notifyValueAccessed(this);
	}
	,__class__: jetgui_data_Observable
};
var jetgui_data__$JetArray_ArrayObservable = function(array) {
	jetgui_data_Observable.call(this);
	this.array = array != null ? array.slice() : [];
	var observer = this.observers.keys();
	while(observer.hasNext()) {
		var observer1 = observer.next();
		observer1.unsubscribeFromAll();
		observer1.onObservableChanged();
	}
};
$hxClasses["jetgui.data._JetArray.ArrayObservable"] = jetgui_data__$JetArray_ArrayObservable;
jetgui_data__$JetArray_ArrayObservable.__name__ = "jetgui.data._JetArray.ArrayObservable";
jetgui_data__$JetArray_ArrayObservable.__super__ = jetgui_data_Observable;
jetgui_data__$JetArray_ArrayObservable.prototype = $extend(jetgui_data_Observable.prototype,{
	array: null
	,get_length: function() {
		jetgui_data_Observable.context.notifyValueAccessed(this);
		return this.array.length;
	}
	,read: function(idx) {
		jetgui_data_Observable.context.notifyValueAccessed(this);
		var tmp;
		if(idx >= 0) {
			jetgui_data_Observable.context.notifyValueAccessed(this);
			tmp = idx < this.array.length;
		} else {
			tmp = false;
		}
		if(tmp) {
			return this.array[idx];
		} else {
			return null;
		}
	}
	,write: function(idx,value) {
		if(this.array[idx] != value || idx >= this.array.length) {
			this.array[idx] = value;
			var observer = this.observers.keys();
			while(observer.hasNext()) {
				var observer1 = observer.next();
				observer1.unsubscribeFromAll();
				observer1.onObservableChanged();
			}
		}
		return value;
	}
	,push: function(value) {
		var newLength = this.array.push(value);
		var observer = this.observers.keys();
		while(observer.hasNext()) {
			var observer1 = observer.next();
			observer1.unsubscribeFromAll();
			observer1.onObservableChanged();
		}
		return newLength;
	}
	,pop: function() {
		var length = this.array.length;
		var value = this.array.pop();
		if(length > 0) {
			var observer = this.observers.keys();
			while(observer.hasNext()) {
				var observer1 = observer.next();
				observer1.unsubscribeFromAll();
				observer1.onObservableChanged();
			}
		}
		return value;
	}
	,unshift: function(value) {
		this.array.unshift(value);
		var observer = this.observers.keys();
		while(observer.hasNext()) {
			var observer1 = observer.next();
			observer1.unsubscribeFromAll();
			observer1.onObservableChanged();
		}
	}
	,shift: function() {
		var length = this.array.length;
		var value = this.array.shift();
		if(length > 0) {
			var observer = this.observers.keys();
			while(observer.hasNext()) {
				var observer1 = observer.next();
				observer1.unsubscribeFromAll();
				observer1.onObservableChanged();
			}
		}
		return value;
	}
	,remove: function(value) {
		if(HxOverrides.remove(this.array,value)) {
			var observer = this.observers.keys();
			while(observer.hasNext()) {
				var observer1 = observer.next();
				observer1.unsubscribeFromAll();
				observer1.onObservableChanged();
			}
			return true;
		} else {
			return false;
		}
	}
	,indexOf: function(value) {
		jetgui_data_Observable.context.notifyValueAccessed(this);
		return this.array.indexOf(value);
	}
	,resize: function(length) {
		if(length != this.array.length) {
			this.array.length = length;
			var observer = this.observers.keys();
			while(observer.hasNext()) {
				var observer1 = observer.next();
				observer1.unsubscribeFromAll();
				observer1.onObservableChanged();
			}
		}
	}
	,sort: function(f) {
		this.array.sort(f);
		var observer = this.observers.keys();
		while(observer.hasNext()) {
			var observer1 = observer.next();
			observer1.unsubscribeFromAll();
			observer1.onObservableChanged();
		}
	}
	,iterator: function() {
		jetgui_data_Observable.context.notifyValueAccessed(this);
		return HxOverrides.iter(this.array);
	}
	,toString: function() {
		return "[\n\t" + this.array.join(",\n\t") + "\n]";
	}
	,__class__: jetgui_data__$JetArray_ArrayObservable
	,__properties__: {get_length:"get_length"}
});
var jetgui_data_JetPaginatorBase = function(params) {
	var visibleCount = params.visibleCount == null ? 0 : params.visibleCount;
	var isPageMode = params.isPageMode == null ? true : params.isPageMode;
	var isAllVisible = params.visibleCount == null;
	this.data = jetgui_data__$JetArray_JetArray_$Impl_$.fromArray([]);
	this.vPosition = new jetgui_data_Value(0);
	this.vVisibleCount = new jetgui_data_Value(visibleCount);
	this.vCount = new jetgui_data_Value(0);
	this.isPageMode = isPageMode;
	this.isAllVisible = isAllVisible;
	this.sync();
};
$hxClasses["jetgui.data.JetPaginatorBase"] = jetgui_data_JetPaginatorBase;
jetgui_data_JetPaginatorBase.__name__ = "jetgui.data.JetPaginatorBase";
jetgui_data_JetPaginatorBase.__interfaces__ = [jetgui_data_IJetPaginable];
jetgui_data_JetPaginatorBase.prototype = {
	data: null
	,vPosition: null
	,vVisibleCount: null
	,vCount: null
	,isPageMode: null
	,isAllVisible: null
	,get_position: function() {
		return this.vPosition.get();
	}
	,set_position: function(value) {
		if(this.vPosition.get() != value) {
			this.vPosition.set(value);
			this.sync();
		}
		return value;
	}
	,get_visibleCount: function() {
		return this.vVisibleCount.get();
	}
	,set_visibleCount: function(value) {
		if(this.vVisibleCount.get() != value) {
			this.vVisibleCount.set(value);
			this.sync();
		}
		return value;
	}
	,get_count: function() {
		return this.vCount.get();
	}
	,get_pagesBefore: function() {
		return Math.ceil(this.vPosition.get() / this.getPositionInc());
	}
	,get_pagesAfter: function() {
		return Math.ceil(((this.isPageMode ? this.vVisibleCount.get() * ((this.vVisibleCount.get() != 0 && this.vCount.get() != 0 ? Math.ceil(this.vCount.get() / this.vVisibleCount.get()) : 1) - 1) : this.vCount.get() - this.vVisibleCount.get()) - this.vPosition.get()) / this.getPositionInc());
	}
	,next: function(itemCount) {
		var value = this.vPosition.get() + (itemCount == null ? this.getPositionInc() : itemCount);
		if(this.vPosition.get() != value) {
			this.vPosition.set(value);
			this.sync();
		}
	}
	,prev: function(itemCount) {
		var value = this.vPosition.get() - (itemCount == null ? this.getPositionInc() : itemCount);
		if(this.vPosition.get() != value) {
			this.vPosition.set(value);
			this.sync();
		}
	}
	,toFirst: function() {
		if(this.vPosition.get() != 0) {
			this.vPosition.set(0);
			this.sync();
		}
	}
	,toLast: function() {
		var value = this.isPageMode ? this.vVisibleCount.get() * ((this.vVisibleCount.get() != 0 && this.vCount.get() != 0 ? Math.ceil(this.vCount.get() / this.vVisibleCount.get()) : 1) - 1) : this.vCount.get() - this.vVisibleCount.get();
		if(this.vPosition.get() != value) {
			this.vPosition.set(value);
			this.sync();
		}
	}
	,atFirst: function() {
		return this.vPosition.get() <= 0;
	}
	,atLast: function() {
		return this.vPosition.get() >= (this.isPageMode ? this.vVisibleCount.get() * ((this.vVisibleCount.get() != 0 && this.vCount.get() != 0 ? Math.ceil(this.vCount.get() / this.vVisibleCount.get()) : 1) - 1) : this.vCount.get() - this.vVisibleCount.get());
	}
	,sync: function() {
		this.vCount.set(this.getCount());
		if(this.isAllVisible) {
			this.vVisibleCount.set(this.vCount.get());
		}
		this.vPosition.get();
		var trimmedPosition = Math.floor(Math.max(0,Math.min(this.isPageMode ? this.vVisibleCount.get() * ((this.vVisibleCount.get() != 0 && this.vCount.get() != 0 ? Math.ceil(this.vCount.get() / this.vVisibleCount.get()) : 1) - 1) : this.vCount.get() - this.vVisibleCount.get(),this.vPosition.get())));
		this.vPosition.set(trimmedPosition);
		this.data.resize(this.vVisibleCount.get());
		var _g = 0;
		var _g1 = this.vVisibleCount.get();
		while(_g < _g1) {
			var i = _g++;
			this.syncImpl(this.vPosition.get() + i,i);
		}
	}
	,gotoPage: function(page) {
		var value = this.isPageMode ? this.vVisibleCount.get() * (page - 1) : page - 1;
		if(this.vPosition.get() != value) {
			this.vPosition.set(value);
			this.sync();
		}
	}
	,getCount: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"JetPaginatorBase.hx:131","",null));
	}
	,gotoPositionPage: function(pos) {
		while(pos >= 0 && pos < this.vPosition.get()) this.prev();
		while(pos >= this.vPosition.get() + this.vVisibleCount.get() && pos < this.vCount.get()) this.next();
	}
	,getPositionInc: function() {
		if(this.isPageMode) {
			return this.vVisibleCount.get();
		} else {
			return 1;
		}
	}
	,getPageCount: function() {
		if(this.vVisibleCount.get() != 0 && this.vCount.get() != 0) {
			return Math.ceil(this.vCount.get() / this.vVisibleCount.get());
		} else {
			return 1;
		}
	}
	,getCurrentPage: function() {
		return Math.ceil((this.vPosition.get() + 1) / this.vVisibleCount.get());
	}
	,getPageForPosition: function(position) {
		return Math.ceil((position + 1) / this.vVisibleCount.get());
	}
	,getPositionForPage: function(page) {
		if(this.isPageMode) {
			return this.vVisibleCount.get() * (page - 1);
		} else {
			return page - 1;
		}
	}
	,getMaxPosition: function() {
		if(this.isPageMode) {
			return this.vVisibleCount.get() * ((this.vVisibleCount.get() != 0 && this.vCount.get() != 0 ? Math.ceil(this.vCount.get() / this.vVisibleCount.get()) : 1) - 1);
		} else {
			return this.vCount.get() - this.vVisibleCount.get();
		}
	}
	,syncImpl: function(idxFrom,idxTo) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"JetPaginatorBase.hx:172","",null));
	}
	,__class__: jetgui_data_JetPaginatorBase
	,__properties__: {get_pagesAfter:"get_pagesAfter",get_pagesBefore:"get_pagesBefore",get_count:"get_count",set_visibleCount:"set_visibleCount",get_visibleCount:"get_visibleCount",set_position:"set_position",get_position:"get_position"}
};
var jetgui_data__$JetSliderBase_SliderDataIterator = function(data,firstVisiblePercent,lastVisiblePercent) {
	this.data = data;
	this.firstVisiblePercent = firstVisiblePercent;
	this.lastVisiblePercent = lastVisiblePercent;
	this.i = 0;
};
$hxClasses["jetgui.data._JetSliderBase.SliderDataIterator"] = jetgui_data__$JetSliderBase_SliderDataIterator;
jetgui_data__$JetSliderBase_SliderDataIterator.__name__ = "jetgui.data._JetSliderBase.SliderDataIterator";
jetgui_data__$JetSliderBase_SliderDataIterator.prototype = {
	data: null
	,firstVisiblePercent: null
	,lastVisiblePercent: null
	,i: null
	,hasNext: function() {
		var tmp = this.i;
		var _this = this.data;
		jetgui_data_Observable.context.notifyValueAccessed(_this);
		return tmp < _this.array.length;
	}
	,next: function() {
		var visiblePercent = 1;
		if(this.i == 0) {
			visiblePercent -= 1 - this.firstVisiblePercent;
		}
		var tmp = this.i;
		var _this = this.data;
		jetgui_data_Observable.context.notifyValueAccessed(_this);
		if(tmp == _this.array.length - 1) {
			visiblePercent -= 1 - this.lastVisiblePercent;
		}
		return { key : this.data.read(this.i++), value : visiblePercent};
	}
	,__class__: jetgui_data__$JetSliderBase_SliderDataIterator
};
var jetgui_data_JetSliderBase = function() {
	this.gotoTask = null;
	this.iTo = -1;
	this.iFrom = -1;
	this.lastVisiblePercentValue = new jetgui_data_Value(0);
	this.firstVisiblePercentValue = new jetgui_data_Value(0);
	this.drawOffset = 0;
	this.data = new jetgui_data__$JetArray_ArrayObservable(null);
};
$hxClasses["jetgui.data.JetSliderBase"] = jetgui_data_JetSliderBase;
jetgui_data_JetSliderBase.__name__ = "jetgui.data.JetSliderBase";
jetgui_data_JetSliderBase.prototype = {
	data: null
	,visibleFrom: null
	,visibleTo: null
	,drawOffset: null
	,firstVisiblePercentValue: null
	,get_firstVisiblePercent: function() {
		return this.firstVisiblePercentValue.get();
	}
	,lastVisiblePercentValue: null
	,get_lastVisiblePercent: function() {
		return this.lastVisiblePercentValue.get();
	}
	,iFrom: null
	,iTo: null
	,gotoTask: null
	,getStartIndex: function() {
		if(this.drawOffset < 0) {
			return this.iFrom + 1;
		} else {
			return this.iFrom;
		}
	}
	,goto: function(index,align,isAnimated) {
		if(isAnimated == null) {
			isAnimated = false;
		}
		if(align == null) {
			align = 0.0;
		}
		this.gotoTask = { index : index, align : align, isAnimated : isAnimated};
	}
	,setVisiblePart: function(from,to) {
		this.visibleFrom = from;
		this.visibleTo = to;
		var count = this.getCount();
		var a = Math.floor(from);
		var iFrom = a > 0 ? a : 0;
		var a1 = Math.ceil(to);
		var iTo = a1 < count ? a1 : count;
		if(this.iFrom != iFrom || this.iTo != iTo) {
			this.iFrom = iFrom;
			this.iTo = iTo;
			this.sync();
		}
		this.drawOffset = iFrom - from;
		var t = Math.pow(10,2);
		var a2 = iFrom + 1 - from;
		this.firstVisiblePercentValue.set(Math.round((a2 < 1 ? a2 : 1) * t) / t);
		var t1 = Math.pow(10,2);
		var a3 = to - iTo + 1;
		this.lastVisiblePercentValue.set(Math.round((a3 < 1 ? a3 : 1) * t1) / t1);
	}
	,sync: function() {
		var i = 0;
		var count = this.getCount();
		if(this.iTo > count) {
			this.iTo = count;
		}
		if(this.iTo > this.iFrom) {
			var _g = this.iFrom;
			var _g1 = this.iTo;
			while(_g < _g1) this.syncImpl(_g++,i++);
		}
		this.data.resize(i);
	}
	,getCount: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"JetSliderBase.hx:134","",null));
	}
	,syncImpl: function(idxFrom,idxTo) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"JetSliderBase.hx:138","",null));
	}
	,keyValueIterator: function() {
		return new jetgui_data__$JetSliderBase_SliderDataIterator(this.data,this.firstVisiblePercentValue.get(),this.lastVisiblePercentValue.get());
	}
	,__class__: jetgui_data_JetSliderBase
	,__properties__: {get_lastVisiblePercent:"get_lastVisiblePercent",get_firstVisiblePercent:"get_firstVisiblePercent"}
};
var jetgui_data_Value = function(v) {
	this.observables = new haxe_ds_ObjectMap();
	this.compute = null;
	this.isInvalid = false;
	this.value = null;
	jetgui_data_Observable.call(this);
	this.set(v);
};
$hxClasses["jetgui.data.Value"] = jetgui_data_Value;
jetgui_data_Value.__name__ = "jetgui.data.Value";
jetgui_data_Value.__interfaces__ = [jetgui_data_IObserver];
jetgui_data_Value.__super__ = jetgui_data_Observable;
jetgui_data_Value.prototype = $extend(jetgui_data_Observable.prototype,{
	value: null
	,isInvalid: null
	,compute: null
	,observables: null
	,get: function() {
		if(this.isInvalid) {
			this.validate();
		}
		jetgui_data_Observable.context.notifyValueAccessed(this);
		return this.value;
	}
	,set: function(newValue) {
		if(this.compute != null) {
			this.unsubscribeFromAll();
			this.compute = null;
			this.isInvalid = false;
			jetgui_data_Observable.context.removeInvalidValue(this);
		}
		this.setValue(newValue);
	}
	,setCompute: function(fn) {
		this.compute = fn;
		this.invalidate();
	}
	,onObservableChanged: function() {
		this.invalidate();
	}
	,onSubscribed: function(o) {
		this.observables.set(o,true);
	}
	,onUnsubscribed: function(o) {
		this.observables.remove(o);
	}
	,unsubscribeFromAll: function() {
		var _gthis = this;
		var iterator = this.observables.keys();
		while(iterator.hasNext()) iterator.next().unsubscribe(_gthis);
	}
	,invalidate: function() {
		this.unsubscribeFromAll();
		if(!this.isInvalid) {
			this.isInvalid = true;
			jetgui_data_Observable.context.addInvalidValue(this);
			var observer = this.observers.keys();
			while(observer.hasNext()) {
				var observer1 = observer.next();
				observer1.unsubscribeFromAll();
				observer1.onObservableChanged();
			}
		}
	}
	,validate: function() {
		if(this.compute != null) {
			this.computeValue();
		}
		this.isInvalid = false;
		jetgui_data_Observable.context.removeInvalidValue(this);
	}
	,computeValue: function() {
		jetgui_data_Observable.pushObserver(this);
		var v = this.compute();
		jetgui_data_Observable.popObserver();
		this.setValue(v);
	}
	,setValue: function(newValue) {
		if(this.value != newValue) {
			this.value = newValue;
			var observer = this.observers.keys();
			while(observer.hasNext()) {
				var observer1 = observer.next();
				observer1.unsubscribeFromAll();
				observer1.onObservableChanged();
			}
		}
	}
	,__class__: jetgui_data_Value
});
var jetgui_element_ElementBase = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	this.lastOutline = null;
	this.extraOffsetY = 0;
	this.extraOffsetX = 0;
	this.isOnViewTree = false;
	this.resourceManager = resourceManager;
	this.render2Context = render2Context;
	this.deviceProfileResolver = deviceProfileResolver;
	this.entity = entitySystem.createEntity("");
	this.node = this.entity.__add__banan_display_NodeEdge(new banan_display_NodeEdge());
	this.entity.__add__jetgui_element_Element(this);
};
$hxClasses["jetgui.element.ElementBase"] = jetgui_element_ElementBase;
jetgui_element_ElementBase.__name__ = "jetgui.element.ElementBase";
jetgui_element_ElementBase.getPivotPx = function(pivot,size) {
	var v;
	if(pivot == null) {
		v = 0;
	} else {
		switch(pivot._hx_index) {
		case 0:
			v = pivot.value;
			break;
		case 1:
			v = size * pivot.value / 100;
			break;
		case 3:
			v = 0;
			break;
		case 2:case 4:
			v = 0;
			break;
		}
	}
	return Math.floor(v);
};
jetgui_element_ElementBase.__super__ = jetgui_vdom_VDomInstance;
jetgui_element_ElementBase.prototype = $extend(jetgui_vdom_VDomInstance.prototype,{
	entity: null
	,isOnViewTree: null
	,extraOffsetX: null
	,extraOffsetY: null
	,resourceManager: null
	,render2Context: null
	,deviceProfileResolver: null
	,node: null
	,mainDisplay: null
	,fillColorDisplay: null
	,fillImageDisplay: null
	,display: null
	,pivotX: null
	,pivotY: null
	,lastOutline: null
	,toStringChanged: function() {
		this.entity.name = this.toString();
	}
	,toString: function() {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,addedToParent: function() {
	}
	,removedFromParent: function() {
	}
	,addedToViewTree: function() {
		this.isOnViewTree = true;
	}
	,removedFromViewTree: function() {
		this.isOnViewTree = false;
	}
	,getParent: function() {
		var parentNode = this.node.parent;
		if(parentNode != null) {
			return jetgui_JetHelper.element(parentNode);
		} else {
			return null;
		}
	}
	,getNextSibling: function() {
		var nextNode = this.node.next;
		while(nextNode != null && jetgui_JetHelper.element(nextNode) == null) nextNode = nextNode.next;
		if(nextNode != null) {
			return jetgui_JetHelper.element(nextNode);
		} else {
			return null;
		}
	}
	,getPrevSibling: function() {
		var prevNode = this.node.prev;
		while(prevNode != null && jetgui_JetHelper.element(prevNode) == null) prevNode = prevNode.prev;
		if(prevNode != null) {
			return jetgui_JetHelper.element(prevNode);
		} else {
			return null;
		}
	}
	,addChild: function(element) {
		if(!(element.node.parent == this.node && element.node.next == null)) {
			this.doAddChildAfter(element,this.getLastChild());
		}
	}
	,syncTooltips: function(tooltipList) {
		var jetTooltipEdge = this.entity.__component__jetgui_JetTooltipEdge;
		if(tooltipList.length == 0) {
			if(jetTooltipEdge != null) {
				this.entity.__dispose__jetgui_JetTooltipEdge();
			}
		} else if(jetTooltipEdge == null) {
			jetTooltipEdge = this.entity.__add__jetgui_JetTooltipEdge(new jetgui_JetTooltipEdge(tooltipList));
		} else {
			jetTooltipEdge.reset(tooltipList);
		}
	}
	,syncElementData: function(dataMap) {
		var dataEdge = this.entity.__component__jetgui_JetDataEdge;
		if(dataMap == null && dataEdge != null) {
			this.entity.__dispose__jetgui_JetDataEdge();
		} else if(dataEdge == null) {
			this.entity.__add__jetgui_JetDataEdge(new jetgui_JetDataEdge(dataMap));
		} else {
			dataEdge.reset(dataMap);
		}
	}
	,addChildAfter: function(element,prevElement) {
		if(!(prevElement == null || prevElement.isChildOf(this))) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ElementBase.hx:185","prevElement == null OR prevElement.isChildOf(this)",{ "prevElement" : Std.string(prevElement)}));
		}
		if(!this.isChildAfter(element,prevElement)) {
			this.doAddChildAfter(element,prevElement);
		}
	}
	,addChildrenAfter: function(row,target) {
		var _gthis = this;
		if(!(target == null || target.isChildOf(this))) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ElementBase.hx:194","target == null OR target.isChildOf(this)",null));
		}
		var it = row[0];
		if(it != null) {
			if(!_gthis.isChildAfter(it,target)) {
				var prev = target;
				var _g = 0;
				while(_g < row.length) {
					var element = row[_g];
					++_g;
					_gthis.doAddChildAfter(element,prev);
					prev = element;
				}
			}
		}
	}
	,getLastChild: function() {
		var lastChild = this.node.lastChild;
		while(lastChild != null && jetgui_JetHelper.element(lastChild) == null) lastChild = lastChild.prev;
		if(lastChild != null) {
			return jetgui_JetHelper.element(lastChild);
		} else {
			return null;
		}
	}
	,iterateChildren: function(cb,isReverse) {
		if(isReverse == null) {
			isReverse = false;
		}
		var childNode = isReverse ? this.node.lastChild : this.node.firstChild;
		while(childNode != null) {
			var element = jetgui_JetHelper.element(childNode);
			if(element != null) {
				cb(element);
			}
			childNode = isReverse ? childNode.prev : childNode.next;
		}
	}
	,isChildOf: function(element) {
		return this.node.parent == element.node;
	}
	,set_extraOffsetX: function(value) {
		var pos = this.getPositionX();
		this.extraOffsetX = Math.floor(value);
		this.setPositionX(pos);
		return value;
	}
	,set_extraOffsetY: function(value) {
		var pos = this.getPositionY();
		this.extraOffsetY = Math.floor(value);
		this.setPositionY(pos);
		return value;
	}
	,getPositionX: function() {
		return Math.floor(this.node.x - this.node.pivotX - this.extraOffsetX);
	}
	,getPositionY: function() {
		return Math.floor(this.node.y - this.node.pivotY - this.extraOffsetY);
	}
	,getSizeX: function() {
		return Math.floor(this.node.areaSizeX);
	}
	,getSizeY: function() {
		return Math.floor(this.node.areaSizeY);
	}
	,setPositionX: function(value) {
		var _this = this.node;
		var value1 = Math.floor(value + this.node.pivotX + this.extraOffsetX);
		if(_this.x != value1) {
			_this.x = value1;
			if(_this.globalTransformId != -1) {
				_this.invalidateTransform();
			}
		}
	}
	,setPositionY: function(value) {
		var _this = this.node;
		var value1 = Math.floor(value + this.node.pivotY + this.extraOffsetY);
		if(_this.y != value1) {
			_this.y = value1;
			if(_this.globalTransformId != -1) {
				_this.invalidateTransform();
			}
		}
	}
	,setSizeX: function(value) {
		var _this = this.node;
		_this._isBoundsValid = false;
		_this.areaSizeX = value;
		this.updatePivotPxX();
	}
	,setSizeY: function(value) {
		var _this = this.node;
		_this._isBoundsValid = false;
		_this.areaSizeY = value;
		this.updatePivotPxY();
	}
	,setPivotX: function(value) {
		this.pivotX = value;
		this.updatePivotPxX();
	}
	,setPivotY: function(value) {
		this.pivotY = value;
		this.updatePivotPxY();
	}
	,updatePivotPxX: function() {
		var pos = this.getPositionX();
		var _this = this.node;
		var value = jetgui_element_ElementBase.getPivotPx(this.pivotX,this.getSizeX());
		if(_this.pivotX != value) {
			_this.pivotX = value;
			if(_this.globalTransformId != -1) {
				_this.invalidateTransform();
			}
		}
		this.setPositionX(pos);
	}
	,updatePivotPxY: function() {
		var pos = this.getPositionY();
		var _this = this.node;
		var value = jetgui_element_ElementBase.getPivotPx(this.pivotY,this.getSizeY());
		if(_this.pivotY != value) {
			_this.pivotY = value;
			if(_this.globalTransformId != -1) {
				_this.invalidateTransform();
			}
		}
		this.setPositionY(pos);
	}
	,setInteract: function(interact) {
		var tmp;
		switch(interact._hx_index) {
		case 0:
			tmp = banan_display_EInteractMode.None;
			break;
		case 1:
			tmp = banan_display_EInteractMode.Hover;
			break;
		case 2:
			tmp = banan_display_EInteractMode.Touch;
			break;
		}
		this.node.interactMode.addCommonModificator(tmp);
	}
	,setDisableInteractChild: function(disableInteractChild) {
		this.node.isChildrenTouchable.modifyBase(!disableInteractChild);
	}
	,setScissor: function(isScissor) {
		this.node.isScissorChildren = isScissor;
	}
	,setOpacity: function(opacity) {
		var _this = this.node;
		_this.origOpacity = opacity;
		_this.modOpacity = _this.origOpacity;
		var _g = new haxe_iterators_MapKeyValueIterator(_this.opacityMods);
		while(_g.hasNext()) {
			var _g1 = _g.next();
			var name = _g1.key;
			var value = _g1.value;
			var _this1 = _this.disabledOpacityMods;
			if(!(__map_reserved[name] != null ? _this1.existsReserved(name) : _this1.h.hasOwnProperty(name))) {
				_this.modOpacity *= value;
			}
		}
		_this.renderOpacity = _this.modOpacity;
		var this1 = _this.parent;
		if(this1 != null) {
			_this.renderOpacity *= this1.renderOpacity;
		}
		var a = _this.renderColorA * _this.renderOpacity;
		if(a == null) {
			a = 1;
		}
		_this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(_this.renderColorR,_this.renderColorG,_this.renderColorB,a);
		var child = _this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			nodeEdge.renderOpacity = nodeEdge.modOpacity;
			var this2 = nodeEdge.parent;
			if(this2 != null) {
				nodeEdge.renderOpacity *= this2.renderOpacity;
			}
			var a1 = nodeEdge.renderColorA * nodeEdge.renderOpacity;
			if(a1 == null) {
				a1 = 1;
			}
			nodeEdge.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,a1);
			var child1 = nodeEdge.firstChild;
			while(child1 != null) {
				var nodeEdge1 = child1;
				nodeEdge1.renderOpacity = nodeEdge1.modOpacity;
				var this3 = nodeEdge1.parent;
				if(this3 != null) {
					nodeEdge1.renderOpacity *= this3.renderOpacity;
				}
				var a2 = nodeEdge1.renderColorA * nodeEdge1.renderOpacity;
				if(a2 == null) {
					a2 = 1;
				}
				nodeEdge1.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge1.renderColorR,nodeEdge1.renderColorG,nodeEdge1.renderColorB,a2);
				var child2 = nodeEdge1.firstChild;
				while(child2 != null) {
					var nodeEdge2 = child2;
					nodeEdge2.recalcRenderOpacity(null,null);
					child2 = nodeEdge2.next;
				}
				child1 = nodeEdge1.next;
			}
			child = nodeEdge.next;
		}
	}
	,setColor: function(color) {
		var _this = this.node;
		var value;
		switch(color._hx_index) {
		case 0:
			value = banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
			break;
		case 1:
			value = banan_backend_kha_display__$Color_Color_$Impl_$.RED;
			break;
		case 2:
			value = banan_backend_kha_display__$Color_Color_$Impl_$.GREEN;
			break;
		case 3:
			value = kha__$Color_Color_$Impl_$.fromFloats(1,1,0,1);
			break;
		case 4:
			value = banan_backend_kha_display__$Color_Color_$Impl_$.BLUE;
			break;
		case 5:
			value = banan_backend_kha_display__$Color_Color_$Impl_$.BLACK;
			break;
		case 6:
			var _g7 = color.a;
			var a = _g7;
			if(_g7 == null) {
				a = 1;
			}
			value = kha__$Color_Color_$Impl_$.fromFloats(color.r / 255,color.g / 255,color.b / 255,a);
			break;
		case 7:
			value = kha__$Color_Color_$Impl_$.fromFloats(color.r / 255,color.g / 255,color.b / 255,1);
			break;
		case 8:
			var _g3 = color.color;
			var color1 = _g3;
			if((_g3 & -16777216) == 0) {
				color1 = _g3 | -16777216;
			}
			value = kha__$Color_Color_$Impl_$._new(color1);
			break;
		}
		_this.color = value;
		_this.renderColorA = (_this.color >>> 24) * 0.00392156862745098;
		_this.renderColorR = ((_this.color & 16711680) >>> 16) * 0.00392156862745098;
		_this.renderColorG = ((_this.color & 65280) >>> 8) * 0.00392156862745098;
		_this.renderColorB = (_this.color & 255) * 0.00392156862745098;
		var this1 = _this.parent;
		if(this1 != null) {
			_this.renderColorA *= this1.renderColorA;
			_this.renderColorR *= this1.renderColorR;
			_this.renderColorG *= this1.renderColorG;
			_this.renderColorB *= this1.renderColorB;
		}
		var a1 = _this.renderColorA * _this.renderOpacity;
		if(a1 == null) {
			a1 = 1;
		}
		_this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(_this.renderColorR,_this.renderColorG,_this.renderColorB,a1);
		var child = _this.firstChild;
		while(child != null) {
			var nodeEdge = child;
			nodeEdge.renderColorA = (nodeEdge.color >>> 24) * 0.00392156862745098;
			nodeEdge.renderColorR = ((nodeEdge.color & 16711680) >>> 16) * 0.00392156862745098;
			nodeEdge.renderColorG = ((nodeEdge.color & 65280) >>> 8) * 0.00392156862745098;
			nodeEdge.renderColorB = (nodeEdge.color & 255) * 0.00392156862745098;
			var this2 = nodeEdge.parent;
			if(this2 != null) {
				nodeEdge.renderColorA *= this2.renderColorA;
				nodeEdge.renderColorR *= this2.renderColorR;
				nodeEdge.renderColorG *= this2.renderColorG;
				nodeEdge.renderColorB *= this2.renderColorB;
			}
			var a2 = nodeEdge.renderColorA * nodeEdge.renderOpacity;
			if(a2 == null) {
				a2 = 1;
			}
			nodeEdge.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,a2);
			var child1 = nodeEdge.firstChild;
			while(child1 != null) {
				var nodeEdge1 = child1;
				nodeEdge1.renderColorA = (nodeEdge1.color >>> 24) * 0.00392156862745098;
				nodeEdge1.renderColorR = ((nodeEdge1.color & 16711680) >>> 16) * 0.00392156862745098;
				nodeEdge1.renderColorG = ((nodeEdge1.color & 65280) >>> 8) * 0.00392156862745098;
				nodeEdge1.renderColorB = (nodeEdge1.color & 255) * 0.00392156862745098;
				var this3 = nodeEdge1.parent;
				if(this3 != null) {
					nodeEdge1.renderColorA *= this3.renderColorA;
					nodeEdge1.renderColorR *= this3.renderColorR;
					nodeEdge1.renderColorG *= this3.renderColorG;
					nodeEdge1.renderColorB *= this3.renderColorB;
				}
				var a3 = nodeEdge1.renderColorA * nodeEdge1.renderOpacity;
				if(a3 == null) {
					a3 = 1;
				}
				nodeEdge1.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge1.renderColorR,nodeEdge1.renderColorG,nodeEdge1.renderColorB,a3);
				var child2 = nodeEdge1.firstChild;
				while(child2 != null) {
					var nodeEdge2 = child2;
					nodeEdge2.recalcRenderColor(null,null);
					child2 = nodeEdge2.next;
				}
				child1 = nodeEdge1.next;
			}
			child = nodeEdge.next;
		}
	}
	,setColorMatrix: function(colorMatrix) {
		var tmp = this.entity;
		var tmp1;
		if(colorMatrix == null) {
			tmp1 = null;
		} else {
			switch(colorMatrix._hx_index) {
			case 0:
				tmp1 = banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([colorMatrix.r0,colorMatrix.r1,colorMatrix.r2,colorMatrix.r3,colorMatrix.g0,colorMatrix.g1,colorMatrix.g2,colorMatrix.g3,colorMatrix.b0,colorMatrix.b1,colorMatrix.b2,colorMatrix.b3]);
				break;
			case 1:
				var _g14 = colorMatrix.val;
				tmp1 = banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([_g14,_g14,_g14,0.0,_g14,_g14,_g14,0.0,_g14,_g14,_g14,0.0]);
				break;
			case 2:
				var _g13 = colorMatrix.val;
				tmp1 = banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([1.0,0.0,0.0,_g13,0.0,1.0,0.0,_g13,0.0,0.0,1.0,_g13]);
				break;
			case 3:
				var _g18 = colorMatrix.opacity;
				var opacity = _g18;
				if(_g18 == null) {
					opacity = 1.0;
				}
				var invOpacity = 1.0 - opacity;
				tmp1 = banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([invOpacity,0.0,0.0,colorMatrix.r * opacity,0.0,invOpacity,0.0,colorMatrix.g * opacity,0.0,0.0,invOpacity,colorMatrix.b * opacity]);
				break;
			case 4:
				var _g12 = colorMatrix.val;
				var colorFillOpacity = 0.8 * _g12;
				var glowValue = 0.5 * _g12;
				var i = 1.0 - colorFillOpacity;
				tmp1 = banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([i,0.0,0.0,colorFillOpacity + i * glowValue,0.0,i,0.0,colorFillOpacity + i * glowValue,0.0,0.0,i,colorFillOpacity + i * glowValue]);
				break;
			}
		}
		banan_display_NodeLookHelper.setColorTransform(tmp,tmp1);
	}
	,setOutline: function(outline) {
		if(this.lastOutline != null) {
			banan_display_NodeLookHelper.removeOutline(this.entity,this.lastOutline);
		}
		if(outline != null) {
			var tmp;
			switch(outline._hx_index) {
			case 0:
				tmp = banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
				break;
			case 1:
				tmp = banan_backend_kha_display__$Color_Color_$Impl_$.RED;
				break;
			case 2:
				tmp = banan_backend_kha_display__$Color_Color_$Impl_$.GREEN;
				break;
			case 3:
				tmp = kha__$Color_Color_$Impl_$.fromFloats(1,1,0,1);
				break;
			case 4:
				tmp = banan_backend_kha_display__$Color_Color_$Impl_$.BLUE;
				break;
			case 5:
				tmp = banan_backend_kha_display__$Color_Color_$Impl_$.BLACK;
				break;
			case 6:
				var _g7 = outline.a;
				var a = _g7;
				if(_g7 == null) {
					a = 1;
				}
				tmp = kha__$Color_Color_$Impl_$.fromFloats(outline.r / 255,outline.g / 255,outline.b / 255,a);
				break;
			case 7:
				tmp = kha__$Color_Color_$Impl_$.fromFloats(outline.r / 255,outline.g / 255,outline.b / 255,1);
				break;
			case 8:
				var _g3 = outline.color;
				var color = _g3;
				if((_g3 & -16777216) == 0) {
					color = _g3 | -16777216;
				}
				tmp = kha__$Color_Color_$Impl_$._new(color);
				break;
			}
			this.lastOutline = tmp;
			banan_display_NodeLookHelper.addOutline(this.entity,this.lastOutline);
		} else {
			this.lastOutline = null;
		}
	}
	,setMainDisplay: function(display) {
		this.mainDisplay = display;
		this.updateDisplay();
	}
	,setFill: function(fillColor,fillImage) {
		if(fillColor != null) {
			if(this.fillColorDisplay == null) {
				this.fillColorDisplay = new banan_display_FillDisplayEdge(this.resourceManager,this.render2Context);
			}
			var _this = this.fillColorDisplay;
			var value;
			switch(fillColor._hx_index) {
			case 0:
				value = banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
				break;
			case 1:
				value = banan_backend_kha_display__$Color_Color_$Impl_$.RED;
				break;
			case 2:
				value = banan_backend_kha_display__$Color_Color_$Impl_$.GREEN;
				break;
			case 3:
				value = kha__$Color_Color_$Impl_$.fromFloats(1,1,0,1);
				break;
			case 4:
				value = banan_backend_kha_display__$Color_Color_$Impl_$.BLUE;
				break;
			case 5:
				value = banan_backend_kha_display__$Color_Color_$Impl_$.BLACK;
				break;
			case 6:
				var _g7 = fillColor.a;
				var a = _g7;
				if(_g7 == null) {
					a = 1;
				}
				value = kha__$Color_Color_$Impl_$.fromFloats(fillColor.r / 255,fillColor.g / 255,fillColor.b / 255,a);
				break;
			case 7:
				value = kha__$Color_Color_$Impl_$.fromFloats(fillColor.r / 255,fillColor.g / 255,fillColor.b / 255,1);
				break;
			case 8:
				var _g3 = fillColor.color;
				var color = _g3;
				if((_g3 & -16777216) == 0) {
					color = _g3 | -16777216;
				}
				value = kha__$Color_Color_$Impl_$._new(color);
				break;
			}
			if(_this.color != value) {
				_this.color = value;
				_this.batchEntry.isDirty = true;
			}
		} else {
			this.fillColorDisplay = null;
		}
		if(fillImage != null) {
			if(this.fillImageDisplay == null) {
				this.fillImageDisplay = new banan_display_ImageDisplayEdge(this.render2Context,null,null,banan_display_ScaleMode.Exact);
			}
			var path = fillImage;
			this.fillImageDisplay.setImage(this.resourceManager.getFsImage(path),this.resourceManager.getFsImageNineSlice(path));
		} else {
			this.fillImageDisplay = null;
		}
		this.updateDisplay();
	}
	,updateDisplay: function() {
		var tmp;
		if(this.mainDisplay == null && this.fillColorDisplay == null && this.fillImageDisplay == null) {
			tmp = null;
		} else if(this.mainDisplay != null && this.fillColorDisplay == null && this.fillImageDisplay == null) {
			tmp = this.mainDisplay;
		} else if(this.mainDisplay == null && this.fillColorDisplay != null && this.fillImageDisplay == null) {
			tmp = this.fillColorDisplay;
		} else if(this.mainDisplay == null && this.fillColorDisplay == null && this.fillImageDisplay != null) {
			tmp = this.fillImageDisplay;
		} else {
			var list = [];
			if(this.fillColorDisplay != null) {
				list.push(this.fillColorDisplay);
			}
			if(this.fillImageDisplay != null) {
				list.push(this.fillImageDisplay);
			}
			if(this.mainDisplay != null) {
				list.push(this.mainDisplay);
			}
			var multiDisplay = this.display != null && this.display.type == banan_display_DisplayEdgeType.Multi ? this.display.asMulti() : new banan_display_MultiDisplayEdge();
			multiDisplay.setList(list);
			tmp = multiDisplay;
		}
		this.display = tmp;
		if(this.display != null) {
			var batchThemeId = this.display.type._hx_index == 2 ? this.render2Context.getBatchThemeId(banan_render_render2_batch_EBatchTheme.JetguiText) : this.render2Context.getBatchThemeId(banan_render_render2_batch_EBatchTheme.Jetgui);
			this.display.setBatchThemeId(batchThemeId);
		}
		var currentDisplay = this.entity.__component__banan_display_DisplayEdge;
		if(this.display != currentDisplay) {
			if(currentDisplay == null && this.display != null) {
				this.entity.__add__banan_display_DisplayEdge(this.display);
			} else if(currentDisplay != null && this.display == null) {
				this.entity.__dispose__banan_display_DisplayEdge();
			} else {
				var entity = this.entity;
				var mPrevComponent = entity.__component__banan_display_DisplayEdge;
				var component = this.display;
				if(mPrevComponent == null) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ElementBase.hx:454","mPrevComponent.isSome" + ": " + "Previous component is null",null));
				}
				if(component == null) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ElementBase.hx:454","May.from(component).isSome" + ": " + "Passed component is null",null));
				}
				entity.__component__banan_display_DisplayEdge = component;
				entity.system.__systemLists.__onRemoved__banan_display_DisplayEdge.dispatch(entity,mPrevComponent);
				entity.system.__systemLists.__onAdded__banan_display_DisplayEdge.dispatch(entity,component);
			}
		}
	}
	,isChildAfter: function(child,target) {
		if(child.node.parent == this.node) {
			return child.node.prev == (target != null ? target.node : null);
		} else {
			return false;
		}
	}
	,doAddChildAfter: function(element,target) {
		var parentNode = element.node.parent;
		var notifyAddedToParent = parentNode != this.node;
		if(parentNode != null) {
			var it = parentNode;
			var child = element.node;
			if(child.parent != it) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:636","child.parent == this",null));
			}
			if(it.firstChild == child) {
				it.firstChild = child.next;
			}
			if(it.lastChild == child) {
				it.lastChild = child.prev;
			}
			if(child.next != null) {
				child.next.prev = child.prev;
			}
			if(child.prev != null) {
				child.prev.next = child.next;
			}
			child.parent = null;
			child.next = null;
			child.prev = null;
			child.onRemoved();
		}
		if(target != null) {
			var _this = this.node;
			var child1 = element.node;
			var after = target.node;
			if(child1.parent != null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:529","child.parent.isNone",null));
			}
			if(after.parent != _this) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:530","after.parent == this",null));
			}
			child1.parent = _this;
			child1.prev = after;
			child1.next = after.next;
			after.next = child1;
			if(child1.next != null) {
				child1.next.prev = child1;
			} else {
				_this.lastChild = child1;
			}
			child1.onAdded();
		} else {
			var _this1 = this.node;
			var child2 = element.node;
			if(child2.parent != null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:460","child.parent.isNone",null));
			}
			child2.parent = _this1;
			if(_this1.firstChild != null) {
				child2.next = _this1.firstChild;
				_this1.firstChild.prev = child2;
			} else {
				_this1.lastChild = child2;
			}
			_this1.firstChild = child2;
			child2.onAdded();
		}
		if(notifyAddedToParent) {
			element.addedToParent();
		}
		this.propagateViewTreeStatus(this.isOnViewTree,element);
	}
	,removeChild: function(child) {
		var _this = this.node;
		var child1 = child.node;
		if(child1.parent != _this) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"NodeEdge.hx:636","child.parent == this",null));
		}
		if(_this.firstChild == child1) {
			_this.firstChild = child1.next;
		}
		if(_this.lastChild == child1) {
			_this.lastChild = child1.prev;
		}
		if(child1.next != null) {
			child1.next.prev = child1.prev;
		}
		if(child1.prev != null) {
			child1.prev.next = child1.next;
		}
		child1.parent = null;
		child1.next = null;
		child1.prev = null;
		child1.onRemoved();
		if(child.isOnViewTree) {
			child.removedFromViewTree();
		}
	}
	,propagateViewTreeStatus: function(isOnViewTree,target) {
		if(isOnViewTree != target.isOnViewTree) {
			if(isOnViewTree) {
				target.addedToViewTree();
			} else {
				target.removedFromViewTree();
			}
		}
	}
	,__class__: jetgui_element_ElementBase
	,__properties__: {set_extraOffsetY:"set_extraOffsetY",set_extraOffsetX:"set_extraOffsetX"}
});
var jetgui_element__$Element_IElementAutoBuild = function() { };
$hxClasses["jetgui.element._Element.IElementAutoBuild"] = jetgui_element__$Element_IElementAutoBuild;
jetgui_element__$Element_IElementAutoBuild.__name__ = "jetgui.element._Element.IElementAutoBuild";
jetgui_element__$Element_IElementAutoBuild.__isInterface__ = true;
var jetgui_element_Element = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	this.isTouched = false;
	this.isNeedReflow = false;
	this.thisRow = [];
	this.stage0DoneCounter = -1;
	this.sizeKnownCounterY = -1;
	this.sizeKnownCounterX = -1;
	this.isAllChildrenStyleInvalid = false;
	this.isChildrenStyleValid = false;
	this.isStyleValid = false;
	this.classList_ = jetgui__$ClassList_ClassList_$Impl_$._new();
	this.parentComponent = null;
	this.isDisposed = false;
	jetgui_element_ElementBase.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.Element"] = jetgui_element_Element;
jetgui_element_Element.__name__ = "jetgui.element.Element";
jetgui_element_Element.__interfaces__ = [jetgui_element__$Element_IElementAutoBuild];
jetgui_element_Element.clearNeedReflow = function(e) {
	if(e.isNeedReflow) {
		e.isNeedReflow = false;
		var cb = jetgui_element_Element.clearNeedReflow;
		var childNode = e.node.firstChild;
		while(childNode != null) {
			var element = jetgui_JetHelper.element(childNode);
			if(element != null) {
				cb(element);
			}
			childNode = childNode.next;
		}
	}
};
jetgui_element_Element.__super__ = jetgui_element_ElementBase;
jetgui_element_Element.prototype = $extend(jetgui_element_ElementBase.prototype,{
	tag: null
	,id: null
	,elementRef: null
	,data: null
	,isDisposed: null
	,clickAnimation: null
	,parentComponent: null
	,paddingLeft: null
	,paddingRight: null
	,paddingTop: null
	,paddingBottom: null
	,offsetLeft: null
	,offsetRight: null
	,offsetTop: null
	,offsetBottom: null
	,hAlign: null
	,vAlign: null
	,width: null
	,height: null
	,ontouchbegin: null
	,onclick: null
	,onlongtapbegin: null
	,onlongtapend: null
	,onlongtapmove: null
	,ontouchend: null
	,opacity: null
	,color: null
	,colorMatrix: null
	,outline: null
	,fillColor: null
	,fillImage: null
	,interact: null
	,disableInteractChild: null
	,scissor: null
	,classList: null
	,computedStyle: null
	,styleRules: null
	,localStyle: null
	,classList_: null
	,isStyleValid: null
	,isChildrenStyleValid: null
	,isAllChildrenStyleInvalid: null
	,sizeKnownCounterX: null
	,sizeKnownCounterY: null
	,isSizeDependOnParentX: null
	,isSizeDependOnParentY: null
	,stage0DoneCounter: null
	,writeWidth: null
	,writeHeight: null
	,writeIsTouched: null
	,thisRow: null
	,isNeedReflow: null
	,isTouched: null
	,dispose: function(elementFactory) {
		this.isDisposed = true;
		elementFactory.disposeElement(this);
	}
	,findById: function(id) {
		var findByIdInternal = null;
		findByIdInternal = function(el,id1,a) {
			if(el.id == id1) {
				a.push(el);
			}
			var childNode = el.node.firstChild;
			while(childNode != null) {
				var element = jetgui_JetHelper.element(childNode);
				if(element != null) {
					findByIdInternal(element,id1,a);
				}
				childNode = childNode.next;
			}
		};
		var it = [];
		findByIdInternal(this,id,it);
		return it;
	}
	,handleTouchBegin: function() {
		this.set_isTouched(true);
		if(this.ontouchbegin != null) {
			this.ontouchbegin();
		}
	}
	,handleTouchEnd: function() {
		this.set_isTouched(false);
		if(this.ontouchend != null) {
			this.ontouchend();
		}
	}
	,willHandleDrag: function(dx,dy) {
		return false;
	}
	,handleDragStart: function(screenX,screenY) {
	}
	,handleDragEnd: function(screenX,screenY) {
	}
	,handleDrag: function(screenX,screenY,dx,dy) {
	}
	,getPosition: function(axis) {
		if(axis == 0) {
			return this.getPositionX();
		} else {
			return this.getPositionY();
		}
	}
	,setPosition: function(value,axis) {
		if(axis == 0) {
			this.setPositionX(value);
		} else {
			this.setPositionY(value);
		}
	}
	,getSize: function(axis) {
		if(axis == 0) {
			return this.getSizeX();
		} else {
			return this.getSizeY();
		}
	}
	,setSize: function(value,axis) {
		if(axis == 0) {
			this.setSizeX(Math.floor(value));
		} else {
			this.setSizeY(Math.floor(value));
		}
	}
	,getAbsPosition: function(axis) {
		var e = this;
		var r = 0;
		while(e != null) {
			r += axis == 0 ? e.getPositionX() : e.getPositionY();
			var parentNode = e.node.parent;
			e = parentNode != null ? jetgui_JetHelper.element(parentNode) : null;
		}
		return r;
	}
	,reflowStage: function(reflowStage,reflowCounter,isBoxDefinedX,canSizeToBoxX,boxLeft,boxRight,isBoxDefinedY,canSizeToBoxY,boxTop,boxBottom) {
		if(reflowStage == 1 && this.stage0DoneCounter != reflowCounter) {
			this.reflowStage(0,reflowCounter,isBoxDefinedX,canSizeToBoxX,boxLeft,boxRight,isBoxDefinedY,canSizeToBoxY,boxTop,boxBottom);
		}
		if(reflowStage == 0) {
			this.stage0DoneCounter = reflowCounter;
		}
		var xSizeRes;
		if(this.sizeKnownCounterX == reflowCounter) {
			xSizeRes = jetgui_element_ESetSizeResult.done;
		} else {
			var a = this.offsetLeft;
			var a1 = this.offsetRight;
			var props = { paddingBegin : this.paddingLeft, paddingEnd : this.paddingRight, offsetBegin : this.offsetLeft, offsetBeginVal : a != null ? a : 0.0, offsetEnd : this.offsetRight, offsetEndVal : a1 != null ? a1 : 0.0, size : this.width, align : this.hAlign};
			var size = props.size;
			if(size == null) {
				if(canSizeToBoxX && props.offsetBegin != null && props.offsetEnd != null) {
					size = null;
				} else {
					size = this.getDefaultSize();
				}
			}
			var isDependOnParent = false;
			var result;
			if(size == null) {
				isDependOnParent = true;
				if(isBoxDefinedX) {
					this.setSizeX(Math.floor(boxRight - boxLeft - props.offsetBeginVal - props.offsetEndVal));
					result = jetgui_element_ESetSizeResult.done;
				} else {
					result = jetgui_element_ESetSizeResult.needBox;
				}
			} else {
				switch(size._hx_index) {
				case 0:
					this.setSizeX(Math.floor(size.value));
					result = jetgui_element_ESetSizeResult.done;
					break;
				case 1:
					isDependOnParent = true;
					if(isBoxDefinedX) {
						this.setSizeX(Math.floor((boxRight - boxLeft) * size.value / 100));
						result = jetgui_element_ESetSizeResult.done;
					} else {
						result = jetgui_element_ESetSizeResult.needBox;
					}
					break;
				case 2:
					result = jetgui_element_ESetSizeResult.content(1.0);
					break;
				case 3:
					result = jetgui_element_ESetSizeResult.content(size.scale);
					break;
				case 4:
					result = jetgui_element_ESetSizeResult.auto;
					break;
				}
			}
			this.isSizeDependOnParentX = isDependOnParent;
			if(result == jetgui_element_ESetSizeResult.done) {
				this.sizeKnownCounterX = reflowCounter;
			}
			xSizeRes = result;
		}
		var ySizeRes;
		if(this.sizeKnownCounterY == reflowCounter) {
			ySizeRes = jetgui_element_ESetSizeResult.done;
		} else {
			var a2 = this.offsetTop;
			var a3 = this.offsetBottom;
			var props1 = { paddingBegin : this.paddingTop, paddingEnd : this.paddingBottom, offsetBegin : this.offsetTop, offsetBeginVal : a2 != null ? a2 : 0.0, offsetEnd : this.offsetBottom, offsetEndVal : a3 != null ? a3 : 0.0, size : this.height, align : this.vAlign};
			var size1 = props1.size;
			if(size1 == null) {
				if(canSizeToBoxY && props1.offsetBegin != null && props1.offsetEnd != null) {
					size1 = null;
				} else {
					size1 = this.getDefaultSize();
				}
			}
			var isDependOnParent1 = false;
			var result1;
			if(size1 == null) {
				isDependOnParent1 = true;
				if(isBoxDefinedY) {
					this.setSizeY(Math.floor(boxBottom - boxTop - props1.offsetBeginVal - props1.offsetEndVal));
					result1 = jetgui_element_ESetSizeResult.done;
				} else {
					result1 = jetgui_element_ESetSizeResult.needBox;
				}
			} else {
				switch(size1._hx_index) {
				case 0:
					this.setSizeY(Math.floor(size1.value));
					result1 = jetgui_element_ESetSizeResult.done;
					break;
				case 1:
					isDependOnParent1 = true;
					if(isBoxDefinedY) {
						this.setSizeY(Math.floor((boxBottom - boxTop) * size1.value / 100));
						result1 = jetgui_element_ESetSizeResult.done;
					} else {
						result1 = jetgui_element_ESetSizeResult.needBox;
					}
					break;
				case 2:
					result1 = jetgui_element_ESetSizeResult.content(1.0);
					break;
				case 3:
					result1 = jetgui_element_ESetSizeResult.content(size1.scale);
					break;
				case 4:
					result1 = jetgui_element_ESetSizeResult.auto;
					break;
				}
			}
			this.isSizeDependOnParentY = isDependOnParent1;
			if(result1 == jetgui_element_ESetSizeResult.done) {
				this.sizeKnownCounterY = reflowCounter;
			}
			ySizeRes = result1;
		}
		if(xSizeRes._hx_index == 2) {
			this.setSizeX(Math.floor(this.getContentSizeX() * xSizeRes.scale));
			this.sizeKnownCounterX = reflowCounter;
		}
		if(ySizeRes._hx_index == 2) {
			if(!this.isContentSizeYDependOnX() || this.sizeKnownCounterX == reflowCounter) {
				this.setSizeY(Math.floor(this.getContentSizeY() * ySizeRes.scale));
				this.sizeKnownCounterY = reflowCounter;
			}
		}
		this.reflowChildren(reflowStage,reflowCounter,xSizeRes == jetgui_element_ESetSizeResult.auto,ySizeRes == jetgui_element_ESetSizeResult.auto);
	}
	,reflowChildren: function(reflowStage,reflowCounter,isSetSizeX,isSetSizeY) {
		var isBoxDefinedX = this.sizeKnownCounterX == reflowCounter;
		var isBoxDefinedY = this.sizeKnownCounterY == reflowCounter;
		var p_paddingBegin = this.paddingLeft;
		var boxX_to = this.getSizeX() - this.paddingRight;
		var p_paddingBegin1 = this.paddingTop;
		var boxY_to = this.getSizeY() - this.paddingBottom;
		var maxX = 0;
		var maxY = 0;
		var isAllChildrenSizeKnownX = true;
		var isAllChildrenSizeKnownY = true;
		var childNode = this.node.firstChild;
		while(childNode != null) {
			var element = jetgui_JetHelper.element(childNode);
			if(element != null) {
				element.reflowStage(reflowStage,reflowCounter,isBoxDefinedX,true,p_paddingBegin,boxX_to,isBoxDefinedY,true,p_paddingBegin1,boxY_to);
				if(!element.isSizeDependOnParentX) {
					if(element.sizeKnownCounterX == reflowCounter) {
						var a = element.offsetLeft;
						var a1 = element.offsetRight;
						var p = { paddingBegin : element.paddingLeft, paddingEnd : element.paddingRight, offsetBegin : element.offsetLeft, offsetBeginVal : a != null ? a : 0.0, offsetEnd : element.offsetRight, offsetEndVal : a1 != null ? a1 : 0.0, size : element.width, align : element.hAlign};
						var b = element.getSizeX() + p.offsetBeginVal + p.offsetEndVal;
						maxX = maxX > b ? maxX : b;
					} else {
						isAllChildrenSizeKnownX = false;
					}
				}
				if(!element.isSizeDependOnParentY) {
					if(element.sizeKnownCounterY == reflowCounter) {
						var a2 = element.offsetTop;
						var a3 = element.offsetBottom;
						var p1 = { paddingBegin : element.paddingTop, paddingEnd : element.paddingBottom, offsetBegin : element.offsetTop, offsetBeginVal : a2 != null ? a2 : 0.0, offsetEnd : element.offsetBottom, offsetEndVal : a3 != null ? a3 : 0.0, size : element.height, align : element.vAlign};
						var b1 = element.getSizeY() + p1.offsetBeginVal + p1.offsetEndVal;
						maxY = maxY > b1 ? maxY : b1;
					} else {
						isAllChildrenSizeKnownY = false;
					}
				}
				if(reflowStage == 1) {
					var a4 = element.offsetLeft;
					var a5 = element.offsetRight;
					var p2 = { paddingBegin : element.paddingLeft, paddingEnd : element.paddingRight, offsetBegin : element.offsetLeft, offsetBeginVal : a4 != null ? a4 : 0.0, offsetEnd : element.offsetRight, offsetEndVal : a5 != null ? a5 : 0.0, size : element.width, align : element.hAlign};
					element.setPositionX(p2.align != null ? p_paddingBegin + p2.offsetBeginVal + (boxX_to - p_paddingBegin - (element.getSizeX() + p2.offsetBeginVal + p2.offsetEndVal)) * p2.align : p2.offsetBegin != null ? p_paddingBegin + p2.offsetBegin : p2.offsetEnd != null ? boxX_to - p2.offsetEnd - element.getSizeX() : p_paddingBegin);
					var a6 = element.offsetTop;
					var a7 = element.offsetBottom;
					var p3 = { paddingBegin : element.paddingTop, paddingEnd : element.paddingBottom, offsetBegin : element.offsetTop, offsetBeginVal : a6 != null ? a6 : 0.0, offsetEnd : element.offsetBottom, offsetEndVal : a7 != null ? a7 : 0.0, size : element.height, align : element.vAlign};
					element.setPositionY(p3.align != null ? p_paddingBegin1 + p3.offsetBeginVal + (boxY_to - p_paddingBegin1 - (element.getSizeY() + p3.offsetBeginVal + p3.offsetEndVal)) * p3.align : p3.offsetBegin != null ? p_paddingBegin1 + p3.offsetBegin : p3.offsetEnd != null ? boxY_to - p3.offsetEnd - element.getSizeY() : p_paddingBegin1);
				}
			}
			childNode = childNode.next;
		}
		if(!isBoxDefinedX && isSetSizeX && isAllChildrenSizeKnownX) {
			this.setSizeX(Math.floor(maxX + this.paddingLeft + this.paddingRight));
			this.sizeKnownCounterX = reflowCounter;
		}
		if(!isBoxDefinedY && isSetSizeY && isAllChildrenSizeKnownY) {
			this.setSizeY(Math.floor(maxY + this.paddingTop + this.paddingBottom));
			this.sizeKnownCounterY = reflowCounter;
		}
	}
	,hasClass: function(className) {
		var this1 = this.classList_;
		if(this1 == null) {
			return false;
		} else {
			var _this = this1;
			if(__map_reserved[className] != null) {
				return _this.existsReserved(className);
			} else {
				return _this.h.hasOwnProperty(className);
			}
		}
	}
	,applyVDomAttributes: function(vDomElement) {
		this.setLocalStyle(vDomElement.style);
		if(this.elementRef != vDomElement.elementRef) {
			this.updateElementRef(vDomElement.elementRef);
		}
		if(this.id != vDomElement.id) {
			this.id = vDomElement.id;
			this.invalidateStyle();
			this.entity.name = this.toString();
		}
		if(this.data != vDomElement.data) {
			this.updateElementData(vDomElement.data);
		}
		if(this.classList != vDomElement.classList) {
			this.classList = vDomElement.classList;
			this.classListChanged();
		}
		if(this.styleRules != vDomElement.styleRules) {
			this.styleRules = vDomElement.styleRules;
			this.invalidateStyle();
		}
		if(this.writeWidth != vDomElement.writeWidth) {
			this.set_writeWidth(vDomElement.writeWidth);
		}
		if(this.writeHeight != vDomElement.writeHeight) {
			this.set_writeHeight(vDomElement.writeHeight);
		}
		if(this.writeIsTouched != vDomElement.writeIsTouched) {
			this.set_writeIsTouched(vDomElement.writeIsTouched);
		}
		this.clickAnimation = vDomElement.clickAnimation;
		var tooltipList = vDomElement.tooltipList;
		var jetTooltipEdge = this.entity.__component__jetgui_JetTooltipEdge;
		if(tooltipList.length == 0) {
			if(jetTooltipEdge != null) {
				this.entity.__dispose__jetgui_JetTooltipEdge();
			}
		} else if(jetTooltipEdge == null) {
			jetTooltipEdge = this.entity.__add__jetgui_JetTooltipEdge(new jetgui_JetTooltipEdge(tooltipList));
		} else {
			jetTooltipEdge.reset(tooltipList);
		}
	}
	,sync: function(jetGui,vDomNode,parentComponent,parentElement,prevElement) {
		var vDomElement = vDomNode.asElement();
		this.parentComponent = parentComponent;
		this.applyVDomAttributes(vDomElement);
		if(!(prevElement == null || prevElement.isChildOf(parentElement))) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ElementBase.hx:185","prevElement == null OR prevElement.isChildOf(this)",{ "prevElement" : Std.string(prevElement)}));
		}
		if(!parentElement.isChildAfter(this,prevElement)) {
			parentElement.doAddChildAfter(this,prevElement);
		}
		var lastElement = null;
		var _g = 0;
		var _g1 = vDomElement.children;
		while(_g < _g1.length) {
			var syncResult = jetGui.sync(_g1[_g++],parentComponent,this,lastElement);
			if(syncResult.length > 0) {
				lastElement = syncResult[syncResult.length - 1];
				var parentNode = lastElement.node.parent;
				var parent = parentNode != null ? jetgui_JetHelper.element(parentNode) : null;
				if(parent != this) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(121,"Element.hx:295","parent == this",{ "this" : Std.string(this), "parent" : Std.string(parent)}));
				}
			}
		}
		while(this.getLastChild() != lastElement) {
			var it = this.getLastChild();
			if(it != null) {
				this.removeChild(it);
			}
		}
		this.thisRow[0] = this;
		return this.thisRow;
	}
	,setSizeX: function(value) {
		jetgui_element_ElementBase.prototype.setSizeX.call(this,value);
		if(this.writeWidth != null) {
			this.writeWidth(value);
		}
	}
	,setSizeY: function(value) {
		jetgui_element_ElementBase.prototype.setSizeY.call(this,value);
		if(this.writeHeight != null) {
			this.writeHeight(value);
		}
	}
	,setLocalStyle: function(newStyle) {
		if(!jetgui_style_StyleHelper.isEqual(this.localStyle,newStyle)) {
			this.localStyle = newStyle;
			this.invalidateStyle();
		}
	}
	,validateStyle: function() {
		var _gthis = this;
		if(!this.isStyleValid) {
			this.computeStyle();
			this.isStyleValid = true;
		}
		if(!this.isChildrenStyleValid || this.isAllChildrenStyleInvalid) {
			var childNode = this.node.firstChild;
			while(childNode != null) {
				var element = jetgui_JetHelper.element(childNode);
				if(element != null) {
					if(_gthis.isAllChildrenStyleInvalid) {
						element.isStyleValid = false;
					}
					element.validateStyle();
				}
				childNode = childNode.next;
			}
			this.isChildrenStyleValid = true;
			this.isAllChildrenStyleInvalid = false;
		}
	}
	,computeStyle: function() {
		var activeRuleList = [];
		if(this.styleRules != null) {
			var _g = 0;
			var _g1 = this.styleRules;
			while(_g < _g1.length) {
				var rule = _g1[_g];
				++_g;
				if(jetgui_style_StyleHelper.checkStyleSelector(rule.selector,this)) {
					activeRuleList.push(rule);
				}
			}
		}
		this.computedStyle = { };
		var _g2 = 0;
		while(_g2 < activeRuleList.length) jetgui_style_StyleHelper.mergeStyles(this.computedStyle,activeRuleList[_g2++].style);
		jetgui_style_StyleHelper.mergeStyles(this.computedStyle,this.localStyle);
		this.applyComputedStyle();
	}
	,applyComputedStyle: function() {
		var s = this.computedStyle;
		var a = s.paddingLeft;
		var a1 = a != null ? a : s.paddingX;
		var a2 = a1 != null ? a1 : s.padding;
		var v = a2 != null ? a2 : 0;
		if(v != this.paddingLeft) {
			this.paddingLeft = v;
			this.needReflow(false);
		}
		var a3 = s.paddingRight;
		var a4 = a3 != null ? a3 : s.paddingX;
		var a5 = a4 != null ? a4 : s.padding;
		var v1 = a5 != null ? a5 : 0;
		if(v1 != this.paddingRight) {
			this.paddingRight = v1;
			this.needReflow(false);
		}
		var a6 = s.paddingTop;
		var a7 = a6 != null ? a6 : s.paddingY;
		var a8 = a7 != null ? a7 : s.padding;
		var v2 = a8 != null ? a8 : 0;
		if(v2 != this.paddingTop) {
			this.paddingTop = v2;
			this.needReflow(false);
		}
		var a9 = s.paddingBottom;
		var a10 = a9 != null ? a9 : s.paddingY;
		var a11 = a10 != null ? a10 : s.padding;
		var v3 = a11 != null ? a11 : 0;
		if(v3 != this.paddingBottom) {
			this.paddingBottom = v3;
			this.needReflow(false);
		}
		var a12 = s.offsetLeft;
		var a13 = a12 != null ? a12 : s.offsetX;
		var v4 = a13 != null ? a13 : s.offset;
		if(v4 != this.offsetLeft) {
			this.offsetLeft = v4;
			this.needReflow(false);
		}
		var a14 = s.offsetRight;
		var a15 = a14 != null ? a14 : s.offsetX;
		var v5 = a15 != null ? a15 : s.offset;
		if(v5 != this.offsetRight) {
			this.offsetRight = v5;
			this.needReflow(false);
		}
		var a16 = s.offsetTop;
		var a17 = a16 != null ? a16 : s.offsetY;
		var v6 = a17 != null ? a17 : s.offset;
		if(v6 != this.offsetTop) {
			this.offsetTop = v6;
			this.needReflow(false);
		}
		var a18 = s.offsetBottom;
		var a19 = a18 != null ? a18 : s.offsetY;
		var v7 = a19 != null ? a19 : s.offset;
		if(v7 != this.offsetBottom) {
			this.offsetBottom = v7;
			this.needReflow(false);
		}
		var a20 = s.pivotX;
		this.setPivotX(a20 != null ? a20 : s.pivot);
		var a21 = s.pivotY;
		this.setPivotY(a21 != null ? a21 : s.pivot);
		var a22 = s.hAlign;
		var v8 = a22 != null ? a22 : s.align;
		if(v8 != this.hAlign) {
			this.hAlign = v8;
			this.needReflow(false);
		}
		var a23 = s.vAlign;
		var v9 = a23 != null ? a23 : s.align;
		if(v9 != this.vAlign) {
			this.vAlign = v9;
			this.needReflow(false);
		}
		var a24 = s.width;
		var v10 = a24 != null ? a24 : s.size;
		if(v10 != this.width) {
			this.width = v10;
			this.needReflow(false);
		}
		var a25 = s.height;
		var v11 = a25 != null ? a25 : s.size;
		if(v11 != this.height) {
			this.height = v11;
			this.needReflow(false);
		}
		this.ontouchbegin = s.ontouchbegin;
		this.onclick = s.onclick;
		this.onlongtapbegin = s.onlongtapbegin;
		this.onlongtapend = s.onlongtapend;
		this.onlongtapmove = s.onlongtapmove;
		this.ontouchend = s.ontouchend;
		var a26 = s.opacity;
		var newOpacity = a26 != null ? a26 : 1.0;
		if(this.opacity != newOpacity) {
			this.opacity = newOpacity;
			var _this = this.node;
			_this.origOpacity = this.opacity;
			_this.modOpacity = _this.origOpacity;
			var _g = new haxe_iterators_MapKeyValueIterator(_this.opacityMods);
			while(_g.hasNext()) {
				var _g1 = _g.next();
				var name = _g1.key;
				var value = _g1.value;
				var _this1 = _this.disabledOpacityMods;
				if(!(__map_reserved[name] != null ? _this1.existsReserved(name) : _this1.h.hasOwnProperty(name))) {
					_this.modOpacity *= value;
				}
			}
			_this.renderOpacity = _this.modOpacity;
			var this1 = _this.parent;
			if(this1 != null) {
				_this.renderOpacity *= this1.renderOpacity;
			}
			var a27 = _this.renderColorA * _this.renderOpacity;
			if(a27 == null) {
				a27 = 1;
			}
			_this.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(_this.renderColorR,_this.renderColorG,_this.renderColorB,a27);
			var child = _this.firstChild;
			while(child != null) {
				var nodeEdge = child;
				nodeEdge.renderOpacity = nodeEdge.modOpacity;
				var this2 = nodeEdge.parent;
				if(this2 != null) {
					nodeEdge.renderOpacity *= this2.renderOpacity;
				}
				var a28 = nodeEdge.renderColorA * nodeEdge.renderOpacity;
				if(a28 == null) {
					a28 = 1;
				}
				nodeEdge.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge.renderColorR,nodeEdge.renderColorG,nodeEdge.renderColorB,a28);
				var child1 = nodeEdge.firstChild;
				while(child1 != null) {
					var nodeEdge1 = child1;
					nodeEdge1.renderOpacity = nodeEdge1.modOpacity;
					var this3 = nodeEdge1.parent;
					if(this3 != null) {
						nodeEdge1.renderOpacity *= this3.renderOpacity;
					}
					var a29 = nodeEdge1.renderColorA * nodeEdge1.renderOpacity;
					if(a29 == null) {
						a29 = 1;
					}
					nodeEdge1.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge1.renderColorR,nodeEdge1.renderColorG,nodeEdge1.renderColorB,a29);
					var child2 = nodeEdge1.firstChild;
					while(child2 != null) {
						var nodeEdge2 = child2;
						nodeEdge2.recalcRenderOpacity(null,null);
						child2 = nodeEdge2.next;
					}
					child1 = nodeEdge1.next;
				}
				child = nodeEdge.next;
			}
		}
		if(!jetgui_style__$EColor_EColor_$Impl_$.compare(this.fillColor,s.fillColor) || this.fillImage != s.fillImage) {
			this.fillColor = s.fillColor;
			this.fillImage = s.fillImage;
			this.setFill(this.fillColor,this.fillImage);
		}
		if(!jetgui_style__$EColor_EColor_$Impl_$.compare(this.color,s.color)) {
			this.color = s.color;
			var a30 = this.color;
			var color = a30 != null ? a30 : jetgui_style_EColorImpl.white;
			var _this2 = this.node;
			var value1;
			switch(color._hx_index) {
			case 0:
				value1 = banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
				break;
			case 1:
				value1 = banan_backend_kha_display__$Color_Color_$Impl_$.RED;
				break;
			case 2:
				value1 = banan_backend_kha_display__$Color_Color_$Impl_$.GREEN;
				break;
			case 3:
				value1 = kha__$Color_Color_$Impl_$.fromFloats(1,1,0,1);
				break;
			case 4:
				value1 = banan_backend_kha_display__$Color_Color_$Impl_$.BLUE;
				break;
			case 5:
				value1 = banan_backend_kha_display__$Color_Color_$Impl_$.BLACK;
				break;
			case 6:
				var _g7 = color.a;
				var a31 = _g7;
				if(_g7 == null) {
					a31 = 1;
				}
				value1 = kha__$Color_Color_$Impl_$.fromFloats(color.r / 255,color.g / 255,color.b / 255,a31);
				break;
			case 7:
				value1 = kha__$Color_Color_$Impl_$.fromFloats(color.r / 255,color.g / 255,color.b / 255,1);
				break;
			case 8:
				var _g3 = color.color;
				var color1 = _g3;
				if((_g3 & -16777216) == 0) {
					color1 = _g3 | -16777216;
				}
				value1 = kha__$Color_Color_$Impl_$._new(color1);
				break;
			}
			_this2.color = value1;
			_this2.renderColorA = (_this2.color >>> 24) * 0.00392156862745098;
			_this2.renderColorR = ((_this2.color & 16711680) >>> 16) * 0.00392156862745098;
			_this2.renderColorG = ((_this2.color & 65280) >>> 8) * 0.00392156862745098;
			_this2.renderColorB = (_this2.color & 255) * 0.00392156862745098;
			var this4 = _this2.parent;
			if(this4 != null) {
				_this2.renderColorA *= this4.renderColorA;
				_this2.renderColorR *= this4.renderColorR;
				_this2.renderColorG *= this4.renderColorG;
				_this2.renderColorB *= this4.renderColorB;
			}
			var a32 = _this2.renderColorA * _this2.renderOpacity;
			if(a32 == null) {
				a32 = 1;
			}
			_this2.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(_this2.renderColorR,_this2.renderColorG,_this2.renderColorB,a32);
			var child3 = _this2.firstChild;
			while(child3 != null) {
				var nodeEdge3 = child3;
				nodeEdge3.renderColorA = (nodeEdge3.color >>> 24) * 0.00392156862745098;
				nodeEdge3.renderColorR = ((nodeEdge3.color & 16711680) >>> 16) * 0.00392156862745098;
				nodeEdge3.renderColorG = ((nodeEdge3.color & 65280) >>> 8) * 0.00392156862745098;
				nodeEdge3.renderColorB = (nodeEdge3.color & 255) * 0.00392156862745098;
				var this5 = nodeEdge3.parent;
				if(this5 != null) {
					nodeEdge3.renderColorA *= this5.renderColorA;
					nodeEdge3.renderColorR *= this5.renderColorR;
					nodeEdge3.renderColorG *= this5.renderColorG;
					nodeEdge3.renderColorB *= this5.renderColorB;
				}
				var a33 = nodeEdge3.renderColorA * nodeEdge3.renderOpacity;
				if(a33 == null) {
					a33 = 1;
				}
				nodeEdge3.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge3.renderColorR,nodeEdge3.renderColorG,nodeEdge3.renderColorB,a33);
				var child4 = nodeEdge3.firstChild;
				while(child4 != null) {
					var nodeEdge4 = child4;
					nodeEdge4.renderColorA = (nodeEdge4.color >>> 24) * 0.00392156862745098;
					nodeEdge4.renderColorR = ((nodeEdge4.color & 16711680) >>> 16) * 0.00392156862745098;
					nodeEdge4.renderColorG = ((nodeEdge4.color & 65280) >>> 8) * 0.00392156862745098;
					nodeEdge4.renderColorB = (nodeEdge4.color & 255) * 0.00392156862745098;
					var this6 = nodeEdge4.parent;
					if(this6 != null) {
						nodeEdge4.renderColorA *= this6.renderColorA;
						nodeEdge4.renderColorR *= this6.renderColorR;
						nodeEdge4.renderColorG *= this6.renderColorG;
						nodeEdge4.renderColorB *= this6.renderColorB;
					}
					var a34 = nodeEdge4.renderColorA * nodeEdge4.renderOpacity;
					if(a34 == null) {
						a34 = 1;
					}
					nodeEdge4.renderRGBAO = kha__$Color_Color_$Impl_$.fromFloats(nodeEdge4.renderColorR,nodeEdge4.renderColorG,nodeEdge4.renderColorB,a34);
					var child5 = nodeEdge4.firstChild;
					while(child5 != null) {
						var nodeEdge5 = child5;
						nodeEdge5.recalcRenderColor(null,null);
						child5 = nodeEdge5.next;
					}
					child4 = nodeEdge4.next;
				}
				child3 = nodeEdge3.next;
			}
		}
		if(this.colorMatrix != s.colorMatrix && (this.colorMatrix == null || s.colorMatrix == null || !Type.enumEq(this.colorMatrix,s.colorMatrix))) {
			this.colorMatrix = s.colorMatrix;
			var colorMatrix = this.colorMatrix;
			var tmp = this.entity;
			var tmp1;
			if(colorMatrix == null) {
				tmp1 = null;
			} else {
				switch(colorMatrix._hx_index) {
				case 0:
					tmp1 = banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([colorMatrix.r0,colorMatrix.r1,colorMatrix.r2,colorMatrix.r3,colorMatrix.g0,colorMatrix.g1,colorMatrix.g2,colorMatrix.g3,colorMatrix.b0,colorMatrix.b1,colorMatrix.b2,colorMatrix.b3]);
					break;
				case 1:
					var _g14 = colorMatrix.val;
					tmp1 = banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([_g14,_g14,_g14,0.0,_g14,_g14,_g14,0.0,_g14,_g14,_g14,0.0]);
					break;
				case 2:
					var _g13 = colorMatrix.val;
					tmp1 = banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([1.0,0.0,0.0,_g13,0.0,1.0,0.0,_g13,0.0,0.0,1.0,_g13]);
					break;
				case 3:
					var _g18 = colorMatrix.opacity;
					var opacity = _g18;
					if(_g18 == null) {
						opacity = 1.0;
					}
					var invOpacity = 1.0 - opacity;
					tmp1 = banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([invOpacity,0.0,0.0,colorMatrix.r * opacity,0.0,invOpacity,0.0,colorMatrix.g * opacity,0.0,0.0,invOpacity,colorMatrix.b * opacity]);
					break;
				case 4:
					var _g12 = colorMatrix.val;
					var colorFillOpacity = 0.8 * _g12;
					var glowValue = 0.5 * _g12;
					var i = 1.0 - colorFillOpacity;
					tmp1 = banan_math__$AColorTransform_AColorTransform_$Impl_$.fromArray([i,0.0,0.0,colorFillOpacity + i * glowValue,0.0,i,0.0,colorFillOpacity + i * glowValue,0.0,0.0,i,colorFillOpacity + i * glowValue]);
					break;
				}
			}
			banan_display_NodeLookHelper.setColorTransform(tmp,tmp1);
		}
		if(!jetgui_style__$EColor_EColor_$Impl_$.compare(this.outline,s.outline)) {
			this.outline = s.outline;
			var outline = this.outline;
			if(this.lastOutline != null) {
				banan_display_NodeLookHelper.removeOutline(this.entity,this.lastOutline);
			}
			if(outline != null) {
				var tmp2;
				switch(outline._hx_index) {
				case 0:
					tmp2 = banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
					break;
				case 1:
					tmp2 = banan_backend_kha_display__$Color_Color_$Impl_$.RED;
					break;
				case 2:
					tmp2 = banan_backend_kha_display__$Color_Color_$Impl_$.GREEN;
					break;
				case 3:
					tmp2 = kha__$Color_Color_$Impl_$.fromFloats(1,1,0,1);
					break;
				case 4:
					tmp2 = banan_backend_kha_display__$Color_Color_$Impl_$.BLUE;
					break;
				case 5:
					tmp2 = banan_backend_kha_display__$Color_Color_$Impl_$.BLACK;
					break;
				case 6:
					var _g71 = outline.a;
					var a35 = _g71;
					if(_g71 == null) {
						a35 = 1;
					}
					tmp2 = kha__$Color_Color_$Impl_$.fromFloats(outline.r / 255,outline.g / 255,outline.b / 255,a35);
					break;
				case 7:
					tmp2 = kha__$Color_Color_$Impl_$.fromFloats(outline.r / 255,outline.g / 255,outline.b / 255,1);
					break;
				case 8:
					var _g31 = outline.color;
					var color2 = _g31;
					if((_g31 & -16777216) == 0) {
						color2 = _g31 | -16777216;
					}
					tmp2 = kha__$Color_Color_$Impl_$._new(color2);
					break;
				}
				this.lastOutline = tmp2;
				banan_display_NodeLookHelper.addOutline(this.entity,this.lastOutline);
			} else {
				this.lastOutline = null;
			}
		}
		var a36 = s.interact;
		var newInteract = a36 != null ? a36 : jetgui_style_EInteract.none;
		if(this.interact != newInteract) {
			this.interact = newInteract;
			var tmp3;
			switch(this.interact._hx_index) {
			case 0:
				tmp3 = banan_display_EInteractMode.None;
				break;
			case 1:
				tmp3 = banan_display_EInteractMode.Hover;
				break;
			case 2:
				tmp3 = banan_display_EInteractMode.Touch;
				break;
			}
			this.node.interactMode.addCommonModificator(tmp3);
		}
		var a37 = s.disableInteractChild;
		var newDisableInteractChild = a37 != null && a37;
		if(this.disableInteractChild != newDisableInteractChild) {
			this.disableInteractChild = newDisableInteractChild;
			this.node.isChildrenTouchable.modifyBase(!this.disableInteractChild);
		}
		var a38 = s.scissor;
		var newScissor = a38 != null && a38;
		if(this.scissor != newScissor) {
			this.scissor = newScissor;
			this.node.isScissorChildren = this.scissor;
		}
	}
	,hasTouchCallbacks: function() {
		if(!(this.onclick != null || this.onlongtapbegin != null || this.onlongtapend != null)) {
			return this.onlongtapmove != null;
		} else {
			return true;
		}
	}
	,onClick: function() {
		if(this.onclick != null) {
			this.onclick();
		}
		this.tryStartClickAnimation();
	}
	,onLongTapBegin: function() {
		if(this.onlongtapbegin != null) {
			this.onlongtapbegin();
		}
		this.tryStartClickAnimation();
	}
	,onLongTapEnd: function() {
		if(this.onlongtapend != null) {
			this.onlongtapend();
		}
	}
	,onLongTapMove: function() {
		if(this.onlongtapmove != null) {
			this.onlongtapmove();
		}
	}
	,getDefaultSize: function() {
		return jetgui_style_ESizeImpl.auto;
	}
	,getContentSizeX: function() {
		return 0;
	}
	,getContentSizeY: function() {
		return 0;
	}
	,isContentSizeYDependOnX: function() {
		return false;
	}
	,removeLastChild: function() {
		var it = this.getLastChild();
		if(it != null) {
			this.removeChild(it);
		}
	}
	,setTag: function(tag) {
		this.tag = tag;
		this.entity.name = this.toString();
	}
	,toString: function() {
		var buf_b = "";
		buf_b = "" + Std.string("<" + this.tag);
		if(this.id != null) {
			buf_b += Std.string(" id=" + this.id);
		}
		if(this.elementRef != null) {
			buf_b += Std.string(" ref=" + this.elementRef);
		}
		buf_b += ">";
		if(this.classList != null) {
			buf_b += Std.string("[" + this.classList + "]");
		}
		return buf_b;
	}
	,toStringExt: function() {
		var openTag = "<" + this.tag;
		openTag += this.id != null ? " id=" + this.id : "";
		openTag += this.elementRef != null ? " element-ref=" + this.elementRef : "";
		var _g = 0;
		var _g1 = Reflect.fields(this.computedStyle);
		while(_g < _g1.length) {
			var styleName = _g1[_g];
			++_g;
			openTag += " " + styleName + "=" + Std.string(Reflect.field(this.computedStyle,styleName));
		}
		openTag += ">";
		var closeTag = "</" + this.tag + ">";
		var childStrings = [];
		var childNode = this.node.firstChild;
		while(childNode != null) {
			var element = jetgui_JetHelper.element(childNode);
			if(element != null) {
				childStrings.push(element.toStringExt());
			}
			childNode = childNode.next;
		}
		var result = openTag;
		if(childStrings.length > 0) {
			result += "\n";
		}
		var _g2 = 0;
		while(_g2 < childStrings.length) {
			var _g21 = 0;
			var _g3 = childStrings[_g2++].split("\n");
			while(_g21 < _g3.length) result += "  " + _g3[_g21++] + "\n";
		}
		result += closeTag;
		return result;
	}
	,getPathString: function() {
		var buf_b = "";
		var cur = this;
		while(cur != null) {
			buf_b += Std.string(cur.toString());
			buf_b += " ";
			var parentNode = cur.node.parent;
			cur = parentNode != null ? jetgui_JetHelper.element(parentNode) : null;
		}
		return buf_b;
	}
	,tryStartClickAnimation: function() {
		if(!this.isOnViewTree) {
			return;
		}
		var clickAnimationElement = null;
		var root = null;
		var e = this;
		while(true) {
			if(clickAnimationElement == null && e.clickAnimation != null) {
				clickAnimationElement = e;
			}
			var parentNode = e.node.parent;
			var parent = parentNode != null ? jetgui_JetHelper.element(parentNode) : null;
			if(parent != null) {
				e = parent;
			} else {
				root = js_Boot.__cast(e , jetgui_element_RootElement);
				break;
			}
		}
		if(clickAnimationElement != null) {
			root.addClickAnimation(clickAnimationElement);
		}
	}
	,updateElementRef: function(newRef) {
		var _gthis = this;
		if(newRef != this.elementRef && this.isOnViewTree) {
			var it = this.elementRef;
			if(it != null) {
				_gthis.parentComponent.removeRefElement(it,_gthis);
			}
			if(newRef != null) {
				_gthis.parentComponent.addRefElement(newRef,_gthis);
			}
		}
		this.elementRef = newRef;
		this.entity.name = this.toString();
	}
	,updateElementData: function(data) {
		var dataMap = null;
		if(data != null) {
			if(this.data != data && data != "") {
				dataMap = new haxe_ds_StringMap();
				var dataStrings = data.split(";");
				var _g = 0;
				while(_g < dataStrings.length) {
					var dataKeyValue = dataStrings[_g++].split("=");
					if(dataKeyValue.length > 1) {
						var v = dataKeyValue[1];
						var key = dataKeyValue[0];
						if(__map_reserved[key] != null) {
							dataMap.setReserved(key,v);
						} else {
							dataMap.h[key] = v;
						}
					} else {
						var key1 = dataKeyValue[0];
						if(__map_reserved[key1] != null) {
							dataMap.setReserved(key1,"");
						} else {
							dataMap.h[key1] = "";
						}
					}
				}
			}
		}
		this.data = data;
		this.syncElementData(dataMap);
	}
	,invalidateStyle: function() {
		this.isStyleValid = false;
		this.isAllChildrenStyleInvalid = true;
		var parentNode = this.node.parent;
		var parent = parentNode != null ? jetgui_JetHelper.element(parentNode) : null;
		while(parent != null && parent.isChildrenStyleValid && !parent.isAllChildrenStyleInvalid) {
			parent.isChildrenStyleValid = false;
			var parentNode1 = parent.node.parent;
			parent = parentNode1 != null ? jetgui_JetHelper.element(parentNode1) : null;
		}
	}
	,classListChanged: function() {
		var attr = this.classList;
		var result = false;
		if(this.classList_ != null || attr != null) {
			jetgui__$ClassList_ClassList_$Impl_$.counter++;
			if(this.classList_ == null) {
				this.classList_ = new haxe_ds_StringMap();
			}
			if(attr != null) {
				var i = 0;
				while(i < attr.length) {
					while(i < attr.length && StringTools.isSpace(attr,i)) ++i;
					var j = i;
					while(i < attr.length && !StringTools.isSpace(attr,i)) ++i;
					if(j != i) {
						var className = attr.substring(j,i);
						var _this = this.classList_;
						if((__map_reserved[className] != null ? _this.getReserved(className) : _this.h[className]) != jetgui__$ClassList_ClassList_$Impl_$.counter) {
							var value = jetgui__$ClassList_ClassList_$Impl_$.counter;
							var _this1 = this.classList_;
							if(__map_reserved[className] != null) {
								_this1.setReserved(className,value);
							} else {
								_this1.h[className] = value;
							}
							result = true;
						}
					}
				}
			}
			var _g = new haxe_iterators_MapKeyValueIterator(this.classList_);
			while(_g.hasNext()) {
				var _g1 = _g.next();
				if(_g1.value != jetgui__$ClassList_ClassList_$Impl_$.counter) {
					this.classList_.remove(_g1.key);
					result = true;
				}
			}
		}
		if(result) {
			this.invalidateStyle();
		}
	}
	,addedToParent: function() {
		jetgui_element_ElementBase.prototype.addedToParent.call(this);
		this.invalidateStyle();
		this.needReflow(true);
	}
	,addedToViewTree: function() {
		var _gthis = this;
		jetgui_element_ElementBase.prototype.addedToViewTree.call(this);
		var it = this.elementRef;
		if(it != null) {
			_gthis.parentComponent.addRefElement(it,_gthis);
		}
		var childNode = this.node.firstChild;
		while(childNode != null) {
			var element = jetgui_JetHelper.element(childNode);
			if(element != null) {
				element.addedToViewTree();
			}
			childNode = childNode.next;
		}
	}
	,removedFromViewTree: function() {
		var _gthis = this;
		jetgui_element_ElementBase.prototype.removedFromViewTree.call(this);
		var it = this.elementRef;
		if(it != null) {
			_gthis.parentComponent.removeRefElement(it,_gthis);
		}
		var childNode = this.node.firstChild;
		while(childNode != null) {
			var element = jetgui_JetHelper.element(childNode);
			if(element != null) {
				element.removedFromViewTree();
			}
			childNode = childNode.next;
		}
		this.set_isTouched(false);
	}
	,set_writeWidth: function(value) {
		this.writeWidth = value;
		if(this.writeWidth != null) {
			this.writeWidth(this.getSizeX());
		}
		return value;
	}
	,set_writeHeight: function(value) {
		this.writeHeight = value;
		if(this.writeHeight != null) {
			this.writeHeight(this.getSizeY());
		}
		return value;
	}
	,set_writeIsTouched: function(value) {
		this.writeIsTouched = value;
		if(this.writeIsTouched != null) {
			this.writeIsTouched(this.isTouched);
		}
		return value;
	}
	,set_isTouched: function(value) {
		if(this.isTouched != value) {
			this.isTouched = value;
			if(this.writeIsTouched != null) {
				this.writeIsTouched(this.isTouched);
			}
		}
		return value;
	}
	,asRow: function() {
		this.thisRow[0] = this;
		return this.thisRow;
	}
	,needReflow: function(force) {
		if(!this.isNeedReflow || force) {
			this.isNeedReflow = true;
			var parentNode = this.node.parent;
			var parent = parentNode != null ? jetgui_JetHelper.element(parentNode) : null;
			if(parent != null) {
				parent.needReflow(false);
			}
		}
	}
	,removeChild: function(child) {
		jetgui_element_ElementBase.prototype.removeChild.call(this,child);
		this.needReflow(false);
	}
	,set_paddingLeft: function(v) {
		if(v != this.paddingLeft) {
			this.paddingLeft = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_paddingRight: function(v) {
		if(v != this.paddingRight) {
			this.paddingRight = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_paddingTop: function(v) {
		if(v != this.paddingTop) {
			this.paddingTop = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_paddingBottom: function(v) {
		if(v != this.paddingBottom) {
			this.paddingBottom = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_offsetLeft: function(v) {
		if(v != this.offsetLeft) {
			this.offsetLeft = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_offsetRight: function(v) {
		if(v != this.offsetRight) {
			this.offsetRight = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_offsetTop: function(v) {
		if(v != this.offsetTop) {
			this.offsetTop = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_offsetBottom: function(v) {
		if(v != this.offsetBottom) {
			this.offsetBottom = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_hAlign: function(v) {
		if(v != this.hAlign) {
			this.hAlign = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_vAlign: function(v) {
		if(v != this.vAlign) {
			this.vAlign = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_width: function(v) {
		if(v != this.width) {
			this.width = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_height: function(v) {
		if(v != this.height) {
			this.height = v;
			this.needReflow(false);
		}
		return v;
	}
	,__class__: jetgui_element_Element
	,__properties__: $extend(jetgui_element_ElementBase.prototype.__properties__,{set_isTouched:"set_isTouched",set_writeIsTouched:"set_writeIsTouched",set_writeHeight:"set_writeHeight",set_writeWidth:"set_writeWidth",set_height:"set_height",set_width:"set_width",set_vAlign:"set_vAlign",set_hAlign:"set_hAlign",set_offsetBottom:"set_offsetBottom",set_offsetTop:"set_offsetTop",set_offsetRight:"set_offsetRight",set_offsetLeft:"set_offsetLeft",set_paddingBottom:"set_paddingBottom",set_paddingTop:"set_paddingTop",set_paddingRight:"set_paddingRight",set_paddingLeft:"set_paddingLeft"})
});
var jetgui_element_ArcElementBase = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	this.stateId = 0;
	this.indexCount = 0;
	this.indices = [];
	this.vertexCount = 0;
	this.vertices = [];
	this.isMeshValid = false;
	this.image = null;
	this.arcEnd = 0;
	this.arcStart = 0;
	jetgui_element_Element.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
	this.meshDisplayEdge = new banan_display_MeshDisplayEdge(render2Context,this);
	this.bounds = new banan_math_Rect();
	this.setMainDisplay(this.meshDisplayEdge);
};
$hxClasses["jetgui.element.ArcElementBase"] = jetgui_element_ArcElementBase;
jetgui_element_ArcElementBase.__name__ = "jetgui.element.ArcElementBase";
jetgui_element_ArcElementBase.__interfaces__ = [banan_display_IMesh];
jetgui_element_ArcElementBase.__super__ = jetgui_element_Element;
jetgui_element_ArcElementBase.prototype = $extend(jetgui_element_Element.prototype,{
	meshDisplayEdge: null
	,arcStart: null
	,arcEnd: null
	,image: null
	,bounds: null
	,isMeshValid: null
	,vertices: null
	,vertexCount: null
	,indices: null
	,indexCount: null
	,stateId: null
	,setSizeX: function(value) {
		this.isMeshValid = false;
		jetgui_element_Element.prototype.setSizeX.call(this,value);
	}
	,setSizeY: function(value) {
		this.isMeshValid = false;
		jetgui_element_Element.prototype.setSizeY.call(this,value);
	}
	,dispose: function(elementFactory) {
		this.setImage(null);
		jetgui_element_Element.prototype.dispose.call(this,elementFactory);
	}
	,setImage: function(imagePath) {
		if(this.image != null) {
			this.image.currentChangedSig.remove($bind(this,this.invalidateMesh));
		}
		this.image = imagePath != null ? this.resourceManager.getFsImage(imagePath) : null;
		if(this.image != null) {
			this.image.currentChangedSig.add($bind(this,this.invalidateMesh));
		}
		this.isMeshValid = false;
	}
	,getImageSize: function(cb) {
		jetgui_element_ImageHelper.getImageSize(this.image,cb);
	}
	,setParameters: function(arcStart,arcEnd) {
		if(!isFinite(arcStart)) {
			arcStart = 0.0;
		}
		if(!isFinite(arcEnd)) {
			arcEnd = arcStart + 360.0;
		}
		var value = arcEnd - arcStart;
		var rotation = value < -360.0 ? -360.0 : value > 360.0 ? 360.0 : value;
		if(rotation >= 0) {
			this.arcStart = (arcStart % 360 + 360) % 360;
			this.arcEnd = this.arcStart + rotation;
		} else {
			this.arcStart = (arcEnd % 360 + 360) % 360;
			this.arcEnd = this.arcStart - rotation;
		}
		if(!(this.arcStart >= 0 && this.arcEnd >= 0 && this.arcStart <= this.arcEnd && this.arcEnd - this.arcStart <= 360)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ArcElementBase.hx:100","this.arcStart >= 0 && this.arcEnd >= 0 && this.arcStart <= this.arcEnd && this.arcEnd - this.arcStart <= 360",null));
		}
		this.isMeshValid = false;
	}
	,invalidateMesh: function() {
		this.isMeshValid = false;
	}
	,validateMesh: function() {
		if(!this.isMeshValid) {
			this.isMeshValid = true;
			this.createMesh();
			this.stateId++;
		}
	}
	,createMesh: function() {
		var _gthis = this;
		var sizeX = this.getSizeX();
		var sizeY = this.getSizeY();
		this.bounds.setTo(0,0,sizeX,sizeY);
		this.vertexCount = 0;
		this.indexCount = 0;
		var idx = _gthis.vertexCount * 8;
		_gthis.vertices[idx] = 0.5 * sizeX;
		_gthis.vertices[idx + 1] = 0.5 * sizeY;
		_gthis.vertices[idx + 2] = (_gthis.image.current.tx + 0.5 * _gthis.image.current.tSizeX) / _gthis.image.current.get_texture().sizeX;
		_gthis.vertices[idx + 3] = (_gthis.image.current.ty + 0.5 * _gthis.image.current.tSizeY) / _gthis.image.current.get_texture().sizeY;
		_gthis.vertices[idx + 4] = 1.0;
		_gthis.vertices[idx + 5] = 1.0;
		_gthis.vertices[idx + 6] = 1.0;
		_gthis.vertices[idx + 7] = 1.0;
		var centerVertexIdx = _gthis.vertexCount++;
		var pos = (this.arcStart + 45.0) / 90.0;
		var posEnd = (this.arcEnd + 45.0) / 90.0;
		var isLast = false;
		var prevVertexIdx = -1;
		while(true) {
			var angle = pos * 1.5707963267948966 - 0.78539816339744828;
			var r = 0.5 / Math.cos(pos % 1 * 1.5707963267948966 - 0.78539816339744828);
			var x = 0.5 + r * Math.sin(angle);
			var y = 0.5 - r * Math.cos(angle);
			var idx1 = _gthis.vertexCount * 8;
			_gthis.vertices[idx1] = x * sizeX;
			_gthis.vertices[idx1 + 1] = y * sizeY;
			_gthis.vertices[idx1 + 2] = (_gthis.image.current.tx + x * _gthis.image.current.tSizeX) / _gthis.image.current.get_texture().sizeX;
			_gthis.vertices[idx1 + 3] = (_gthis.image.current.ty + y * _gthis.image.current.tSizeY) / _gthis.image.current.get_texture().sizeY;
			_gthis.vertices[idx1 + 4] = 1.0;
			_gthis.vertices[idx1 + 5] = 1.0;
			_gthis.vertices[idx1 + 6] = 1.0;
			_gthis.vertices[idx1 + 7] = 1.0;
			var vertexIdx = _gthis.vertexCount++;
			if(prevVertexIdx >= 0) {
				_gthis.indices[_gthis.indexCount++] = centerVertexIdx;
				_gthis.indices[_gthis.indexCount++] = prevVertexIdx;
				_gthis.indices[_gthis.indexCount++] = vertexIdx;
			}
			prevVertexIdx = vertexIdx;
			if(isLast) {
				break;
			}
			var nextPos = Math.floor(pos) + 1;
			if(posEnd >= pos && posEnd <= nextPos) {
				nextPos = posEnd;
				isLast = true;
			}
			pos = nextPos;
		}
	}
	,getImage: function() {
		return this.image;
	}
	,getBounds: function() {
		return this.bounds;
	}
	,getVertices: function() {
		if(!this.isMeshValid) {
			this.isMeshValid = true;
			this.createMesh();
			this.stateId++;
		}
		return this.vertices;
	}
	,getIndices: function() {
		if(!this.isMeshValid) {
			this.isMeshValid = true;
			this.createMesh();
			this.stateId++;
		}
		return this.indices;
	}
	,getVertexCount: function() {
		if(!this.isMeshValid) {
			this.isMeshValid = true;
			this.createMesh();
			this.stateId++;
		}
		return this.vertexCount;
	}
	,getIndexCount: function() {
		if(!this.isMeshValid) {
			this.isMeshValid = true;
			this.createMesh();
			this.stateId++;
		}
		return this.indexCount;
	}
	,getStateId: function() {
		return this.stateId;
	}
	,__class__: jetgui_element_ArcElementBase
});
var jetgui_element_ArcElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	this.imageSizeY = 0;
	this.imageSizeX = 0;
	jetgui_element_ArcElementBase.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.ArcElement"] = jetgui_element_ArcElement;
jetgui_element_ArcElement.__name__ = "jetgui.element.ArcElement";
jetgui_element_ArcElement.__super__ = jetgui_element_ArcElementBase;
jetgui_element_ArcElement.prototype = $extend(jetgui_element_ArcElementBase.prototype,{
	src: null
	,imageSizeX: null
	,imageSizeY: null
	,getContentSizeX: function() {
		return this.imageSizeX;
	}
	,getContentSizeY: function() {
		return this.imageSizeY;
	}
	,getDefaultSize: function() {
		return jetgui_style_ESizeImpl.content;
	}
	,applyComputedStyle: function() {
		jetgui_element_ArcElementBase.prototype.applyComputedStyle.call(this);
		var s = this.computedStyle;
		this.setSrc(s.src);
		var a = s.arcStart;
		var arcStart = a != null ? a : 0.0;
		var a1 = s.arcEnd;
		this.setParameters(arcStart,a1 != null ? a1 : arcStart + 360.0);
	}
	,setSrc: function(newSrc) {
		var _gthis = this;
		if(this.src != newSrc) {
			this.src = newSrc;
			this.setImage(newSrc);
			this.getImageSize(function(sizeX,sizeY) {
				if(newSrc == _gthis.src) {
					if(sizeX != _gthis.imageSizeX) {
						_gthis.imageSizeX = sizeX;
						_gthis.needReflow(false);
					}
					if(sizeY != _gthis.imageSizeY) {
						_gthis.imageSizeY = sizeY;
						_gthis.needReflow(false);
					}
				}
			});
		}
	}
	,set_imageSizeX: function(v) {
		if(v != this.imageSizeX) {
			this.imageSizeX = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_imageSizeY: function(v) {
		if(v != this.imageSizeY) {
			this.imageSizeY = v;
			this.needReflow(false);
		}
		return v;
	}
	,__class__: jetgui_element_ArcElement
	,__properties__: $extend(jetgui_element_ArcElementBase.prototype.__properties__,{set_imageSizeY:"set_imageSizeY",set_imageSizeX:"set_imageSizeX"})
});
var jetgui_element_BoxElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	jetgui_element_Element.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.BoxElement"] = jetgui_element_BoxElement;
jetgui_element_BoxElement.__name__ = "jetgui.element.BoxElement";
jetgui_element_BoxElement.__super__ = jetgui_element_Element;
jetgui_element_BoxElement.prototype = $extend(jetgui_element_Element.prototype,{
	__class__: jetgui_element_BoxElement
});
var jetgui_element_DragElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	this.dragY = 0;
	this.dragX = 0;
	this.posY = 0;
	this.posX = 0;
	this.isDragging = false;
	jetgui_element_Element.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.DragElement"] = jetgui_element_DragElement;
jetgui_element_DragElement.__name__ = "jetgui.element.DragElement";
jetgui_element_DragElement.__interfaces__ = [jetgui_IUpdatebleElement];
jetgui_element_DragElement.__super__ = jetgui_element_Element;
jetgui_element_DragElement.prototype = $extend(jetgui_element_Element.prototype,{
	dragArc: null
	,dragAxis: null
	,onDragStart: null
	,onDrag: null
	,onDragEnd: null
	,isDragging: null
	,posX: null
	,posY: null
	,dragX: null
	,dragY: null
	,applyVDomAttributes: function(vDomElement) {
		jetgui_element_Element.prototype.applyVDomAttributes.call(this,vDomElement);
		if(this.onDragStart != vDomElement.onDragStart) {
			this.onDragStart = vDomElement.onDragStart;
		}
		if(this.onDrag != vDomElement.onDrag) {
			this.onDrag = vDomElement.onDrag;
		}
		if(this.onDragEnd != vDomElement.onDragEnd) {
			this.onDragEnd = vDomElement.onDragEnd;
		}
	}
	,applyComputedStyle: function() {
		jetgui_element_Element.prototype.applyComputedStyle.call(this);
		var s = this.computedStyle;
		var a = s.dragArc;
		this.dragArc = a != null ? a : 90.0;
		var a1 = s.dragAxis;
		this.dragAxis = a1 != null ? a1 : 0;
	}
	,getPositionX: function() {
		return this.posX;
	}
	,getPositionY: function() {
		return this.posY;
	}
	,setPositionX: function(value) {
		this.posX = value | 0;
		if(!this.isDragging) {
			this.setRealPositionX(this.posX);
		}
	}
	,setPositionY: function(value) {
		this.posY = value | 0;
		if(!this.isDragging) {
			this.setRealPositionY(this.posY);
		}
	}
	,update: function(dt) {
		if(this.isDragging && this.isOnViewTree) {
			var parentNode = this.node.parent;
			var parent = parentNode != null ? jetgui_JetHelper.element(parentNode) : null;
			var x = this.dragX;
			var y = this.dragY;
			var _this = parent.node;
			var current = _this;
			var result = null;
			while(result == null && current != null) {
				var sThis = current._entity;
				if(sThis == null) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
				}
				result = sThis.__component__banan_backend_RenderRootEdge;
				current = current.parent;
			}
			var sThis1 = result;
			if(sThis1 == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:409","",null));
			}
			if(!_this._isInverseTransformValid) {
				_this.validateInverseTransform();
			}
			var _this1 = _this._inverseTransform;
			var _this2 = sThis1.camera;
			var x1 = _this2.cameraX + x / _this2.cameraScale;
			var y1 = _this2.cameraY + y / _this2.cameraScale;
			var w = _this1.m02 * x1 + _this1.m12 * y1 + _this1.m22;
			var resultY = (_this1.m01 * x1 + _this1.m11 * y1 + _this1.m21) / w;
			this.setRealPositionX((_this1.m00 * x1 + _this1.m10 * y1 + _this1.m20) / w - this.getSizeX() / 2);
			this.setRealPositionY(resultY - this.getSizeY() / 2);
		}
	}
	,willHandleDrag: function(dx,dy) {
		return jetgui_element_DragHelper.isInArc(this.dragAxis,this.dragArc,dx,dy,this.deviceProfileResolver);
	}
	,handleDrag: function(screenX,screenY,dx,dy) {
		this.dragX = screenX;
		this.dragY = screenY;
		if(this.onDrag != null) {
			this.onDrag(screenX,screenY);
		}
	}
	,handleDragStart: function(screenX,screenY) {
		this.isDragging = true;
		this.dragX = 0;
		this.dragY = 0;
		if(this.onDragStart != null) {
			this.onDragStart(screenX,screenY);
		}
	}
	,handleDragEnd: function(screenX,screenY) {
		this.isDragging = false;
		this.setRealPositionX(this.posX);
		this.setRealPositionY(this.posY);
		if(this.onDragEnd != null) {
			this.onDragEnd(screenX,screenY);
		}
	}
	,setRealPositionX: function(x) {
		jetgui_element_Element.prototype.setPositionX.call(this,x);
	}
	,setRealPositionY: function(y) {
		jetgui_element_Element.prototype.setPositionY.call(this,y);
	}
	,__class__: jetgui_element_DragElement
});
var jetgui_element_DragHelper = function() { };
$hxClasses["jetgui.element.DragHelper"] = jetgui_element_DragHelper;
jetgui_element_DragHelper.__name__ = "jetgui.element.DragHelper";
jetgui_element_DragHelper.isInArc = function(dragAxis,dragArc,dx,dy,deviceProfileResolver) {
	var a = dragAxis == 0 ? dx : dy;
	var a1 = dragAxis == 0 ? dy : dx;
	return Math.sqrt(dx * dx + dy * dy) * deviceProfileResolver.resolutionScale / deviceProfileResolver.dpi >= 0.04 && Math.atan2(a1 >= 0 ? a1 : -a1,a >= 0 ? a : -a) * (180.0 / Math.PI) <= dragArc;
};
var jetgui_element_LinearContainerElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	jetgui_element_Element.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.LinearContainerElement"] = jetgui_element_LinearContainerElement;
jetgui_element_LinearContainerElement.__name__ = "jetgui.element.LinearContainerElement";
jetgui_element_LinearContainerElement.__super__ = jetgui_element_Element;
jetgui_element_LinearContainerElement.prototype = $extend(jetgui_element_Element.prototype,{
	spacing: null
	,childrenAlign: null
	,resizeChildren: null
	,reverseOrder: null
	,applyComputedStyle: function() {
		jetgui_element_Element.prototype.applyComputedStyle.call(this);
		var s = this.computedStyle;
		var a = s.spacing;
		var v = a != null ? a : 0.0;
		if(v != this.spacing) {
			this.spacing = v;
			this.needReflow(false);
		}
		var a1 = s.childrenAlign;
		var v1 = a1 != null ? a1 : 0.0;
		if(v1 != this.childrenAlign) {
			this.childrenAlign = v1;
			this.needReflow(false);
		}
		var a2 = s.resizeChildren;
		var v2 = a2 != null && a2;
		if(v2 != this.resizeChildren) {
			this.resizeChildren = v2;
			this.needReflow(false);
		}
		var a3 = s.reverseOrder;
		var v3 = a3 != null && a3;
		if(v3 != this.reverseOrder) {
			this.reverseOrder = v3;
			this.needReflow(false);
		}
	}
	,set_spacing: function(v) {
		if(v != this.spacing) {
			this.spacing = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_childrenAlign: function(v) {
		if(v != this.childrenAlign) {
			this.childrenAlign = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_resizeChildren: function(v) {
		if(v != this.resizeChildren) {
			this.resizeChildren = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_reverseOrder: function(v) {
		if(v != this.reverseOrder) {
			this.reverseOrder = v;
			this.needReflow(false);
		}
		return v;
	}
	,__class__: jetgui_element_LinearContainerElement
	,__properties__: $extend(jetgui_element_Element.prototype.__properties__,{set_reverseOrder:"set_reverseOrder",set_resizeChildren:"set_resizeChildren",set_childrenAlign:"set_childrenAlign",set_spacing:"set_spacing"})
});
var jetgui_element_HBoxElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	jetgui_element_LinearContainerElement.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.HBoxElement"] = jetgui_element_HBoxElement;
jetgui_element_HBoxElement.__name__ = "jetgui.element.HBoxElement";
jetgui_element_HBoxElement.__super__ = jetgui_element_LinearContainerElement;
jetgui_element_HBoxElement.prototype = $extend(jetgui_element_LinearContainerElement.prototype,{
	reflowChildren: function(reflowStage,reflowCounter,isSetSizeX,isSetSizeY) {
		var e = this;
		var isSetSizeMain = isSetSizeX;
		var isSetSizeCross = isSetSizeY;
		var isBoxDefinedX = e.sizeKnownCounterX == reflowCounter;
		var isBoxDefinedY = e.sizeKnownCounterY == reflowCounter;
		var isBoxDefinedMain = isBoxDefinedX;
		var isBoxDefinedCross = isBoxDefinedY;
		var p_paddingBegin = e.paddingLeft;
		var boxX_to = e.getSizeX() - e.paddingRight;
		var p_paddingBegin1 = e.paddingTop;
		var boxY_to = e.getSizeY() - e.paddingBottom;
		var childrenSize = 0;
		var isAllChildrenSizeKnown = true;
		var isAllChildrenSizeKnownCross = true;
		var numChildren = 0;
		var maxCross = 0;
		var childSize = 0;
		var shouldContinue = true;
		var childNode = e.node.firstChild;
		while(childNode != null) {
			if(jetgui_JetHelper.element(childNode) != null) {
				++numChildren;
			}
			childNode = childNode.next;
		}
		if(e.resizeChildren) {
			var props_paddingBegin = e.paddingLeft;
			var props_paddingEnd = e.paddingRight;
			if(!isBoxDefinedMain && isSetSizeMain) {
				e.setSizeX(Math.floor(100 + props_paddingBegin + props_paddingEnd));
				e.sizeKnownCounterX = reflowCounter;
				isBoxDefinedMain = true;
				isBoxDefinedX = true;
				haxe_Log.trace("linear element has resizeChildren==true, but does not have it`s size defined. Using 100.",{ fileName : "jetgui/element/ReflowHelper.hx", lineNumber : 208, className : "jetgui.element.ReflowHelper", methodName : "reflowChildrenLinear"});
			}
			if(reflowStage == 0) {
				if(!isBoxDefinedMain) {
					shouldContinue = false;
				}
			} else if(!isBoxDefinedMain) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ReflowHelper.hx:218","isBoxDefinedMain",null));
			}
			childSize = (e.getSizeX() - props_paddingBegin - props_paddingEnd - e.spacing * (numChildren - 1)) / numChildren;
		}
		if(shouldContinue) {
			var childNode1 = e.node.firstChild;
			while(childNode1 != null) {
				var element = jetgui_JetHelper.element(childNode1);
				if(element != null) {
					if(e.resizeChildren) {
						element.setSizeX(Math.floor(childSize));
						element.sizeKnownCounterX = reflowCounter;
					}
					element.reflowStage(reflowStage,reflowCounter,isBoxDefinedX,false,p_paddingBegin,boxX_to,isBoxDefinedY,true,p_paddingBegin1,boxY_to);
					if(element.sizeKnownCounterX != reflowCounter && element.isSizeDependOnParentX) {
						element.setSizeX(Math.floor(10));
						element.sizeKnownCounterX = reflowCounter;
						haxe_Log.trace("Element size depend on parent size along main axis in linear container. Using 10.",{ fileName : "jetgui/element/ReflowHelper.hx", lineNumber : 240, className : "jetgui.element.ReflowHelper", methodName : "reflowChildrenLinear"});
					}
					if(element.sizeKnownCounterX != reflowCounter) {
						isAllChildrenSizeKnown = false;
					} else {
						childrenSize += element.getSizeX();
					}
					if(!element.isSizeDependOnParentY) {
						if(element.sizeKnownCounterY == reflowCounter) {
							var a = element.offsetTop;
							var a1 = element.offsetBottom;
							var p = { paddingBegin : element.paddingTop, paddingEnd : element.paddingBottom, offsetBegin : element.offsetTop, offsetBeginVal : a != null ? a : 0.0, offsetEnd : element.offsetBottom, offsetEndVal : a1 != null ? a1 : 0.0, size : element.height, align : element.vAlign};
							var b = element.getSizeY() + p.offsetBeginVal + p.offsetEndVal;
							maxCross = maxCross > b ? maxCross : b;
						} else {
							isAllChildrenSizeKnownCross = false;
						}
					}
				}
				childNode1 = childNode1.next;
			}
			var propsCross_paddingBegin = e.paddingTop;
			var propsCross_paddingEnd = e.paddingBottom;
			var b1 = numChildren - 1;
			var childrenSize1 = childrenSize + e.spacing * (0 > b1 ? 0 : b1);
			if(isAllChildrenSizeKnown && !isBoxDefinedMain && isSetSizeMain) {
				e.setSizeX(Math.floor(childrenSize1 + e.paddingLeft + e.paddingRight));
				e.sizeKnownCounterX = reflowCounter;
			}
			if(!isBoxDefinedCross && isSetSizeCross && isAllChildrenSizeKnownCross) {
				e.setSizeY(Math.floor(maxCross + propsCross_paddingBegin + propsCross_paddingEnd));
				e.sizeKnownCounterY = reflowCounter;
			}
			if(reflowStage == 1) {
				if(!isAllChildrenSizeKnown) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ReflowHelper.hx:282","isAllChildrenSizeKnown",null));
				}
				var p_paddingBegin2 = e.paddingLeft;
				var p_paddingBegin3 = e.paddingTop;
				var boxCross_to = e.getSizeY() - e.paddingBottom;
				var pos = p_paddingBegin2 + (e.getSizeX() - e.paddingRight - p_paddingBegin2 - childrenSize1) * e.childrenAlign;
				var isReverse = e.reverseOrder;
				if(isReverse == null) {
					isReverse = false;
				}
				var childNode2 = isReverse ? e.node.lastChild : e.node.firstChild;
				while(childNode2 != null) {
					var element1 = jetgui_JetHelper.element(childNode2);
					if(element1 != null) {
						element1.setPositionX(pos);
						pos += element1.getSizeX() + e.spacing;
						var a2 = element1.offsetTop;
						var a3 = element1.offsetBottom;
						var p1 = { paddingBegin : element1.paddingTop, paddingEnd : element1.paddingBottom, offsetBegin : element1.offsetTop, offsetBeginVal : a2 != null ? a2 : 0.0, offsetEnd : element1.offsetBottom, offsetEndVal : a3 != null ? a3 : 0.0, size : element1.height, align : element1.vAlign};
						element1.setPositionY(p1.align != null ? p_paddingBegin3 + p1.offsetBeginVal + (boxCross_to - p_paddingBegin3 - (element1.getSizeY() + p1.offsetBeginVal + p1.offsetEndVal)) * p1.align : p1.offsetBegin != null ? p_paddingBegin3 + p1.offsetBegin : p1.offsetEnd != null ? boxCross_to - p1.offsetEnd - element1.getSizeY() : p_paddingBegin3);
					}
					childNode2 = isReverse ? childNode2.prev : childNode2.next;
				}
			}
		}
	}
	,__class__: jetgui_element_HBoxElement
});
var jetgui_element_ImageElementBase = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	jetgui_element_Element.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
	this.imageDisplayEdge = new banan_display_ImageDisplayEdge(render2Context);
	this.setMainDisplay(this.imageDisplayEdge);
};
$hxClasses["jetgui.element.ImageElementBase"] = jetgui_element_ImageElementBase;
jetgui_element_ImageElementBase.__name__ = "jetgui.element.ImageElementBase";
jetgui_element_ImageElementBase.__super__ = jetgui_element_Element;
jetgui_element_ImageElementBase.prototype = $extend(jetgui_element_Element.prototype,{
	imageDisplayEdge: null
	,image: null
	,mask: null
	,getImageSize: function(cb) {
		jetgui_element_ImageHelper.getImageSize(this.mask != null ? this.mask : this.image != null ? this.image : null,cb);
	}
	,setFlip: function(isFlipX,isFlipY) {
		var _this = this.imageDisplayEdge;
		if(isFlipX != _this.isFlipX) {
			_this.isFlipX = isFlipX;
			_this.invalidate();
		}
		var _this1 = this.imageDisplayEdge;
		if(isFlipY != _this1.isFlipY) {
			_this1.isFlipY = isFlipY;
			_this1.invalidate();
		}
	}
	,calculateMaskedSize: function(maskedSizeBase,maskedSize,maskedScale) {
		if(maskedSize == null) {
			if(maskedScale != null) {
				return Math.round(maskedSizeBase * maskedScale);
			} else {
				return maskedSizeBase;
			}
		} else {
			return maskedSize;
		}
	}
	,calculateMaskedOffset: function(maskSize,maskedSize,maskedShift,maskedAlign) {
		if(maskedShift != null) {
			return maskedShift;
		} else if(maskedAlign != null) {
			return Math.floor(maskedAlign * maskSize * (1.0 - maskedSize / maskSize));
		} else {
			return 0;
		}
	}
	,setImage: function(imagePath,maskPath,maskedScaleX,maskedScaleY,maskedSizeX,maskedSizeY,maskedShiftX,maskedShiftY,maskedAlignX,maskedAlignY,maskSizeX,maskSizeY,maskedScaleMode) {
		this.image = null;
		this.mask = null;
		if(maskPath != null) {
			this.mask = this.resourceManager.getFsImage(maskPath);
		}
		var nineSlice = null;
		if(imagePath != null) {
			var path = imagePath;
			this.image = this.resourceManager.getFsImage(path);
			nineSlice = this.resourceManager.getFsImageNineSlice(path);
		}
		if(this.mask != null && this.image != null) {
			var img;
			if(maskSizeX != null && maskSizeY != null) {
				var calcMaskedSizeX = this.calculateMaskedSize(this.image.current.tSizeX,maskedSizeX,maskedScaleX);
				var calcMaskedSizeY = this.calculateMaskedSize(this.image.current.tSizeY,maskedSizeY,maskedScaleY);
				switch(maskedScaleMode._hx_index) {
				case 0:
					break;
				case 1:
					var xRatio = calcMaskedSizeX / this.image.current.tSizeX;
					var yRatio = calcMaskedSizeY / this.image.current.tSizeY;
					var maxRatio = xRatio > yRatio ? xRatio : yRatio;
					calcMaskedSizeX = Math.round(this.image.current.tSizeX * maxRatio);
					calcMaskedSizeY = Math.round(this.image.current.tSizeY * maxRatio);
					break;
				}
				var calcMaskedOffsetX = this.calculateMaskedOffset(maskSizeX,calcMaskedSizeX,maskedShiftX,maskedAlignX);
				var calcMaskedOffsetY = this.calculateMaskedOffset(maskSizeY,calcMaskedSizeY,maskedShiftY,maskedAlignY);
				var _this = this.resourceManager;
				var it = _this.ext;
				img = (it != null ? it : _this.ext = new banan_resource_ResourceManagerExt(_this)).getClippingMaskImage(imagePath,maskPath,calcMaskedSizeX,calcMaskedSizeY,calcMaskedOffsetX,calcMaskedOffsetY,maskSizeX,maskSizeY);
			} else {
				img = null;
			}
			this.imageDisplayEdge.setImage(img);
		} else {
			this.imageDisplayEdge.setImage(this.image,nineSlice);
		}
	}
	,setScaleMode: function(scaleMode) {
		var _this = this.imageDisplayEdge;
		var this1 = this.getDisplayScaleMode(scaleMode);
		var v = this1 != null ? this1 : banan_display_ScaleMode.Exact;
		if(v != _this.scaleMode) {
			_this.scaleMode = v;
			_this.invalidate();
		}
	}
	,getDisplayScaleMode: function(jetguiScaleMode) {
		if(jetguiScaleMode == null) {
			return null;
		}
		switch(jetguiScaleMode._hx_index) {
		case 0:
			return banan_display_ScaleMode.Exact;
		case 1:
			return banan_display_ScaleMode.CoverDrawOverflow;
		case 2:
			return banan_display_ScaleMode.CoverHideOverflow;
		case 3:
			return banan_display_ScaleMode.Contain;
		}
	}
	,__class__: jetgui_element_ImageElementBase
});
var jetgui_element_ImageElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	this.imageSizeY = 0;
	this.imageSizeX = 0;
	jetgui_element_ImageElementBase.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.ImageElement"] = jetgui_element_ImageElement;
jetgui_element_ImageElement.__name__ = "jetgui.element.ImageElement";
jetgui_element_ImageElement.__super__ = jetgui_element_ImageElementBase;
jetgui_element_ImageElement.prototype = $extend(jetgui_element_ImageElementBase.prototype,{
	srcMask: null
	,maskedScaleX: null
	,maskedScaleY: null
	,maskedSizeX: null
	,maskedSizeY: null
	,maskedShiftX: null
	,maskedShiftY: null
	,maskedAlignX: null
	,maskedAlignY: null
	,maskedScaleMode: null
	,src: null
	,flipX: null
	,flipY: null
	,reflowSizeX: null
	,reflowSizeY: null
	,imageSizeX: null
	,imageSizeY: null
	,reflowStage: function(reflowStage,reflowCounter,isBoxDefinedX,canSizeToBoxX,boxLeft,boxRight,isBoxDefinedY,canSizeToBoxY,boxTop,boxBottom) {
		jetgui_element_ImageElementBase.prototype.reflowStage.call(this,reflowStage,reflowCounter,isBoxDefinedX,canSizeToBoxX,boxLeft,boxRight,isBoxDefinedY,canSizeToBoxY,boxTop,boxBottom);
		this.setParams(this.src,this.srcMask,this.maskedScaleX,this.maskedScaleY,this.maskedSizeX,this.maskedSizeY,this.maskedShiftX,this.maskedShiftY,this.maskedAlignX,this.maskedAlignY,this.sizeKnownCounterX == reflowCounter ? this.getSizeX() : null,this.sizeKnownCounterY == reflowCounter ? this.getSizeY() : null,this.maskedScaleMode);
	}
	,applyVDomAttributes: function(vDomElement) {
		jetgui_element_ImageElementBase.prototype.applyVDomAttributes.call(this,vDomElement);
		var a = vDomElement.maskedScaleX;
		var a1 = vDomElement.maskedScaleY;
		var a2 = vDomElement.maskedSizeX;
		var a3 = vDomElement.maskedSizeY;
		var a4 = vDomElement.maskedShiftX;
		var a5 = vDomElement.maskedShiftY;
		var a6 = vDomElement.maskedAlignX;
		var a7 = vDomElement.maskedAlignY;
		var a8 = vDomElement.maskedScaleMode;
		this.setParams(this.src,vDomElement.srcMask,a != null ? a : vDomElement.maskedScale,a1 != null ? a1 : vDomElement.maskedScale,a2 != null ? a2 : vDomElement.maskedSize,a3 != null ? a3 : vDomElement.maskedSize,a4 != null ? a4 : vDomElement.maskedShift,a5 != null ? a5 : vDomElement.maskedShift,a6 != null ? a6 : vDomElement.maskedAlign,a7 != null ? a7 : vDomElement.maskedAlign,this.reflowSizeX,this.reflowSizeY,a8 != null ? a8 : jetgui_vdom_EMaskedScaleMode.exact);
	}
	,getContentSizeX: function() {
		return this.imageSizeX;
	}
	,getContentSizeY: function() {
		return this.imageSizeY;
	}
	,getDefaultSize: function() {
		return jetgui_style_ESizeImpl.content;
	}
	,applyComputedStyle: function() {
		jetgui_element_ImageElementBase.prototype.applyComputedStyle.call(this);
		var s = this.computedStyle;
		this.setParams(s.src,this.srcMask,this.maskedScaleX,this.maskedScaleY,this.maskedSizeX,this.maskedSizeY,this.maskedShiftX,this.maskedShiftY,this.maskedAlignX,this.maskedAlignY,this.reflowSizeX,this.reflowSizeY,this.maskedScaleMode);
		var a = s.flipX;
		var a1 = a != null ? a : s.flip;
		this.flipX = a1 != null && a1;
		var a2 = s.flipY;
		var a3 = a2 != null ? a2 : s.flip;
		this.flipY = a3 != null && a3;
		this.setFlip(this.flipX,this.flipY);
		var _this = this.imageDisplayEdge;
		var this1 = this.getDisplayScaleMode(s.scaleMode);
		var v = this1 != null ? this1 : banan_display_ScaleMode.Exact;
		if(v != _this.scaleMode) {
			_this.scaleMode = v;
			_this.invalidate();
		}
	}
	,setParams: function(src,srcMask,maskedScaleX,maskedScaleY,maskedSizeX,maskedSizeY,maskedShiftX,maskedShiftY,maskedAlignX,maskedAlignY,reflowSizeX,reflowSizeY,maskedScaleMode) {
		var _gthis = this;
		if(this.src != src || this.srcMask != srcMask || this.maskedScaleX != maskedScaleX || this.maskedScaleY != maskedScaleY || this.maskedSizeX != maskedSizeX || this.maskedSizeY != maskedSizeY || this.maskedShiftX != maskedShiftX || this.maskedShiftY != maskedShiftY || this.maskedAlignX != maskedAlignX || this.maskedAlignY != maskedAlignY || this.reflowSizeX != reflowSizeX || this.reflowSizeY != reflowSizeY || this.maskedScaleMode != maskedScaleMode) {
			this.src = src;
			this.srcMask = srcMask;
			this.maskedScaleX = maskedScaleX;
			this.maskedScaleY = maskedScaleY;
			this.maskedSizeX = maskedSizeX;
			this.maskedSizeY = maskedSizeY;
			this.maskedShiftX = maskedShiftX;
			this.maskedShiftY = maskedShiftY;
			this.maskedAlignX = maskedAlignX;
			this.maskedAlignY = maskedAlignY;
			this.reflowSizeX = reflowSizeX;
			this.reflowSizeY = reflowSizeY;
			this.maskedScaleMode = maskedScaleMode;
			this.setImage(src,srcMask,maskedScaleX,maskedScaleY,maskedSizeX,maskedSizeY,maskedShiftX,maskedShiftY,maskedAlignX,maskedAlignY,reflowSizeX,reflowSizeY,maskedScaleMode);
			this.getImageSize(function(sizeX,sizeY) {
				if(_gthis.src == src && _gthis.srcMask == srcMask) {
					if(sizeX != _gthis.imageSizeX) {
						_gthis.imageSizeX = sizeX;
						_gthis.needReflow(false);
					}
					if(sizeY != _gthis.imageSizeY) {
						_gthis.imageSizeY = sizeY;
						_gthis.needReflow(false);
					}
				}
			});
		}
	}
	,set_imageSizeX: function(v) {
		if(v != this.imageSizeX) {
			this.imageSizeX = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_imageSizeY: function(v) {
		if(v != this.imageSizeY) {
			this.imageSizeY = v;
			this.needReflow(false);
		}
		return v;
	}
	,__class__: jetgui_element_ImageElement
	,__properties__: $extend(jetgui_element_ImageElementBase.prototype.__properties__,{set_imageSizeY:"set_imageSizeY",set_imageSizeX:"set_imageSizeX"})
});
var jetgui_element_ImageHelper = function() { };
$hxClasses["jetgui.element.ImageHelper"] = jetgui_element_ImageHelper;
jetgui_element_ImageHelper.__name__ = "jetgui.element.ImageHelper";
jetgui_element_ImageHelper.getImageSize = function(image,cb) {
	if(image == null) {
		cb(0,0);
	} else if(image.isCoordsKnown) {
		cb(image.sizeX,image.sizeY);
	} else {
		image.currentChangedSig.addOnce(function() {
			jetgui_element_ImageHelper.getImageSize(image,cb);
			return;
		});
	}
};
var jetgui_element_ESetSizeResult = $hxEnums["jetgui.element.ESetSizeResult"] = { __ename__ : true, __constructs__ : ["done","auto","content","needBox"]
	,done: {_hx_index:0,__enum__:"jetgui.element.ESetSizeResult",toString:$estr}
	,auto: {_hx_index:1,__enum__:"jetgui.element.ESetSizeResult",toString:$estr}
	,content: ($_=function(scale) { return {_hx_index:2,scale:scale,__enum__:"jetgui.element.ESetSizeResult",toString:$estr}; },$_.__params__ = ["scale"],$_)
	,needBox: {_hx_index:3,__enum__:"jetgui.element.ESetSizeResult",toString:$estr}
};
jetgui_element_ESetSizeResult.__empty_constructs__ = [jetgui_element_ESetSizeResult.done,jetgui_element_ESetSizeResult.auto,jetgui_element_ESetSizeResult.needBox];
var jetgui_element_ReflowHelper = function() { };
$hxClasses["jetgui.element.ReflowHelper"] = jetgui_element_ReflowHelper;
jetgui_element_ReflowHelper.__name__ = "jetgui.element.ReflowHelper";
var jetgui_element_ClickAnimation = function(element,animation) {
	this.element = element;
	this.animation = animation;
};
$hxClasses["jetgui.element.ClickAnimation"] = jetgui_element_ClickAnimation;
jetgui_element_ClickAnimation.__name__ = "jetgui.element.ClickAnimation";
jetgui_element_ClickAnimation.prototype = {
	element: null
	,animation: null
	,__class__: jetgui_element_ClickAnimation
};
var jetgui_element_RootElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	this.clickAnimations = [];
	this.reflowCounter = 0;
	jetgui_element_Element.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.RootElement"] = jetgui_element_RootElement;
jetgui_element_RootElement.__name__ = "jetgui.element.RootElement";
jetgui_element_RootElement.__interfaces__ = [jetgui_IUpdatebleElement];
jetgui_element_RootElement.__super__ = jetgui_element_Element;
jetgui_element_RootElement.prototype = $extend(jetgui_element_Element.prototype,{
	rootWidth: null
	,rootHeight: null
	,reflowCounter: null
	,clickAnimations: null
	,reflow: function(rootWidth,rootHeight) {
		if(rootWidth != this.rootWidth) {
			this.rootWidth = rootWidth;
			this.needReflow(false);
		}
		if(rootHeight != this.rootHeight) {
			this.rootHeight = rootHeight;
			this.needReflow(false);
		}
		if(this.isNeedReflow) {
			this.reflowCounter++;
			this.reflowStage(1,this.reflowCounter,false,false,0,0,false,false,0,0);
			jetgui_element_Element.clearNeedReflow(this);
		}
	}
	,reflowStage: function(reflowStage,reflowCounter,isBoxDefinedX,canSizeToBoxX,boxLeft,boxRight,isBoxDefinedY,canSizeToBoxY,boxTop,boxBottom) {
		if(this.sizeKnownCounterX != reflowCounter) {
			this.setSizeX(Math.floor(this.rootWidth));
			this.sizeKnownCounterX = reflowCounter;
		}
		if(this.sizeKnownCounterY != reflowCounter) {
			this.setSizeY(Math.floor(this.rootHeight));
			this.sizeKnownCounterY = reflowCounter;
		}
		jetgui_element_Element.prototype.reflowStage.call(this,reflowStage,reflowCounter,isBoxDefinedX,canSizeToBoxX,boxLeft,boxRight,isBoxDefinedY,canSizeToBoxY,boxTop,boxBottom);
	}
	,removedFromViewTree: function() {
		var _g = 0;
		var _g1 = this.clickAnimations;
		while(_g < _g1.length) jetgui_JetHelper.resetAnimation(_g1[_g++].element);
		this.clickAnimations.length = 0;
	}
	,update: function(dt) {
		this.updateClickAnimations(dt);
	}
	,addClickAnimation: function(element) {
		var tmp = element.clickAnimation;
		if(tmp == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"RootElement.hx:82","element.clickAnimation" + " is null",null));
		}
		var anim = new jetgui_element_ClickAnimation(element,new banan_animation_timeline_JetTimelineAnimation(element,jetgui_ClickAnimations.get(tmp)));
		var a = this.clickAnimations;
		var result = null;
		var _g = 0;
		var _g1 = a.length;
		while(_g < _g1) {
			var i = _g++;
			if(a[i].element == element) {
				result = i;
				break;
			}
		}
		var a1 = result;
		this.clickAnimations[a1 != null ? a1 : this.clickAnimations.length] = anim;
	}
	,updateClickAnimations: function(dt) {
		var i = 0;
		var _g = 0;
		var _g1 = this.clickAnimations;
		while(_g < _g1.length) {
			var clickAnimation = _g1[_g];
			++_g;
			var isPlaying = false;
			if(clickAnimation.element.isOnViewTree) {
				clickAnimation.animation.update(dt);
				if(!clickAnimation.animation.isCompleted()) {
					isPlaying = true;
				}
			}
			if(isPlaying) {
				this.clickAnimations[i++] = clickAnimation;
			} else {
				jetgui_JetHelper.resetAnimation(clickAnimation.element);
			}
		}
		this.clickAnimations.length = i;
	}
	,set_rootWidth: function(v) {
		if(v != this.rootWidth) {
			this.rootWidth = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_rootHeight: function(v) {
		if(v != this.rootHeight) {
			this.rootHeight = v;
			this.needReflow(false);
		}
		return v;
	}
	,__class__: jetgui_element_RootElement
	,__properties__: $extend(jetgui_element_Element.prototype.__properties__,{set_rootHeight:"set_rootHeight",set_rootWidth:"set_rootWidth"})
});
var jetgui_element_ScrollElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	this.isDragging = false;
	this.scrollDir = -1;
	this.scrollRange = 0;
	this.scrollPosition = 0;
	jetgui_element_Element.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.ScrollElement"] = jetgui_element_ScrollElement;
jetgui_element_ScrollElement.__name__ = "jetgui.element.ScrollElement";
jetgui_element_ScrollElement.__super__ = jetgui_element_Element;
jetgui_element_ScrollElement.prototype = $extend(jetgui_element_Element.prototype,{
	dragAxis: null
	,scrollPosition: null
	,scrollRange: null
	,scrollDir: null
	,isDragging: null
	,onScrollStart: null
	,onScroll: null
	,onScrollEnd: null
	,reflowChildren: function(reflowStage,reflowCounter,isSetSizeX,isSetSizeY) {
		var additionalOffsetX = this.dragAxis == 0 ? this.scrollPosition * this.scrollDir : 0.0;
		var additionalOffsetY = this.dragAxis == 1 ? this.scrollPosition * this.scrollDir : 0.0;
		var isBoxDefinedX = this.sizeKnownCounterX == reflowCounter;
		var isBoxDefinedY = this.sizeKnownCounterY == reflowCounter;
		var p_paddingBegin = this.paddingLeft;
		var boxX_to = this.getSizeX() - this.paddingRight;
		var p_paddingBegin1 = this.paddingTop;
		var boxY_to = this.getSizeY() - this.paddingBottom;
		var maxX = 0;
		var maxY = 0;
		var isAllChildrenSizeKnownX = true;
		var isAllChildrenSizeKnownY = true;
		var childNode = this.node.firstChild;
		while(childNode != null) {
			var element = jetgui_JetHelper.element(childNode);
			if(element != null) {
				element.reflowStage(reflowStage,reflowCounter,isBoxDefinedX,true,p_paddingBegin,boxX_to,isBoxDefinedY,true,p_paddingBegin1,boxY_to);
				if(!element.isSizeDependOnParentX) {
					if(element.sizeKnownCounterX == reflowCounter) {
						var a = element.offsetLeft;
						var a1 = element.offsetRight;
						var p = { paddingBegin : element.paddingLeft, paddingEnd : element.paddingRight, offsetBegin : element.offsetLeft, offsetBeginVal : a != null ? a : 0.0, offsetEnd : element.offsetRight, offsetEndVal : a1 != null ? a1 : 0.0, size : element.width, align : element.hAlign};
						var b = element.getSizeX() + p.offsetBeginVal + p.offsetEndVal;
						maxX = maxX > b ? maxX : b;
					} else {
						isAllChildrenSizeKnownX = false;
					}
				}
				if(!element.isSizeDependOnParentY) {
					if(element.sizeKnownCounterY == reflowCounter) {
						var a2 = element.offsetTop;
						var a3 = element.offsetBottom;
						var p1 = { paddingBegin : element.paddingTop, paddingEnd : element.paddingBottom, offsetBegin : element.offsetTop, offsetBeginVal : a2 != null ? a2 : 0.0, offsetEnd : element.offsetBottom, offsetEndVal : a3 != null ? a3 : 0.0, size : element.height, align : element.vAlign};
						var b1 = element.getSizeY() + p1.offsetBeginVal + p1.offsetEndVal;
						maxY = maxY > b1 ? maxY : b1;
					} else {
						isAllChildrenSizeKnownY = false;
					}
				}
				if(reflowStage == 1) {
					var a4 = element.offsetLeft;
					var a5 = element.offsetRight;
					var p2 = { paddingBegin : element.paddingLeft, paddingEnd : element.paddingRight, offsetBegin : element.offsetLeft, offsetBeginVal : a4 != null ? a4 : 0.0, offsetEnd : element.offsetRight, offsetEndVal : a5 != null ? a5 : 0.0, size : element.width, align : element.hAlign};
					element.setPositionX((p2.align != null ? p_paddingBegin + p2.offsetBeginVal + (boxX_to - p_paddingBegin - (element.getSizeX() + p2.offsetBeginVal + p2.offsetEndVal)) * p2.align : p2.offsetBegin != null ? p_paddingBegin + p2.offsetBegin : p2.offsetEnd != null ? boxX_to - p2.offsetEnd - element.getSizeX() : p_paddingBegin) + additionalOffsetX);
					var a6 = element.offsetTop;
					var a7 = element.offsetBottom;
					var p3 = { paddingBegin : element.paddingTop, paddingEnd : element.paddingBottom, offsetBegin : element.offsetTop, offsetBeginVal : a6 != null ? a6 : 0.0, offsetEnd : element.offsetBottom, offsetEndVal : a7 != null ? a7 : 0.0, size : element.height, align : element.vAlign};
					element.setPositionY((p3.align != null ? p_paddingBegin1 + p3.offsetBeginVal + (boxY_to - p_paddingBegin1 - (element.getSizeY() + p3.offsetBeginVal + p3.offsetEndVal)) * p3.align : p3.offsetBegin != null ? p_paddingBegin1 + p3.offsetBegin : p3.offsetEnd != null ? boxY_to - p3.offsetEnd - element.getSizeY() : p_paddingBegin1) + additionalOffsetY);
				}
			}
			childNode = childNode.next;
		}
		if(!isBoxDefinedX && isSetSizeX && isAllChildrenSizeKnownX) {
			this.setSizeX(Math.floor(maxX + this.paddingLeft + this.paddingRight));
			this.sizeKnownCounterX = reflowCounter;
		}
		if(!isBoxDefinedY && isSetSizeY && isAllChildrenSizeKnownY) {
			this.setSizeY(Math.floor(maxY + this.paddingTop + this.paddingBottom));
			this.sizeKnownCounterY = reflowCounter;
		}
	}
	,applyComputedStyle: function() {
		jetgui_element_Element.prototype.applyComputedStyle.call(this);
		var s = this.computedStyle;
		var a = s.dragAxis;
		this.dragAxis = a != null ? a : 0;
		var a1 = s.scrollRange;
		var signedRange = a1 != null ? a1 : 0;
		this.scrollRange = signedRange >= 0 ? signedRange : -signedRange;
		this.scrollDir = signedRange > 0 ? 1 : signedRange < 0 ? -1 : 0;
	}
	,willHandleDrag: function(dx,dy) {
		return Math.abs(this.dragAxis == 0 ? dx : dy) > 0.0;
	}
	,handleDrag: function(screenX,screenY,dx,dy) {
		var prevScrollPosition = this.scrollPosition;
		var value = this.scrollPosition += this.scrollDir * ((this.dragAxis == 0 ? dx : dy) | 0);
		var max = this.scrollRange;
		this.scrollPosition = value < 0 ? 0 : value > max ? max : value;
		var delta = prevScrollPosition - this.scrollPosition;
		if(this.onScroll != null && delta != 0) {
			this.onScroll(this.getScrollPosition(),delta / this.scrollRange);
		}
		this.needReflow(false);
	}
	,handleDragStart: function(screenX,screenY) {
		this.isDragging = true;
		if(this.onScrollStart != null) {
			this.onScrollStart(this.getScrollPosition());
		}
	}
	,handleDragEnd: function(screenX,screenY) {
		this.isDragging = false;
		if(this.onScrollEnd != null) {
			this.onScrollEnd(this.getScrollPosition());
		}
	}
	,getScrollPosition: function() {
		return this.scrollPosition * 1.0 / this.scrollRange;
	}
	,getScrollPositionPx: function() {
		return this.scrollPosition;
	}
	,setScrollPosition: function(position) {
		if(!(position >= 0 && position <= 1)) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ScrollElement.hx:89","position >= 0 && position <= 1",null));
		}
		this.scrollPosition = position * this.scrollRange | 0;
		this.needReflow(false);
	}
	,setScrollPositionPx: function(position) {
		var value = position / this.scrollRange;
		this.setScrollPosition(value < 0.0 ? 0.0 : value > 1.0 ? 1.0 : value);
	}
	,setScrollListeners: function(onScrollStart,onScroll,onScrollEnd) {
		this.onScrollStart = onScrollStart;
		this.onScroll = onScroll;
		this.onScrollEnd = onScrollEnd;
	}
	,removeScrollListeners: function() {
		this.onScrollStart = null;
		this.onScroll = null;
		this.onScrollEnd = null;
	}
	,__class__: jetgui_element_ScrollElement
});
var jetgui_element_SkipReflowElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	jetgui_element_Element.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.SkipReflowElement"] = jetgui_element_SkipReflowElement;
jetgui_element_SkipReflowElement.__name__ = "jetgui.element.SkipReflowElement";
jetgui_element_SkipReflowElement.__super__ = jetgui_element_Element;
jetgui_element_SkipReflowElement.prototype = $extend(jetgui_element_Element.prototype,{
	getPositionX: function() {
		return 0;
	}
	,getPositionY: function() {
		return 0;
	}
	,getSizeX: function() {
		return 0;
	}
	,getSizeY: function() {
		return 0;
	}
	,setPositionX: function(value) {
	}
	,setPositionY: function(value) {
	}
	,setSizeX: function(value) {
	}
	,setSizeY: function(value) {
	}
	,__class__: jetgui_element_SkipReflowElement
});
var jetgui_element_TextElementBase = function(entitySystem,fontModule,resourceManager,render2Context,deviceProfileResolver) {
	jetgui_element_Element.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
	this.fontModule = fontModule;
	var font = fontModule.getDefaultFont();
	this.textDisplayEdge = new banan_display_TextDisplayEdge(render2Context,font,"",font.size);
	this.setMainDisplay(this.textDisplayEdge);
};
$hxClasses["jetgui.element.TextElementBase"] = jetgui_element_TextElementBase;
jetgui_element_TextElementBase.__name__ = "jetgui.element.TextElementBase";
jetgui_element_TextElementBase.__super__ = jetgui_element_Element;
jetgui_element_TextElementBase.prototype = $extend(jetgui_element_Element.prototype,{
	fontModule: null
	,textDisplayEdge: null
	,getTextSize: function(cb) {
		this.textDisplayEdge.resizeToNode(this.node);
		this.textDisplayEdge.getTextDesigner();
		var _this = this.textDisplayEdge;
		var may = _this.textDesigner;
		var this1 = may != null ? may.textSizeX : null;
		var _this1 = this.textDisplayEdge;
		var may1 = _this1.textDesigner;
		var this2 = may1 != null ? may1.textSizeY : null;
		cb((this1 != null ? this1 : 0) + _this.paddingLeft + _this.paddingRight,(this2 != null ? this2 : 0) + _this1.paddingTop + _this1.paddingBottom);
	}
	,setFont: function(fontName,fontSize) {
		var font = this.fontModule.getFont(fontName);
		if(font == null) {
			haxe_Log.trace("font " + fontName + " not found, using default font",{ fileName : "jetgui/element/TextElementBase.hx", lineNumber : 43, className : "jetgui.element.TextElementBase", methodName : "setFont"});
			font = this.fontModule.getDefaultFont();
		}
		var _this = this.textDisplayEdge;
		if(font != _this._font) {
			if(_this._font != null) {
				_this._font.texture.currentChangedSig.remove($bind(_this,_this.invalidate));
				_this._font.texture.release(_this.token);
			}
			_this._font = font;
			if(_this._font != null) {
				_this._font.texture.currentChangedSig.add($bind(_this,_this.invalidate));
				_this._font.texture.claim(_this.token);
			}
			_this.invalidate();
		}
		this.textDisplayEdge.set_fontSize(fontSize != null ? fontSize : font.size);
	}
	,setText: function(text) {
		this.textDisplayEdge.set_text(text != null ? text : "null");
	}
	,setWrap: function(wrap) {
		this.textDisplayEdge.set_wrap(wrap ? banan_display_TextWrap.WordWrap : banan_display_TextWrap.None);
	}
	,setHAlign: function(align) {
		var tmp;
		switch(align._hx_index) {
		case 0:
			tmp = banan_display_TextHAlign.Left;
			break;
		case 1:
			tmp = banan_display_TextHAlign.Center;
			break;
		case 2:
			tmp = banan_display_TextHAlign.Right;
			break;
		}
		this.textDisplayEdge.set_hAlign(tmp);
	}
	,setVAlign: function(align) {
		var tmp;
		switch(align._hx_index) {
		case 0:
			tmp = banan_display_TextVAlign.Top;
			break;
		case 1:
			tmp = banan_display_TextVAlign.Center;
			break;
		case 2:
			tmp = banan_display_TextVAlign.Bottom;
			break;
		}
		this.textDisplayEdge.set_vAlign(tmp);
	}
	,setTextColor: function(color) {
		var tmp = this.textDisplayEdge;
		var tmp1;
		switch(color._hx_index) {
		case 0:
			tmp1 = banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
			break;
		case 1:
			tmp1 = banan_backend_kha_display__$Color_Color_$Impl_$.RED;
			break;
		case 2:
			tmp1 = banan_backend_kha_display__$Color_Color_$Impl_$.GREEN;
			break;
		case 3:
			tmp1 = kha__$Color_Color_$Impl_$.fromFloats(1,1,0,1);
			break;
		case 4:
			tmp1 = banan_backend_kha_display__$Color_Color_$Impl_$.BLUE;
			break;
		case 5:
			tmp1 = banan_backend_kha_display__$Color_Color_$Impl_$.BLACK;
			break;
		case 6:
			var _g7 = color.a;
			var a = _g7;
			if(_g7 == null) {
				a = 1;
			}
			tmp1 = kha__$Color_Color_$Impl_$.fromFloats(color.r / 255,color.g / 255,color.b / 255,a);
			break;
		case 7:
			tmp1 = kha__$Color_Color_$Impl_$.fromFloats(color.r / 255,color.g / 255,color.b / 255,1);
			break;
		case 8:
			var _g3 = color.color;
			var color1 = _g3;
			if((_g3 & -16777216) == 0) {
				color1 = _g3 | -16777216;
			}
			tmp1 = kha__$Color_Color_$Impl_$._new(color1);
			break;
		}
		tmp.set_color(tmp1);
	}
	,setShadowColor: function(shadowColor) {
		var tmp = this.textDisplayEdge;
		var tmp1;
		switch(shadowColor._hx_index) {
		case 0:
			tmp1 = banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
			break;
		case 1:
			tmp1 = banan_backend_kha_display__$Color_Color_$Impl_$.RED;
			break;
		case 2:
			tmp1 = banan_backend_kha_display__$Color_Color_$Impl_$.GREEN;
			break;
		case 3:
			tmp1 = kha__$Color_Color_$Impl_$.fromFloats(1,1,0,1);
			break;
		case 4:
			tmp1 = banan_backend_kha_display__$Color_Color_$Impl_$.BLUE;
			break;
		case 5:
			tmp1 = banan_backend_kha_display__$Color_Color_$Impl_$.BLACK;
			break;
		case 6:
			var _g7 = shadowColor.a;
			var a = _g7;
			if(_g7 == null) {
				a = 1;
			}
			tmp1 = kha__$Color_Color_$Impl_$.fromFloats(shadowColor.r / 255,shadowColor.g / 255,shadowColor.b / 255,a);
			break;
		case 7:
			tmp1 = kha__$Color_Color_$Impl_$.fromFloats(shadowColor.r / 255,shadowColor.g / 255,shadowColor.b / 255,1);
			break;
		case 8:
			var _g3 = shadowColor.color;
			var color = _g3;
			if((_g3 & -16777216) == 0) {
				color = _g3 | -16777216;
			}
			tmp1 = kha__$Color_Color_$Impl_$._new(color);
			break;
		}
		tmp.set_shadowColor(tmp1);
	}
	,setShadow: function(shadow) {
		this.textDisplayEdge.isShadow = shadow;
	}
	,setShadowOffset: function(shadowOffsetX,shadowOffsetY) {
		this.textDisplayEdge.shadowOffsetX = shadowOffsetX;
		this.textDisplayEdge.shadowOffsetY = shadowOffsetY;
	}
	,setPadding: function(left,top,right,bottom) {
		this.textDisplayEdge.paddingLeft = left;
		this.textDisplayEdge.paddingRight = right;
		this.textDisplayEdge.paddingTop = top;
		this.textDisplayEdge.paddingBottom = bottom;
	}
	,setLineHeight: function(lineHeight) {
		this.textDisplayEdge.set_lineHeight(lineHeight);
	}
	,setMaxSize: function(maxSizeX,maxSizeY) {
		if(maxSizeX != null) {
			this.textDisplayEdge.isResizeToNodeX = false;
			this.textDisplayEdge.set_isHideOverflowX(true);
			var _this = this.textDisplayEdge;
			if(_this.sizeX != maxSizeX) {
				_this.invalidate();
			}
			_this.sizeX = maxSizeX;
		} else {
			this.textDisplayEdge.isResizeToNodeX = true;
			this.textDisplayEdge.set_isHideOverflowX(false);
		}
		if(maxSizeY != null) {
			this.textDisplayEdge.isResizeToNodeY = false;
			this.textDisplayEdge.set_isHideOverflowY(true);
			var _this1 = this.textDisplayEdge;
			if(_this1.sizeY != maxSizeY) {
				_this1.invalidate();
			}
			_this1.sizeY = maxSizeY;
		} else {
			this.textDisplayEdge.isResizeToNodeY = true;
			this.textDisplayEdge.set_isHideOverflowY(false);
		}
	}
	,setMaxVisibleChars: function(maxVisibleChars) {
		this.textDisplayEdge.set_maxVisibleChars(maxVisibleChars);
	}
	,__class__: jetgui_element_TextElementBase
});
var jetgui_element_TextElement = function(entitySystem,fontModule,resourceManager,render2Context,deviceProfileResolver) {
	this.isTextSizeRequested = false;
	this.isTextSizeValid = false;
	this.lastWidth = 559038737;
	this.requestTextSizeCounter = 0;
	this.textSizeY = 0;
	this.textSizeX = 0;
	jetgui_element_TextElementBase.call(this,entitySystem,fontModule,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.TextElement"] = jetgui_element_TextElement;
jetgui_element_TextElement.__name__ = "jetgui.element.TextElement";
jetgui_element_TextElement.__super__ = jetgui_element_TextElementBase;
jetgui_element_TextElement.prototype = $extend(jetgui_element_TextElementBase.prototype,{
	font: null
	,fontSize: null
	,value: null
	,textAlign: null
	,textVAlign: null
	,wrap: null
	,lineHeight: null
	,shadowColor: null
	,shadowOffsetX: null
	,shadowOffsetY: null
	,textColor: null
	,maxSizeX: null
	,maxSizeY: null
	,maxVisibleChars: null
	,textSizeX: null
	,textSizeY: null
	,requestTextSizeCounter: null
	,lastWidth: null
	,isTextSizeValid: null
	,isTextSizeRequested: null
	,getDefaultSize: function() {
		return jetgui_style_ESizeImpl.content;
	}
	,getContentSizeX: function() {
		if(this.wrap && this.maxSizeX == null) {
			return 0;
		} else {
			this.validateTextSize();
			return this.textSizeX;
		}
	}
	,getContentSizeY: function() {
		if(this.wrap) {
			if(this.lastWidth != this.getSizeX()) {
				this.invalidateTextSize();
			}
		}
		this.validateTextSize();
		return this.textSizeY;
	}
	,isContentSizeYDependOnX: function() {
		return this.wrap;
	}
	,applyComputedStyle: function() {
		jetgui_element_TextElementBase.prototype.applyComputedStyle.call(this);
		var s = this.computedStyle;
		var v = s.font;
		if(v != this.font) {
			this.font = v;
			this.needReflow(false);
		}
		var v1 = s.fontSize;
		if(v1 != this.fontSize) {
			this.fontSize = v1;
			this.needReflow(false);
		}
		var fontName = this.font;
		var fontSize = this.fontSize;
		var font = this.fontModule.getFont(fontName);
		if(font == null) {
			haxe_Log.trace("font " + fontName + " not found, using default font",{ fileName : "jetgui/element/TextElementBase.hx", lineNumber : 43, className : "jetgui.element.TextElementBase", methodName : "setFont"});
			font = this.fontModule.getDefaultFont();
		}
		var _this = this.textDisplayEdge;
		if(font != _this._font) {
			if(_this._font != null) {
				_this._font.texture.currentChangedSig.remove($bind(_this,_this.invalidate));
				_this._font.texture.release(_this.token);
			}
			_this._font = font;
			if(_this._font != null) {
				_this._font.texture.currentChangedSig.add($bind(_this,_this.invalidate));
				_this._font.texture.claim(_this.token);
			}
			_this.invalidate();
		}
		this.textDisplayEdge.set_fontSize(fontSize != null ? fontSize : font.size);
		var v2 = s.value;
		if(v2 != this.value) {
			this.value = v2;
			this.needReflow(false);
		}
		var text = Std.string(this.value);
		this.textDisplayEdge.set_text(text != null ? text : "null");
		var a = s.textAlign;
		this.textAlign = a != null ? a : jetgui_style_ETextAlign.left;
		var tmp;
		switch(this.textAlign._hx_index) {
		case 0:
			tmp = banan_display_TextHAlign.Left;
			break;
		case 1:
			tmp = banan_display_TextHAlign.Center;
			break;
		case 2:
			tmp = banan_display_TextHAlign.Right;
			break;
		}
		this.textDisplayEdge.set_hAlign(tmp);
		var a1 = s.textVAlign;
		this.textVAlign = a1 != null ? a1 : jetgui_style_ETextVAlign.top;
		var tmp1;
		switch(this.textVAlign._hx_index) {
		case 0:
			tmp1 = banan_display_TextVAlign.Top;
			break;
		case 1:
			tmp1 = banan_display_TextVAlign.Center;
			break;
		case 2:
			tmp1 = banan_display_TextVAlign.Bottom;
			break;
		}
		this.textDisplayEdge.set_vAlign(tmp1);
		var a2 = s.wrap;
		var v3 = a2 != null && a2;
		if(v3 != this.wrap) {
			this.wrap = v3;
			this.needReflow(false);
		}
		this.textDisplayEdge.set_wrap(this.wrap ? banan_display_TextWrap.WordWrap : banan_display_TextWrap.None);
		var a3 = s.lineHeight;
		var v4 = a3 != null ? a3 : 1.0;
		if(v4 != this.lineHeight) {
			this.lineHeight = v4;
			this.needReflow(false);
		}
		this.textDisplayEdge.set_lineHeight(this.lineHeight);
		this.shadowColor = s.shadowColor;
		var a4 = s.shadowOffsetX;
		var v5 = a4 != null ? a4 : 0.0;
		if(v5 != this.shadowOffsetX) {
			this.shadowOffsetX = v5;
			this.needReflow(false);
		}
		var a5 = s.shadowOffsetY;
		var v6 = a5 != null ? a5 : 0.0;
		if(v6 != this.shadowOffsetY) {
			this.shadowOffsetY = v6;
			this.needReflow(false);
		}
		this.textDisplayEdge.isShadow = this.shadowColor != null;
		this.textDisplayEdge.shadowOffsetX = this.shadowOffsetX;
		this.textDisplayEdge.shadowOffsetY = this.shadowOffsetY;
		var a6 = s.shadowColor;
		var shadowColor = a6 != null ? a6 : jetgui_style_EColorImpl.white;
		var tmp2 = this.textDisplayEdge;
		var tmp3;
		switch(shadowColor._hx_index) {
		case 0:
			tmp3 = banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
			break;
		case 1:
			tmp3 = banan_backend_kha_display__$Color_Color_$Impl_$.RED;
			break;
		case 2:
			tmp3 = banan_backend_kha_display__$Color_Color_$Impl_$.GREEN;
			break;
		case 3:
			tmp3 = kha__$Color_Color_$Impl_$.fromFloats(1,1,0,1);
			break;
		case 4:
			tmp3 = banan_backend_kha_display__$Color_Color_$Impl_$.BLUE;
			break;
		case 5:
			tmp3 = banan_backend_kha_display__$Color_Color_$Impl_$.BLACK;
			break;
		case 6:
			var _g7 = shadowColor.a;
			var a7 = _g7;
			if(_g7 == null) {
				a7 = 1;
			}
			tmp3 = kha__$Color_Color_$Impl_$.fromFloats(shadowColor.r / 255,shadowColor.g / 255,shadowColor.b / 255,a7);
			break;
		case 7:
			tmp3 = kha__$Color_Color_$Impl_$.fromFloats(shadowColor.r / 255,shadowColor.g / 255,shadowColor.b / 255,1);
			break;
		case 8:
			var _g3 = shadowColor.color;
			var color = _g3;
			if((_g3 & -16777216) == 0) {
				color = _g3 | -16777216;
			}
			tmp3 = kha__$Color_Color_$Impl_$._new(color);
			break;
		}
		tmp2.set_shadowColor(tmp3);
		var a8 = s.textColor;
		this.textColor = a8 != null ? a8 : jetgui_style_EColorImpl.white;
		var color1 = this.textColor;
		var tmp4 = this.textDisplayEdge;
		var tmp5;
		switch(color1._hx_index) {
		case 0:
			tmp5 = banan_backend_kha_display__$Color_Color_$Impl_$.WHITE;
			break;
		case 1:
			tmp5 = banan_backend_kha_display__$Color_Color_$Impl_$.RED;
			break;
		case 2:
			tmp5 = banan_backend_kha_display__$Color_Color_$Impl_$.GREEN;
			break;
		case 3:
			tmp5 = kha__$Color_Color_$Impl_$.fromFloats(1,1,0,1);
			break;
		case 4:
			tmp5 = banan_backend_kha_display__$Color_Color_$Impl_$.BLUE;
			break;
		case 5:
			tmp5 = banan_backend_kha_display__$Color_Color_$Impl_$.BLACK;
			break;
		case 6:
			var _g71 = color1.a;
			var a9 = _g71;
			if(_g71 == null) {
				a9 = 1;
			}
			tmp5 = kha__$Color_Color_$Impl_$.fromFloats(color1.r / 255,color1.g / 255,color1.b / 255,a9);
			break;
		case 7:
			tmp5 = kha__$Color_Color_$Impl_$.fromFloats(color1.r / 255,color1.g / 255,color1.b / 255,1);
			break;
		case 8:
			var _g31 = color1.color;
			var color2 = _g31;
			if((_g31 & -16777216) == 0) {
				color2 = _g31 | -16777216;
			}
			tmp5 = kha__$Color_Color_$Impl_$._new(color2);
			break;
		}
		tmp4.set_color(tmp5);
		var v7 = s.maxSizeX;
		if(v7 != this.maxSizeX) {
			this.maxSizeX = v7;
			this.needReflow(false);
		}
		var v8 = s.maxSizeY;
		if(v8 != this.maxSizeY) {
			this.maxSizeY = v8;
			this.needReflow(false);
		}
		var maxSizeX = this.maxSizeX;
		var maxSizeY = this.maxSizeY;
		if(maxSizeX != null) {
			this.textDisplayEdge.isResizeToNodeX = false;
			this.textDisplayEdge.set_isHideOverflowX(true);
			var _this1 = this.textDisplayEdge;
			if(_this1.sizeX != maxSizeX) {
				_this1.invalidate();
			}
			_this1.sizeX = maxSizeX;
		} else {
			this.textDisplayEdge.isResizeToNodeX = true;
			this.textDisplayEdge.set_isHideOverflowX(false);
		}
		if(maxSizeY != null) {
			this.textDisplayEdge.isResizeToNodeY = false;
			this.textDisplayEdge.set_isHideOverflowY(true);
			var _this2 = this.textDisplayEdge;
			if(_this2.sizeY != maxSizeY) {
				_this2.invalidate();
			}
			_this2.sizeY = maxSizeY;
		} else {
			this.textDisplayEdge.isResizeToNodeY = true;
			this.textDisplayEdge.set_isHideOverflowY(false);
		}
		this.textDisplayEdge.paddingLeft = this.paddingLeft;
		this.textDisplayEdge.paddingRight = this.paddingRight;
		this.textDisplayEdge.paddingTop = this.paddingTop;
		this.textDisplayEdge.paddingBottom = this.paddingBottom;
		this.maxVisibleChars = s.maxVisibleChars;
		this.textDisplayEdge.set_maxVisibleChars(this.maxVisibleChars);
		this.invalidateTextSize();
	}
	,invalidateTextSize: function() {
		this.lastWidth = this.getSizeX();
		this.isTextSizeValid = false;
		this.isTextSizeRequested = false;
	}
	,validateTextSize: function() {
		if(!this.isTextSizeValid && !this.isTextSizeRequested) {
			this.isTextSizeRequested = true;
			this.requestTextSize();
		}
	}
	,requestTextSize: function() {
		var _gthis = this;
		var currentCounter = ++this.requestTextSizeCounter;
		this.getTextSize(function(sizeX,sizeY) {
			if(currentCounter == _gthis.requestTextSizeCounter) {
				_gthis.textSizeX = Math.floor(sizeX);
				_gthis.textSizeY = Math.floor(sizeY);
				_gthis.isTextSizeValid = true;
				_gthis.lastWidth = _gthis.getSizeX();
			}
		});
	}
	,set_font: function(v) {
		if(v != this.font) {
			this.font = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_fontSize: function(v) {
		if(v != this.fontSize) {
			this.fontSize = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_value: function(v) {
		if(v != this.value) {
			this.value = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_wrap: function(v) {
		if(v != this.wrap) {
			this.wrap = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_lineHeight: function(v) {
		if(v != this.lineHeight) {
			this.lineHeight = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_shadowOffsetX: function(v) {
		if(v != this.shadowOffsetX) {
			this.shadowOffsetX = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_shadowOffsetY: function(v) {
		if(v != this.shadowOffsetY) {
			this.shadowOffsetY = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_maxSizeX: function(v) {
		if(v != this.maxSizeX) {
			this.maxSizeX = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_maxSizeY: function(v) {
		if(v != this.maxSizeY) {
			this.maxSizeY = v;
			this.needReflow(false);
		}
		return v;
	}
	,__class__: jetgui_element_TextElement
	,__properties__: $extend(jetgui_element_TextElementBase.prototype.__properties__,{set_maxSizeY:"set_maxSizeY",set_maxSizeX:"set_maxSizeX",set_shadowOffsetY:"set_shadowOffsetY",set_shadowOffsetX:"set_shadowOffsetX",set_lineHeight:"set_lineHeight",set_wrap:"set_wrap",set_value:"set_value",set_fontSize:"set_fontSize",set_font:"set_font"})
});
var jetgui_element_VBoxElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	jetgui_element_LinearContainerElement.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.VBoxElement"] = jetgui_element_VBoxElement;
jetgui_element_VBoxElement.__name__ = "jetgui.element.VBoxElement";
jetgui_element_VBoxElement.__super__ = jetgui_element_LinearContainerElement;
jetgui_element_VBoxElement.prototype = $extend(jetgui_element_LinearContainerElement.prototype,{
	reflowChildren: function(reflowStage,reflowCounter,isSetSizeX,isSetSizeY) {
		var e = this;
		var isSetSizeMain = isSetSizeY;
		var isSetSizeCross = isSetSizeX;
		var isBoxDefinedX = e.sizeKnownCounterX == reflowCounter;
		var isBoxDefinedY = e.sizeKnownCounterY == reflowCounter;
		var isBoxDefinedMain = isBoxDefinedY;
		var isBoxDefinedCross = isBoxDefinedX;
		var p_paddingBegin = e.paddingLeft;
		var boxX_to = e.getSizeX() - e.paddingRight;
		var p_paddingBegin1 = e.paddingTop;
		var boxY_to = e.getSizeY() - e.paddingBottom;
		var childrenSize = 0;
		var isAllChildrenSizeKnown = true;
		var isAllChildrenSizeKnownCross = true;
		var numChildren = 0;
		var maxCross = 0;
		var childSize = 0;
		var shouldContinue = true;
		var childNode = e.node.firstChild;
		while(childNode != null) {
			if(jetgui_JetHelper.element(childNode) != null) {
				++numChildren;
			}
			childNode = childNode.next;
		}
		if(e.resizeChildren) {
			var props_paddingBegin = e.paddingTop;
			var props_paddingEnd = e.paddingBottom;
			if(!isBoxDefinedMain && isSetSizeMain) {
				e.setSizeY(Math.floor(100 + props_paddingBegin + props_paddingEnd));
				e.sizeKnownCounterY = reflowCounter;
				isBoxDefinedMain = true;
				isBoxDefinedY = true;
				haxe_Log.trace("linear element has resizeChildren==true, but does not have it`s size defined. Using 100.",{ fileName : "jetgui/element/ReflowHelper.hx", lineNumber : 208, className : "jetgui.element.ReflowHelper", methodName : "reflowChildrenLinear"});
			}
			if(reflowStage == 0) {
				if(!isBoxDefinedMain) {
					shouldContinue = false;
				}
			} else if(!isBoxDefinedMain) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ReflowHelper.hx:218","isBoxDefinedMain",null));
			}
			childSize = (e.getSizeY() - props_paddingBegin - props_paddingEnd - e.spacing * (numChildren - 1)) / numChildren;
		}
		if(shouldContinue) {
			var childNode1 = e.node.firstChild;
			while(childNode1 != null) {
				var element = jetgui_JetHelper.element(childNode1);
				if(element != null) {
					if(e.resizeChildren) {
						element.setSizeY(Math.floor(childSize));
						element.sizeKnownCounterY = reflowCounter;
					}
					element.reflowStage(reflowStage,reflowCounter,isBoxDefinedX,true,p_paddingBegin,boxX_to,isBoxDefinedY,false,p_paddingBegin1,boxY_to);
					if(element.sizeKnownCounterY != reflowCounter && element.isSizeDependOnParentY) {
						element.setSizeY(Math.floor(10));
						element.sizeKnownCounterY = reflowCounter;
						haxe_Log.trace("Element size depend on parent size along main axis in linear container. Using 10.",{ fileName : "jetgui/element/ReflowHelper.hx", lineNumber : 240, className : "jetgui.element.ReflowHelper", methodName : "reflowChildrenLinear"});
					}
					if(element.sizeKnownCounterY != reflowCounter) {
						isAllChildrenSizeKnown = false;
					} else {
						childrenSize += element.getSizeY();
					}
					if(!element.isSizeDependOnParentX) {
						if(element.sizeKnownCounterX == reflowCounter) {
							var a = element.offsetLeft;
							var a1 = element.offsetRight;
							var p = { paddingBegin : element.paddingLeft, paddingEnd : element.paddingRight, offsetBegin : element.offsetLeft, offsetBeginVal : a != null ? a : 0.0, offsetEnd : element.offsetRight, offsetEndVal : a1 != null ? a1 : 0.0, size : element.width, align : element.hAlign};
							var b = element.getSizeX() + p.offsetBeginVal + p.offsetEndVal;
							maxCross = maxCross > b ? maxCross : b;
						} else {
							isAllChildrenSizeKnownCross = false;
						}
					}
				}
				childNode1 = childNode1.next;
			}
			var propsCross_paddingBegin = e.paddingLeft;
			var propsCross_paddingEnd = e.paddingRight;
			var b1 = numChildren - 1;
			var childrenSize1 = childrenSize + e.spacing * (0 > b1 ? 0 : b1);
			if(isAllChildrenSizeKnown && !isBoxDefinedMain && isSetSizeMain) {
				e.setSizeY(Math.floor(childrenSize1 + e.paddingTop + e.paddingBottom));
				e.sizeKnownCounterY = reflowCounter;
			}
			if(!isBoxDefinedCross && isSetSizeCross && isAllChildrenSizeKnownCross) {
				e.setSizeX(Math.floor(maxCross + propsCross_paddingBegin + propsCross_paddingEnd));
				e.sizeKnownCounterX = reflowCounter;
			}
			if(reflowStage == 1) {
				if(!isAllChildrenSizeKnown) {
					throw new js__$Boot_HaxeError(banan_error_Error.e(121,"ReflowHelper.hx:282","isAllChildrenSizeKnown",null));
				}
				var p_paddingBegin2 = e.paddingTop;
				var p_paddingBegin3 = e.paddingLeft;
				var boxCross_to = e.getSizeX() - e.paddingRight;
				var pos = p_paddingBegin2 + (e.getSizeY() - e.paddingBottom - p_paddingBegin2 - childrenSize1) * e.childrenAlign;
				var isReverse = e.reverseOrder;
				if(isReverse == null) {
					isReverse = false;
				}
				var childNode2 = isReverse ? e.node.lastChild : e.node.firstChild;
				while(childNode2 != null) {
					var element1 = jetgui_JetHelper.element(childNode2);
					if(element1 != null) {
						element1.setPositionY(pos);
						pos += element1.getSizeY() + e.spacing;
						var a2 = element1.offsetLeft;
						var a3 = element1.offsetRight;
						var p1 = { paddingBegin : element1.paddingLeft, paddingEnd : element1.paddingRight, offsetBegin : element1.offsetLeft, offsetBeginVal : a2 != null ? a2 : 0.0, offsetEnd : element1.offsetRight, offsetEndVal : a3 != null ? a3 : 0.0, size : element1.width, align : element1.hAlign};
						element1.setPositionX(p1.align != null ? p_paddingBegin3 + p1.offsetBeginVal + (boxCross_to - p_paddingBegin3 - (element1.getSizeX() + p1.offsetBeginVal + p1.offsetEndVal)) * p1.align : p1.offsetBegin != null ? p_paddingBegin3 + p1.offsetBegin : p1.offsetEnd != null ? boxCross_to - p1.offsetEnd - element1.getSizeX() : p_paddingBegin3);
					}
					childNode2 = isReverse ? childNode2.prev : childNode2.next;
				}
			}
		}
	}
	,__class__: jetgui_element_VBoxElement
});
var jetgui_element_slider_SliderElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	this.isTotalOffsetKnown = false;
	this.lastDragAmount = 0;
	this.targetOffsetReached = false;
	this.targetOffset = null;
	this.dragSpeed = 0.0;
	this.isDragging = false;
	this.elasticity = 1.0;
	this.drawOffset = 0;
	this.size = 0;
	this.totalSize = 0;
	this.totalOffset = 0;
	this.paddingEnd = 0;
	this.paddingBegin = 0;
	this.sliderChildrenAlign = 0;
	this.elementSize = 0;
	jetgui_element_Element.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.slider.SliderElement"] = jetgui_element_slider_SliderElement;
jetgui_element_slider_SliderElement.__name__ = "jetgui.element.slider.SliderElement";
jetgui_element_slider_SliderElement.__interfaces__ = [jetgui_IUpdatebleElement];
jetgui_element_slider_SliderElement.__super__ = jetgui_element_Element;
jetgui_element_slider_SliderElement.prototype = $extend(jetgui_element_Element.prototype,{
	dragArc: null
	,elementSize: null
	,sliderData: null
	,sliderChildrenAlign: null
	,paddingBegin: null
	,paddingEnd: null
	,totalOffset: null
	,totalSize: null
	,size: null
	,drawOffset: null
	,elasticity: null
	,isDragging: null
	,dragSpeed: null
	,targetOffset: null
	,targetOffsetReached: null
	,lastDragAmount: null
	,isTotalOffsetKnown: null
	,applyVDomAttributes: function(vDomElement) {
		jetgui_element_Element.prototype.applyVDomAttributes.call(this,vDomElement);
		if(this.sliderData != vDomElement.sliderData) {
			this.sliderData = vDomElement.sliderData;
			if(this.isTotalOffsetKnown) {
				this.targetOffset = this.calcTargetOffset(this.totalOffset,0.0);
				this.totalOffset = this.targetOffset;
				this.targetOffsetReached = true;
			}
		}
	}
	,applyComputedStyle: function() {
		jetgui_element_Element.prototype.applyComputedStyle.call(this);
		this.updatePadding();
		var s = this.computedStyle;
		var a = s.dragArc;
		this.dragArc = a != null ? a : 20.0;
		var a1 = s.sliderElementSize;
		var v = a1 != null ? a1 : 100.0;
		if(v != this.elementSize) {
			this.elementSize = v;
			this.needReflow(false);
		}
		var a2 = s.sliderChildrenAlign;
		this.sliderChildrenAlign = a2 != null ? a2 : 0.5;
		var a3 = s.sliderElasticity;
		this.elasticity = a3 != null ? a3 : 1.0;
		if(!this.isDragging) {
			this.targetOffset = this.calcTargetOffset(this.totalOffset,0.0);
			this.targetOffsetReached = false;
		}
	}
	,handleTouchBegin: function() {
		jetgui_element_Element.prototype.handleTouchBegin.call(this);
		this.targetOffset = null;
		this.dragSpeed = 0.0;
	}
	,handleTouchEnd: function() {
		jetgui_element_Element.prototype.handleTouchEnd.call(this);
		this.targetOffset = this.calcTargetOffset(this.totalOffset,this.dragSpeed);
		this.lastDragAmount = 0.0;
		this.targetOffsetReached = false;
	}
	,handleDragStart: function(screenX,screenY) {
		this.isDragging = true;
	}
	,handleDragEnd: function(screenX,screenY) {
		this.isDragging = false;
	}
	,update: function(dt) {
		var size = Math.round(this.getMainAxisSize() - this.paddingBegin - this.paddingEnd);
		var totalSize = this.sliderData == null ? 0 : this.elementSize * this.sliderData.getCount();
		if(this.isDragging && dt > 0.0) {
			var currentSpeed = this.lastDragAmount / dt;
			this.dragSpeed = this.dragSpeed != 0.0 ? (this.dragSpeed + currentSpeed) * 0.5 : currentSpeed;
		}
		if(this.size != size || this.totalSize != totalSize) {
			this.size = size;
			this.totalSize = totalSize;
			this.targetOffset = this.calcTargetOffset(this.totalOffset,0.0);
			this.targetOffsetReached = false;
		}
		if(this.sliderData != null && this.sliderData.gotoTask != null) {
			this.targetOffset = this.calcTargetOffset(-this.sliderData.gotoTask.index * this.elementSize + this.sliderData.gotoTask.align * size,0.0);
			if(!this.sliderData.gotoTask.isAnimated) {
				this.totalOffset = this.targetOffset;
			}
			this.sliderData.gotoTask = null;
			this.targetOffsetReached = false;
		}
		if(this.targetOffset != null && !this.targetOffsetReached) {
			if(!this.isTotalOffsetKnown) {
				this.totalOffset = this.targetOffset;
				this.isTotalOffsetKnown = true;
			}
			this.totalOffset = (this.totalOffset - this.targetOffset) * Math.exp(-dt * 15) + this.targetOffset;
			if(Math.abs(this.totalOffset - this.targetOffset) <= 1) {
				this.totalOffset = this.targetOffset;
				this.targetOffsetReached = true;
			}
			this.updateSlider();
		}
	}
	,isAnimating: function() {
		if(this.targetOffset != null) {
			return !this.targetOffsetReached;
		} else {
			return false;
		}
	}
	,getMainAxisSize: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"SliderElement.hx:153","",null));
	}
	,updatePadding: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"SliderElement.hx:157","",null));
	}
	,applyDrag: function(delta) {
		this.totalOffset += delta;
		this.lastDragAmount = delta;
		this.updateSlider();
	}
	,updateSlider: function() {
		if(this.sliderData != null) {
			this.sliderData.setVisiblePart(-(this.totalOffset + this.paddingBegin) / this.elementSize,(this.size - this.totalOffset + this.paddingEnd) / this.elementSize);
			var v = Math.round(this.sliderData.drawOffset * this.elementSize - this.paddingBegin);
			if(v != this.drawOffset) {
				this.drawOffset = v;
				this.needReflow(false);
			}
		}
	}
	,calcTargetOffset: function(currentOffset,dragSpeed) {
		if(this.elementSize == 0 || this.sliderData == null) {
			return 0;
		}
		var elmCount = this.sliderData.getCount();
		var sizeInElm = Math.floor(this.size / this.elementSize);
		var fracOffset = (this.size - sizeInElm * this.elementSize) * this.sliderChildrenAlign;
		var offsetInElm = (currentOffset - fracOffset) / this.elementSize + dragSpeed / this.elementSize * 0.5 * this.elasticity;
		var resultInElm;
		if(elmCount < sizeInElm) {
			resultInElm = (sizeInElm - elmCount) * this.sliderChildrenAlign;
		} else {
			var o = dragSpeed > 0 ? Math.ceil(offsetInElm) : dragSpeed < 0 ? Math.floor(offsetInElm) : Math.round(offsetInElm);
			var min = sizeInElm - this.sliderData.getCount();
			resultInElm = o < min ? min : o > 0 ? 0 : o;
		}
		return resultInElm * this.elementSize + fracOffset;
	}
	,set_elementSize: function(v) {
		if(v != this.elementSize) {
			this.elementSize = v;
			this.needReflow(false);
		}
		return v;
	}
	,set_drawOffset: function(v) {
		if(v != this.drawOffset) {
			this.drawOffset = v;
			this.needReflow(false);
		}
		return v;
	}
	,__class__: jetgui_element_slider_SliderElement
	,__properties__: $extend(jetgui_element_Element.prototype.__properties__,{set_drawOffset:"set_drawOffset",set_elementSize:"set_elementSize"})
});
var jetgui_element_slider_HSliderElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	jetgui_element_slider_SliderElement.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.slider.HSliderElement"] = jetgui_element_slider_HSliderElement;
jetgui_element_slider_HSliderElement.__name__ = "jetgui.element.slider.HSliderElement";
jetgui_element_slider_HSliderElement.__super__ = jetgui_element_slider_SliderElement;
jetgui_element_slider_HSliderElement.prototype = $extend(jetgui_element_slider_SliderElement.prototype,{
	willHandleDrag: function(dx,dy) {
		var deviceProfileResolver = this.deviceProfileResolver;
		if(this.getMainAxisSize() >= this.totalSize) {
			return false;
		} else {
			return jetgui_element_DragHelper.isInArc(0,this.dragArc,dx,dy,deviceProfileResolver);
		}
	}
	,handleDrag: function(screenX,screenY,dx,dy) {
		this.applyDrag(dx);
	}
	,reflowChildren: function(reflowStage,reflowCounter,isSetSizeX,isSetSizeY) {
		var isSetSizeCross = isSetSizeY;
		var isBoxDefinedX = this.sizeKnownCounterX == reflowCounter;
		var isBoxDefinedY = this.sizeKnownCounterY == reflowCounter;
		var isBoxDefinedCross = isBoxDefinedY;
		var p_paddingBegin = this.paddingLeft;
		var boxX_to = this.getSizeX() - this.paddingRight;
		var p_paddingBegin1 = this.paddingTop;
		var boxY_to = this.getSizeY() - this.paddingBottom;
		var maxCross = 0;
		var childNode = this.node.firstChild;
		while(childNode != null) {
			var element = jetgui_JetHelper.element(childNode);
			if(element != null) {
				element.reflowStage(reflowStage,reflowCounter,isBoxDefinedX,false,p_paddingBegin,boxX_to,isBoxDefinedY,true,p_paddingBegin1,boxY_to);
				if(element.sizeKnownCounterX != reflowCounter && element.isSizeDependOnParentX) {
					element.setSizeX(Math.floor(10));
					element.sizeKnownCounterX = reflowCounter;
					haxe_Log.trace("Element size depend on parent size along main axis in slider container. Using 10.",{ fileName : "jetgui/element/ReflowHelper.hx", lineNumber : 329, className : "jetgui.element.ReflowHelper", methodName : "reflowChildrenSlider"});
				}
				if(element.sizeKnownCounterY == reflowCounter && !element.isSizeDependOnParentY) {
					var a = element.offsetTop;
					var a1 = element.offsetBottom;
					var p = { paddingBegin : element.paddingTop, paddingEnd : element.paddingBottom, offsetBegin : element.offsetTop, offsetBeginVal : a != null ? a : 0.0, offsetEnd : element.offsetBottom, offsetEndVal : a1 != null ? a1 : 0.0, size : element.height, align : element.vAlign};
					var b = element.getSizeY() + p.offsetBeginVal + p.offsetEndVal;
					maxCross = maxCross > b ? maxCross : b;
				}
			}
			childNode = childNode.next;
		}
		if(!isBoxDefinedCross && isSetSizeCross) {
			this.setSizeY(Math.floor(maxCross + this.paddingTop + this.paddingBottom));
			this.sizeKnownCounterY = reflowCounter;
		}
		if(reflowStage == 1) {
			var p_paddingBegin2 = this.paddingTop;
			var boxCross_to = this.getSizeY() - this.paddingBottom;
			var pos = this.drawOffset + this.paddingLeft;
			var elementSize = this.elementSize;
			var childNode1 = this.node.firstChild;
			while(childNode1 != null) {
				var element1 = jetgui_JetHelper.element(childNode1);
				if(element1 != null) {
					element1.setPositionX(pos + (elementSize - element1.getSizeX()) / 2);
					pos += elementSize;
					var a2 = element1.offsetTop;
					var a3 = element1.offsetBottom;
					var p1 = { paddingBegin : element1.paddingTop, paddingEnd : element1.paddingBottom, offsetBegin : element1.offsetTop, offsetBeginVal : a2 != null ? a2 : 0.0, offsetEnd : element1.offsetBottom, offsetEndVal : a3 != null ? a3 : 0.0, size : element1.height, align : element1.vAlign};
					element1.setPositionY(p1.align != null ? p_paddingBegin2 + p1.offsetBeginVal + (boxCross_to - p_paddingBegin2 - (element1.getSizeY() + p1.offsetBeginVal + p1.offsetEndVal)) * p1.align : p1.offsetBegin != null ? p_paddingBegin2 + p1.offsetBegin : p1.offsetEnd != null ? boxCross_to - p1.offsetEnd - element1.getSizeY() : p_paddingBegin2);
				}
				childNode1 = childNode1.next;
			}
		}
	}
	,getMainAxisSize: function() {
		return this.getSizeX();
	}
	,updatePadding: function() {
		this.paddingBegin = this.paddingLeft;
		this.paddingEnd = this.paddingRight;
	}
	,__class__: jetgui_element_slider_HSliderElement
});
var jetgui_element_slider_VSliderElement = function(entitySystem,resourceManager,render2Context,deviceProfileResolver) {
	jetgui_element_slider_SliderElement.call(this,entitySystem,resourceManager,render2Context,deviceProfileResolver);
};
$hxClasses["jetgui.element.slider.VSliderElement"] = jetgui_element_slider_VSliderElement;
jetgui_element_slider_VSliderElement.__name__ = "jetgui.element.slider.VSliderElement";
jetgui_element_slider_VSliderElement.__super__ = jetgui_element_slider_SliderElement;
jetgui_element_slider_VSliderElement.prototype = $extend(jetgui_element_slider_SliderElement.prototype,{
	willHandleDrag: function(dx,dy) {
		var deviceProfileResolver = this.deviceProfileResolver;
		if(this.getMainAxisSize() >= this.totalSize) {
			return false;
		} else {
			return jetgui_element_DragHelper.isInArc(1,this.dragArc,dx,dy,deviceProfileResolver);
		}
	}
	,handleDrag: function(screenX,screenY,dx,dy) {
		this.applyDrag(dy);
	}
	,reflowChildren: function(reflowStage,reflowCounter,isSetSizeX,isSetSizeY) {
		var isSetSizeCross = isSetSizeX;
		var isBoxDefinedX = this.sizeKnownCounterX == reflowCounter;
		var isBoxDefinedY = this.sizeKnownCounterY == reflowCounter;
		var isBoxDefinedCross = isBoxDefinedX;
		var p_paddingBegin = this.paddingLeft;
		var boxX_to = this.getSizeX() - this.paddingRight;
		var p_paddingBegin1 = this.paddingTop;
		var boxY_to = this.getSizeY() - this.paddingBottom;
		var maxCross = 0;
		var childNode = this.node.firstChild;
		while(childNode != null) {
			var element = jetgui_JetHelper.element(childNode);
			if(element != null) {
				element.reflowStage(reflowStage,reflowCounter,isBoxDefinedX,true,p_paddingBegin,boxX_to,isBoxDefinedY,false,p_paddingBegin1,boxY_to);
				if(element.sizeKnownCounterY != reflowCounter && element.isSizeDependOnParentY) {
					element.setSizeY(Math.floor(10));
					element.sizeKnownCounterY = reflowCounter;
					haxe_Log.trace("Element size depend on parent size along main axis in slider container. Using 10.",{ fileName : "jetgui/element/ReflowHelper.hx", lineNumber : 329, className : "jetgui.element.ReflowHelper", methodName : "reflowChildrenSlider"});
				}
				if(element.sizeKnownCounterX == reflowCounter && !element.isSizeDependOnParentX) {
					var a = element.offsetLeft;
					var a1 = element.offsetRight;
					var p = { paddingBegin : element.paddingLeft, paddingEnd : element.paddingRight, offsetBegin : element.offsetLeft, offsetBeginVal : a != null ? a : 0.0, offsetEnd : element.offsetRight, offsetEndVal : a1 != null ? a1 : 0.0, size : element.width, align : element.hAlign};
					var b = element.getSizeX() + p.offsetBeginVal + p.offsetEndVal;
					maxCross = maxCross > b ? maxCross : b;
				}
			}
			childNode = childNode.next;
		}
		if(!isBoxDefinedCross && isSetSizeCross) {
			this.setSizeX(Math.floor(maxCross + this.paddingLeft + this.paddingRight));
			this.sizeKnownCounterX = reflowCounter;
		}
		if(reflowStage == 1) {
			var p_paddingBegin2 = this.paddingLeft;
			var boxCross_to = this.getSizeX() - this.paddingRight;
			var pos = this.drawOffset + this.paddingTop;
			var elementSize = this.elementSize;
			var childNode1 = this.node.firstChild;
			while(childNode1 != null) {
				var element1 = jetgui_JetHelper.element(childNode1);
				if(element1 != null) {
					element1.setPositionY(pos + (elementSize - element1.getSizeY()) / 2);
					pos += elementSize;
					var a2 = element1.offsetLeft;
					var a3 = element1.offsetRight;
					var p1 = { paddingBegin : element1.paddingLeft, paddingEnd : element1.paddingRight, offsetBegin : element1.offsetLeft, offsetBeginVal : a2 != null ? a2 : 0.0, offsetEnd : element1.offsetRight, offsetEndVal : a3 != null ? a3 : 0.0, size : element1.width, align : element1.hAlign};
					element1.setPositionX(p1.align != null ? p_paddingBegin2 + p1.offsetBeginVal + (boxCross_to - p_paddingBegin2 - (element1.getSizeX() + p1.offsetBeginVal + p1.offsetEndVal)) * p1.align : p1.offsetBegin != null ? p_paddingBegin2 + p1.offsetBegin : p1.offsetEnd != null ? boxCross_to - p1.offsetEnd - element1.getSizeX() : p_paddingBegin2);
				}
				childNode1 = childNode1.next;
			}
		}
	}
	,getMainAxisSize: function() {
		return this.getSizeY();
	}
	,updatePadding: function() {
		this.paddingBegin = this.paddingTop;
		this.paddingEnd = this.paddingBottom;
	}
	,__class__: jetgui_element_slider_VSliderElement
});
var jetgui_fn_GuiFunctionBase = function(moduleProvider) {
	this.isInitialized = false;
	jetgui_data_Observable.call(this);
	this.moduleProvider = moduleProvider;
};
$hxClasses["jetgui.fn.GuiFunctionBase"] = jetgui_fn_GuiFunctionBase;
jetgui_fn_GuiFunctionBase.__name__ = "jetgui.fn.GuiFunctionBase";
jetgui_fn_GuiFunctionBase.__super__ = jetgui_data_Observable;
jetgui_fn_GuiFunctionBase.prototype = $extend(jetgui_data_Observable.prototype,{
	isInitialized: null
	,moduleProvider: null
	,tryInitialize: function() {
		if(!this.isInitialized) {
			this.isInitialized = this.tryInjectModules();
		}
		return this.isInitialized;
	}
	,update: function() {
	}
	,register: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"GuiFunctionBase.hx:30","",null));
	}
	,unregister: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"GuiFunctionBase.hx:34","",null));
	}
	,initialize: function() {
	}
	,uninitialize: function() {
	}
	,onInitialized: function() {
		var observer = this.observers.keys();
		while(observer.hasNext()) {
			var observer1 = observer.next();
			observer1.unsubscribeFromAll();
			observer1.onObservableChanged();
		}
	}
	,tryInjectModules: function() {
		return true;
	}
	,__class__: jetgui_fn_GuiFunctionBase
});
var jetgui_fn_GuiFunctionList = function() { };
$hxClasses["jetgui.fn.GuiFunctionList"] = jetgui_fn_GuiFunctionList;
jetgui_fn_GuiFunctionList.__name__ = "jetgui.fn.GuiFunctionList";
var jetgui_fn_GuiFunctionModule = function(updatePriority) {
	this.allList = [];
	this.initList = [];
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["jetgui.fn.GuiFunctionModule"] = jetgui_fn_GuiFunctionModule;
jetgui_fn_GuiFunctionModule.__name__ = "jetgui.fn.GuiFunctionModule";
jetgui_fn_GuiFunctionModule.__super__ = banan_module_Module;
jetgui_fn_GuiFunctionModule.prototype = $extend(banan_module_Module.prototype,{
	initList: null
	,allList: null
	,addFunction: function(fn) {
		this.initList.push(fn);
		this.allList.push(fn);
		fn.register();
	}
	,removeFunction: function(fn) {
		HxOverrides.remove(this.initList,fn);
		HxOverrides.remove(this.allList,fn);
		fn.unregister();
	}
	,update: function() {
		var i = 0;
		var _g = 0;
		var _g1 = this.initList;
		while(_g < _g1.length) {
			var fn = _g1[_g];
			++_g;
			if(fn.tryInitialize()) {
				fn.onInitialized();
			} else {
				this.initList[i++] = fn;
			}
		}
		this.initList.length = i;
		var _g2 = 0;
		var _g3 = this.allList;
		while(_g2 < _g3.length) _g2++;
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("jetgui.fn.GuiFunctionModule",[],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: jetgui_fn_GuiFunctionModule
});
var jetgui_jml_ComponentDef = function(name,props,vars,styles,vdom) {
	this.name = name;
	this.props = props;
	this.vars = vars;
	this.styles = styles;
	this.vdom = vdom;
};
$hxClasses["jetgui.jml.ComponentDef"] = jetgui_jml_ComponentDef;
jetgui_jml_ComponentDef.__name__ = "jetgui.jml.ComponentDef";
jetgui_jml_ComponentDef.fromJetxml = function(path,doc,source) {
	var name = jetgui_jml_ComponentDef.nameFromPath(path);
	var props = [];
	var vars = [];
	var styles = [];
	if(doc.head.children != null) {
		var _g = 0;
		var _g1 = doc.head.children;
		while(_g < _g1.length) {
			var headChild = _g1[_g];
			++_g;
			switch(headChild.name.s) {
			case "prop":
				var name1 = jetgui_jml_ComponentDef.getAttrByName(headChild,"name");
				var type = jetgui_jml_ComponentDef.getAttrByName(headChild,"type");
				var mock = jetgui_jml_ComponentDef.getAttrByName(headChild,"mock");
				if(name1 == null || type == null) {
					throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("prop have no name or type",path,source,headChild.name.p0));
				}
				var tmp = jetgui_jml_JmlHelper.unquote(name1.s);
				var tmp1 = jetgui_jml_JmlHelper.unquote(type.s);
				var tmp2 = mock != null ? mock.s : null;
				props.push({ name : tmp, type : jetgui_jml_ComponentDef.typeNameFromAttrValue(tmp1,path).type, mock : tmp2});
				break;
			case "style":
				var pathStr = jetgui_jml_ComponentDef.getAttrByName(headChild,"path");
				if(pathStr == null) {
					throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("style has no `path` attribute",path,source,headChild.name.p0));
				}
				styles.push({ jssName : jetgui_jml_ComponentDef.styleNameFromPath(pathStr.s)});
				break;
			case "var":
				var name2 = jetgui_jml_ComponentDef.getAttrByName(headChild,"name");
				var type1 = jetgui_jml_ComponentDef.getAttrByName(headChild,"type");
				var value = jetgui_jml_ComponentDef.getAttrByName(headChild,"value");
				var smooth = jetgui_jml_ComponentDef.getAttrByName(headChild,"smooth");
				if(name2 == null || type1 == null) {
					throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("var have no name or type",path,source,headChild.name.p0));
				}
				var smoothTypeInc = null;
				var smoothParamInc = null;
				var smoothTypeDec = null;
				var smoothParamDec = null;
				var isSmooth = smooth != null;
				if(isSmooth) {
					if(!jetgui_jml_ComponentDef.smoothParamEReg.match(jetgui_jml_JmlHelper.unquote(smooth.s))) {
						throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("smooth attribute has unexpected value " + smooth.s,path,source,headChild.name.p0));
					}
					smoothTypeInc = jetgui_jml_ComponentDef.smoothParamEReg.matched(1);
					smoothParamInc = jetgui_jml_ComponentDef.smoothParamEReg.matched(2);
					smoothTypeDec = jetgui_jml_ComponentDef.smoothParamEReg.matched(3);
					smoothParamDec = jetgui_jml_ComponentDef.smoothParamEReg.matched(4);
				}
				var typeName = jetgui_jml_ComponentDef.typeNameFromAttrValue(jetgui_jml_JmlHelper.unquote(type1.s),path).type;
				vars.push({ name : jetgui_jml_JmlHelper.unquote(name2.s), type : typeName, valueType : isSmooth ? "Smooth" + typeName : "Value<" + typeName + ">", valueConstructorParam : isSmooth ? "" + smoothTypeInc + ", " + smoothParamInc + ", " + smoothTypeDec + ", " + smoothParamDec : "", value : value != null ? value.s : null});
				break;
			default:
				throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("unexpected tag in head",path,source,headChild.name.p0));
			}
		}
	}
	var vdom = doc.body.children;
	if(vdom != null) {
		var _g2 = 0;
		while(_g2 < vdom.length) jetgui_jml_ComponentDef.prepareVDom(vdom[_g2++],path,source);
	}
	return new jetgui_jml_ComponentDef(name,props,vars,styles,vdom);
};
jetgui_jml_ComponentDef.getAttrByName = function(tag,name) {
	var a = Lambda.find(tag.attr,function(a1) {
		return a1.name.s == name;
	});
	if(a != null) {
		return a.value;
	} else {
		return null;
	}
};
jetgui_jml_ComponentDef.typeNameFromAttrValue = function(attrValue,currentPath) {
	var type = "";
	var rawStr = attrValue;
	if(StringTools.startsWith(attrValue,"pgn:")) {
		rawStr = HxOverrides.substr(attrValue,4,null);
		if(rawStr == "any") {
			return jetgui_jml_ComponentDef.typeNameFromAttrValue("IJetPaginable",currentPath);
		} else {
			var unit = jetgui_jml_ComponentDef.typeNameFromAttrValue(rawStr,currentPath);
			type = "JetPaginatorBase<" + ("" + unit.type) + ">";
			rawStr = unit.rawStr;
		}
	} else if(StringTools.startsWith(attrValue,"slider:")) {
		rawStr = HxOverrides.substr(attrValue,7,null);
		var unit1 = jetgui_jml_ComponentDef.typeNameFromAttrValue(rawStr,currentPath);
		type = "JetSliderBase<" + ("" + unit1.type) + ">";
		rawStr = unit1.rawStr;
	} else if(StringTools.startsWith(attrValue,"map:")) {
		rawStr = HxOverrides.substr(attrValue,4,null);
		var keyUnit = jetgui_jml_ComponentDef.typeNameFromAttrValue(rawStr,currentPath);
		var valueUnit = jetgui_jml_ComponentDef.typeNameFromAttrValue(keyUnit.rawStr,currentPath);
		type = "JetMap<" + ("" + keyUnit.type + "," + valueUnit.type) + ">";
		rawStr = valueUnit.rawStr;
	} else if(attrValue.indexOf("=>") != -1) {
		var preRawString = HxOverrides.substr(attrValue,0,attrValue.indexOf("=>"));
		var postRawString = HxOverrides.substr(attrValue,preRawString.length + 2,null);
		type = jetgui_jml_ComponentDef.typeNameFromAttrValue(preRawString,currentPath).type;
		rawStr = postRawString;
	} else if(StringTools.startsWith(attrValue,"[]")) {
		rawStr = HxOverrides.substr(attrValue,2,null);
		var unit2 = jetgui_jml_ComponentDef.typeNameFromAttrValue(rawStr,currentPath);
		type = "JetArray<" + ("" + unit2.type) + ">";
		rawStr = unit2.rawStr;
	} else if(StringTools.startsWith(attrValue,"jtp:")) {
		var path = attrValue.split(":")[1];
		rawStr = HxOverrides.substr(attrValue,4 + path.length + 1,null);
		type = jetgui_jml_ComponentDef.typeNameFromPath(path,currentPath);
	} else if(StringTools.startsWith(attrValue,"tpl:")) {
		var tpl = attrValue.split(":")[1];
		rawStr = HxOverrides.substr(attrValue,4 + tpl.length + 1,null);
		type = "Tpl" + tpl.charAt(0).toUpperCase() + HxOverrides.substr(tpl,1,null);
	} else if(StringTools.startsWith(attrValue,"fn:")) {
		rawStr = HxOverrides.substr(attrValue,3,null);
		type = "";
		var simpleTypeNames = [];
		while(rawStr.indexOf(":") != -1) {
			var unit3 = jetgui_jml_ComponentDef.typeNameFromAttrValue(rawStr,currentPath);
			simpleTypeNames.push(unit3.type);
			rawStr = unit3.rawStr;
		}
		if(rawStr.length != 0) {
			var unit4 = jetgui_jml_ComponentDef.typeNameFromAttrValue(rawStr,currentPath);
			simpleTypeNames.push(unit4.type);
			rawStr = unit4.rawStr;
		}
		var retType = simpleTypeNames.pop();
		var result = new Array(simpleTypeNames.length);
		var _g = 0;
		var _g1 = simpleTypeNames.length;
		while(_g < _g1) {
			var i = _g++;
			var argType = simpleTypeNames[i];
			result[i] = argType == "Void" ? argType : "Null<" + argType + ">";
		}
		type = result.length == 1 ? result[0] + " -> " + retType : "(" + result.join(", ") + ") -> " + retType;
	} else if(attrValue.indexOf(":") != -1) {
		type = HxOverrides.substr(attrValue,0,attrValue.indexOf(":"));
		rawStr = HxOverrides.substr(attrValue,type.length + 1,null);
	} else {
		type = attrValue;
		rawStr = "";
	}
	return { type : type, rawStr : rawStr};
};
jetgui_jml_ComponentDef.nameFromPath = function(path) {
	var name = haxe_io_Path.withoutExtension(path);
	name = name.replace(jetgui_jml_ComponentDef.notSafeCharEReg.r,"_");
	var _this = name.split("_");
	var _g = [];
	var _g1 = 0;
	while(_g1 < _this.length) {
		var v = _this[_g1];
		++_g1;
		if(v.length > 0) {
			_g.push(v);
		}
	}
	var result = new Array(_g.length);
	var _g2 = 0;
	var _g11 = _g.length;
	while(_g2 < _g11) {
		var i = _g2++;
		var s = _g[i];
		result[i] = s.charAt(0).toUpperCase() + HxOverrides.substr(s,1,null).toLowerCase();
	}
	return result.join("");
};
jetgui_jml_ComponentDef.typeNameFromPath = function(path,currentPath) {
	if(StringTools.startsWith(path,".")) {
		path = haxe_io_Path.join([haxe_io_Path.directory(currentPath),jetgui_jml_JmlHelper.unquote(path)]);
	}
	return "Jtp" + jetgui_jml_ComponentDef.nameFromPath(path);
};
jetgui_jml_ComponentDef.styleNameFromPath = function(path) {
	return "Jss" + jetgui_jml_ComponentDef.nameFromPath(path);
};
jetgui_jml_ComponentDef.prepareVDom = function(vdom,path,source) {
	jetgui_jml_ComponentDef.prepareWriteAttrs(vdom);
	var tag = vdom.name.s.toLowerCase();
	switch(tag) {
	case "for":case "hascheats":case "if":case "mount":case "mount-content":case "preview":case "tooltip":
		vdom.name.s = tag;
		break;
	case "prefab":
		var pathAttr = Lambda.find(vdom.attr,function(a) {
			return a.name.s == "path";
		});
		if(pathAttr == null) {
			throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("<prefab> should have `path` attribute",path,source,vdom.name.p0));
		}
		HxOverrides.remove(vdom.attr,pathAttr);
		vdom.name = pathAttr.value;
		var tmp = jetgui_jml_JmlHelper.unquote(pathAttr.value.s);
		vdom.name.s = jetgui_jml_ComponentDef.nameFromPath(tmp);
		break;
	default:
		if(Lambda.find(vdom.attr,function(a1) {
			return a1.name.s == "tag";
		}) != null) {
			throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("`tag` attribute is not allowed",path,source,vdom.name.p0));
		}
		var classAttr = Lambda.find(vdom.attr,function(a2) {
			return a2.name.s == "class";
		});
		if(classAttr != null) {
			classAttr.name.s = "classList";
		}
		vdom.name.s = "VDomElement";
		vdom.attr.unshift({ name : new jetgui_jml_JmlString("tag",vdom.name.p0,vdom.name.p1), value : new jetgui_jml_JmlString("\"" + tag + "\"",vdom.name.p0,vdom.name.p1)});
	}
	if(vdom.children != null) {
		var _g = 0;
		var _g1 = vdom.children;
		while(_g < _g1.length) jetgui_jml_ComponentDef.prepareVDom(_g1[_g++],path,source);
	}
};
jetgui_jml_ComponentDef.prepareWriteAttrs = function(vdom) {
	var _g = 0;
	var _g1 = vdom.attr;
	while(_g < _g1.length) {
		var attr = _g1[_g];
		++_g;
		if(StringTools.startsWith(attr.name.s,"write")) {
			attr.value.s = "val->" + attr.value.s + " = val";
		}
	}
};
jetgui_jml_ComponentDef.prototype = {
	name: null
	,props: null
	,vars: null
	,styles: null
	,vdom: null
	,__class__: jetgui_jml_ComponentDef
};
var jetgui_jml_JmlError = function(error,filename,source,pos) {
	this.error = error;
	this.filename = filename;
	this.source = source;
	this.pos = pos;
};
$hxClasses["jetgui.jml.JmlError"] = jetgui_jml_JmlError;
jetgui_jml_JmlError.__name__ = "jetgui.jml.JmlError";
jetgui_jml_JmlError.prototype = {
	error: null
	,filename: null
	,source: null
	,pos: null
	,toString: function() {
		var l = 1;
		var p = 1;
		var _g = 0;
		var _g1 = this.pos;
		while(_g < _g1) {
			++p;
			if(HxOverrides.cca(this.source,_g++) == 10) {
				++l;
				p = 1;
			}
		}
		return "" + this.filename + ":" + l + ": character " + p + " : " + this.error;
	}
	,__class__: jetgui_jml_JmlError
};
var jetgui_jml_JmlHelper = function() { };
$hxClasses["jetgui.jml.JmlHelper"] = jetgui_jml_JmlHelper;
jetgui_jml_JmlHelper.__name__ = "jetgui.jml.JmlHelper";
jetgui_jml_JmlHelper.styleSelectorToCode = function(styleSelector) {
	switch(styleSelector._hx_index) {
	case 0:
		return "EAll";
	case 1:
		return "EClass(\"" + styleSelector.className + "\")";
	case 2:
		return "EId(\"" + styleSelector.id + "\")";
	case 3:
		var _g = styleSelector.selectorList;
		var f = jetgui_jml_JmlHelper.styleSelectorToCode;
		var result = new Array(_g.length);
		var _g1 = 0;
		var _g11 = _g.length;
		while(_g1 < _g11) {
			var i = _g1++;
			result[i] = f(_g[i]);
		}
		return "EOr([" + result.join(", ") + "])";
	case 4:
		var _g12 = styleSelector.selectorList;
		var f1 = jetgui_jml_JmlHelper.styleSelectorToCode;
		var result1 = new Array(_g12.length);
		var _g2 = 0;
		var _g13 = _g12.length;
		while(_g2 < _g13) {
			var i1 = _g2++;
			result1[i1] = f1(_g12[i1]);
		}
		return "EAnd([" + result1.join(", ") + "])";
	case 5:
		return "EParent(" + jetgui_jml_JmlHelper.styleSelectorToCode(styleSelector.parent) + ", " + jetgui_jml_JmlHelper.styleSelectorToCode(styleSelector.child) + ")";
	}
};
jetgui_jml_JmlHelper.unquote = function(s) {
	if(s != null && s.length > 1) {
		var s0 = HxOverrides.cca(s,0);
		if((s0 == 34 || s0 == 39) && s0 == HxOverrides.cca(s,s.length - 1)) {
			s = s.substring(1,s.length - 1);
		}
	}
	return s;
};
var jetgui_jml_QuotedStringMatcher = function() {
};
$hxClasses["jetgui.jml.QuotedStringMatcher"] = jetgui_jml_QuotedStringMatcher;
jetgui_jml_QuotedStringMatcher.__name__ = "jetgui.jml.QuotedStringMatcher";
jetgui_jml_QuotedStringMatcher.prototype = {
	result: null
	,match: function(s,pos) {
		this.result = null;
		var startPos = pos++;
		var startCode = HxOverrides.cca(s,pos - 1);
		if(startCode != 39 && startCode != 34) {
			return false;
		}
		var isEscape = false;
		while(pos < s.length) {
			var code = HxOverrides.cca(s,pos++);
			if(code == 92) {
				isEscape = true;
			} else if(!isEscape) {
				if(code == startCode) {
					this.result = s.substring(startPos,pos);
					return true;
				}
			} else {
				isEscape = false;
			}
		}
		return false;
	}
	,matched: function() {
		return this.result;
	}
	,__class__: jetgui_jml_QuotedStringMatcher
};
var jetgui_jml_JxxParserBase = function() {
};
$hxClasses["jetgui.jml.JxxParserBase"] = jetgui_jml_JxxParserBase;
jetgui_jml_JxxParserBase.__name__ = "jetgui.jml.JxxParserBase";
jetgui_jml_JxxParserBase.prototype = {
	filename: null
	,input: null
	,pos: null
	,init: function(filename,input,basePos) {
		this.filename = filename != null ? filename : "";
		this.input = input;
		this.pos = basePos;
	}
	,convertRelPath: function(attr) {
		if(attr.name != null && attr.name.s == "relPath") {
			attr.name.s = "path";
			var tmp = haxe_io_Path.directory(this.filename);
			var tmp1 = jetgui_jml_JmlHelper.unquote(attr.value.s);
			attr.value.s = haxe_io_Path.join([tmp,tmp1]);
		}
	}
	,parseAttr: function(delimiter) {
		if(HxOverrides.cca(this.input,this.pos) == 123) {
			return { name : new jetgui_jml_JmlString("",this.pos,this.pos), value : this.parseCurlyCode()};
		}
		var name = this.parseAttrName();
		if(name == null) {
			return null;
		}
		this.skipSpace();
		var value;
		if(this.matchExactString(delimiter)) {
			this.skipSpace();
			value = this.parseAttrValue();
		} else {
			value = new jetgui_jml_JmlString("true",name.p0,name.p1);
		}
		var attr = value.s.indexOf(jetgui_jml_JxxParserBase.assetPrefix) == 0 ? { name : name, value : value, rawPath : jetgui_jml_JxxParserBase.assetEReg.matched(3)} : { name : name, value : value};
		this.convertRelPath(attr);
		return attr;
	}
	,parseAttrName: function() {
		var p0 = this.pos;
		if(!this.matchEReg(jetgui_jml_JxxParserBase.nameEReg)) {
			return null;
		}
		var name = jetgui_jml_JxxParserBase.nameEReg.matched(0);
		while(HxOverrides.cca(this.input,this.pos) == 45) {
			this.pos++;
			if(!this.matchEReg(jetgui_jml_JxxParserBase.nameEReg)) {
				break;
			}
			var s = jetgui_jml_JxxParserBase.nameEReg.matched(0);
			name += s.charAt(0).toUpperCase() + HxOverrides.substr(s,1,null);
		}
		return new jetgui_jml_JmlString(name,p0,this.pos);
	}
	,parseAttrValue: function() {
		var p0 = this.pos;
		if(jetgui_jml_JxxParserBase.quotedStringMatcher.match(this.input,this.pos)) {
			var matched = jetgui_jml_JxxParserBase.quotedStringMatcher.matched();
			this.pos += matched.length;
			return new jetgui_jml_JmlString(matched,p0,this.pos);
		} else if(this.matchEReg(jetgui_jml_JxxParserBase.callEReg)) {
			var _this = jetgui_jml_JxxParserBase.callEReg.matched(1).split(",");
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = StringTools.trim(_this[i]);
			}
			var fnCode = StringTools.trim(jetgui_jml_JxxParserBase.callEReg.matched(2));
			var _this1 = jetgui_jml_JxxParserBase.callEReg.matched(3).split(",");
			var result1 = new Array(_this1.length);
			var _g2 = 0;
			var _g11 = _this1.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				result1[i1] = StringTools.trim(_this1[i1]);
			}
			var _g3 = [];
			var _g12 = 0;
			while(_g12 < result1.length) {
				var v = result1[_g12];
				++_g12;
				if(v.length > 0) {
					_g3.push(v);
				}
			}
			var argValuesCode = _g3.join(",");
			return new jetgui_jml_JmlString("(" + result.join(",") + ")-> SafeCode.run(" + fnCode + "(" + argValuesCode + "))",p0,this.pos);
		} else if(this.matchEReg(jetgui_jml_JxxParserBase.assetEReg)) {
			return new jetgui_jml_JmlString(jetgui_jml_JxxParserBase.assetPrefix + jetgui_jml_JxxParserBase.assetEReg.matched(2) + jetgui_jml_JxxParserBase.assetEReg.matched(3) + jetgui_jml_JxxParserBase.assetEReg.matched(4),p0,this.pos);
		} else if(this.matchEReg(jetgui_jml_JxxParserBase.nameEReg)) {
			var s = jetgui_jml_JxxParserBase.nameEReg.matched(0);
			if(this.matchEReg(jetgui_jml_JxxParserBase.parenthesesEReg)) {
				s += jetgui_jml_JxxParserBase.parenthesesEReg.matched(0);
			}
			return new jetgui_jml_JmlString(s,p0,this.pos);
		} else if(this.matchEReg(jetgui_jml_JxxParserBase.percentEReg)) {
			return new jetgui_jml_JmlString("percent(" + jetgui_jml_JxxParserBase.percentEReg.matched(1) + ")",p0,this.pos);
		} else if(this.matchEReg(jetgui_jml_JxxParserBase.numberEReg)) {
			return new jetgui_jml_JmlString(jetgui_jml_JxxParserBase.numberEReg.matched(0),p0,this.pos);
		} else if(HxOverrides.cca(this.input,this.pos) == 123) {
			var s1 = this.parseCurlyCode();
			if(s1.s.indexOf("->") >= 0) {
				throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("`->` not allowed. Use `call:` instead.",this.filename,this.input,this.pos));
			}
			return s1;
		} else {
			throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("unexpected attribute value",this.filename,this.input,this.pos));
		}
	}
	,parseCurlyCode: function() {
		var p0 = this.pos;
		var open = 1;
		this.pos++;
		while(open > 0 && this.pos < this.input.length) {
			switch(HxOverrides.cca(this.input,this.pos)) {
			case 34:case 39:
				if(jetgui_jml_JxxParserBase.quotedStringMatcher.match(this.input,this.pos)) {
					this.pos += jetgui_jml_JxxParserBase.quotedStringMatcher.matched().length;
				} else {
					throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("unmatched quote",this.filename,this.input,this.pos));
				}
				this.pos--;
				break;
			case 123:
				++open;
				break;
			case 125:
				--open;
				break;
			default:
			}
			this.pos++;
		}
		if(open > 0) {
			throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("Unmatched curly bracket",this.filename,this.input,p0 != null ? p0 : this.pos));
		}
		return new jetgui_jml_JmlString(this.input.substring(p0 + 1,this.pos - 1),p0 + 1,this.pos - 1);
	}
	,skipSpace: function() {
		var counter = 0;
		while(this.pos < this.input.length) if(this.matchExactString("<!--") || this.matchExactString("/*")) {
			++counter;
		} else if(counter > 0 && (this.matchExactString("-->") || this.matchExactString("*/"))) {
			--counter;
		} else if(counter > 0 || StringTools.isSpace(this.input,this.pos)) {
			this.pos++;
		} else {
			break;
		}
	}
	,matchEReg: function(ereg) {
		if(!ereg.match(HxOverrides.substr(this.input,this.pos,null))) {
			return false;
		}
		var matchPos = ereg.matchedPos();
		if(matchPos.pos != 0) {
			throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("match pos not 0",this.filename,this.input,this.pos));
		}
		this.pos += matchPos.len;
		return true;
	}
	,matchExactString: function(s) {
		var result = true;
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.pos + i >= this.input.length || HxOverrides.cca(this.input,this.pos + i) != HxOverrides.cca(s,i)) {
				result = false;
				break;
			}
		}
		if(result) {
			this.pos += s.length;
		}
		return result;
	}
	,throwError: function(error,pos) {
		throw new js__$Boot_HaxeError(new jetgui_jml_JmlError(error,this.filename,this.input,pos != null ? pos : this.pos));
	}
	,__class__: jetgui_jml_JxxParserBase
};
var jetgui_jml_JmlParser = function() {
	jetgui_jml_JxxParserBase.call(this);
};
$hxClasses["jetgui.jml.JmlParser"] = jetgui_jml_JmlParser;
jetgui_jml_JmlParser.__name__ = "jetgui.jml.JmlParser";
jetgui_jml_JmlParser.__super__ = jetgui_jml_JxxParserBase;
jetgui_jml_JmlParser.prototype = $extend(jetgui_jml_JxxParserBase.prototype,{
	parse: function(filename,input) {
		this.init(filename,input,0);
		this.matchEReg(jetgui_jml_JmlParser.skipSpaceEReg);
		if(!this.matchEReg(jetgui_jml_JmlParser.doctypeEReg)) {
			throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("bad doctype or doctype not found",this.filename,this.input,this.pos));
		}
		var version = jetgui_jml_JmlParser.doctypeEReg.matched(1);
		var head = this.parseNamedTag("head");
		var body = this.parseNamedTag("body");
		this.matchEReg(jetgui_jml_JmlParser.skipSpaceEReg);
		if(this.pos != input.length) {
			throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("eof expected",this.filename,this.input,this.pos));
		}
		return { version : version, head : head, body : body};
	}
	,parseNamedTag: function(expectedName) {
		var p = this.pos;
		var tag = this.parseTag();
		if(tag == null || tag.name.s != expectedName) {
			throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("<" + expectedName + "> expected",this.filename,this.input,p != null ? p : this.pos));
		}
		return tag;
	}
	,parseTag: function() {
		this.matchEReg(jetgui_jml_JmlParser.skipSpaceEReg);
		var p0 = this.pos;
		if(!this.matchEReg(jetgui_jml_JmlParser.tagStartEReg)) {
			return null;
		}
		var tagName = new jetgui_jml_JmlString(jetgui_jml_JmlParser.tagStartEReg.matched(1),p0 + 1,this.pos);
		this.matchEReg(jetgui_jml_JmlParser.skipSpaceEReg);
		var attrList = [];
		while(true) {
			this.matchEReg(jetgui_jml_JmlParser.skipSpaceEReg);
			var attr = [this.parseAttr("=")];
			if(attr[0] == null) {
				break;
			}
			if(null != Lambda.find(attrList,(function(attr1) {
				return function(a) {
					return a.name.s == attr1[0].name.s;
				};
			})(attr))) {
				var pos = attr[0].name.p0;
				throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("attribute " + Std.string(attr[0].name) + " already exists",this.filename,this.input,pos != null ? pos : this.pos));
			}
			attrList.push(attr[0]);
		}
		if(!this.matchEReg(jetgui_jml_JmlParser.tagEndEReg)) {
			throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("`>` expected",this.filename,this.input,this.pos));
		}
		var children = null;
		if(jetgui_jml_JmlParser.tagEndEReg.matched(1).length <= 0) {
			while(true) {
				var child = this.parseTag();
				if(child == null) {
					break;
				}
				children = children == null ? [] : children;
				children.push(child);
			}
			if(!this.matchEReg(jetgui_jml_JmlParser.closeTagEReg)) {
				throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("close tag `" + tagName.s + "` expected",this.filename,this.input,this.pos));
			}
			if(jetgui_jml_JmlParser.closeTagEReg.matched(1) != tagName.s) {
				throw new js__$Boot_HaxeError(new jetgui_jml_JmlError("unexpected close tag `" + jetgui_jml_JmlParser.closeTagEReg.matched(1) + "`, expected close tag `" + Std.string(tagName) + "`",this.filename,this.input,this.pos));
			}
		}
		return { name : tagName, attr : attrList, children : children};
	}
	,__class__: jetgui_jml_JmlParser
});
var jetgui_jml_JmlString = function(s,p0,p1) {
	this.s = s;
	this.p0 = p0;
	this.p1 = p1;
};
$hxClasses["jetgui.jml.JmlString"] = jetgui_jml_JmlString;
jetgui_jml_JmlString.__name__ = "jetgui.jml.JmlString";
jetgui_jml_JmlString.prototype = {
	s: null
	,p0: null
	,p1: null
	,toString: function() {
		return this.s;
	}
	,__class__: jetgui_jml_JmlString
};
var jetgui_style_EColorImpl = $hxEnums["jetgui.style.EColorImpl"] = { __ename__ : true, __constructs__ : ["white","red","green","yellow","blue","black","rgba","rgb","hex"]
	,white: {_hx_index:0,__enum__:"jetgui.style.EColorImpl",toString:$estr}
	,red: {_hx_index:1,__enum__:"jetgui.style.EColorImpl",toString:$estr}
	,green: {_hx_index:2,__enum__:"jetgui.style.EColorImpl",toString:$estr}
	,yellow: {_hx_index:3,__enum__:"jetgui.style.EColorImpl",toString:$estr}
	,blue: {_hx_index:4,__enum__:"jetgui.style.EColorImpl",toString:$estr}
	,black: {_hx_index:5,__enum__:"jetgui.style.EColorImpl",toString:$estr}
	,rgba: ($_=function(r,g,b,a) { return {_hx_index:6,r:r,g:g,b:b,a:a,__enum__:"jetgui.style.EColorImpl",toString:$estr}; },$_.__params__ = ["r","g","b","a"],$_)
	,rgb: ($_=function(r,g,b) { return {_hx_index:7,r:r,g:g,b:b,__enum__:"jetgui.style.EColorImpl",toString:$estr}; },$_.__params__ = ["r","g","b"],$_)
	,hex: ($_=function(color) { return {_hx_index:8,color:color,__enum__:"jetgui.style.EColorImpl",toString:$estr}; },$_.__params__ = ["color"],$_)
};
jetgui_style_EColorImpl.__empty_constructs__ = [jetgui_style_EColorImpl.white,jetgui_style_EColorImpl.red,jetgui_style_EColorImpl.green,jetgui_style_EColorImpl.yellow,jetgui_style_EColorImpl.blue,jetgui_style_EColorImpl.black];
var jetgui_style__$EColor_EColor_$Impl_$ = {};
$hxClasses["jetgui.style._EColor.EColor_Impl_"] = jetgui_style__$EColor_EColor_$Impl_$;
jetgui_style__$EColor_EColor_$Impl_$.__name__ = "jetgui.style._EColor.EColor_Impl_";
jetgui_style__$EColor_EColor_$Impl_$.fromInt = function(i) {
	return jetgui_style_EColorImpl.hex(i);
};
jetgui_style__$EColor_EColor_$Impl_$.fromString = function(s) {
	var result = null;
	if(s != null) {
		var _g = 0;
		var _g1 = jetgui_style_EColorImpl.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var color = _g1[_g];
			++_g;
			if($hxEnums[color.__enum__].__constructs__[color._hx_index] == s) {
				result = color;
				break;
			}
		}
		if(result == null && jetgui_style__$EColor_EColor_$Impl_$.hexColorEReg.match(s)) {
			result = jetgui_style_EColorImpl.hex(Std.parseInt("0x" + jetgui_style__$EColor_EColor_$Impl_$.hexColorEReg.matched(1)));
		}
		if(result == null) {
			haxe_Log.trace("invalid color value: " + s,{ fileName : "jetgui/style/EColor.hx", lineNumber : 47, className : "jetgui.style._EColor.EColor_Impl_", methodName : "fromString"});
			result = jetgui_style_EColorImpl.red;
		}
	}
	return result;
};
jetgui_style__$EColor_EColor_$Impl_$.compare = function(a,b) {
	if(a == null && b == null) {
		return true;
	} else if(a != null && b != null) {
		return Type.enumEq(a,b);
	} else {
		return false;
	}
};
jetgui_style__$EColor_EColor_$Impl_$.rgba = function(r,g,b,a) {
	return jetgui_style_EColorImpl.rgba(r,g,b,a);
};
jetgui_style__$EColor_EColor_$Impl_$.rgb = function(r,g,b) {
	return jetgui_style_EColorImpl.rgb(r,g,b);
};
var jetgui_style_EColorMatrix = $hxEnums["jetgui.style.EColorMatrix"] = { __ename__ : true, __constructs__ : ["Matrix","Grayscale","Glow","ColorFill","Ghostify"]
	,Matrix: ($_=function(r0,r1,r2,r3,g0,g1,g2,g3,b0,b1,b2,b3) { return {_hx_index:0,r0:r0,r1:r1,r2:r2,r3:r3,g0:g0,g1:g1,g2:g2,g3:g3,b0:b0,b1:b1,b2:b2,b3:b3,__enum__:"jetgui.style.EColorMatrix",toString:$estr}; },$_.__params__ = ["r0","r1","r2","r3","g0","g1","g2","g3","b0","b1","b2","b3"],$_)
	,Grayscale: ($_=function(val) { return {_hx_index:1,val:val,__enum__:"jetgui.style.EColorMatrix",toString:$estr}; },$_.__params__ = ["val"],$_)
	,Glow: ($_=function(val) { return {_hx_index:2,val:val,__enum__:"jetgui.style.EColorMatrix",toString:$estr}; },$_.__params__ = ["val"],$_)
	,ColorFill: ($_=function(r,g,b,opacity) { return {_hx_index:3,r:r,g:g,b:b,opacity:opacity,__enum__:"jetgui.style.EColorMatrix",toString:$estr}; },$_.__params__ = ["r","g","b","opacity"],$_)
	,Ghostify: ($_=function(val) { return {_hx_index:4,val:val,__enum__:"jetgui.style.EColorMatrix",toString:$estr}; },$_.__params__ = ["val"],$_)
};
jetgui_style_EColorMatrix.__empty_constructs__ = [];
var jetgui_style_EInteract = $hxEnums["jetgui.style.EInteract"] = { __ename__ : true, __constructs__ : ["none","hover","touch"]
	,none: {_hx_index:0,__enum__:"jetgui.style.EInteract",toString:$estr}
	,hover: {_hx_index:1,__enum__:"jetgui.style.EInteract",toString:$estr}
	,touch: {_hx_index:2,__enum__:"jetgui.style.EInteract",toString:$estr}
};
jetgui_style_EInteract.__empty_constructs__ = [jetgui_style_EInteract.none,jetgui_style_EInteract.hover,jetgui_style_EInteract.touch];
var jetgui_style_EScaleMode = $hxEnums["jetgui.style.EScaleMode"] = { __ename__ : true, __constructs__ : ["exact","coverDrawOverflow","coverHideOverflow","contain"]
	,exact: {_hx_index:0,__enum__:"jetgui.style.EScaleMode",toString:$estr}
	,coverDrawOverflow: {_hx_index:1,__enum__:"jetgui.style.EScaleMode",toString:$estr}
	,coverHideOverflow: {_hx_index:2,__enum__:"jetgui.style.EScaleMode",toString:$estr}
	,contain: {_hx_index:3,__enum__:"jetgui.style.EScaleMode",toString:$estr}
};
jetgui_style_EScaleMode.__empty_constructs__ = [jetgui_style_EScaleMode.exact,jetgui_style_EScaleMode.coverDrawOverflow,jetgui_style_EScaleMode.coverHideOverflow,jetgui_style_EScaleMode.contain];
var jetgui_style_ESizeImpl = $hxEnums["jetgui.style.ESizeImpl"] = { __ename__ : true, __constructs__ : ["px","percent","content","contentScaled","auto"]
	,px: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"jetgui.style.ESizeImpl",toString:$estr}; },$_.__params__ = ["value"],$_)
	,percent: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"jetgui.style.ESizeImpl",toString:$estr}; },$_.__params__ = ["value"],$_)
	,content: {_hx_index:2,__enum__:"jetgui.style.ESizeImpl",toString:$estr}
	,contentScaled: ($_=function(scale) { return {_hx_index:3,scale:scale,__enum__:"jetgui.style.ESizeImpl",toString:$estr}; },$_.__params__ = ["scale"],$_)
	,auto: {_hx_index:4,__enum__:"jetgui.style.ESizeImpl",toString:$estr}
};
jetgui_style_ESizeImpl.__empty_constructs__ = [jetgui_style_ESizeImpl.content,jetgui_style_ESizeImpl.auto];
var jetgui_style__$ESize_ESize_$Impl_$ = {};
$hxClasses["jetgui.style._ESize.ESize_Impl_"] = jetgui_style__$ESize_ESize_$Impl_$;
jetgui_style__$ESize_ESize_$Impl_$.__name__ = "jetgui.style._ESize.ESize_Impl_";
jetgui_style__$ESize_ESize_$Impl_$.fromPx = function(value) {
	return jetgui_style_ESizeImpl.px(value);
};
jetgui_style__$ESize_ESize_$Impl_$.isEqual = function(this1,rhs) {
	var rhsImpl = rhs;
	if(!(this1 != null && rhsImpl != null && Type.enumEq(this1,rhsImpl))) {
		if(this1 == null) {
			return rhsImpl == null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
jetgui_style__$ESize_ESize_$Impl_$.isNotEqual = function(this1,rhs) {
	var rhsImpl = rhs;
	return !(this1 != null && rhsImpl != null && Type.enumEq(this1,rhsImpl) || this1 == null && rhsImpl == null);
};
var jetgui_style_ETextAlign = $hxEnums["jetgui.style.ETextAlign"] = { __ename__ : true, __constructs__ : ["left","center","right"]
	,left: {_hx_index:0,__enum__:"jetgui.style.ETextAlign",toString:$estr}
	,center: {_hx_index:1,__enum__:"jetgui.style.ETextAlign",toString:$estr}
	,right: {_hx_index:2,__enum__:"jetgui.style.ETextAlign",toString:$estr}
};
jetgui_style_ETextAlign.__empty_constructs__ = [jetgui_style_ETextAlign.left,jetgui_style_ETextAlign.center,jetgui_style_ETextAlign.right];
var jetgui_style_ETextVAlign = $hxEnums["jetgui.style.ETextVAlign"] = { __ename__ : true, __constructs__ : ["top","center","bottom"]
	,top: {_hx_index:0,__enum__:"jetgui.style.ETextVAlign",toString:$estr}
	,center: {_hx_index:1,__enum__:"jetgui.style.ETextVAlign",toString:$estr}
	,bottom: {_hx_index:2,__enum__:"jetgui.style.ETextVAlign",toString:$estr}
};
jetgui_style_ETextVAlign.__empty_constructs__ = [jetgui_style_ETextVAlign.top,jetgui_style_ETextVAlign.center,jetgui_style_ETextVAlign.bottom];
var jetgui_style_StyleHelper = function() { };
$hxClasses["jetgui.style.StyleHelper"] = jetgui_style_StyleHelper;
jetgui_style_StyleHelper.__name__ = "jetgui.style.StyleHelper";
jetgui_style_StyleHelper.mergeStyles = function(target,style) {
	var _g = 0;
	var _g1 = Reflect.fields(style);
	while(_g < _g1.length) {
		var field = _g1[_g];
		++_g;
		target[field] = Reflect.field(style,field);
	}
};
jetgui_style_StyleHelper.isEqual = function(a,b) {
	if(a == b) {
		return true;
	} else if(a == null || b == null) {
		return false;
	} else {
		var _g = 0;
		var _g1 = Reflect.fields(a);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			var val0 = Reflect.field(a,field);
			var val1 = Reflect.field(b,field);
			if(!(Type.typeof(val0)._hx_index == 7 && val1 != null ? Type.enumEq(val0,val1) : val0 == val1)) {
				return false;
			}
		}
		var _g2 = 0;
		var _g11 = Reflect.fields(b);
		while(_g2 < _g11.length) {
			var field1 = _g11[_g2];
			++_g2;
			var val01 = Reflect.field(b,field1);
			var val11 = Reflect.field(a,field1);
			if(!(Type.typeof(val01)._hx_index == 7 && val11 != null ? Type.enumEq(val01,val11) : val01 == val11)) {
				return false;
			}
		}
		return true;
	}
};
jetgui_style_StyleHelper.checkStyleSelector = function(selector,element) {
	switch(selector._hx_index) {
	case 0:
		return true;
	case 1:
		var _g4 = selector.className;
		var this1 = element.classList_;
		if(this1 == null) {
			return false;
		} else {
			var _this = this1;
			if(__map_reserved[_g4] != null) {
				return _this.existsReserved(_g4);
			} else {
				return _this.h.hasOwnProperty(_g4);
			}
		}
		break;
	case 2:
		return element.id == selector.id;
	case 3:
		var _g = selector.selectorList;
		var result = false;
		var _g1 = 0;
		while(_g1 < _g.length) if(jetgui_style_StyleHelper.checkStyleSelector(_g[_g1++],element)) {
			result = true;
			break;
		}
		return result;
	case 4:
		var _g11 = selector.selectorList;
		var result1 = true;
		var _g2 = 0;
		while(_g2 < _g11.length) if(!jetgui_style_StyleHelper.checkStyleSelector(_g11[_g2++],element)) {
			result1 = false;
			break;
		}
		return result1;
	case 5:
		var parentNode = element.node.parent;
		var parent = parentNode != null ? jetgui_JetHelper.element(parentNode) : null;
		return parent != null && jetgui_style_StyleHelper.checkStyleSelector(selector.parent,parent) && jetgui_style_StyleHelper.checkStyleSelector(selector.child,element);
	}
};
jetgui_style_StyleHelper.compareFields = function(a,b) {
	if(Type.typeof(a)._hx_index == 7 && b != null) {
		return Type.enumEq(a,b);
	} else {
		return a == b;
	}
};
var jetgui_style_StyleMacro = function() { };
$hxClasses["jetgui.style.StyleMacro"] = jetgui_style_StyleMacro;
jetgui_style_StyleMacro.__name__ = "jetgui.style.StyleMacro";
var jetgui_style_StyleRule = function(selector,style) {
	this.selector = selector;
	this.style = style;
	var idCount = this.countId(selector);
	var classCount = this.countClass(selector);
	this.specificity = idCount * 1000 + (classCount < 1000 ? classCount : 1000);
};
$hxClasses["jetgui.style.StyleRule"] = jetgui_style_StyleRule;
jetgui_style_StyleRule.__name__ = "jetgui.style.StyleRule";
jetgui_style_StyleRule.prototype = {
	selector: null
	,style: null
	,specificity: null
	,countId: function(selector) {
		switch(selector._hx_index) {
		case 0:
			return 0;
		case 1:
			return 0;
		case 2:
			return 1;
		case 3:
			throw new js__$Boot_HaxeError("or selector not implemented");
		case 4:
			var _g1 = selector.selectorList;
			var result = 0;
			var _g = 0;
			while(_g < _g1.length) result += this.countId(_g1[_g++]);
			return result;
		case 5:
			return this.countId(selector.parent) + this.countId(selector.child);
		}
	}
	,countClass: function(selector) {
		switch(selector._hx_index) {
		case 0:
			return 0;
		case 1:
			return 1;
		case 2:
			return 0;
		case 3:
			throw new js__$Boot_HaxeError("or selector not implemented");
		case 4:
			var _g1 = selector.selectorList;
			var result = 0;
			var _g = 0;
			while(_g < _g1.length) result += this.countClass(_g1[_g++]);
			return result;
		case 5:
			return this.countClass(selector.parent) + this.countClass(selector.child);
		}
	}
	,__class__: jetgui_style_StyleRule
};
var jetgui_style_StyleSelector = $hxEnums["jetgui.style.StyleSelector"] = { __ename__ : true, __constructs__ : ["EAll","EClass","EId","EOr","EAnd","EParent"]
	,EAll: {_hx_index:0,__enum__:"jetgui.style.StyleSelector",toString:$estr}
	,EClass: ($_=function(className) { return {_hx_index:1,className:className,__enum__:"jetgui.style.StyleSelector",toString:$estr}; },$_.__params__ = ["className"],$_)
	,EId: ($_=function(id) { return {_hx_index:2,id:id,__enum__:"jetgui.style.StyleSelector",toString:$estr}; },$_.__params__ = ["id"],$_)
	,EOr: ($_=function(selectorList) { return {_hx_index:3,selectorList:selectorList,__enum__:"jetgui.style.StyleSelector",toString:$estr}; },$_.__params__ = ["selectorList"],$_)
	,EAnd: ($_=function(selectorList) { return {_hx_index:4,selectorList:selectorList,__enum__:"jetgui.style.StyleSelector",toString:$estr}; },$_.__params__ = ["selectorList"],$_)
	,EParent: ($_=function(parent,child) { return {_hx_index:5,parent:parent,child:child,__enum__:"jetgui.style.StyleSelector",toString:$estr}; },$_.__params__ = ["parent","child"],$_)
};
jetgui_style_StyleSelector.__empty_constructs__ = [jetgui_style_StyleSelector.EAll];
var jetgui_vdom_VDomNode = function(vDomId,vDomType) {
	this.vDomId = vDomId;
	this.vDomType = vDomType;
};
$hxClasses["jetgui.vdom.VDomNode"] = jetgui_vdom_VDomNode;
jetgui_vdom_VDomNode.__name__ = "jetgui.vdom.VDomNode";
jetgui_vdom_VDomNode.prototype = {
	vDomId: null
	,vDomType: null
	,vDomKey: null
	,tag: null
	,styleRules: null
	,asElement: function() {
		throw new js__$Boot_HaxeError("not an element");
	}
	,asComponent: function() {
		throw new js__$Boot_HaxeError("not a component");
	}
	,__class__: jetgui_vdom_VDomNode
};
var jetgui_vdom_VDomComponent = function(vDomId) {
	jetgui_vdom_VDomNode.call(this,vDomId,"component");
};
$hxClasses["jetgui.vdom.VDomComponent"] = jetgui_vdom_VDomComponent;
jetgui_vdom_VDomComponent.__name__ = "jetgui.vdom.VDomComponent";
jetgui_vdom_VDomComponent.__super__ = jetgui_vdom_VDomNode;
jetgui_vdom_VDomComponent.prototype = $extend(jetgui_vdom_VDomNode.prototype,{
	mountContent: null
	,ctx: null
	,addMountContent: function(name,renderFn) {
		if(this.mountContent == null) {
			this.mountContent = new haxe_ds_StringMap();
		}
		var _this = this.mountContent;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,renderFn);
		} else {
			_this.h[name] = renderFn;
		}
	}
	,renderMountContent: function(name) {
		var tmp;
		if(this.mountContent != null) {
			var _this = this.mountContent;
			tmp = !(__map_reserved[name] != null ? _this.existsReserved(name) : _this.h.hasOwnProperty(name));
		} else {
			tmp = true;
		}
		if(tmp) {
			return null;
		}
		var _this1 = this.mountContent;
		return (__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name])();
	}
	,createComponent: function() {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,copyFrom: function(t) {
		throw new js__$Boot_HaxeError("not implemented");
	}
	,asComponent: function() {
		return this;
	}
	,__class__: jetgui_vdom_VDomComponent
});
var jetgui_vdom_EMaskedScaleMode = $hxEnums["jetgui.vdom.EMaskedScaleMode"] = { __ename__ : true, __constructs__ : ["exact","cover"]
	,exact: {_hx_index:0,__enum__:"jetgui.vdom.EMaskedScaleMode",toString:$estr}
	,cover: {_hx_index:1,__enum__:"jetgui.vdom.EMaskedScaleMode",toString:$estr}
};
jetgui_vdom_EMaskedScaleMode.__empty_constructs__ = [jetgui_vdom_EMaskedScaleMode.exact,jetgui_vdom_EMaskedScaleMode.cover];
var jetgui_vdom_VDomElement = function(vDomId) {
	this.style = { };
	this.tooltipList = [];
	this.children = [];
	jetgui_vdom_VDomNode.call(this,vDomId,"element");
};
$hxClasses["jetgui.vdom.VDomElement"] = jetgui_vdom_VDomElement;
jetgui_vdom_VDomElement.__name__ = "jetgui.vdom.VDomElement";
jetgui_vdom_VDomElement.__super__ = jetgui_vdom_VDomNode;
jetgui_vdom_VDomElement.prototype = $extend(jetgui_vdom_VDomNode.prototype,{
	children: null
	,tooltipList: null
	,id: null
	,classList: null
	,style: null
	,elementRef: null
	,data: null
	,writeWidth: null
	,writeHeight: null
	,writeIsTouched: null
	,sliderData: null
	,onDragStart: null
	,onDrag: null
	,onDragEnd: null
	,clickAnimation: null
	,srcMask: null
	,maskedScale: null
	,maskedScaleX: null
	,maskedScaleY: null
	,maskedSize: null
	,maskedSizeX: null
	,maskedSizeY: null
	,maskedShift: null
	,maskedShiftX: null
	,maskedShiftY: null
	,maskedAlign: null
	,maskedAlignX: null
	,maskedAlignY: null
	,maskedScaleMode: null
	,get_left: function() {
		return this.style.offsetLeft;
	}
	,set_left: function(v) {
		return this.style.offsetLeft = v;
	}
	,get_right: function() {
		return this.style.offsetRight;
	}
	,set_right: function(v) {
		return this.style.offsetRight = v;
	}
	,get_top: function() {
		return this.style.offsetTop;
	}
	,set_top: function(v) {
		return this.style.offsetTop = v;
	}
	,get_bottom: function() {
		return this.style.offsetBottom;
	}
	,set_bottom: function(v) {
		return this.style.offsetBottom = v;
	}
	,addChild: function(e) {
		this.children.push(e);
	}
	,addTooltip: function(interactType,animationType,hAlign,vAlign,hideDistanceX,hideDistanceY,tooltip) {
		this.tooltipList.push({ interactType : interactType, animationType : animationType, tooltip : tooltip, hAlign : hAlign != null ? hAlign : 0.5, vAlign : vAlign != null ? vAlign : 0.0, hideDistanceX : hideDistanceX != null ? hideDistanceX : 2147483647, hideDistanceY : hideDistanceY != null ? hideDistanceY : 2147483647});
	}
	,asElement: function() {
		return this;
	}
	,__class__: jetgui_vdom_VDomElement
	,__properties__: {set_bottom:"set_bottom",get_bottom:"get_bottom",set_top:"set_top",get_top:"get_top",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left"}
});
var jetgui_vdom_VDomIdMacro = function() { };
$hxClasses["jetgui.vdom.VDomIdMacro"] = jetgui_vdom_VDomIdMacro;
jetgui_vdom_VDomIdMacro.__name__ = "jetgui.vdom.VDomIdMacro";
var jetguimodule_IJetTooltipModule = function() { };
$hxClasses["jetguimodule.IJetTooltipModule"] = jetguimodule_IJetTooltipModule;
jetguimodule_IJetTooltipModule.__name__ = "jetguimodule.IJetTooltipModule";
jetguimodule_IJetTooltipModule.__isInterface__ = true;
jetguimodule_IJetTooltipModule.prototype = {
	showTooltip: null
	,hideTooltip: null
	,__class__: jetguimodule_IJetTooltipModule
};
var jetguimodule_JetGuiInput = function(moduleProvider) {
	this.hIntPoint = banan_math_IntPoint.zero();
	this.touchBeginPt = null;
	this.isGuiInteractionBegin = false;
	this.isRegistered = false;
	this.tooltipVDomId = null;
	this.tooltipId = null;
	this.tooltipElement = null;
	this.dragElement = null;
	this.longTapElement = null;
	this.targetElements = null;
	var sThis = moduleProvider.getModule(banan_input_InputHandler);
	if(sThis == null) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(120,"JetGuiInput.hx:66","",null));
	}
	this.inputHandler = sThis;
	var sThis1 = moduleProvider.getModule(jetguimodule_IJetTooltipModule);
	if(sThis1 == null) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(120,"JetGuiInput.hx:67","",null));
	}
	this.tooltipModule = sThis1;
	this.notificatorModule = moduleProvider.getModule(banan_notificator_NotificatorModule);
	this.register();
};
$hxClasses["jetguimodule.JetGuiInput"] = jetguimodule_JetGuiInput;
jetguimodule_JetGuiInput.__name__ = "jetguimodule.JetGuiInput";
jetguimodule_JetGuiInput.__interfaces__ = [banan_input_IInputListener];
jetguimodule_JetGuiInput.isInsideNode = function(event,element) {
	if(!element.isOnViewTree) {
		return false;
	}
	var entity = element.entity;
	var sThis = entity.__component__banan_display_NodeEdge;
	if(sThis == null) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(120,"JetGuiInput.hx:41","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
	}
	var node = sThis;
	var x = event.x;
	var y = event.y;
	var current = node;
	var result = null;
	while(result == null && current != null) {
		var sThis1 = current._entity;
		if(sThis1 == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:261","",null));
		}
		result = sThis1.__component__banan_backend_RenderRootEdge;
		current = current.parent;
	}
	var sThis2 = result;
	if(sThis2 == null) {
		throw new js__$Boot_HaxeError(banan_error_Error.e(120,"NodeEdge.hx:409","",null));
	}
	if(!node._isInverseTransformValid) {
		node.validateInverseTransform();
	}
	var _this = node._inverseTransform;
	var _this1 = sThis2.camera;
	var x1 = _this1.cameraX + x / _this1.cameraScale;
	var y1 = _this1.cameraY + y / _this1.cameraScale;
	var w = _this.m02 * x1 + _this.m12 * y1 + _this.m22;
	var local_x = (_this.m00 * x1 + _this.m10 * y1 + _this.m20) / w;
	var local_y = (_this.m01 * x1 + _this.m11 * y1 + _this.m21) / w;
	var _this_x = node.areaX;
	var _this_y = node.areaY;
	if((local_x - _this_x) * (local_x - (_this_x + node.areaSizeX)) <= 0) {
		return (local_y - _this_y) * (local_y - (_this_y + node.areaSizeY)) <= 0;
	} else {
		return false;
	}
};
jetguimodule_JetGuiInput.prototype = {
	inputHandler: null
	,tooltipModule: null
	,notificatorModule: null
	,targetElements: null
	,longTapElement: null
	,dragElement: null
	,tooltipElement: null
	,tooltipId: null
	,tooltipVDomId: null
	,isRegistered: null
	,isGuiInteractionBegin: null
	,touchBeginPt: null
	,hIntPoint: null
	,dispose: function() {
		this.unregister();
	}
	,register: function() {
		if(!this.isRegistered) {
			this.isRegistered = true;
			this.inputHandler.registerInputListener(this,jetguimodule_JetGuiInput.inputListenerType);
		}
	}
	,unregister: function() {
		if(this.isRegistered) {
			this.isRegistered = false;
			this.inputHandler.unregisterInputListener(jetguimodule_JetGuiInput.inputListenerType);
		}
	}
	,update: function() {
		if(this.tooltipElement != null) {
			var config = this.getTooltipConfig(this.tooltipElement);
			if(config == null || config.tooltip.vDomId != this.tooltipVDomId) {
				this.showTooltip(null);
			}
		}
	}
	,willProcessInputEvent: function(targetList,event) {
		if(this.targetElements == null) {
			var _g = [];
			var _g1 = 0;
			while(_g1 < targetList.length) {
				var element = targetList[_g1++].__component__jetgui_element_Element;
				if(element != null && !element.isDisposed) {
					_g.push(element);
				}
			}
			this.targetElements = _g;
		}
		switch(event.event._hx_index) {
		case 0:
			this.handleTouchBegin(targetList,event);
			this.findTooltipElement(event);
			return this.findDragElement(event);
		case 1:
			this.clearInputState();
			break;
		case 2:
			this.handleTouchMoveTooltip(event);
			this.handleTouchMoveLongTap();
			return this.findDragElement(event);
		case 3:
			this.handleTap();
			this.findTooltipElement(event);
			break;
		case 5:
			this.handleLongTapBegin();
			this.findTooltipElement(event);
			break;
		default:
		}
		return false;
	}
	,processInputEvent: function(targetList,event) {
		switch(event.event._hx_index) {
		case 1:
			this.handleTouchEndDrag(event);
			this.clearInputState();
			break;
		case 2:
			this.handleTouchMoveTooltip(event);
			this.handleTouchMoveDrag(event);
			break;
		case 5:
			this.handleLongTapBegin();
			this.findTooltipElement(event);
			break;
		default:
		}
	}
	,clearInputState: function() {
		this.handleTouchEnd();
		this.handleTouchEndLongTap();
		this.handleTouchEndTooltip();
		this.touchBeginPt = null;
		this.dragElement = null;
		this.targetElements = null;
		this.endGuiInteraction();
	}
	,hideTooltip: function() {
		if(this.tooltipId != null) {
			this.tooltipModule.hideTooltip(this.tooltipId);
			this.tooltipElement = null;
			this.tooltipId = null;
			this.tooltipVDomId = null;
		}
	}
	,getTargetElement: function() {
		var it = this.targetElements;
		var it1 = it != null ? it[0] : null;
		if(it1 != null) {
			if(!it1.isDisposed && it1.isOnViewTree) {
				return it1;
			} else {
				return null;
			}
		} else {
			return null;
		}
	}
	,handleTouchBegin: function(targetList,event) {
		this.touchBeginPt = new banan_math_Point(event.x,event.y);
		var _g = 0;
		var _g1 = this.targetElements;
		while(_g < _g1.length) {
			var element = _g1[_g];
			++_g;
			if(!element.isDisposed && element.isOnViewTree) {
				element.handleTouchBegin();
				this.sfxNotify(element,"touchBeginSfx");
			}
		}
		var it = this.targetElements;
		var it1 = it != null ? it[0] : null;
		var targetElement = it1 != null ? !it1.isDisposed && it1.isOnViewTree ? it1 : null : null;
		if(targetElement != null && targetElement.hasTouchCallbacks()) {
			this.beginGuiInteration();
		}
	}
	,handleTouchEnd: function() {
		if(this.targetElements != null) {
			var _g = 0;
			var _g1 = this.targetElements;
			while(_g < _g1.length) {
				var element = _g1[_g];
				++_g;
				if(!element.isDisposed && element.isOnViewTree) {
					element.handleTouchEnd();
				}
				var parentNode = element.node.parent;
				element = parentNode != null ? jetgui_JetHelper.element(parentNode) : null;
			}
		}
	}
	,handleTap: function() {
		var it = this.targetElements;
		var it1 = it != null ? it[0] : null;
		var targetElement = it1 != null ? !it1.isDisposed && it1.isOnViewTree ? it1 : null : null;
		if(targetElement != null) {
			if(targetElement.onclick != null) {
				targetElement.onclick();
			}
			targetElement.tryStartClickAnimation();
			this.sfxNotify(targetElement,"clickSfx");
		}
	}
	,handleLongTapBegin: function() {
		var it = this.targetElements;
		var it1 = it != null ? it[0] : null;
		var targetElement = it1 != null ? !it1.isDisposed && it1.isOnViewTree ? it1 : null : null;
		if(targetElement != null) {
			this.longTapElement = targetElement;
			var _this = this.longTapElement;
			if(_this.onlongtapbegin != null) {
				_this.onlongtapbegin();
			}
			_this.tryStartClickAnimation();
		}
	}
	,handleTouchMoveLongTap: function() {
		if(this.longTapElement != null) {
			if(!this.longTapElement.isDisposed && this.longTapElement.isOnViewTree) {
				var _this = this.longTapElement;
				if(_this.onlongtapmove != null) {
					_this.onlongtapmove();
				}
			}
		}
	}
	,handleTouchEndLongTap: function() {
		if(this.longTapElement != null) {
			if(!this.longTapElement.isDisposed && this.longTapElement.isOnViewTree) {
				var _this = this.longTapElement;
				if(_this.onlongtapend != null) {
					_this.onlongtapend();
				}
			}
			this.longTapElement = null;
		}
	}
	,findDragElement: function(event) {
		if(this.touchBeginPt == null) {
			return false;
		}
		if(this.dragElement != null) {
			return true;
		}
		if(this.targetElements == null) {
			return false;
		}
		var dx = event.x - this.touchBeginPt.x;
		var dy = event.y - this.touchBeginPt.y;
		var _g = 0;
		var _g1 = this.targetElements;
		while(_g < _g1.length) {
			var element = _g1[_g];
			++_g;
			if(!element.isDisposed && element.isOnViewTree) {
				if(element.willHandleDrag(dx,dy)) {
					this.dragElement = element;
					this.dragElement.handleDragStart(event.x,event.y);
					this.sfxNotify(this.dragElement,"dragStartSfx");
					this.beginGuiInteration();
					break;
				}
			}
		}
		return this.dragElement != null;
	}
	,handleTouchMoveDrag: function(event) {
		if(!this.dragElement.isDisposed && this.dragElement.isOnViewTree) {
			var parentNode = this.dragElement.node.parent;
			var entity = (parentNode != null ? jetgui_JetHelper.element(parentNode) : null).entity;
			if(entity.__component__banan_display_NodeEdge == null) {
				throw new js__$Boot_HaxeError(banan_error_Error.e(120,"JetGuiInput.hx:316","Unwrap edge error. Entity: " + entity.name + "; Edge: " + banan_display_NodeEdge.__name__,null));
			}
			this.dragElement.handleDrag(event.x,event.y,event.x - event.prevX,event.y - event.prevY);
		}
	}
	,handleTouchEndDrag: function(event) {
		if(this.dragElement != null && !this.dragElement.isDisposed) {
			this.dragElement.handleDragEnd(event.x,event.y);
			this.dragElement = null;
		}
	}
	,findTooltipElement: function(event) {
		if(this.targetElements == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.targetElements;
		_hx_loop1: while(_g < _g1.length) {
			var element = _g1[_g];
			++_g;
			if(!element.isDisposed && element.isOnViewTree) {
				var _g2 = event.event;
				var _g11 = this.getTooltipInteractType(element);
				if(_g11 != null) {
					switch(_g11) {
					case "longTap":
						if(_g2._hx_index == 5) {
							this.showTooltip(element);
							break _hx_loop1;
						}
						break;
					case "tap":
						if(_g2._hx_index == 3) {
							this.showTooltip(element);
							break _hx_loop1;
						}
						break;
					case "touchBegin":
						if(_g2._hx_index == 0) {
							this.showTooltip(element);
							break _hx_loop1;
						}
						break;
					default:
					}
				}
			}
		}
	}
	,handleTouchMoveTooltip: function(event) {
		var _gthis = this;
		var it = this.tooltipElement;
		var it1 = it != null ? _gthis.getTooltipInteractType(it) == "touchBegin" ? it : null : null;
		if(it1 != null) {
			var hideDistance = _gthis.getTooltipHideDistance(it1);
			if(hideDistance.x < Math.abs(event.x - _gthis.touchBeginPt.x) || hideDistance.y < Math.abs(event.y - _gthis.touchBeginPt.y)) {
				_gthis.hideTooltip();
			}
		}
	}
	,handleTouchEndTooltip: function() {
		if(this.tooltipElement != null) {
			if(this.getTooltipInteractType(this.tooltipElement) != "tap") {
				this.showTooltip(null);
			}
		}
	}
	,showTooltip: function(element) {
		this.hideTooltip();
		if(element != null) {
			this.tooltipElement = element;
			this.tooltipId = this.tooltipModule.showTooltip(this.tooltipElement,"","");
			this.tooltipVDomId = this.getTooltipConfig(this.tooltipElement).tooltip.vDomId;
		}
	}
	,getTooltipHideDistance: function(element) {
		var config = this.getTooltipConfig(element);
		this.hIntPoint.x = config.hideDistanceX;
		this.hIntPoint.y = config.hideDistanceY;
		return this.hIntPoint;
	}
	,getTooltipInteractType: function(element) {
		var config = this.getTooltipConfig(element);
		if(config != null) {
			return config.interactType;
		} else {
			return null;
		}
	}
	,getTooltipConfig: function(element) {
		var tooltipEdge = element.entity.__component__jetgui_JetTooltipEdge;
		return tooltipEdge != null ? tooltipEdge.getConfig() : null;
	}
	,sfxNotify: function(element,dataName) {
		if(this.notificatorModule != null) {
			var dataValue = this.getJetData(element,dataName);
			if(dataValue != null) {
				this.notificatorModule.notify(["input","sfx",dataValue]);
			}
		}
	}
	,getJetData: function(element,dataName) {
		var jetDataEdge = element.entity.__component__jetgui_JetDataEdge;
		if(jetDataEdge != null) {
			var _this = jetDataEdge.dataMap;
			if(__map_reserved[dataName] != null) {
				return _this.getReserved(dataName);
			} else {
				return _this.h[dataName];
			}
		} else {
			return null;
		}
	}
	,beginGuiInteration: function() {
		if(!this.isGuiInteractionBegin) {
			this.isGuiInteractionBegin = true;
			if(this.notificatorModule != null) {
				this.notificatorModule.notify(["guiInteraction","begin"]);
			}
		}
	}
	,endGuiInteraction: function() {
		if(this.isGuiInteractionBegin) {
			this.isGuiInteractionBegin = false;
			if(this.notificatorModule != null) {
				this.notificatorModule.notify(["guiInteraction","end"]);
			}
		}
	}
	,__class__: jetguimodule_JetGuiInput
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.wrap = function(val) {
	if(((val) instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var kha__$Assets_ImageList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.ImageList"] = kha__$Assets_ImageList;
kha__$Assets_ImageList.__name__ = "kha._Assets.ImageList";
kha__$Assets_ImageList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_ImageList
};
var kha__$Assets_SoundList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.SoundList"] = kha__$Assets_SoundList;
kha__$Assets_SoundList.__name__ = "kha._Assets.SoundList";
kha__$Assets_SoundList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_SoundList
};
var kha__$Assets_BlobList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.BlobList"] = kha__$Assets_BlobList;
kha__$Assets_BlobList.__name__ = "kha._Assets.BlobList";
kha__$Assets_BlobList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_BlobList
};
var kha__$Assets_FontList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.FontList"] = kha__$Assets_FontList;
kha__$Assets_FontList.__name__ = "kha._Assets.FontList";
kha__$Assets_FontList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_FontList
};
var kha__$Assets_VideoList = function() {
	this.names = [];
};
$hxClasses["kha._Assets.VideoList"] = kha__$Assets_VideoList;
kha__$Assets_VideoList.__name__ = "kha._Assets.VideoList";
kha__$Assets_VideoList.prototype = {
	get: function(name) {
		return Reflect.field(this,name);
	}
	,names: null
	,__class__: kha__$Assets_VideoList
};
var kha_Assets = function() { };
$hxClasses["kha.Assets"] = kha_Assets;
kha_Assets.__name__ = "kha.Assets";
kha_Assets.__properties__ = {get_videoFormats:"get_videoFormats",get_fontFormats:"get_fontFormats",get_soundFormats:"get_soundFormats",get_imageFormats:"get_imageFormats"};
kha_Assets.loadEverything = function(callback,filter,uncompressSoundsFilter,failed) {
	var lists = [kha__$Assets_ImageList,kha__$Assets_SoundList,kha__$Assets_BlobList,kha__$Assets_FontList,kha__$Assets_VideoList];
	var listInstances = [kha_Assets.images,kha_Assets.sounds,kha_Assets.blobs,kha_Assets.fonts,kha_Assets.videos];
	var fileCount = 0;
	var _g = 0;
	while(_g < lists.length) {
		var _g1 = 0;
		var _g11 = Type.getInstanceFields(lists[_g++]);
		while(_g1 < _g11.length) if(StringTools.endsWith(_g11[_g1++],"Description")) {
			fileCount += 1;
		}
	}
	if(fileCount == 0) {
		callback();
		return;
	}
	var filesLeft = fileCount;
	var loadFunc = function(desc,done,failure) {
		var name = desc.name;
		switch(desc.type) {
		case "blob":
			kha_Assets.loadBlob(name,function(blob) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 122, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "font":
			kha_Assets.loadFont(name,function(font) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 124, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "image":
			kha_Assets.loadImage(name,function(image) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 113, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "sound":
			kha_Assets.loadSound(name,function(sound) {
				if(uncompressSoundsFilter == null || uncompressSoundsFilter(desc)) {
					sound.uncompress(done);
				} else {
					done();
				}
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 115, className : "kha.Assets", methodName : "loadEverything"});
			break;
		case "video":
			kha_Assets.loadVideo(name,function(video) {
				done();
			},failure,{ fileName : "kha/Assets.hx", lineNumber : 126, className : "kha.Assets", methodName : "loadEverything"});
			break;
		}
	};
	var onLoaded = function() {
		filesLeft -= 1;
		kha_Assets.progress = 1 - filesLeft / fileCount;
		if(filesLeft == 0) {
			callback();
		}
	};
	var onError = function(err) {
		(kha_Assets.reporter(failed,{ fileName : "kha/Assets.hx", lineNumber : 137, className : "kha.Assets", methodName : "loadEverything"}))(err);
		onLoaded();
	};
	var _g12 = 0;
	var _g2 = lists.length;
	while(_g12 < _g2) {
		var i = _g12++;
		var listInstance = listInstances[i];
		var _g13 = 0;
		var _g21 = Type.getInstanceFields(lists[i]);
		while(_g13 < _g21.length) {
			var field = _g21[_g13];
			++_g13;
			if(!StringTools.endsWith(field,"Description")) {
				continue;
			}
			var desc1 = Reflect.field(listInstance,field);
			if(filter == null || filter(desc1)) {
				loadFunc(desc1,onLoaded,onError);
			} else {
				onLoaded();
			}
		}
	}
};
kha_Assets.loadImage = function(name,done,failed,pos) {
	kha_LoaderImpl.loadImageFromDescription(Reflect.field(kha_Assets.images,name + "Description"),function(image) {
		kha_Assets.images[name] = image;
		done(image);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadImageFromPath = function(path,readable,done,failed,pos) {
	var tmp = kha_Assets.reporter(failed,pos);
	kha_LoaderImpl.loadImageFromDescription({ files : [path], readable : readable},done,tmp);
};
kha_Assets.get_imageFormats = function() {
	return kha_LoaderImpl.getImageFormats();
};
kha_Assets.loadBlob = function(name,done,failed,pos) {
	kha_LoaderImpl.loadBlobFromDescription(Reflect.field(kha_Assets.blobs,name + "Description"),function(blob) {
		kha_Assets.blobs[name] = blob;
		done(blob);
	},kha_Assets.reporter(failed,pos));
};
kha_Assets.loadBlobFromPath = function(path,done,failed,pos) {
	var tmp = kha_Assets.reporter(failed,pos);
	kha_LoaderImpl.loadBlobFromDescription({ files : [path]},done,tmp);
};
kha_Assets.loadSound = function(name,done,failed,pos) {
	kha_LoaderImpl.loadSoundFromDescription(Reflect.field(kha_Assets.sounds,name + "Description"),function(sound) {
		kha_Assets.sounds[name] = sound;
		done(sound);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadSoundFromPath = function(path,done,failed,pos) {
	var tmp = kha_Assets.reporter(failed,pos);
	kha_LoaderImpl.loadSoundFromDescription({ files : [path]},done,tmp);
	return;
};
kha_Assets.get_soundFormats = function() {
	return kha_LoaderImpl.getSoundFormats();
};
kha_Assets.loadFont = function(name,done,failed,pos) {
	kha_LoaderImpl.loadFontFromDescription(Reflect.field(kha_Assets.fonts,name + "Description"),function(font) {
		kha_Assets.fonts[name] = font;
		done(font);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadFontFromPath = function(path,done,failed,pos) {
	var tmp = kha_Assets.reporter(failed,pos);
	kha_LoaderImpl.loadFontFromDescription({ files : [path]},done,tmp);
	return;
};
kha_Assets.get_fontFormats = function() {
	return ["ttf"];
};
kha_Assets.loadVideo = function(name,done,failed,pos) {
	kha_LoaderImpl.loadVideoFromDescription(Reflect.field(kha_Assets.videos,name + "Description"),function(video) {
		kha_Assets.videos[name] = video;
		done(video);
	},kha_Assets.reporter(failed,pos));
	return;
};
kha_Assets.loadVideoFromPath = function(path,done,failed,pos) {
	var tmp = kha_Assets.reporter(failed,pos);
	kha_LoaderImpl.loadVideoFromDescription({ files : [path]},done,tmp);
	return;
};
kha_Assets.get_videoFormats = function() {
	return kha_LoaderImpl.getVideoFormats();
};
kha_Assets.reporter = function(custom,pos) {
	if(custom != null) {
		return custom;
	} else {
		var f = haxe_Log.trace;
		var infos = pos;
		return function(v) {
			f(v,infos);
		};
	}
};
var kha_Canvas = function() { };
$hxClasses["kha.Canvas"] = kha_Canvas;
kha_Canvas.__name__ = "kha.Canvas";
kha_Canvas.__isInterface__ = true;
kha_Canvas.prototype = {
	get_width: null
	,get_height: null
	,get_g1: null
	,get_g2: null
	,get_g4: null
	,width: null
	,height: null
	,g1: null
	,g2: null
	,g4: null
	,__class__: kha_Canvas
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha_Resource = function() { };
$hxClasses["kha.Resource"] = kha_Resource;
kha_Resource.__name__ = "kha.Resource";
kha_Resource.__isInterface__ = true;
kha_Resource.prototype = {
	unload: null
	,__class__: kha_Resource
};
var kha_Image = function() { };
$hxClasses["kha.Image"] = kha_Image;
kha_Image.__name__ = "kha.Image";
kha_Image.__interfaces__ = [kha_Resource,kha_Canvas];
kha_Image.__properties__ = {get_nonPow2Supported:"get_nonPow2Supported",get_maxSize:"get_maxSize"};
kha_Image.create = function(width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,false);
	} else {
		return new kha_WebGLImage(width,height,format,false,0,1);
	}
};
kha_Image.create3D = function(width,height,depth,format,usage) {
	return null;
};
kha_Image.createRenderTarget = function(width,height,format,depthStencil,antiAliasingSamples,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(antiAliasingSamples == null) {
		antiAliasingSamples = 1;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	if(format == null) {
		format = 0;
	}
	if(kha_SystemImpl.gl == null) {
		return new kha_CanvasImage(width,height,format,true);
	} else {
		return new kha_WebGLImage(width,height,format,true,depthStencil,antiAliasingSamples);
	}
};
kha_Image.fromCanvas = function(canvas) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(canvas.width,canvas.height,0,false);
		img.image = canvas;
		img.createTexture();
		return img;
	} else {
		var img1 = new kha_WebGLImage(canvas.width,canvas.height,0,false,0,1);
		img1.image = canvas;
		img1.createTexture();
		return img1;
	}
};
kha_Image.fromImage = function(image,readable) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(image.width,image.height,0,false);
		img.image = image;
		img.createTexture();
		return img;
	} else {
		var img1 = new kha_WebGLImage(image.width,image.height,0,false,0,1);
		img1.image = image;
		img1.createTexture();
		return img1;
	}
};
kha_Image.fromBytes = function(bytes,width,height,format,usage) {
	if(format == null) {
		format = 0;
	}
	if(usage == null) {
		usage = 0;
	}
	if(kha_SystemImpl.gl != null) {
		var img = new kha_WebGLImage(width,height,format,false,0,1);
		img.image = img.bytesToArray(bytes);
		img.createTexture();
		return img;
	}
	var img1 = new kha_CanvasImage(width,height,format,false);
	img1.get_g2().canvas.putImageData(new ImageData(new Uint8ClampedArray(bytes.b.bufferValue),width,height),0,0);
	return img1;
};
kha_Image.fromBytes3D = function(bytes,width,height,depth,format,usage) {
	return null;
};
kha_Image.fromEncodedBytes = function(bytes,fileExtention,doneCallback,errorCallback,readable) {
	if(readable == null) {
		readable = false;
	}
	var dataUrl = "data:image;base64," + haxe_crypto_Base64.encode(bytes);
	var imageElement = js_Boot.__cast(window.document.createElement("img") , HTMLImageElement);
	imageElement.onload = function() {
		var tmp = kha_Image.fromImage(imageElement,readable);
		doneCallback(tmp);
	};
	imageElement.onerror = function() {
		errorCallback("Image was not created");
	};
	imageElement.src = dataUrl;
};
kha_Image.fromVideo = function(video) {
	if(kha_SystemImpl.gl == null) {
		var img = new kha_CanvasImage(video.element.videoWidth,video.element.videoHeight,0,false);
		img.video = video.element;
		img.createTexture();
		return img;
	} else {
		var img1 = new kha_WebGLImage(video.element.videoWidth,video.element.videoHeight,0,false,0,1);
		img1.video = video.element;
		img1.createTexture();
		return img1;
	}
};
kha_Image.get_maxSize = function() {
	if(kha_SystemImpl.gl == null) {
		return 8192;
	} else {
		return kha_SystemImpl.gl.getParameter(3379);
	}
};
kha_Image.get_nonPow2Supported = function() {
	return kha_SystemImpl.gl != null;
};
kha_Image.renderTargetsInvertedY = function() {
	return true;
};
kha_Image.prototype = {
	isOpaque: function(x,y) {
		return false;
	}
	,at: function(x,y) {
		return -16777216;
	}
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,getPixels: function() {
		return null;
	}
	,generateMipmaps: function(levels) {
	}
	,setMipmaps: function(mipmaps) {
	}
	,setDepthStencilFrom: function(image) {
	}
	,clear: function(x,y,z,width,height,depth,color) {
	}
	,width: null
	,get_width: function() {
		return 0;
	}
	,height: null
	,get_height: function() {
		return 0;
	}
	,depth: null
	,get_depth: function() {
		return 1;
	}
	,realWidth: null
	,get_realWidth: function() {
		return 0;
	}
	,realHeight: null
	,get_realHeight: function() {
		return 0;
	}
	,stride: null
	,get_stride: function() {
		return 0;
	}
	,g1: null
	,get_g1: function() {
		return null;
	}
	,g2: null
	,get_g2: function() {
		return null;
	}
	,g4: null
	,get_g4: function() {
		return null;
	}
	,__class__: kha_Image
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_stride:"get_stride",get_realHeight:"get_realHeight",get_realWidth:"get_realWidth",get_depth:"get_depth",get_height:"get_height",get_width:"get_width"}
};
var kha_CanvasImage = function(width,height,format,renderTarget) {
	this.g2canvas = null;
	this.myWidth = width;
	this.myHeight = height;
	this.format = format;
	this.renderTarget = renderTarget;
	this.image = null;
	this.video = null;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.CanvasImage"] = kha_CanvasImage;
kha_CanvasImage.__name__ = "kha.CanvasImage";
kha_CanvasImage.init = function() {
	var canvas = window.document.createElement("canvas");
	if(canvas != null) {
		kha_CanvasImage.context = canvas.getContext("2d");
		canvas.width = 2048;
		canvas.height = 2048;
		kha_CanvasImage.context.globalCompositeOperation = "copy";
	}
};
kha_CanvasImage.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_CanvasImage.__super__ = kha_Image;
kha_CanvasImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,frameBuffer: null
	,graphics1: null
	,g2canvas: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.g2canvas == null) {
			var canvas = window.document.createElement("canvas");
			this.image = canvas;
			var context = canvas.getContext("2d");
			canvas.width = this.get_width();
			canvas.height = this.get_height();
			this.g2canvas = new kha_js_CanvasGraphics(context);
		}
		return this.g2canvas;
	}
	,get_g4: function() {
		return null;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,get_stride: function() {
		if(this.format == 0) {
			return 4 * this.get_width();
		} else {
			return this.get_width();
		}
	}
	,isOpaque: function(x,y) {
		if(this.data == null) {
			if(kha_CanvasImage.context == null) {
				return true;
			} else {
				this.createImageData();
			}
		}
		return this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3] != 0;
	}
	,at: function(x,y) {
		if(this.data == null) {
			if(kha_CanvasImage.context == null) {
				return -16777216;
			} else {
				this.createImageData();
			}
		}
		return kha__$Color_Color_$Impl_$._new(this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3] << 24 | this.data.data[y * (this.image.width | 0) * 4 + x * 4] << 16 | this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 1] << 8 | this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 2]);
	}
	,createImageData: function() {
		kha_CanvasImage.context.strokeStyle = "rgba(0,0,0,0)";
		kha_CanvasImage.context.fillStyle = "rgba(0,0,0,0)";
		kha_CanvasImage.context.fillRect(0,0,this.image.width,this.image.height);
		kha_CanvasImage.context.drawImage(this.image,0,0,this.image.width,this.image.height,0,0,this.image.width,this.image.height);
		this.data = kha_CanvasImage.context.getImageData(0,0,this.image.width,this.image.height);
	}
	,texture: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.format == 0 ? 4 * this.get_width() * this.get_height() : this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,new Uint8Array(this.bytes.b.bufferValue));
			if(kha_SystemImpl.gl.getError() == 1282) {
				var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
				var _g = 0;
				var _g1 = this.get_height();
				while(_g < _g1) {
					var y = _g++;
					var _g2 = 0;
					var _g11 = this.get_width();
					while(_g2 < _g11) {
						var x = _g2++;
						var value = this.bytes.b[y * this.get_width() + x];
						rgbaBytes.b[y * this.get_width() * 4 + x * 4] = value;
						rgbaBytes.b[y * this.get_width() * 4 + x * 4 + 1] = value;
						rgbaBytes.b[y * this.get_width() * 4 + x * 4 + 2] = value;
						rgbaBytes.b[y * this.get_width() * 4 + x * 4 + 3] = 255;
					}
				}
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,new Uint8Array(rgbaBytes.b.bufferValue));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,getPixels: function() {
		var imageData = this.g2canvas.canvas.getImageData(0,0,this.get_width(),this.get_height());
		var bytes = new haxe_io_Bytes(new ArrayBuffer(imageData.data.length));
		var _g = 0;
		var _g1 = imageData.data.length;
		while(_g < _g1) {
			var i = _g++;
			bytes.b[i] = imageData.data[i];
		}
		return bytes;
	}
	,unload: function() {
		this.image = null;
		this.video = null;
		this.data = null;
	}
	,__class__: kha_CanvasImage
});
var kha_Display = function() {
};
$hxClasses["kha.Display"] = kha_Display;
kha_Display.__name__ = "kha.Display";
kha_Display.__properties__ = {get_all:"get_all",get_primary:"get_primary"};
kha_Display.get_primary = function() {
	return kha_Display.instance;
};
kha_Display.get_all = function() {
	return [kha_Display.get_primary()];
};
kha_Display.prototype = {
	get_available: function() {
		return true;
	}
	,get_name: function() {
		return "Display";
	}
	,get_x: function() {
		return window.screen.left;
	}
	,get_y: function() {
		return window.screen.top;
	}
	,get_width: function() {
		return window.screen.width;
	}
	,get_height: function() {
		return window.screen.height;
	}
	,get_frequency: function() {
		return 60;
	}
	,get_pixelsPerInch: function() {
		var dpiElement = window.document.createElement("div");
		dpiElement.style.position = "absolute";
		dpiElement.style.width = "1in";
		dpiElement.style.height = "1in";
		dpiElement.style.left = "-100%";
		dpiElement.style.top = "-100%";
		window.document.body.appendChild(dpiElement);
		var dpi = dpiElement.offsetHeight;
		dpiElement.remove();
		return dpi;
	}
	,get_modes: function() {
		return [];
	}
	,__class__: kha_Display
	,__properties__: {get_modes:"get_modes",get_pixelsPerInch:"get_pixelsPerInch",get_frequency:"get_frequency",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x",get_name:"get_name",get_available:"get_available"}
};
var kha_DisplayMode = function(width,height,frequency,bitsPerPixel) {
	this.width = width;
	this.height = height;
	this.frequency = frequency;
	this.bitsPerPixel = bitsPerPixel;
};
$hxClasses["kha.DisplayMode"] = kha_DisplayMode;
kha_DisplayMode.__name__ = "kha.DisplayMode";
kha_DisplayMode.prototype = {
	width: null
	,height: null
	,frequency: null
	,bitsPerPixel: null
	,__class__: kha_DisplayMode
};
var kha_Framebuffer = function($window,g1,g2,g4) {
	this.window = $window;
	this.graphics1 = g1;
	this.graphics2 = g2;
	this.graphics4 = g4;
};
$hxClasses["kha.Framebuffer"] = kha_Framebuffer;
kha_Framebuffer.__name__ = "kha.Framebuffer";
kha_Framebuffer.__interfaces__ = [kha_Canvas];
kha_Framebuffer.prototype = {
	window: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,init: function(g1,g2,g4) {
		this.graphics1 = g1;
		this.graphics2 = g2;
		this.graphics4 = g4;
	}
	,get_g1: function() {
		return this.graphics1;
	}
	,get_g2: function() {
		return this.graphics2;
	}
	,get_g4: function() {
		return this.graphics4;
	}
	,width: null
	,get_width: function() {
		return kha_System.windowWidth(this.window);
	}
	,height: null
	,get_height: function() {
		return kha_System.windowHeight(this.window);
	}
	,__class__: kha_Framebuffer
	,__properties__: {get_height:"get_height",get_width:"get_width",get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1"}
};
var kha_FramebufferOptions = function(frequency,verticalSync,colorBufferBits,depthBufferBits,stencilBufferBits,samplesPerPixel) {
	if(samplesPerPixel == null) {
		samplesPerPixel = 1;
	}
	if(stencilBufferBits == null) {
		stencilBufferBits = 8;
	}
	if(depthBufferBits == null) {
		depthBufferBits = 16;
	}
	if(colorBufferBits == null) {
		colorBufferBits = 32;
	}
	if(verticalSync == null) {
		verticalSync = true;
	}
	if(frequency == null) {
		frequency = 60;
	}
	this.samplesPerPixel = 1;
	this.stencilBufferBits = 8;
	this.depthBufferBits = 16;
	this.colorBufferBits = 32;
	this.verticalSync = true;
	this.frequency = 60;
	this.frequency = frequency;
	this.verticalSync = verticalSync;
	this.colorBufferBits = colorBufferBits;
	this.depthBufferBits = depthBufferBits;
	this.stencilBufferBits = stencilBufferBits;
	this.samplesPerPixel = samplesPerPixel;
};
$hxClasses["kha.FramebufferOptions"] = kha_FramebufferOptions;
kha_FramebufferOptions.__name__ = "kha.FramebufferOptions";
kha_FramebufferOptions.prototype = {
	frequency: null
	,verticalSync: null
	,colorBufferBits: null
	,depthBufferBits: null
	,stencilBufferBits: null
	,samplesPerPixel: null
	,__class__: kha_FramebufferOptions
};
var kha_AlignedQuad = function() {
};
$hxClasses["kha.AlignedQuad"] = kha_AlignedQuad;
kha_AlignedQuad.__name__ = "kha.AlignedQuad";
kha_AlignedQuad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,xadvance: null
	,__class__: kha_AlignedQuad
};
var kha_KravurImage = function(size,ascent,descent,lineGap,width,height,chars,pixels) {
	this.mySize = size;
	this.width = width;
	this.height = height;
	this.chars = chars;
	this.baseline = ascent;
	var _g = 0;
	while(_g < chars.length) chars[_g++].yoff += this.baseline;
	this.texture = kha_Image.create(width,height,1);
	var bytes = this.texture.lock();
	var pos = 0;
	var _g1 = 0;
	while(_g1 < height) {
		++_g1;
		var _g11 = 0;
		while(_g11 < width) {
			++_g11;
			bytes.b[pos] = pixels.readU8(pos);
			++pos;
		}
	}
	this.texture.unlock();
};
$hxClasses["kha.KravurImage"] = kha_KravurImage;
kha_KravurImage.__name__ = "kha.KravurImage";
kha_KravurImage.prototype = {
	mySize: null
	,chars: null
	,texture: null
	,width: null
	,height: null
	,baseline: null
	,getTexture: function() {
		return this.texture;
	}
	,getBakedQuad: function(q,char_index,xpos,ypos) {
		if(char_index >= this.chars.length) {
			return null;
		}
		var ipw = 1.0 / this.width;
		var iph = 1.0 / this.height;
		var b = this.chars[char_index];
		if(b == null) {
			return null;
		}
		var round_x = Math.round(xpos + b.xoff);
		var round_y = Math.round(ypos + b.yoff);
		q.x0 = round_x;
		q.y0 = round_y;
		q.x1 = round_x + b.x1 - b.x0;
		q.y1 = round_y + b.y1 - b.y0;
		q.s0 = b.x0 * ipw;
		q.t0 = b.y0 * iph;
		q.s1 = b.x1 * ipw;
		q.t1 = b.y1 * iph;
		q.xadvance = b.xadvance;
		return q;
	}
	,getCharWidth: function(charIndex) {
		if(this.chars.length == 0) {
			return 0;
		}
		var offset = kha_KravurImage.charBlocks[0];
		if(charIndex < offset) {
			return this.chars[0].xadvance;
		}
		var _g = 1;
		var _g1 = kha_KravurImage.charBlocks.length / 2 | 0;
		while(_g < _g1) {
			var i = _g++;
			var start = kha_KravurImage.charBlocks[i * 2];
			if(charIndex > start - 1) {
				offset += start - 1 - kha_KravurImage.charBlocks[i * 2 - 1];
			}
		}
		if(charIndex - offset >= this.chars.length) {
			return this.chars[0].xadvance;
		}
		return this.chars[charIndex - offset].xadvance;
	}
	,getHeight: function() {
		return this.mySize;
	}
	,stringWidth: function(str) {
		var width = 0;
		var _g = 0;
		var _g1 = str.length;
		while(_g < _g1) width += this.getCharWidth(HxOverrides.cca(str,_g++));
		return width;
	}
	,charactersWidth: function(characters,start,length) {
		var width = 0;
		var _g = start;
		var _g1 = start + length;
		while(_g < _g1) width += this.getCharWidth(characters[_g++]);
		return width;
	}
	,getBaselinePosition: function() {
		return this.baseline;
	}
	,__class__: kha_KravurImage
};
var kha_Kravur = function(blob,fontIndex) {
	if(fontIndex == null) {
		fontIndex = 0;
	}
	this.images = new haxe_ds_IntMap();
	this.blob = blob;
	this.fontIndex = fontIndex;
};
$hxClasses["kha.Kravur"] = kha_Kravur;
kha_Kravur.__name__ = "kha.Kravur";
kha_Kravur.__interfaces__ = [kha_Resource];
kha_Kravur.fromBytes = function(bytes,fontIndex) {
	if(fontIndex == null) {
		fontIndex = 0;
	}
	return new kha_Kravur(kha_internal_BytesBlob.fromBytes(bytes),fontIndex);
};
kha_Kravur.prototype = {
	oldGlyphs: null
	,blob: null
	,images: null
	,fontIndex: null
	,_get: function(fontSize) {
		var glyphs = kha_graphics2_Graphics.fontGlyphs;
		if(glyphs != this.oldGlyphs) {
			this.oldGlyphs = glyphs;
			kha_KravurImage.charBlocks = [glyphs[0]];
			var nextChar = kha_KravurImage.charBlocks[0] + 1;
			var _g = 1;
			var _g1 = glyphs.length;
			while(_g < _g1) {
				var i = _g++;
				if(glyphs[i] != nextChar) {
					kha_KravurImage.charBlocks.push(glyphs[i - 1]);
					kha_KravurImage.charBlocks.push(glyphs[i]);
					nextChar = glyphs[i] + 1;
				} else {
					++nextChar;
				}
			}
			kha_KravurImage.charBlocks.push(glyphs[glyphs.length - 1]);
		}
		var imageIndex = this.fontIndex * 10000000 + fontSize * 10000 + glyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			var width = 64;
			var height = 32;
			var baked = new Array(glyphs.length);
			var _g2 = 0;
			var _g11 = baked.length;
			while(_g2 < _g11) baked[_g2++] = new kha_graphics2_truetype_Stbtt_$bakedchar();
			var pixels = null;
			var offset = kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex(this.blob,this.fontIndex);
			if(offset == -1) {
				offset = kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex(this.blob,0);
			}
			var status = -1;
			while(status <= 0) {
				if(height < width) {
					height *= 2;
				} else {
					width *= 2;
				}
				pixels = kha_internal_BytesBlob.alloc(width * height);
				status = kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap(this.blob,offset,fontSize,pixels,width,height,glyphs,baked);
			}
			var info = new kha_graphics2_truetype_Stbtt_$fontinfo();
			kha_graphics2_truetype_StbTruetype.stbtt_InitFont(info,this.blob,offset);
			var metrics = kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics(info);
			var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(info,fontSize);
			var image = new kha_KravurImage(fontSize | 0,Math.round(metrics.ascent * scale),Math.round(metrics.descent * scale),Math.round(metrics.lineGap * scale),width,height,baked,pixels);
			this.images.h[imageIndex] = image;
			return image;
		}
		return this.images.h[imageIndex];
	}
	,height: function(fontSize) {
		return this._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this._get(fontSize).getBaselinePosition();
	}
	,setFontIndex: function(fontIndex) {
		this.fontIndex = fontIndex;
	}
	,unload: function() {
		this.blob = null;
		this.images = null;
	}
	,__class__: kha_Kravur
};
var kha_LoaderImpl = function() { };
$hxClasses["kha.LoaderImpl"] = kha_LoaderImpl;
kha_LoaderImpl.__name__ = "kha.LoaderImpl";
kha_LoaderImpl.getImageFormats = function() {
	return ["png","jpg","hdr"];
};
kha_LoaderImpl.loadImageFromDescription = function(desc,done,failed) {
	var readable = Object.prototype.hasOwnProperty.call(desc,"readable") && desc.readable;
	if(StringTools.endsWith(desc.files[0],".hdr")) {
		kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
			var hdrImage = kha_internal_HdrFormat.parse(blob.toBytes());
			var tmp = kha_Image.fromBytes(haxe_io_Bytes.ofData(hdrImage.data.buffer),hdrImage.width,hdrImage.height,2,readable ? 1 : 0);
			done(tmp);
		},failed);
	} else {
		var img = window.document.createElement("img");
		img.onerror = function(event) {
			failed({ url : desc.files[0], error : event});
		};
		img.onload = function(event1) {
			var tmp1 = kha_Image.fromImage(img,readable);
			done(tmp1);
		};
		img.crossOrigin = "";
		img.src = desc.files[0];
	}
};
kha_LoaderImpl.getSoundFormats = function() {
	var element = window.document.createElement("audio");
	var formats = [];
	if(element.canPlayType("audio/mp4") != "") {
		formats.push("mp4");
	}
	if(element.canPlayType("audio/mp3") != "") {
		formats.push("mp3");
	}
	if(element.canPlayType("audio/wav") != "") {
		formats.push("wav");
	}
	if(kha_SystemImpl._hasWebAudio || element.canPlayType("audio/ogg") != "") {
		formats.push("ogg");
	}
	return formats;
};
kha_LoaderImpl.loadSoundFromDescription = function(desc,done,failed) {
	if(kha_SystemImpl._hasWebAudio) {
		var element = window.document.createElement("audio");
		if(element.canPlayType("audio/mp4") != "") {
			var _g = 0;
			var _g1 = desc.files.length;
			while(_g < _g1) {
				var file = desc.files[_g++];
				if(StringTools.endsWith(file,".mp4")) {
					new kha_js_WebAudioSound(file,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/mp3") != "") {
			var _g2 = 0;
			var _g11 = desc.files.length;
			while(_g2 < _g11) {
				var file1 = desc.files[_g2++];
				if(StringTools.endsWith(file1,".mp3")) {
					new kha_js_WebAudioSound(file1,done,failed);
					return;
				}
			}
		}
		if(element.canPlayType("audio/wav") != "") {
			var _g3 = 0;
			var _g12 = desc.files.length;
			while(_g3 < _g12) {
				var file2 = desc.files[_g3++];
				if(StringTools.endsWith(file2,".wav")) {
					new kha_js_WebAudioSound(file2,done,failed);
					return;
				}
			}
		}
		var _g4 = 0;
		var _g13 = desc.files.length;
		while(_g4 < _g13) {
			var file3 = desc.files[_g4++];
			if(StringTools.endsWith(file3,".ogg")) {
				new kha_js_WebAudioSound(file3,done,failed);
				return;
			}
		}
	} else if(kha_SystemImpl.mobile) {
		var element1 = window.document.createElement("audio");
		if(element1.canPlayType("audio/mp4") != "") {
			var _g5 = 0;
			var _g14 = desc.files.length;
			while(_g5 < _g14) {
				var file4 = desc.files[_g5++];
				if(StringTools.endsWith(file4,".mp4")) {
					new kha_js_MobileWebAudioSound(file4,done,failed);
					return;
				}
			}
		}
		if(element1.canPlayType("audio/mp3") != "") {
			var _g6 = 0;
			var _g15 = desc.files.length;
			while(_g6 < _g15) {
				var file5 = desc.files[_g6++];
				if(StringTools.endsWith(file5,".mp3")) {
					new kha_js_MobileWebAudioSound(file5,done,failed);
					return;
				}
			}
		}
		if(element1.canPlayType("audio/wav") != "") {
			var _g7 = 0;
			var _g16 = desc.files.length;
			while(_g7 < _g16) {
				var file6 = desc.files[_g7++];
				if(StringTools.endsWith(file6,".wav")) {
					new kha_js_MobileWebAudioSound(file6,done,failed);
					return;
				}
			}
		}
		var _g8 = 0;
		var _g17 = desc.files.length;
		while(_g8 < _g17) {
			var file7 = desc.files[_g8++];
			if(StringTools.endsWith(file7,".ogg")) {
				new kha_js_MobileWebAudioSound(file7,done,failed);
				return;
			}
		}
	} else {
		new kha_js_Sound(desc.files,done,failed);
	}
};
kha_LoaderImpl.getVideoFormats = function() {
	return ["mp4","webm"];
};
kha_LoaderImpl.loadVideoFromDescription = function(desc,done,failed) {
	kha_js_Video.fromFile(desc.files,done);
};
kha_LoaderImpl.loadRemote = function(desc,done,failed) {
	var request = new XMLHttpRequest();
	request.open("GET",desc.files[0],true);
	request.responseType = "arraybuffer";
	request.onreadystatechange = function() {
		if(request.readyState != 4) {
			return;
		}
		if(request.status >= 200 && request.status < 400 || request.status == 0 && request.statusText == "") {
			var bytes = null;
			var arrayBuffer = request.response;
			if(arrayBuffer != null) {
				var byteArray = new Uint8Array(arrayBuffer);
				bytes = haxe_io_Bytes.ofData(byteArray);
			} else if(request.responseBody != null) {
				var data = VBArray(request.responseBody).toArray();
				bytes = new haxe_io_Bytes(new ArrayBuffer(data.length));
				var _g = 0;
				var _g1 = data.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[i] = data[i];
				}
			} else {
				failed({ url : desc.files[0]});
				return;
			}
			done(new kha_internal_BytesBlob(bytes));
		} else {
			failed({ url : desc.files[0]});
		}
	};
	request.send(null);
};
kha_LoaderImpl.loadBlobFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadRemote(desc,done,failed);
};
kha_LoaderImpl.loadFontFromDescription = function(desc,done,failed) {
	kha_LoaderImpl.loadBlobFromDescription(desc,function(blob) {
		done(new kha_Kravur(blob));
	},failed);
};
var kha_Macros = function() { };
$hxClasses["kha.Macros"] = kha_Macros;
kha_Macros.__name__ = "kha.Macros";
var kha_TimeTask = function() {
};
$hxClasses["kha.TimeTask"] = kha_TimeTask;
kha_TimeTask.__name__ = "kha.TimeTask";
kha_TimeTask.prototype = {
	task: null
	,start: null
	,period: null
	,duration: null
	,next: null
	,id: null
	,groupId: null
	,active: null
	,paused: null
	,__class__: kha_TimeTask
};
var kha_FrameTask = function(task,priority,id) {
	this.task = task;
	this.priority = priority;
	this.id = id;
	this.active = true;
	this.paused = false;
};
$hxClasses["kha.FrameTask"] = kha_FrameTask;
kha_FrameTask.__name__ = "kha.FrameTask";
kha_FrameTask.prototype = {
	task: null
	,priority: null
	,id: null
	,active: null
	,paused: null
	,__class__: kha_FrameTask
};
var kha_Scheduler = function() { };
$hxClasses["kha.Scheduler"] = kha_Scheduler;
kha_Scheduler.__name__ = "kha.Scheduler";
kha_Scheduler.init = function() {
	kha_Scheduler.deltas = [];
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) kha_Scheduler.deltas[_g++] = 0;
	kha_Scheduler.stopped = true;
	kha_Scheduler.frame_tasks_sorted = true;
	kha_Scheduler.current = kha_Scheduler.lastTime = kha_Scheduler.lastFrameEnd = kha_Scheduler.realTime();
	kha_Scheduler.currentFrameTaskId = 0;
	kha_Scheduler.currentTimeTaskId = 0;
	kha_Scheduler.currentGroupId = 0;
	kha_Scheduler.timeTasks = [];
	kha_Scheduler.pausedTimeTasks = [];
	kha_Scheduler.outdatedTimeTasks = [];
	kha_Scheduler.timeTasksScratchpad = [];
	kha_Scheduler.frameTasks = [];
	kha_Scheduler.toDeleteFrame = [];
};
kha_Scheduler.start = function(restartTimers) {
	if(restartTimers == null) {
		restartTimers = false;
	}
	kha_Scheduler.vsync = kha_Window.get(0).get_vSynced();
	var hz = kha_Display.get_primary().get_frequency();
	if(hz >= 57 && hz <= 63) {
		hz = 60;
	}
	kha_Scheduler.onedifhz = 1.0 / hz;
	kha_Scheduler.stopped = false;
	kha_Scheduler.resetTime();
	kha_Scheduler.lastTime = kha_Scheduler.realTime() - kha_Scheduler.startTime;
	var _g = 0;
	var _g1 = kha_Scheduler.DIF_COUNT;
	while(_g < _g1) kha_Scheduler.deltas[_g++] = 0;
	if(restartTimers) {
		var _g2 = 0;
		var _g3 = kha_Scheduler.timeTasks;
		while(_g2 < _g3.length) _g3[_g2++].paused = false;
		var _g4 = 0;
		var _g5 = kha_Scheduler.frameTasks;
		while(_g4 < _g5.length) _g5[_g4++].paused = false;
	}
};
kha_Scheduler.stop = function() {
	kha_Scheduler.stopped = true;
};
kha_Scheduler.isStopped = function() {
	return kha_Scheduler.stopped;
};
kha_Scheduler.warpTimeTasksBack = function(time,tasks) {
	var _g = 0;
	while(_g < tasks.length) {
		var timeTask = tasks[_g];
		++_g;
		if(timeTask.start >= time) {
			timeTask.next = timeTask.start;
		} else if(timeTask.period > 0) {
			timeTask.next = timeTask.start + Math.ceil((time - timeTask.start) / timeTask.period) * timeTask.period;
		}
	}
};
kha_Scheduler.warp = function(time) {
	if(time < kha_Scheduler.lastTime) {
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.lastFrameEnd = time;
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.outdatedTimeTasks);
		kha_Scheduler.warpTimeTasksBack(time,kha_Scheduler.timeTasks);
		var _g = 0;
		var _g1 = kha_Scheduler.outdatedTimeTasks;
		while(_g < _g1.length) {
			var task = _g1[_g];
			++_g;
			if(task.next >= time) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g2 = 0;
		var _g3 = kha_Scheduler.timeTasksScratchpad;
		while(_g2 < _g3.length) HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,_g3[_g2++]);
		var _g4 = 0;
		var _g5 = kha_Scheduler.timeTasksScratchpad;
		while(_g4 < _g5.length) kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,_g5[_g4++]);
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	} else if(time > kha_Scheduler.lastTime) {
		kha_Scheduler.startTime -= time - kha_Scheduler.lastTime;
		kha_Scheduler.current = time;
		kha_Scheduler.lastTime = time;
		kha_Scheduler.lastFrameEnd = time;
		kha_Scheduler.executeTimeTasks(time);
	}
};
kha_Scheduler.executeFrame = function() {
	var delta = kha_Scheduler.realTime() - kha_Scheduler.startTime - kha_Scheduler.lastTime;
	var frameEnd = kha_Scheduler.lastFrameEnd;
	if(delta >= 0) {
		if(kha_netsync_Session.the() == null) {
			if(delta > kha_Scheduler.maxframetime) {
				kha_Scheduler.startTime += delta - kha_Scheduler.maxframetime;
				delta = kha_Scheduler.maxframetime;
				frameEnd += delta;
			} else if(kha_Scheduler.vsync) {
				var realdif = kha_Scheduler.onedifhz;
				while(realdif < delta - kha_Scheduler.onedifhz) realdif += kha_Scheduler.onedifhz;
				delta = realdif;
				var _g = 0;
				var _g1 = kha_Scheduler.DIF_COUNT - 2;
				while(_g < _g1) {
					var i = _g++;
					delta += kha_Scheduler.deltas[i];
					kha_Scheduler.deltas[i] = kha_Scheduler.deltas[i + 1];
				}
				delta += kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2];
				delta /= kha_Scheduler.DIF_COUNT;
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 2] = realdif;
				frameEnd += delta;
			} else {
				var _g2 = 0;
				var _g11 = kha_Scheduler.DIF_COUNT - 1;
				while(_g2 < _g11) {
					var i1 = _g2++;
					kha_Scheduler.deltas[i1] = kha_Scheduler.deltas[i1 + 1];
				}
				kha_Scheduler.deltas[kha_Scheduler.DIF_COUNT - 1] = delta;
				var next = 0;
				var _g21 = 0;
				var _g3 = kha_Scheduler.DIF_COUNT;
				while(_g21 < _g3) next += kha_Scheduler.deltas[_g21++];
				next /= kha_Scheduler.DIF_COUNT;
				frameEnd += next;
			}
		} else {
			frameEnd += delta;
		}
		kha_Scheduler.lastTime = frameEnd;
		if(!kha_Scheduler.stopped) {
			kha_Scheduler.lastFrameEnd = frameEnd;
		}
		var _g4 = 0;
		var _g12 = kha_Scheduler.pausedTimeTasks;
		while(_g4 < _g12.length) _g12[_g4++].next += delta;
		if(kha_Scheduler.stopped) {
			var _g22 = 0;
			var _g31 = kha_Scheduler.timeTasks;
			while(_g22 < _g31.length) _g31[_g22++].next += delta;
		}
		kha_Scheduler.executeTimeTasks(frameEnd);
		var _g23 = 0;
		var _g32 = kha_Scheduler.outdatedTimeTasks;
		while(_g23 < _g32.length) {
			var task = _g32[_g23];
			++_g23;
			if(task.next < frameEnd - 10.0) {
				kha_Scheduler.timeTasksScratchpad.push(task);
			}
		}
		var _g41 = 0;
		var _g5 = kha_Scheduler.timeTasksScratchpad;
		while(_g41 < _g5.length) HxOverrides.remove(kha_Scheduler.outdatedTimeTasks,_g5[_g41++]);
		while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	}
	kha_Scheduler.current = frameEnd;
	kha_Scheduler.sortFrameTasks();
	var _g6 = 0;
	var _g13 = kha_Scheduler.frameTasks;
	while(_g6 < _g13.length) {
		var frameTask = _g13[_g6];
		++_g6;
		if(!kha_Scheduler.stopped && !frameTask.paused && frameTask.active) {
			if(!frameTask.task()) {
				frameTask.active = false;
			}
		}
	}
	var _g24 = 0;
	var _g33 = kha_Scheduler.frameTasks;
	while(_g24 < _g33.length) {
		var frameTask1 = _g33[_g24];
		++_g24;
		if(!frameTask1.active) {
			kha_Scheduler.toDeleteFrame.push(frameTask1);
		}
	}
	while(kha_Scheduler.toDeleteFrame.length > 0) HxOverrides.remove(kha_Scheduler.frameTasks,kha_Scheduler.toDeleteFrame.pop());
};
kha_Scheduler.executeTimeTasks = function(until) {
	while(kha_Scheduler.timeTasks.length > 0) {
		kha_Scheduler.activeTimeTask = kha_Scheduler.timeTasks[0];
		if(kha_Scheduler.activeTimeTask.next <= until) {
			kha_Scheduler.current = kha_Scheduler.activeTimeTask.next;
			kha_Scheduler.activeTimeTask.next += kha_Scheduler.activeTimeTask.period;
			HxOverrides.remove(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
			if(kha_Scheduler.activeTimeTask.active && kha_Scheduler.activeTimeTask.task()) {
				if(kha_Scheduler.activeTimeTask.period > 0 && (kha_Scheduler.activeTimeTask.duration == 0 || kha_Scheduler.activeTimeTask.duration >= kha_Scheduler.activeTimeTask.start + kha_Scheduler.activeTimeTask.next)) {
					kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,kha_Scheduler.activeTimeTask);
				}
			} else {
				kha_Scheduler.activeTimeTask.active = false;
			}
		} else {
			break;
		}
	}
	kha_Scheduler.activeTimeTask = null;
};
kha_Scheduler.archiveTimeTask = function(timeTask,frameEnd) {
};
kha_Scheduler.time = function() {
	return kha_Scheduler.current;
};
kha_Scheduler.realTime = function() {
	return kha_System.get_time();
};
kha_Scheduler.resetTime = function() {
	var now = kha_System.get_time();
	var dif = now - kha_Scheduler.startTime;
	kha_Scheduler.startTime = now;
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		timeTask.start -= dif;
		timeTask.next -= dif;
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.DIF_COUNT;
	while(_g2 < _g3) kha_Scheduler.deltas[_g2++] = 0;
	kha_Scheduler.current = 0;
	kha_Scheduler.lastTime = 0;
	kha_Scheduler.lastFrameEnd = 0;
};
kha_Scheduler.addBreakableFrameTask = function(task,priority) {
	kha_Scheduler.frameTasks.push(new kha_FrameTask(task,priority,++kha_Scheduler.currentFrameTaskId));
	kha_Scheduler.frame_tasks_sorted = false;
	return kha_Scheduler.currentFrameTaskId;
};
kha_Scheduler.addFrameTask = function(task,priority) {
	return kha_Scheduler.addBreakableFrameTask(function() {
		task();
		return true;
	},priority);
};
kha_Scheduler.pauseFrameTask = function(id,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.paused = paused;
			break;
		}
	}
};
kha_Scheduler.removeFrameTask = function(id) {
	var _g = 0;
	var _g1 = kha_Scheduler.frameTasks;
	while(_g < _g1.length) {
		var frameTask = _g1[_g];
		++_g;
		if(frameTask.id == id) {
			frameTask.active = false;
			break;
		}
	}
};
kha_Scheduler.generateGroupId = function() {
	return ++kha_Scheduler.currentGroupId;
};
kha_Scheduler.addBreakableTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	var t = new kha_TimeTask();
	t.active = true;
	t.task = task;
	t.id = ++kha_Scheduler.currentTimeTaskId;
	t.groupId = groupId;
	t.start = kha_Scheduler.current + start;
	t.period = 0;
	if(period != 0) {
		t.period = period;
	}
	t.duration = 0;
	if(duration != 0) {
		t.duration = t.start + duration;
	}
	t.next = t.start;
	kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,t);
	return t.id;
};
kha_Scheduler.addTimeTaskToGroup = function(groupId,task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(groupId,function() {
		task();
		return true;
	},start,period,duration);
};
kha_Scheduler.addBreakableTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addBreakableTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.addTimeTask = function(task,start,period,duration) {
	if(duration == null) {
		duration = 0;
	}
	if(period == null) {
		period = 0;
	}
	return kha_Scheduler.addTimeTaskToGroup(0,task,start,period,duration);
};
kha_Scheduler.getTimeTask = function(id) {
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		return kha_Scheduler.activeTimeTask;
	}
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.id == id) {
			return timeTask;
		}
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.pausedTimeTasks;
	while(_g2 < _g3.length) {
		var timeTask1 = _g3[_g2];
		++_g2;
		if(timeTask1.id == id) {
			return timeTask1;
		}
	}
	return null;
};
kha_Scheduler.pauseTimeTask = function(id,paused) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.id == id) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.pauseRunningTimeTask = function(timeTask,paused) {
	timeTask.paused = paused;
	if(paused) {
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
		kha_Scheduler.pausedTimeTasks.push(timeTask);
	} else {
		kha_Scheduler.insertSorted(kha_Scheduler.timeTasks,timeTask);
		HxOverrides.remove(kha_Scheduler.pausedTimeTasks,timeTask);
	}
};
kha_Scheduler.pauseTimeTasks = function(groupId,paused) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			kha_Scheduler.pauseRunningTimeTask(timeTask,paused);
		}
	}
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.paused = paused;
	}
};
kha_Scheduler.removeTimeTask = function(id) {
	var timeTask = kha_Scheduler.getTimeTask(id);
	if(timeTask != null) {
		timeTask.active = false;
		HxOverrides.remove(kha_Scheduler.timeTasks,timeTask);
	}
};
kha_Scheduler.removeTimeTasks = function(groupId) {
	var _g = 0;
	var _g1 = kha_Scheduler.timeTasks;
	while(_g < _g1.length) {
		var timeTask = _g1[_g];
		++_g;
		if(timeTask.groupId == groupId) {
			timeTask.active = false;
			kha_Scheduler.timeTasksScratchpad.push(timeTask);
		}
	}
	var _g2 = 0;
	var _g3 = kha_Scheduler.timeTasksScratchpad;
	while(_g2 < _g3.length) HxOverrides.remove(kha_Scheduler.timeTasks,_g3[_g2++]);
	while(kha_Scheduler.timeTasksScratchpad.length > 0) HxOverrides.remove(kha_Scheduler.timeTasksScratchpad,kha_Scheduler.timeTasksScratchpad[0]);
	if(kha_Scheduler.activeTimeTask != null && kha_Scheduler.activeTimeTask.groupId == groupId) {
		kha_Scheduler.activeTimeTask.active = false;
	}
};
kha_Scheduler.numTasksInSchedule = function() {
	return kha_Scheduler.timeTasks.length + kha_Scheduler.frameTasks.length;
};
kha_Scheduler.insertSorted = function(list,task) {
	var _g = 0;
	var _g1 = list.length;
	while(_g < _g1) {
		var i = _g++;
		if(list[i].next > task.next) {
			list.splice(i,0,task);
			return;
		}
	}
	list.push(task);
};
kha_Scheduler.sortFrameTasks = function() {
	if(kha_Scheduler.frame_tasks_sorted) {
		return;
	}
	kha_Scheduler.frameTasks.sort(function(a,b) {
		if(a.priority > b.priority) {
			return 1;
		} else if(a.priority < b.priority) {
			return -1;
		} else {
			return 0;
		}
	});
	kha_Scheduler.frame_tasks_sorted = true;
};
var kha_Shaders = function() { };
$hxClasses["kha.Shaders"] = kha_Shaders;
kha_Shaders.__name__ = "kha.Shaders";
kha_Shaders.init = function() {
	var blobs = [];
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"clippingMask_fragData" + 0))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"clippingMask_fragData" + 1))));
	blobs.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"clippingMask_fragData" + 2))));
	kha_Shaders.clippingMask_frag = new kha_graphics4_FragmentShader(blobs,["clippingMask.frag.essl","clippingMask-webgl2.frag.essl","clippingMask-relaxed.frag.essl"]);
	var blobs1 = [];
	blobs1.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"colorTransform_fragData" + 0))));
	blobs1.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"colorTransform_fragData" + 1))));
	blobs1.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"colorTransform_fragData" + 2))));
	kha_Shaders.colorTransform_frag = new kha_graphics4_FragmentShader(blobs1,["colorTransform.frag.essl","colorTransform-webgl2.frag.essl","colorTransform-relaxed.frag.essl"]);
	var blobs2 = [];
	blobs2.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"default_fragData" + 0))));
	blobs2.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"default_fragData" + 1))));
	blobs2.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"default_fragData" + 2))));
	kha_Shaders.default_frag = new kha_graphics4_FragmentShader(blobs2,["default.frag.essl","default-webgl2.frag.essl","default-relaxed.frag.essl"]);
	var blobs3 = [];
	blobs3.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"default_vertData" + 0))));
	blobs3.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"default_vertData" + 1))));
	blobs3.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"default_vertData" + 2))));
	kha_Shaders.default_vert = new kha_graphics4_VertexShader(blobs3,["default.vert.essl","default-webgl2.vert.essl","default-relaxed.vert.essl"]);
	var blobs4 = [];
	blobs4.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"outline_fragData" + 0))));
	blobs4.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"outline_fragData" + 1))));
	blobs4.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"outline_fragData" + 2))));
	kha_Shaders.outline_frag = new kha_graphics4_FragmentShader(blobs4,["outline.frag.essl","outline-webgl2.frag.essl","outline-relaxed.frag.essl"]);
	var blobs5 = [];
	blobs5.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_fragData" + 0))));
	blobs5.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_fragData" + 1))));
	blobs5.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_fragData" + 2))));
	kha_Shaders.painter_colored_frag = new kha_graphics4_FragmentShader(blobs5,["painter-colored.frag.essl","painter-colored-webgl2.frag.essl","painter-colored-relaxed.frag.essl"]);
	var blobs6 = [];
	blobs6.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_vertData" + 0))));
	blobs6.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_vertData" + 1))));
	blobs6.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_colored_vertData" + 2))));
	kha_Shaders.painter_colored_vert = new kha_graphics4_VertexShader(blobs6,["painter-colored.vert.essl","painter-colored-webgl2.vert.essl","painter-colored-relaxed.vert.essl"]);
	var blobs7 = [];
	blobs7.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_fragData" + 0))));
	blobs7.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_fragData" + 1))));
	blobs7.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_fragData" + 2))));
	kha_Shaders.painter_image_frag = new kha_graphics4_FragmentShader(blobs7,["painter-image.frag.essl","painter-image-webgl2.frag.essl","painter-image-relaxed.frag.essl"]);
	var blobs8 = [];
	blobs8.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_vertData" + 0))));
	blobs8.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_vertData" + 1))));
	blobs8.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_image_vertData" + 2))));
	kha_Shaders.painter_image_vert = new kha_graphics4_VertexShader(blobs8,["painter-image.vert.essl","painter-image-webgl2.vert.essl","painter-image-relaxed.vert.essl"]);
	var blobs9 = [];
	blobs9.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_fragData" + 0))));
	blobs9.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_fragData" + 1))));
	blobs9.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_fragData" + 2))));
	kha_Shaders.painter_text_frag = new kha_graphics4_FragmentShader(blobs9,["painter-text.frag.essl","painter-text-webgl2.frag.essl","painter-text-relaxed.frag.essl"]);
	var blobs10 = [];
	blobs10.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_vertData" + 0))));
	blobs10.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_vertData" + 1))));
	blobs10.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_text_vertData" + 2))));
	kha_Shaders.painter_text_vert = new kha_graphics4_VertexShader(blobs10,["painter-text.vert.essl","painter-text-webgl2.vert.essl","painter-text-relaxed.vert.essl"]);
	var blobs11 = [];
	blobs11.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_fragData" + 0))));
	blobs11.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_fragData" + 1))));
	blobs11.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_fragData" + 2))));
	kha_Shaders.painter_video_frag = new kha_graphics4_FragmentShader(blobs11,["painter-video.frag.essl","painter-video-webgl2.frag.essl","painter-video-relaxed.frag.essl"]);
	var blobs12 = [];
	blobs12.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_vertData" + 0))));
	blobs12.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_vertData" + 1))));
	blobs12.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"painter_video_vertData" + 2))));
	kha_Shaders.painter_video_vert = new kha_graphics4_VertexShader(blobs12,["painter-video.vert.essl","painter-video-webgl2.vert.essl","painter-video-relaxed.vert.essl"]);
	var blobs13 = [];
	blobs13.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"sdfFont_fragData" + 0))));
	blobs13.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"sdfFont_fragData" + 1))));
	blobs13.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"sdfFont_fragData" + 2))));
	kha_Shaders.sdfFont_frag = new kha_graphics4_FragmentShader(blobs13,["sdfFont.frag.essl","sdfFont-webgl2.frag.essl","sdfFont-relaxed.frag.essl"]);
	var blobs14 = [];
	blobs14.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"sdfFont_vertData" + 0))));
	blobs14.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"sdfFont_vertData" + 1))));
	blobs14.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"sdfFont_vertData" + 2))));
	kha_Shaders.sdfFont_vert = new kha_graphics4_VertexShader(blobs14,["sdfFont.vert.essl","sdfFont-webgl2.vert.essl","sdfFont-relaxed.vert.essl"]);
	var blobs15 = [];
	blobs15.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"simple_fragData" + 0))));
	blobs15.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"simple_fragData" + 1))));
	blobs15.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"simple_fragData" + 2))));
	kha_Shaders.simple_frag = new kha_graphics4_FragmentShader(blobs15,["simple.frag.essl","simple-webgl2.frag.essl","simple-relaxed.frag.essl"]);
	var blobs16 = [];
	blobs16.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"simple_vertData" + 0))));
	blobs16.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"simple_vertData" + 1))));
	blobs16.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"simple_vertData" + 2))));
	kha_Shaders.simple_vert = new kha_graphics4_VertexShader(blobs16,["simple.vert.essl","simple-webgl2.vert.essl","simple-relaxed.vert.essl"]);
	var blobs17 = [];
	blobs17.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"spine_fragData" + 0))));
	blobs17.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"spine_fragData" + 1))));
	blobs17.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"spine_fragData" + 2))));
	kha_Shaders.spine_frag = new kha_graphics4_FragmentShader(blobs17,["spine.frag.essl","spine-webgl2.frag.essl","spine-relaxed.frag.essl"]);
	var blobs18 = [];
	blobs18.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"spine_vertData" + 0))));
	blobs18.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"spine_vertData" + 1))));
	blobs18.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"spine_vertData" + 2))));
	kha_Shaders.spine_vert = new kha_graphics4_VertexShader(blobs18,["spine.vert.essl","spine-webgl2.vert.essl","spine-relaxed.vert.essl"]);
	var blobs19 = [];
	blobs19.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"xray_fragData" + 0))));
	blobs19.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"xray_fragData" + 1))));
	blobs19.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"xray_fragData" + 2))));
	kha_Shaders.xray_frag = new kha_graphics4_FragmentShader(blobs19,["xray.frag.essl","xray-webgl2.frag.essl","xray-relaxed.frag.essl"]);
	var blobs20 = [];
	blobs20.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"xray_vertData" + 0))));
	blobs20.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"xray_vertData" + 1))));
	blobs20.push(kha_internal_BytesBlob.fromBytes(haxe_Unserializer.run(Reflect.field(kha_Shaders,"xray_vertData" + 2))));
	kha_Shaders.xray_vert = new kha_graphics4_VertexShader(blobs20,["xray.vert.essl","xray-webgl2.vert.essl","xray-relaxed.vert.essl"]);
};
var kha_Sound = function() {
	this.sampleRate = 0;
	this.channels = 0;
	this.length = 0;
};
$hxClasses["kha.Sound"] = kha_Sound;
kha_Sound.__name__ = "kha.Sound";
kha_Sound.__interfaces__ = [kha_Resource];
kha_Sound.prototype = {
	compressedData: null
	,uncompressedData: null
	,length: null
	,channels: null
	,sampleRate: null
	,uncompress: function(done) {
		if(this.uncompressedData != null) {
			done();
			return;
		}
		var output = new haxe_io_BytesOutput();
		var header = kha_audio2_ogg_vorbis_Reader.readAll(this.compressedData,output,true);
		var soundBytes = output.getBytes();
		var count = soundBytes.length / 4 | 0;
		if(header.channel == 1) {
			this.length = count / kha_audio2_Audio.samplesPerSecond;
			this.uncompressedData = new Float32Array(count * 2);
			var _g = 0;
			while(_g < count) {
				var i = _g++;
				this.uncompressedData[i * 2] = soundBytes.getFloat(i * 4);
				this.uncompressedData[i * 2 + 1] = soundBytes.getFloat(i * 4);
			}
		} else {
			this.length = count / 2 / kha_audio2_Audio.samplesPerSecond;
			this.uncompressedData = new Float32Array(count);
			var _g1 = 0;
			while(_g1 < count) {
				var i1 = _g1++;
				this.uncompressedData[i1] = soundBytes.getFloat(i1 * 4);
			}
		}
		this.channels = header.channel;
		this.sampleRate = header.sampleRate;
		this.compressedData = null;
		done();
	}
	,unload: function() {
		this.compressedData = null;
		this.uncompressedData = null;
	}
	,__class__: kha_Sound
};
var kha_SystemOptions = function(title,width,height,$window,framebuffer) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(title == null) {
		title = "Kha";
	}
	this.framebuffer = null;
	this.window = null;
	this.height = -1;
	this.width = -1;
	this.title = "Kha";
	this.title = title;
	this.window = $window == null ? new kha_WindowOptions(null,null,null,null,null,null,null,null,null) : $window;
	if(width > 0) {
		this.window.width = width;
		this.width = width;
	} else {
		this.width = this.window.width;
	}
	if(height > 0) {
		this.window.height = height;
		this.height = height;
	} else {
		this.height = this.window.height;
	}
	if(this.window.title == null) {
		this.window.title = title;
	}
	this.framebuffer = framebuffer == null ? new kha_FramebufferOptions(null,null,null,null,null,null) : framebuffer;
};
$hxClasses["kha.SystemOptions"] = kha_SystemOptions;
kha_SystemOptions.__name__ = "kha.SystemOptions";
kha_SystemOptions.prototype = {
	title: null
	,width: null
	,height: null
	,window: null
	,framebuffer: null
	,__class__: kha_SystemOptions
};
var kha_System = function() { };
$hxClasses["kha.System"] = kha_System;
kha_System.__name__ = "kha.System";
kha_System.__properties__ = {get_refreshRate:"get_refreshRate",get_vsync:"get_vsync",get_language:"get_language",get_systemId:"get_systemId",get_screenRotation:"get_screenRotation",get_time:"get_time",get_title:"get_title"};
kha_System.init = function(options,callback) {
	var features = 0;
	if(options.resizable) {
		features = features | 1;
	}
	if(options.maximizable) {
		features = features | 4;
	}
	if(options.minimizable) {
		features = features | 2;
	}
	kha_System.start(new kha_SystemOptions(options.title,options.width,options.height,new kha_WindowOptions(null,null,null,null,null,null,null,features,options.windowMode),new kha_FramebufferOptions(null,options.vSync,null,null,null,options.samplesPerPixel)),function(_) {
		callback();
	});
};
kha_System.start = function(options,callback) {
	kha_System.theTitle = options.title;
	kha_SystemImpl.init(options,callback);
};
kha_System.get_title = function() {
	return kha_System.theTitle;
};
kha_System.notifyOnRender = function(listener,id) {
	if(id == null) {
		id = 0;
	}
	kha_System.renderListeners.push(function(framebuffers) {
		if(id < framebuffers.length) {
			listener(framebuffers[id]);
		}
	});
};
kha_System.notifyOnFrames = function(listener) {
	kha_System.renderListeners.push(listener);
};
kha_System.removeFramesListener = function(listener) {
	HxOverrides.remove(kha_System.renderListeners,listener);
};
kha_System.notifyOnApplicationState = function(foregroundListener,resumeListener,pauseListener,backgroundListener,shutdownListener) {
	if(foregroundListener != null) {
		kha_System.foregroundListeners.push(foregroundListener);
	}
	if(resumeListener != null) {
		kha_System.resumeListeners.push(resumeListener);
	}
	if(pauseListener != null) {
		kha_System.pauseListeners.push(pauseListener);
	}
	if(backgroundListener != null) {
		kha_System.backgroundListeners.push(backgroundListener);
	}
	if(shutdownListener != null) {
		kha_System.shutdownListeners.push(shutdownListener);
	}
};
kha_System.removeApplicationStateListeners = function(foregroundListener,resumeListener,pauseListener,backgroundListener,shutdownListener) {
	if(foregroundListener != null) {
		HxOverrides.remove(kha_System.foregroundListeners,foregroundListener);
	}
	if(resumeListener != null) {
		HxOverrides.remove(kha_System.resumeListeners,resumeListener);
	}
	if(pauseListener != null) {
		HxOverrides.remove(kha_System.pauseListeners,pauseListener);
	}
	if(backgroundListener != null) {
		HxOverrides.remove(kha_System.backgroundListeners,backgroundListener);
	}
	if(shutdownListener != null) {
		HxOverrides.remove(kha_System.shutdownListeners,shutdownListener);
	}
};
kha_System.notifyOnDropFiles = function(dropFilesListener) {
	kha_System.dropFilesListeners.push(dropFilesListener);
};
kha_System.removeDropListener = function(listener) {
	HxOverrides.remove(kha_System.dropFilesListeners,listener);
};
kha_System.notifyOnCutCopyPaste = function(cutListener,copyListener,pasteListener) {
	kha_System.cutListener = cutListener;
	kha_System.copyListener = copyListener;
	kha_System.pasteListener = pasteListener;
};
kha_System.notifyOnLoginLogout = function(loginListener,logoutListener) {
	kha_System.loginListener = loginListener;
	kha_System.logoutListener = logoutListener;
};
kha_System.login = function() {
};
kha_System.waitingForLogin = function() {
	return kha_SystemImpl.waitingForLogin();
};
kha_System.allowUserChange = function() {
};
kha_System.disallowUserChange = function() {
};
kha_System.render = function(framebuffers) {
	var _g = 0;
	var _g1 = kha_System.renderListeners;
	while(_g < _g1.length) _g1[_g++](framebuffers);
};
kha_System.foreground = function() {
	var _g = 0;
	var _g1 = kha_System.foregroundListeners;
	while(_g < _g1.length) _g1[_g++]();
};
kha_System.resume = function() {
	var _g = 0;
	var _g1 = kha_System.resumeListeners;
	while(_g < _g1.length) _g1[_g++]();
};
kha_System.pause = function() {
	var _g = 0;
	var _g1 = kha_System.pauseListeners;
	while(_g < _g1.length) _g1[_g++]();
};
kha_System.background = function() {
	var _g = 0;
	var _g1 = kha_System.backgroundListeners;
	while(_g < _g1.length) _g1[_g++]();
};
kha_System.shutdown = function() {
	var _g = 0;
	var _g1 = kha_System.shutdownListeners;
	while(_g < _g1.length) _g1[_g++]();
};
kha_System.dropFiles = function(filePath) {
	var _g = 0;
	var _g1 = kha_System.dropFilesListeners;
	while(_g < _g1.length) _g1[_g++](filePath);
};
kha_System.get_time = function() {
	return kha_SystemImpl.getTime();
};
kha_System.windowWidth = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get($window).get_width();
};
kha_System.windowHeight = function($window) {
	if($window == null) {
		$window = 0;
	}
	return kha_Window.get_all()[$window].get_height();
};
kha_System.get_screenRotation = function() {
	return 0;
};
kha_System.get_systemId = function() {
	return kha_SystemImpl.getSystemId();
};
kha_System.vibrate = function(ms) {
	kha_SystemImpl.vibrate(ms);
	return;
};
kha_System.get_language = function() {
	return kha_SystemImpl.getLanguage();
};
kha_System.stop = function() {
	return kha_SystemImpl.requestShutdown();
};
kha_System.loadUrl = function(url) {
	kha_SystemImpl.loadUrl(url);
};
kha_System.canSwitchFullscreen = function() {
	return true;
};
kha_System.isFullscreen = function() {
	if(kha_Window.get(0).get_mode() != 1) {
		return kha_Window.get(0).get_mode() == 2;
	} else {
		return true;
	}
};
kha_System.requestFullscreen = function() {
	kha_Window.get(0).set_mode(1);
};
kha_System.exitFullscreen = function() {
	kha_Window.get(0).set_mode(0);
};
kha_System.notifyOnFullscreenChange = function(func,error) {
};
kha_System.removeFullscreenListener = function(func,error) {
};
kha_System.changeResolution = function(width,height) {
};
kha_System.requestShutdown = function() {
	kha_System.stop();
};
kha_System.get_vsync = function() {
	return kha_Window.get(0).get_vSynced();
};
kha_System.get_refreshRate = function() {
	return kha_Display.get_primary().get_frequency();
};
kha_System.screenDpi = function() {
	return kha_Display.get_primary().get_pixelsPerInch();
};
kha_System.safeZone = function() {
	return kha_SystemImpl.safeZone();
};
kha_System.automaticSafeZone = function() {
	return kha_SystemImpl.automaticSafeZone();
};
kha_System.setSafeZone = function(value) {
};
kha_System.unlockAchievement = function(id) {
};
var kha_GamepadStates = function() {
	this.axes = [];
	this.buttons = [];
};
$hxClasses["kha.GamepadStates"] = kha_GamepadStates;
kha_GamepadStates.__name__ = "kha.GamepadStates";
kha_GamepadStates.prototype = {
	axes: null
	,buttons: null
	,__class__: kha_GamepadStates
};
var kha_SystemImpl = function() { };
$hxClasses["kha.SystemImpl"] = kha_SystemImpl;
kha_SystemImpl.__name__ = "kha.SystemImpl";
kha_SystemImpl.errorHandler = function(message,source,lineno,colno,error) {
	window.console.error(error.stack);
	return true;
};
kha_SystemImpl.init = function(options,callback) {
	kha_SystemImpl.options = options;
	kha_SystemImpl.mobile = kha_SystemImpl.isMobile();
	kha_SystemImpl.ios = kha_SystemImpl.isIOS();
	kha_SystemImpl.chrome = kha_SystemImpl.isChrome();
	kha_SystemImpl.firefox = kha_SystemImpl.isFirefox();
	kha_SystemImpl.ie = kha_SystemImpl.isIE();
	if(kha_SystemImpl.mobile || kha_SystemImpl.chrome || kha_SystemImpl.firefox) {
		kha_SystemImpl.mobileAudioPlaying = false;
	} else {
		kha_SystemImpl.mobileAudioPlaying = true;
	}
	kha_SystemImpl.initSecondStep(callback);
};
kha_SystemImpl.initSecondStep = function(callback) {
	kha_SystemImpl.init2(kha_SystemImpl.options.window.width,kha_SystemImpl.options.window.height);
	callback(kha_SystemImpl.window);
};
kha_SystemImpl.initSensor = function() {
	if(kha_SystemImpl.ios) {
		window.ondevicemotion = function(event) {
			kha_input_Sensor._changed(0,-event.accelerationIncludingGravity.x,-event.accelerationIncludingGravity.y,-event.accelerationIncludingGravity.z);
		};
	} else {
		window.ondevicemotion = function(event1) {
			kha_input_Sensor._changed(0,event1.accelerationIncludingGravity.x,event1.accelerationIncludingGravity.y,event1.accelerationIncludingGravity.z);
		};
	}
	window.ondeviceorientation = function(event2) {
		kha_input_Sensor._changed(1,event2.beta,event2.gamma,event2.alpha);
	};
};
kha_SystemImpl.isMobile = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("Android") >= 0 || agent.indexOf("webOS") >= 0 || agent.indexOf("BlackBerry") >= 0 || agent.indexOf("Windows Phone") >= 0) {
		return true;
	}
	if(kha_SystemImpl.isIOS()) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIOS = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("iPhone") >= 0 || agent.indexOf("iPad") >= 0 || agent.indexOf("iPod") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isChrome = function() {
	if(window.navigator.userAgent.indexOf("Chrome") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isFirefox = function() {
	if(window.navigator.userAgent.indexOf("Firefox") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.isIE = function() {
	var agent = window.navigator.userAgent;
	if(agent.indexOf("MSIE ") >= 0 || agent.indexOf("Trident/") >= 0) {
		return true;
	}
	return false;
};
kha_SystemImpl.setCanvas = function(canvas) {
	kha_SystemImpl.khanvas = canvas;
};
kha_SystemImpl.getScreenRotation = function() {
	return 0;
};
kha_SystemImpl.getTime = function() {
	return (window.performance != null ? window.performance.now() : Date.now()) / 1000;
};
kha_SystemImpl.getSystemId = function() {
	return "HTML5";
};
kha_SystemImpl.vibrate = function(ms) {
	window.navigator.vibrate(ms);
};
kha_SystemImpl.getLanguage = function() {
	return HxOverrides.substr(window.navigator.language,0,2).toLowerCase();
};
kha_SystemImpl.requestShutdown = function() {
	window.close();
	return true;
};
kha_SystemImpl.init2 = function(defaultWidth,defaultHeight,backbufferFormat) {
	kha_SystemImpl.keyboard = new kha_input_Keyboard();
	kha_SystemImpl.mouse = new kha_input_MouseImpl();
	kha_SystemImpl.surface = new kha_input_Surface();
	kha_SystemImpl.gamepads = [];
	kha_SystemImpl.gamepadStates = [];
	kha_SystemImpl.gamepads[0] = new kha_input_Gamepad(0);
	kha_SystemImpl.gamepadStates[0] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[1] = new kha_input_Gamepad(1);
	kha_SystemImpl.gamepadStates[1] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[2] = new kha_input_Gamepad(2);
	kha_SystemImpl.gamepadStates[2] = new kha_GamepadStates();
	kha_SystemImpl.gamepads[3] = new kha_input_Gamepad(3);
	kha_SystemImpl.gamepadStates[3] = new kha_GamepadStates();
	window.addEventListener("gamepadconnected",function(e) {
		kha_input_Gamepad.sendConnectEvent(e.gamepad.index);
	});
	window.addEventListener("gamepaddisconnected",function(e1) {
		kha_input_Gamepad.sendDisconnectEvent(e1.gamepad.index);
	});
	if(kha_SystemImpl.ie) {
		kha_SystemImpl.pressedKeys = [];
		var _g = 0;
		while(_g < 256) {
			++_g;
			kha_SystemImpl.pressedKeys.push(false);
		}
		var _g1 = 0;
		while(_g1 < 256) {
			++_g1;
			kha_SystemImpl.pressedKeys.push(null);
		}
	}
	var onCopy = function(e2) {
		if(kha_System.copyListener != null) {
			var data = kha_System.copyListener();
			if(data != null) {
				e2.clipboardData.setData("text/plain",data);
			}
			e2.preventDefault();
		}
	};
	var onCut = function(e3) {
		if(kha_System.cutListener != null) {
			var data1 = kha_System.cutListener();
			if(data1 != null) {
				e3.clipboardData.setData("text/plain",data1);
			}
			e3.preventDefault();
		}
	};
	var onPaste = function(e4) {
		if(kha_System.pasteListener != null) {
			var onPaste1 = e4.clipboardData.getData("text/plain");
			kha_System.pasteListener(onPaste1);
			e4.preventDefault();
		}
	};
	var document = window.document;
	document.addEventListener("copy",onCopy);
	document.addEventListener("cut",onCut);
	document.addEventListener("paste",onPaste);
	kha_CanvasImage.init();
	kha_Scheduler.init();
	kha_SystemImpl.loadFinished(defaultWidth,defaultHeight);
};
kha_SystemImpl.getMouse = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.mouse;
};
kha_SystemImpl.getKeyboard = function(num) {
	if(num != 0) {
		return null;
	}
	return kha_SystemImpl.keyboard;
};
kha_SystemImpl.checkGamepad = function(pad) {
	var _g = 0;
	var _g1 = pad.axes.length;
	while(_g < _g1) {
		var i = _g++;
		if(pad.axes[i] != null) {
			var axis = pad.axes[i];
			if(kha_SystemImpl.gamepadStates[pad.index].axes[i] != axis) {
				kha_SystemImpl.gamepadStates[pad.index].axes[i] = axis;
				kha_SystemImpl.gamepads[pad.index].sendAxisEvent(i,axis);
			}
		}
	}
	var _g2 = 0;
	var _g3 = pad.buttons.length;
	while(_g2 < _g3) {
		var i1 = _g2++;
		if(pad.buttons[i1] != null) {
			if(kha_SystemImpl.gamepadStates[pad.index].buttons[i1] != pad.buttons[i1].value) {
				kha_SystemImpl.gamepadStates[pad.index].buttons[i1] = pad.buttons[i1].value;
				kha_SystemImpl.gamepads[pad.index].sendButtonEvent(i1,pad.buttons[i1].value);
			}
		}
	}
	if(pad.axes.length <= 4 && pad.buttons.length > 7) {
		kha_SystemImpl.gamepadStates[pad.index].axes[4] = pad.buttons[6].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(4,pad.buttons[6].value);
		kha_SystemImpl.gamepadStates[pad.index].axes[5] = pad.buttons[7].value;
		kha_SystemImpl.gamepads[pad.index].sendAxisEvent(5,pad.buttons[7].value);
	}
};
kha_SystemImpl.getCanvasElement = function() {
	if(kha_SystemImpl.khanvas != null) {
		return kha_SystemImpl.khanvas;
	}
	return window.document.getElementById("khanvas");
};
kha_SystemImpl.loadFinished = function(defaultWidth,defaultHeight) {
	var canvas = kha_SystemImpl.getCanvasElement();
	canvas.style.cursor = "default";
	var gl = false;
	try {
		kha_SystemImpl.gl = canvas.getContext("webgl2",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
		kha_SystemImpl.gl.pixelStorei(37441,1);
		kha_SystemImpl.halfFloat = { HALF_FLOAT_OES : 5131};
		kha_SystemImpl.depthTexture = { UNSIGNED_INT_24_8_WEBGL : 34042};
		kha_SystemImpl.drawBuffers = { COLOR_ATTACHMENT0_WEBGL : 36064};
		kha_SystemImpl.elementIndexUint = true;
		kha_SystemImpl.gl.getExtension("EXT_color_buffer_float");
		kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
		kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
		kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
		if(kha_SystemImpl.anisotropicFilter == null) {
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		gl = true;
		kha_SystemImpl.gl2 = true;
		kha_Shaders.init();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
		haxe_Log.trace("Could not initialize WebGL 2, falling back to WebGL.",{ fileName : "kha/SystemImpl.hx", lineNumber : 346, className : "kha.SystemImpl", methodName : "loadFinished"});
	}
	if(!kha_SystemImpl.gl2) {
		try {
			kha_SystemImpl.gl = canvas.getContext("experimental-webgl",{ alpha : false, antialias : kha_SystemImpl.options.framebuffer.samplesPerPixel > 1, stencil : true});
			kha_SystemImpl.gl.pixelStorei(37441,1);
			kha_SystemImpl.gl.getExtension("OES_texture_float");
			kha_SystemImpl.gl.getExtension("OES_texture_float_linear");
			kha_SystemImpl.halfFloat = kha_SystemImpl.gl.getExtension("OES_texture_half_float");
			kha_SystemImpl.gl.getExtension("OES_texture_half_float_linear");
			kha_SystemImpl.depthTexture = kha_SystemImpl.gl.getExtension("WEBGL_depth_texture");
			kha_SystemImpl.gl.getExtension("EXT_shader_texture_lod");
			kha_SystemImpl.gl.getExtension("OES_standard_derivatives");
			kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("EXT_texture_filter_anisotropic");
			if(kha_SystemImpl.anisotropicFilter == null) {
				kha_SystemImpl.anisotropicFilter = kha_SystemImpl.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			}
			kha_SystemImpl.drawBuffers = kha_SystemImpl.gl.getExtension("WEBGL_draw_buffers");
			kha_SystemImpl.elementIndexUint = kha_SystemImpl.gl.getExtension("OES_element_index_uint");
			gl = true;
			kha_Shaders.init();
		} catch( e2 ) {
			haxe_CallStack.lastException = e2;
			var e3 = ((e2) instanceof js__$Boot_HaxeError) ? e2.val : e2;
			haxe_Log.trace("Could not initialize WebGL, falling back to <canvas>.",{ fileName : "kha/SystemImpl.hx", lineNumber : 368, className : "kha.SystemImpl", methodName : "loadFinished"});
		}
	}
	kha_SystemImpl.setCanvas(canvas);
	kha_SystemImpl.window = new kha_Window(0,defaultWidth,defaultHeight,canvas);
	if(gl) {
		var g4 = new kha_js_graphics4_Graphics();
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,null,g4);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),new kha_js_graphics4_Graphics2(kha_SystemImpl.frame),g4);
	} else {
		kha_js_Font.Kravur = kha_Kravur; kha_Kravur = kha_js_Font;
		var g2 = new kha_js_CanvasGraphics(canvas.getContext("2d"));
		kha_SystemImpl.frame = new kha_Framebuffer(0,null,g2,null);
		kha_SystemImpl.frame.init(new kha_graphics2_Graphics1(kha_SystemImpl.frame),g2,null);
	}
	if(!kha_SystemImpl.mobile && kha_audio2_Audio._init()) {
		kha_SystemImpl._hasWebAudio = true;
		kha_audio2_Audio1._init();
	} else if(kha_SystemImpl.mobile) {
		kha_SystemImpl._hasWebAudio = false;
		kha_js_MobileWebAudio._init();
		kha_audio2_Audio1 = kha_js_MobileWebAudio;
	} else {
		kha_SystemImpl._hasWebAudio = false;
		kha_audio2_Audio1 = kha_js_AudioElementAudio;
	}
	kha_vr_VrInterface.instance = new kha_js_vr_VrInterface();
	kha_Scheduler.start();
	var $window = window;
	var requestAnimationFrame = $window.requestAnimationFrame;
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.mozRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.webkitRequestAnimationFrame;
	}
	if(requestAnimationFrame == null) {
		requestAnimationFrame = $window.msRequestAnimationFrame;
	}
	var animate = null;
	animate = function(timestamp) {
		var window1 = window;
		if(requestAnimationFrame == null) {
			window1.setTimeout(animate,16.666666666666668);
		} else {
			requestAnimationFrame(animate);
		}
		var sysGamepads = kha_SystemImpl.getGamepads();
		if(sysGamepads != null) {
			var _g = 0;
			var _g1 = sysGamepads.length;
			while(_g < _g1) {
				var i = _g++;
				var pad = sysGamepads[i];
				if(pad != null) {
					kha_SystemImpl.checkGamepad(pad);
				}
			}
		}
		kha_Scheduler.executeFrame();
		if(canvas.getContext != null) {
			var displayWidth = canvas.clientWidth;
			var displayHeight = canvas.clientHeight;
			if(canvas.width != displayWidth || canvas.height != displayHeight) {
				canvas.width = displayWidth;
				canvas.height = displayHeight;
			}
			kha_System.render([kha_SystemImpl.frame]);
			var animate1 = kha_SystemImpl.gl != null;
		}
	};
	if(requestAnimationFrame == null) {
		$window.setTimeout(animate,16.666666666666668);
	} else {
		requestAnimationFrame(animate);
	}
	canvas.focus();
	canvas.onmousedown = kha_SystemImpl.mouseDown;
	canvas.onmousemove = kha_SystemImpl.mouseMove;
	if(kha_SystemImpl.keyboard != null) {
		canvas.onkeydown = kha_SystemImpl.keyDown;
		canvas.onkeyup = kha_SystemImpl.keyUp;
		canvas.onkeypress = kha_SystemImpl.keyPress;
	}
	canvas.onblur = kha_SystemImpl.onBlur;
	canvas.onfocus = kha_SystemImpl.onFocus;
	canvas.onmousewheel = canvas.onwheel = kha_SystemImpl.mouseWheel;
	canvas.onmouseleave = kha_SystemImpl.mouseLeave;
	canvas.addEventListener("wheel mousewheel",kha_SystemImpl.mouseWheel,false);
	canvas.addEventListener("touchstart",kha_SystemImpl.touchDown,false);
	canvas.addEventListener("touchend",kha_SystemImpl.touchUp,false);
	canvas.addEventListener("touchmove",kha_SystemImpl.touchMove,false);
	canvas.addEventListener("touchcancel",kha_SystemImpl.touchCancel,false);
	window.addEventListener("unload",function() {
		kha_System.shutdown();
	});
};
kha_SystemImpl.lockMouse = function() {
	if(($_=kha_SystemImpl.khanvas,$bind($_,$_.requestPointerLock))) {
		kha_SystemImpl.khanvas.requestPointerLock();
	} else if(kha_SystemImpl.khanvas.mozRequestPointerLock) {
		kha_SystemImpl.khanvas.mozRequestPointerLock();
	} else if(kha_SystemImpl.khanvas.webkitRequestPointerLock) {
		kha_SystemImpl.khanvas.webkitRequestPointerLock();
	}
};
kha_SystemImpl.unlockMouse = function() {
	if(document.exitPointerLock) {
		document.exitPointerLock();
	} else if(document.mozExitPointerLock) {
		document.mozExitPointerLock();
	} else if(document.webkitExitPointerLock) {
		document.webkitExitPointerLock();
	}
};
kha_SystemImpl.canLockMouse = function() {
	return 'pointerLockElement' in document ||
		'mozPointerLockElement' in document ||
		'webkitPointerLockElement' in document;
};
kha_SystemImpl.isMouseLocked = function() {
	return document.pointerLockElement === kha_SystemImpl.khanvas ||
			document.mozPointerLockElement === kha_SystemImpl.khanvas ||
			document.webkitPointerLockElement === kha_SystemImpl.khanvas;
};
kha_SystemImpl.notifyOfMouseLockChange = function(func,error) {
	window.document.addEventListener("pointerlockchange",func,false);
	window.document.addEventListener("mozpointerlockchange",func,false);
	window.document.addEventListener("webkitpointerlockchange",func,false);
	window.document.addEventListener("pointerlockerror",error,false);
	window.document.addEventListener("mozpointerlockerror",error,false);
	window.document.addEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.removeFromMouseLockChange = function(func,error) {
	window.document.removeEventListener("pointerlockchange",func,false);
	window.document.removeEventListener("mozpointerlockchange",func,false);
	window.document.removeEventListener("webkitpointerlockchange",func,false);
	window.document.removeEventListener("pointerlockerror",error,false);
	window.document.removeEventListener("mozpointerlockerror",error,false);
	window.document.removeEventListener("webkitpointerlockerror",error,false);
};
kha_SystemImpl.setMouseXY = function(event) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.mouseX = (event.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.mouseY = (event.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.unlockiOSSound = function() {
	if(!kha_SystemImpl.ios || kha_SystemImpl.iosSoundEnabled) {
		return;
	}
	var buffer = kha_js_MobileWebAudio._context.createBuffer(1,1,22050);
	var source = kha_js_MobileWebAudio._context.createBufferSource();
	source.buffer = buffer;
	source.connect(kha_js_MobileWebAudio._context.destination);
	source.start();
	source.stop();
	kha_SystemImpl.iosSoundEnabled = true;
};
kha_SystemImpl.unlockSound = function() {
	if(!kha_SystemImpl.soundEnabled) {
		var context = kha_audio2_Audio._context;
		if(context == null) {
			context = kha_audio2_Audio1._context;
		}
		if(context != null) {
			context.resume().then(function(c) {
				kha_SystemImpl.soundEnabled = true;
			}).catch(function(err) {
				haxe_Log.trace(err,{ fileName : "kha/SystemImpl.hx", lineNumber : 608, className : "kha.SystemImpl", methodName : "unlockSound"});
			});
		}
		kha_audio2_Audio.wakeChannels();
	}
	kha_SystemImpl.unlockiOSSound();
};
kha_SystemImpl.mouseLeave = function() {
	kha_SystemImpl.mouse.sendLeaveEvent(0);
};
kha_SystemImpl.mouseWheel = function(event) {
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.insideInputEvent = true;
	var _g = kha_input_Mouse.wheelEventBlockBehavior;
	switch(_g._hx_index) {
	case 0:
		event.preventDefault();
		break;
	case 1:
		break;
	case 2:
		if(_g.func(event)) {
			event.preventDefault();
		}
		break;
	}
	if(event.deltaMode == 0) {
		if(event.deltaY < 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,-1);
		} else if(event.deltaY > 0) {
			kha_SystemImpl.mouse.sendWheelEvent(0,1);
		}
		kha_SystemImpl.insideInputEvent = false;
		return;
	}
	if(event.deltaMode == 1) {
		kha_SystemImpl.minimumScroll = Math.min(kha_SystemImpl.minimumScroll,Math.abs(event.deltaY)) | 0;
		kha_SystemImpl.mouse.sendWheelEvent(0,event.deltaY / kha_SystemImpl.minimumScroll | 0);
		kha_SystemImpl.insideInputEvent = false;
		return;
	}
	kha_SystemImpl.insideInputEvent = false;
	return;
};
kha_SystemImpl.mouseDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	kha_SystemImpl.setMouseXY(event);
	if(event.which == 1) {
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		if(kha_SystemImpl.khanvas.setCapture != null) {
			kha_SystemImpl.khanvas.setCapture();
		} else {
			kha_SystemImpl.khanvas.ownerDocument.addEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
		}
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	} else if(event.which == 2) {
		kha_SystemImpl.mouse.sendDownEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	} else if(event.which == 3) {
		kha_SystemImpl.mouse.sendDownEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	} else if(event.which == 4) {
		kha_SystemImpl.mouse.sendDownEvent(0,3,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseBackUp);
	} else if(event.which == 5) {
		kha_SystemImpl.mouse.sendDownEvent(0,4,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
		kha_SystemImpl.khanvas.ownerDocument.addEventListener("mouseup",kha_SystemImpl.mouseForwardUp);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseLeftUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 1) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseLeftUp);
	if(kha_SystemImpl.khanvas.releaseCapture != null) {
		kha_SystemImpl.khanvas.ownerDocument.releaseCapture();
	} else {
		kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mousemove",kha_SystemImpl.documentMouseMove,true);
	}
	kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseMiddleUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 2) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseMiddleUp);
	kha_SystemImpl.mouse.sendUpEvent(0,2,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseRightUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 3) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseRightUp);
	kha_SystemImpl.mouse.sendUpEvent(0,1,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseBackUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 4) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseBackUp);
	kha_SystemImpl.mouse.sendUpEvent(0,3,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.mouseForwardUp = function(event) {
	kha_SystemImpl.unlockSound();
	if(event.which != 5) {
		return;
	}
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.khanvas.ownerDocument.removeEventListener("mouseup",kha_SystemImpl.mouseForwardUp);
	kha_SystemImpl.mouse.sendUpEvent(0,4,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.documentMouseMove = function(event) {
	event.stopPropagation();
	kha_SystemImpl.mouseMove(event);
};
kha_SystemImpl.mouseMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	var lastMouseX = kha_SystemImpl.mouseX;
	var lastMouseY = kha_SystemImpl.mouseY;
	kha_SystemImpl.setMouseXY(event);
	var movementX = event.movementX;
	var movementY = event.movementY;
	if(event.movementX == null) {
		movementX = event.mozMovementX != null ? event.mozMovementX : event.webkitMovementX != null ? event.webkitMovementX : kha_SystemImpl.mouseX - lastMouseX;
		movementY = event.mozMovementY != null ? event.mozMovementY : event.webkitMovementY != null ? event.webkitMovementY : kha_SystemImpl.mouseY - lastMouseY;
	}
	if(kha_SystemImpl.firefox) {
		movementX = movementX * window.devicePixelRatio | 0;
		movementY = movementY * window.devicePixelRatio | 0;
	}
	kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.mouseX,kha_SystemImpl.mouseY,movementX,movementY);
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.setTouchXY = function(touch) {
	var rect = kha_SystemImpl.khanvas.getBoundingClientRect();
	var borderWidth = kha_SystemImpl.khanvas.clientLeft;
	var borderHeight = kha_SystemImpl.khanvas.clientTop;
	kha_SystemImpl.touchX = (touch.clientX - rect.left - borderWidth) * kha_SystemImpl.khanvas.width / (rect.width - 2 * borderWidth) | 0;
	kha_SystemImpl.touchY = (touch.clientY - rect.top - borderHeight) * kha_SystemImpl.khanvas.height / (rect.height - 2 * borderHeight) | 0;
};
kha_SystemImpl.touchDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	event.stopPropagation();
	var _g = kha_input_Surface.touchDownEventBlockBehavior;
	switch(_g._hx_index) {
	case 0:
		event.preventDefault();
		break;
	case 1:
		break;
	case 2:
		if(_g.func(event)) {
			event.preventDefault();
		}
		break;
	}
	var index = 0;
	var _g2 = 0;
	var _g3 = event.changedTouches;
	while(_g2 < _g3.length) {
		var touch = _g3[_g2];
		++_g2;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(-1);
			if(id == -1) {
				id = kha_SystemImpl.iosTouchs.length;
			}
			kha_SystemImpl.iosTouchs[id] = touch.identifier;
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendDownEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchStartEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		if(index == 0) {
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
		}
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
			kha_SystemImpl.iosTouchs[id] = -1;
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchMove = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var index = 0;
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		kha_SystemImpl.setTouchXY(touch);
		if(index == 0) {
			var movementX = kha_SystemImpl.touchX - kha_SystemImpl.lastFirstTouchX;
			var movementY = kha_SystemImpl.touchY - kha_SystemImpl.lastFirstTouchY;
			kha_SystemImpl.lastFirstTouchX = kha_SystemImpl.touchX;
			kha_SystemImpl.lastFirstTouchY = kha_SystemImpl.touchY;
			kha_SystemImpl.mouse.sendMoveEvent(0,kha_SystemImpl.touchX,kha_SystemImpl.touchY,movementX,movementY);
		}
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.surface.sendMoveEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		++index;
	}
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.touchCancel = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = 0;
	var _g1 = event.changedTouches;
	while(_g < _g1.length) {
		var touch = _g1[_g];
		++_g;
		var id = touch.identifier;
		if(kha_SystemImpl.ios) {
			id = kha_SystemImpl.iosTouchs.indexOf(id);
		}
		kha_SystemImpl.setTouchXY(touch);
		kha_SystemImpl.mouse.sendUpEvent(0,0,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
		kha_SystemImpl.surface.sendTouchEndEvent(id,kha_SystemImpl.touchX,kha_SystemImpl.touchY);
	}
	kha_SystemImpl.iosTouchs = [];
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.onBlur = function() {
	kha_System.background();
};
kha_SystemImpl.onFocus = function() {
	kha_System.foreground();
};
kha_SystemImpl.keycodeToChar = function(key,keycode,shift) {
	if(key != null) {
		if(key.length == 1) {
			return key;
		}
		switch(key) {
		case "Add":
			return "+";
		case "Divide":
			return "/";
		case "Multiply":
			return "*";
		case "Subtract":
			return "-";
		}
	}
	switch(keycode) {
	case 48:
		if(shift) {
			return "=";
		} else {
			return "0";
		}
		break;
	case 49:
		if(shift) {
			return "!";
		} else {
			return "1";
		}
		break;
	case 50:
		if(shift) {
			return "\"";
		} else {
			return "2";
		}
		break;
	case 51:
		if(shift) {
			return "Â§";
		} else {
			return "3";
		}
		break;
	case 52:
		if(shift) {
			return "$";
		} else {
			return "4";
		}
		break;
	case 53:
		if(shift) {
			return "%";
		} else {
			return "5";
		}
		break;
	case 54:
		if(shift) {
			return "&";
		} else {
			return "6";
		}
		break;
	case 55:
		if(shift) {
			return "/";
		} else {
			return "7";
		}
		break;
	case 56:
		if(shift) {
			return "(";
		} else {
			return "8";
		}
		break;
	case 57:
		if(shift) {
			return ")";
		} else {
			return "9";
		}
		break;
	case 106:
		return "*";
	case 107:
		return "+";
	case 109:
		return "-";
	case 111:
		return "/";
	case 187:
		if(shift) {
			return "*";
		} else {
			return "+";
		}
		break;
	case 188:
		if(shift) {
			return ";";
		} else {
			return ",";
		}
		break;
	case 189:
		if(shift) {
			return "_";
		} else {
			return "-";
		}
		break;
	case 190:
		if(shift) {
			return ":";
		} else {
			return ".";
		}
		break;
	case 191:
		if(shift) {
			return "'";
		} else {
			return "#";
		}
		break;
	case 212:
		if(shift) {
			return "`";
		} else {
			return "Â´";
		}
		break;
	case 219:
		if(shift) {
			return "?";
		} else {
			return "ÃŸ";
		}
		break;
	case 226:
		if(shift) {
			return ">";
		} else {
			return "<";
		}
		break;
	}
	if(keycode >= 96 && keycode <= 105) {
		return String.fromCodePoint((-48 + keycode));
	}
	if(keycode >= 65 && keycode <= 90) {
		if(shift) {
			return String.fromCodePoint(keycode);
		} else {
			return String.fromCodePoint((keycode - 65 + 97));
		}
	}
	return String.fromCodePoint(keycode);
};
kha_SystemImpl.keyDown = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	var _g = kha_input_Keyboard.keyBehavior;
	switch(_g._hx_index) {
	case 0:
		kha_SystemImpl.defaultKeyBlock(event);
		break;
	case 1:
		event.preventDefault();
		break;
	case 2:
		break;
	case 3:
		if(_g.func(event.keyCode)) {
			event.preventDefault();
		}
		break;
	}
	event.stopPropagation();
	if(kha_SystemImpl.ie) {
		if(kha_SystemImpl.pressedKeys[event.keyCode]) {
			event.preventDefault();
			return;
		}
		kha_SystemImpl.pressedKeys[event.keyCode] = true;
	} else if(event.repeat) {
		event.preventDefault();
		return;
	}
	kha_SystemImpl.keyboard.sendDownEvent(kha_SystemImpl.fixedKeyCode(event));
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.fixedKeyCode = function(event) {
	switch(event.keyCode) {
	case 91:case 93:
		return 224;
	case 186:
		return 59;
	case 187:
		return 61;
	case 189:
		return 173;
	default:
		return event.keyCode;
	}
};
kha_SystemImpl.defaultKeyBlock = function(e) {
	if(e.ctrlKey || e.metaKey) {
		if(e.keyCode == 67 || e.keyCode == 88 || e.keyCode == 86) {
			return;
		}
		if(e.metaKey && e.keyCode == 81) {
			return;
		}
		e.preventDefault();
		return;
	}
	if(e.keyCode >= 112 && e.keyCode <= 123) {
		return;
	}
	if(e.key == null || e.key.length == 1) {
		return;
	}
	e.preventDefault();
};
kha_SystemImpl.keyUp = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	event.preventDefault();
	event.stopPropagation();
	if(kha_SystemImpl.ie) {
		kha_SystemImpl.pressedKeys[event.keyCode] = false;
	}
	kha_SystemImpl.keyboard.sendUpEvent(kha_SystemImpl.fixedKeyCode(event));
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.keyPress = function(event) {
	kha_SystemImpl.insideInputEvent = true;
	kha_SystemImpl.unlockSound();
	if(event.which == 0) {
		return;
	}
	event.preventDefault();
	event.stopPropagation();
	var code = event.which;
	kha_SystemImpl.keyboard.sendPressEvent(String.fromCodePoint(code));
	kha_SystemImpl.insideInputEvent = false;
};
kha_SystemImpl.canSwitchFullscreen = function() {
	return 'fullscreenElement ' in document ||
		'mozFullScreenElement' in document ||
		'webkitFullscreenElement' in document ||
		'msFullscreenElement' in document
		;
};
kha_SystemImpl.notifyOfFullscreenChange = function(func,error) {
	window.document.addEventListener("fullscreenchange",func,false);
	window.document.addEventListener("mozfullscreenchange",func,false);
	window.document.addEventListener("webkitfullscreenchange",func,false);
	window.document.addEventListener("MSFullscreenChange",func,false);
	window.document.addEventListener("fullscreenerror",error,false);
	window.document.addEventListener("mozfullscreenerror",error,false);
	window.document.addEventListener("webkitfullscreenerror",error,false);
	window.document.addEventListener("MSFullscreenError",error,false);
};
kha_SystemImpl.removeFromFullscreenChange = function(func,error) {
	window.document.removeEventListener("fullscreenchange",func,false);
	window.document.removeEventListener("mozfullscreenchange",func,false);
	window.document.removeEventListener("webkitfullscreenchange",func,false);
	window.document.removeEventListener("MSFullscreenChange",func,false);
	window.document.removeEventListener("fullscreenerror",error,false);
	window.document.removeEventListener("mozfullscreenerror",error,false);
	window.document.removeEventListener("webkitfullscreenerror",error,false);
	window.document.removeEventListener("MSFullscreenError",error,false);
};
kha_SystemImpl.setKeepScreenOn = function(on) {
};
kha_SystemImpl.loadUrl = function(url) {
	window.open(url,"_blank");
};
kha_SystemImpl.getGamepadId = function(index) {
	var sysGamepads = kha_SystemImpl.getGamepads();
	if(sysGamepads != null && sysGamepads[index]) {
		return sysGamepads[index].id;
	}
	return "unkown";
};
kha_SystemImpl.getGamepadVendor = function(index) {
	return "unknown";
};
kha_SystemImpl.getGamepads = function() {
	if(kha_SystemImpl.chrome && kha_vr_VrInterface.instance.IsVrEnabled()) {
		return null;
	}
	if(navigator.getGamepads) {
		return window.navigator.getGamepads();
	} else {
		return null;
	}
};
kha_SystemImpl.getPen = function(num) {
	return null;
};
kha_SystemImpl.safeZone = function() {
	return 1.0;
};
kha_SystemImpl.login = function() {
};
kha_SystemImpl.automaticSafeZone = function() {
	return true;
};
kha_SystemImpl.setSafeZone = function(value) {
};
kha_SystemImpl.unlockAchievement = function(id) {
};
kha_SystemImpl.waitingForLogin = function() {
	return false;
};
kha_SystemImpl.disallowUserChange = function() {
};
kha_SystemImpl.allowUserChange = function() {
};
var kha_Video = function() {
};
$hxClasses["kha.Video"] = kha_Video;
kha_Video.__name__ = "kha.Video";
kha_Video.__interfaces__ = [kha_Resource];
kha_Video.prototype = {
	width: function() {
		return 100;
	}
	,height: function() {
		return 100;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,getLength: function() {
		return 0;
	}
	,getCurrentPos: function() {
		return 0;
	}
	,get_position: function() {
		return 0;
	}
	,set_position: function(value) {
		return 0;
	}
	,getVolume: function() {
		return 1;
	}
	,setVolume: function(volume) {
	}
	,isFinished: function() {
		return this.getCurrentPos() >= this.getLength();
	}
	,unload: function() {
	}
	,__class__: kha_Video
	,__properties__: {set_position:"set_position",get_position:"get_position"}
};
var kha_WebGLImage = function(width,height,format,renderTarget,depthStencilFormat,samples) {
	this.pixels = null;
	this.MSAAFrameBuffer = null;
	this.depthTexture = null;
	this.texture = null;
	this.renderBuffer = null;
	this.frameBuffer = null;
	this.myWidth = width;
	this.myHeight = height;
	this.format = format;
	this.renderTarget = renderTarget;
	this.samples = samples;
	this.image = null;
	this.video = null;
	this.depthStencilFormat = depthStencilFormat;
	kha_WebGLImage.init();
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.WebGLImage"] = kha_WebGLImage;
kha_WebGLImage.__name__ = "kha.WebGLImage";
kha_WebGLImage.init = function() {
	if(kha_WebGLImage.context == null) {
		kha_WebGLImage.canvas = window.document.createElement("canvas");
		if(kha_WebGLImage.canvas != null) {
			kha_WebGLImage.context = kha_WebGLImage.canvas.getContext("2d");
			kha_WebGLImage.canvas.width = 4096;
			kha_WebGLImage.canvas.height = 4096;
			kha_WebGLImage.context.globalCompositeOperation = "copy";
		}
	}
};
kha_WebGLImage.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_WebGLImage.formatByteSize = function(format) {
	switch(format) {
	case 0:
		return 4;
	case 1:
		return 1;
	case 2:
		return 16;
	case 3:
		return 2;
	case 4:
		return 8;
	case 5:
		return 4;
	case 6:
		return 2;
	default:
		return 4;
	}
};
kha_WebGLImage.__super__ = kha_Image;
kha_WebGLImage.prototype = $extend(kha_Image.prototype,{
	image: null
	,video: null
	,data: null
	,myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,samples: null
	,frameBuffer: null
	,renderBuffer: null
	,texture: null
	,depthTexture: null
	,MSAAFrameBuffer: null
	,MSAAColorBuffer: null
	,MSAADepthBuffer: null
	,graphics1: null
	,graphics2: null
	,graphics4: null
	,depthStencilFormat: null
	,get_g1: function() {
		if(this.graphics1 == null) {
			this.graphics1 = new kha_graphics2_Graphics1(this);
		}
		return this.graphics1;
	}
	,get_g2: function() {
		if(this.graphics2 == null) {
			this.graphics2 = new kha_js_graphics4_Graphics2(this);
		}
		return this.graphics2;
	}
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,get_width: function() {
		return this.myWidth;
	}
	,get_height: function() {
		return this.myHeight;
	}
	,get_realWidth: function() {
		return this.myWidth;
	}
	,get_realHeight: function() {
		return this.myHeight;
	}
	,get_stride: function() {
		return kha_WebGLImage.formatByteSize(this.format) * this.get_width();
	}
	,isOpaque: function(x,y) {
		if(this.data == null) {
			if(kha_WebGLImage.context == null) {
				return true;
			} else {
				this.createImageData();
			}
		}
		return this.data.data[y * (this.image.width | 0) * 4 + x * 4 + 3] != 0;
	}
	,at: function(x,y) {
		if(this.data == null) {
			if(kha_WebGLImage.context == null) {
				return -16777216;
			} else {
				this.createImageData();
			}
		}
		return kha__$Color_Color_$Impl_$._new(this.data.data[y * this.get_width() * 4 + x * 4 + 3] << 24 | this.data.data[y * this.get_width() * 4 + x * 4] << 16 | this.data.data[y * this.get_width() * 4 + x * 4 + 1] << 8 | this.data.data[y * this.get_width() * 4 + x * 4 + 2]);
	}
	,createImageData: function() {
		if(((this.image) instanceof Uint8Array)) {
			this.data = new ImageData(new Uint8ClampedArray(this.image.buffer),this.get_width(),this.get_height());
		} else {
			if(this.get_width() > kha_WebGLImage.canvas.width || this.get_height() > kha_WebGLImage.canvas.height) {
				var cw = kha_WebGLImage.canvas.width;
				var ch = kha_WebGLImage.canvas.height;
				while(this.get_width() > cw || this.get_height() > ch) {
					cw *= 2;
					ch *= 2;
				}
				kha_WebGLImage.canvas.width = cw;
				kha_WebGLImage.canvas.height = ch;
			}
			kha_WebGLImage.context.strokeStyle = "rgba(0,0,0,0)";
			kha_WebGLImage.context.fillStyle = "rgba(0,0,0,0)";
			kha_WebGLImage.context.fillRect(0,0,this.image.width,this.image.height);
			kha_WebGLImage.context.drawImage(this.image,0,0,this.image.width,this.image.height,0,0,this.image.width,this.image.height);
			this.data = kha_WebGLImage.context.getImageData(0,0,this.image.width,this.image.height);
		}
	}
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.texParameteri(3553,10240,9729);
		kha_SystemImpl.gl.texParameteri(3553,10241,9729);
		kha_SystemImpl.gl.texParameteri(3553,10242,33071);
		kha_SystemImpl.gl.texParameteri(3553,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_realWidth(),this.get_realHeight(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_realWidth(),this.get_realHeight(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
			}
			if(this.format == 3) {
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.texture,0);
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(3553,colortex);
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_realWidth(),this.get_realHeight(),0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,colortex,0);
					kha_SystemImpl.gl.bindTexture(3553,this.texture);
				}
			} else {
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAAFrameBuffer = kha_SystemImpl.gl.createFramebuffer();
					this.MSAAColorBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAAColorBuffer);
					var MSAAFormat;
					switch(this.format) {
					case 0:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
						break;
					case 2:
						MSAAFormat = kha_SystemImpl.gl.RGBA32F;
						break;
					case 4:
						MSAAFormat = kha_SystemImpl.gl.RGBA16F;
						break;
					case 5:
						MSAAFormat = 33326;
						break;
					case 6:
						MSAAFormat = 33325;
						break;
					default:
						MSAAFormat = kha_SystemImpl.gl.RGBA8;
					}
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,MSAAFormat,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36064,36161,this.MSAAColorBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36064,3553,this.texture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			var e = kha_SystemImpl.gl.checkFramebufferStatus(36160);
			if(e != 36053) {
				haxe_Log.trace("checkframebufferStatus error " + e,{ fileName : "kha/WebGLImage.hx", lineNumber : 254, className : "kha.WebGLImage", methodName : "createTexture"});
			}
			kha_SystemImpl.gl.bindRenderbuffer(36161,null);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		} else if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		} else {
			switch(this.format) {
			case 0:
				if(((this.image) instanceof Uint8Array)) {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.myWidth,this.myHeight,0,6408,5121,this.image);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
				}
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.myWidth,this.myHeight,0,6409,5121,this.image);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,this.image);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.image);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.image);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.image);
			}
		}
		kha_SystemImpl.gl.bindTexture(3553,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,33189,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				if(depthStencilFormat == 1) {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5125,null);
				} else {
					kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.get_realWidth(),this.get_realHeight(),0,6402,5123,null);
				}
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					if(depthStencilFormat == 1) {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33190,this.get_realWidth(),this.get_realHeight());
					} else {
						kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,33189,this.get_realWidth(),this.get_realHeight());
					}
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,36096,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
				kha_SystemImpl.gl.bindFramebuffer(36160,null);
			}
			break;
		case 2:case 3:case 4:
			if(kha_SystemImpl.depthTexture == null) {
				this.renderBuffer = kha_SystemImpl.gl.createRenderbuffer();
				kha_SystemImpl.gl.bindRenderbuffer(36161,this.renderBuffer);
				kha_SystemImpl.gl.renderbufferStorage(36161,34041,this.get_realWidth(),this.get_realHeight());
				kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.renderBuffer);
			} else {
				this.depthTexture = kha_SystemImpl.gl.createTexture();
				kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.get_realWidth(),this.get_realHeight(),0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
				kha_SystemImpl.gl.texParameteri(3553,10240,9728);
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				kha_SystemImpl.gl.texParameteri(3553,10242,33071);
				kha_SystemImpl.gl.texParameteri(3553,10243,33071);
				kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
				if(this.samples > 1 && kha_SystemImpl.gl2) {
					this.MSAADepthBuffer = kha_SystemImpl.gl.createRenderbuffer();
					kha_SystemImpl.gl.bindRenderbuffer(36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.renderbufferStorageMultisample(36161,this.samples,35056,this.get_realWidth(),this.get_realHeight());
					kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
					kha_SystemImpl.gl.framebufferRenderbuffer(36160,33306,36161,this.MSAADepthBuffer);
					kha_SystemImpl.gl.bindFramebuffer(36160,this.MSAAFrameBuffer);
				}
				kha_SystemImpl.gl.framebufferTexture2D(36160,33306,3553,this.depthTexture,0);
			}
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.video != null) {
			kha_SystemImpl.gl.texImage2D(3553,0,6408,6408,5121,this.video);
		}
	}
	,setDepth: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(3553,this.depthTexture);
	}
	,setDepthStencilFrom: function(image) {
		this.depthTexture = (js_Boot.__cast(image , kha_WebGLImage)).depthTexture;
		kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
		kha_SystemImpl.gl.framebufferTexture2D(36160,36096,3553,this.depthTexture,0);
	}
	,bytesToArray: function(bytes) {
		switch(this.format) {
		case 0:case 1:
			return new Uint8Array(bytes.b.bufferValue);
		case 2:case 4:case 5:case 6:
			return new Float32Array(bytes.b.bufferValue);
		default:
			return new Uint8Array(bytes.b.bufferValue);
		}
	}
	,bytes: null
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(kha_WebGLImage.formatByteSize(this.format) * this.get_width() * this.get_height()));
		return this.bytes;
	}
	,unlock: function() {
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(3553,this.texture);
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			kha_SystemImpl.gl.texParameteri(3553,10241,9729);
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
				break;
			case 1:
				kha_SystemImpl.gl.texImage2D(3553,0,6409,this.get_width(),this.get_height(),0,6409,5121,this.bytesToArray(this.bytes));
				if(kha_SystemImpl.gl.getError() == 1282) {
					var rgbaBytes = new haxe_io_Bytes(new ArrayBuffer(this.get_width() * this.get_height() * 4));
					var _g = 0;
					var _g1 = this.get_height();
					while(_g < _g1) {
						var y = _g++;
						var _g2 = 0;
						var _g11 = this.get_width();
						while(_g2 < _g11) {
							var x = _g2++;
							var value = this.bytes.b[y * this.get_width() + x];
							rgbaBytes.b[y * this.get_width() * 4 + x * 4] = value;
							rgbaBytes.b[y * this.get_width() * 4 + x * 4 + 1] = value;
							rgbaBytes.b[y * this.get_width() * 4 + x * 4 + 2] = value;
							rgbaBytes.b[y * this.get_width() * 4 + x * 4 + 3] = 255;
						}
					}
					kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(rgbaBytes));
				}
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.get_width(),this.get_height(),0,6408,5126,this.bytesToArray(this.bytes));
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.get_width(),this.get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.bytesToArray(this.bytes));
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(3553,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.get_width(),this.get_height(),0,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.bytesToArray(this.bytes));
				break;
			default:
				kha_SystemImpl.gl.texImage2D(3553,0,6408,this.get_width(),this.get_height(),0,6408,5121,this.bytesToArray(this.bytes));
			}
			kha_SystemImpl.gl.bindTexture(3553,null);
			this.bytes = null;
		}
	}
	,pixels: null
	,getPixels: function() {
		if(this.frameBuffer == null) {
			return null;
		}
		if(this.pixels == null) {
			switch(this.format) {
			case 0:case 1:
				this.pixels = new Uint8Array(kha_WebGLImage.formatByteSize(this.format) * this.get_width() * this.get_height());
				break;
			case 2:case 5:
				this.pixels = new Float32Array((kha_WebGLImage.formatByteSize(this.format) / 4 | 0) * this.get_width() * this.get_height());
				break;
			case 4:case 6:
				this.pixels = new Uint16Array((kha_WebGLImage.formatByteSize(this.format) / 2 | 0) * this.get_width() * this.get_height());
				break;
			default:
				this.pixels = new Uint8Array(kha_WebGLImage.formatByteSize(this.format) * this.get_width() * this.get_height());
			}
		}
		kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
		switch(this.format) {
		case 0:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5121,this.pixels);
			break;
		case 1:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,5121,this.pixels);
			break;
		case 2:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5126,this.pixels);
			break;
		case 4:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.pixels);
			break;
		case 5:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,5126,this.pixels);
			break;
		case 6:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,kha_SystemImpl.gl2 ? 6403 : 6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,this.pixels);
			break;
		default:
			kha_SystemImpl.gl.readPixels(0,0,this.myWidth,this.myHeight,6408,5121,this.pixels);
		}
		return haxe_io_Bytes.ofData(this.pixels.buffer);
	}
	,unload: function() {
		if(this.texture != null) {
			kha_SystemImpl.gl.deleteTexture(this.texture);
		}
		if(this.depthTexture != null) {
			kha_SystemImpl.gl.deleteTexture(this.depthTexture);
		}
		if(this.frameBuffer != null) {
			kha_SystemImpl.gl.deleteFramebuffer(this.frameBuffer);
		}
		if(this.renderBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.renderBuffer);
		}
		if(this.MSAAFrameBuffer != null) {
			kha_SystemImpl.gl.deleteFramebuffer(this.MSAAFrameBuffer);
		}
		if(this.MSAAColorBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.MSAAColorBuffer);
		}
		if(this.MSAADepthBuffer != null) {
			kha_SystemImpl.gl.deleteRenderbuffer(this.MSAADepthBuffer);
		}
	}
	,generateMipmaps: function(levels) {
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		kha_SystemImpl.gl.generateMipmap(3553);
	}
	,setMipmaps: function(mipmaps) {
		kha_SystemImpl.gl.bindTexture(3553,this.texture);
		if(this.format == 2) {
			var _g = 0;
			var _g1 = mipmaps.length;
			while(_g < _g1) {
				var i = _g++;
				kha_SystemImpl.gl.texImage2D(3553,i + 1,kha_SystemImpl.gl2 ? 34836 : 6408,mipmaps[i].get_width(),mipmaps[i].get_height(),0,6408,5126,(js_Boot.__cast(mipmaps[i] , kha_WebGLImage)).image);
			}
		} else if(this.format == 4) {
			var _g2 = 0;
			var _g11 = mipmaps.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				kha_SystemImpl.gl.texImage2D(3553,i1 + 1,kha_SystemImpl.gl2 ? 34842 : 6408,mipmaps[i1].get_width(),mipmaps[i1].get_height(),0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,(js_Boot.__cast(mipmaps[i1] , kha_WebGLImage)).image);
			}
		} else {
			var _g3 = 0;
			var _g12 = mipmaps.length;
			while(_g3 < _g12) {
				var i2 = _g3++;
				kha_SystemImpl.gl.texImage2D(3553,i2 + 1,6408,6408,5121,(js_Boot.__cast(mipmaps[i2] , kha_WebGLImage)).image);
			}
		}
	}
	,__class__: kha_WebGLImage
});
var kha_Window = function(num,defaultWidth,defaultHeight,canvas) {
	var _gthis = this;
	this.num = num;
	this.canvas = canvas;
	this.defaultWidth = defaultWidth;
	this.defaultHeight = defaultHeight;
	kha_Window.windows.push(this);
	kha_Window.resizeCallbacks[num] = [];
	kha_Window.windows.push(this);
	new MutationObserver(function(mutations,observer) {
		var isResize = false;
		var _g = 0;
		while(_g < mutations.length) {
			var mutation = mutations[_g];
			++_g;
			if(mutation.attributeName == "width" || mutation.attributeName == "height") {
				isResize = true;
				break;
			}
		}
		if(isResize) {
			_gthis.resize(canvas.clientWidth,canvas.clientHeight);
		}
	}).observe(canvas,{ attributes : true});
};
$hxClasses["kha.Window"] = kha_Window;
kha_Window.__name__ = "kha.Window";
kha_Window.__properties__ = {get_all:"get_all"};
kha_Window.create = function(win,frame) {
	return null;
};
kha_Window.destroy = function($window) {
};
kha_Window.get = function(index) {
	return kha_Window.windows[index];
};
kha_Window.get_all = function() {
	return kha_Window.windows;
};
kha_Window.prototype = {
	num: null
	,canvas: null
	,defaultWidth: null
	,defaultHeight: null
	,resize: function(width,height) {
		var _g = 0;
		var _g1 = kha_Window.resizeCallbacks[this.num];
		while(_g < _g1.length) _g1[_g++](width,height);
	}
	,move: function(x,y) {
	}
	,changeWindowFeatures: function(features) {
	}
	,changeFramebuffer: function(frame) {
	}
	,get_x: function() {
		return 0;
	}
	,set_x: function(value) {
		return 0;
	}
	,get_y: function() {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,get_width: function() {
		if(this.canvas.clientWidth == 0) {
			return this.defaultWidth;
		} else {
			return this.canvas.clientWidth;
		}
	}
	,set_width: function(value) {
		return 800;
	}
	,get_height: function() {
		if(this.canvas.clientHeight == 0) {
			return this.defaultHeight;
		} else {
			return this.canvas.clientHeight;
		}
	}
	,set_height: function(value) {
		return 600;
	}
	,get_mode: function() {
		if(this.isFullscreen()) {
			return 1;
		} else {
			return 0;
		}
	}
	,set_mode: function(mode) {
		if(mode == 1 || mode == 2) {
			if(!this.isFullscreen()) {
				this.requestFullscreen();
			}
		} else if(this.isFullscreen()) {
			this.exitFullscreen();
		}
		return mode;
	}
	,isFullscreen: function() {
		return document.fullscreenElement === this.canvas ||
			document.mozFullScreenElement === this.canvas ||
			document.webkitFullscreenElement === this.canvas ||
			document.msFullscreenElement === this.canvas ;
	}
	,requestFullscreen: function() {
		if(($_=this.canvas,$bind($_,$_.requestFullscreen))) {
			var c = this.canvas;
			c.requestFullscreen({ navigationUI : "hide"});
		} else if(this.canvas.msRequestFullscreen) {
			this.canvas.msRequestFullscreen();
		} else if(this.canvas.mozRequestFullScreen) {
			this.canvas.mozRequestFullScreen();
		} else if(this.canvas.webkitRequestFullscreen) {
			this.canvas.webkitRequestFullscreen();
		}
	}
	,exitFullscreen: function() {
		if(document.exitFullscreen) {
			document.exitFullscreen();
		} else if(document.msExitFullscreen) {
			document.msExitFullscreen();
		} else if(document.mozCancelFullScreen) {
			document.mozCancelFullScreen();
		} else if(document.webkitExitFullscreen) {
			document.webkitExitFullscreen();
		}
	}
	,get_visible: function() {
		return true;
	}
	,set_visible: function(value) {
		return true;
	}
	,get_title: function() {
		return "Kha";
	}
	,set_title: function(value) {
		return "Kha";
	}
	,notifyOnResize: function(callback) {
		kha_Window.resizeCallbacks[this.num].push(callback);
	}
	,get_vSynced: function() {
		return true;
	}
	,__class__: kha_Window
	,__properties__: {get_vSynced:"get_vSynced",set_title:"set_title",get_title:"get_title",set_visible:"set_visible",get_visible:"get_visible",set_mode:"set_mode",get_mode:"get_mode",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var kha__$WindowOptions_WindowFeatures_$Impl_$ = {};
$hxClasses["kha._WindowOptions.WindowFeatures_Impl_"] = kha__$WindowOptions_WindowFeatures_$Impl_$;
kha__$WindowOptions_WindowFeatures_$Impl_$.__name__ = "kha._WindowOptions.WindowFeatures_Impl_";
kha__$WindowOptions_WindowFeatures_$Impl_$._new = function(value) {
	return value;
};
var kha_WindowOptions = function(title,x,y,width,height,display,visible,windowFeatures,mode) {
	if(mode == null) {
		mode = 0;
	}
	if(visible == null) {
		visible = true;
	}
	if(display == null) {
		display = -1;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	if(y == null) {
		y = -1;
	}
	if(x == null) {
		x = -1;
	}
	this.mode = 0;
	this.windowFeatures = 1 | 4 | 2;
	this.visible = true;
	this.display = -1;
	this.height = 600;
	this.width = 800;
	this.y = -1;
	this.x = -1;
	this.title = null;
	this.title = title;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
	this.display = display;
	this.visible = visible;
	this.windowFeatures = windowFeatures == null ? 1 | 4 | 2 : windowFeatures;
	this.mode = mode;
};
$hxClasses["kha.WindowOptions"] = kha_WindowOptions;
kha_WindowOptions.__name__ = "kha.WindowOptions";
kha_WindowOptions.prototype = {
	title: null
	,x: null
	,y: null
	,width: null
	,height: null
	,display: null
	,visible: null
	,windowFeatures: null
	,mode: null
	,__class__: kha_WindowOptions
};
var kha_arrays__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Float32Array.Float32Array_Impl_"] = kha_arrays__$Float32Array_Float32Array_$Impl_$;
kha_arrays__$Float32Array_Float32Array_$Impl_$.__name__ = "kha.arrays._Float32Array.Float32Array_Impl_";
kha_arrays__$Float32Array_Float32Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Float32Array_Float32Array_$Impl_$._new = function(elements) {
	return new Float32Array(elements);
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Float32Array_Float32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["kha.arrays._Int16Array.Int16Array_Impl_"] = kha_arrays__$Int16Array_Int16Array_$Impl_$;
kha_arrays__$Int16Array_Int16Array_$Impl_$.__name__ = "kha.arrays._Int16Array.Int16Array_Impl_";
kha_arrays__$Int16Array_Int16Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Int16Array_Int16Array_$Impl_$._new = function(elements) {
	return new Int16Array(elements);
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int16Array_Int16Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Int32Array.Int32Array_Impl_"] = kha_arrays__$Int32Array_Int32Array_$Impl_$;
kha_arrays__$Int32Array_Int32Array_$Impl_$.__name__ = "kha.arrays._Int32Array.Int32Array_Impl_";
kha_arrays__$Int32Array_Int32Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Int32Array_Int32Array_$Impl_$._new = function(elements) {
	return new Int32Array(elements);
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Int32Array_Int32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_arrays__$Uint32Array_Uint32Array_$Impl_$ = {};
$hxClasses["kha.arrays._Uint32Array.Uint32Array_Impl_"] = kha_arrays__$Uint32Array_Uint32Array_$Impl_$;
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.__name__ = "kha.arrays._Uint32Array.Uint32Array_Impl_";
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.__properties__ = {get_length:"get_length"};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$._new = function(elements) {
	return new Uint32Array(elements);
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.get_length = function(this1) {
	return this1.length;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.get = function(this1,index) {
	return this1[index];
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.data = function(this1) {
	return this1;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.arrayRead = function(this1,index) {
	return this1[index];
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.arrayWrite = function(this1,index,value) {
	return this1[index] = value;
};
kha_arrays__$Uint32Array_Uint32Array_$Impl_$.subarray = function(this1,start,end) {
	return this1.subarray(start,end);
};
var kha_audio1_AudioChannel = function() { };
$hxClasses["kha.audio1.AudioChannel"] = kha_audio1_AudioChannel;
kha_audio1_AudioChannel.__name__ = "kha.audio1.AudioChannel";
kha_audio1_AudioChannel.__isInterface__ = true;
kha_audio1_AudioChannel.prototype = {
	play: null
	,pause: null
	,stop: null
	,length: null
	,get_length: null
	,get_position: null
	,set_position: null
	,get_volume: null
	,set_volume: null
	,finished: null
	,get_finished: null
	,__class__: kha_audio1_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_internal_IntBox = function(value) {
	this.value = value;
};
$hxClasses["kha.internal.IntBox"] = kha_internal_IntBox;
kha_internal_IntBox.__name__ = "kha.internal.IntBox";
kha_internal_IntBox.prototype = {
	value: null
	,__class__: kha_internal_IntBox
};
var kha_audio2_Audio = function() { };
$hxClasses["kha.audio2.Audio"] = kha_audio2_Audio;
kha_audio2_Audio.__name__ = "kha.audio2.Audio";
kha_audio2_Audio.initContext = function() {
	try {
		kha_audio2_Audio._context = new AudioContext();
		return;
	} catch( e ) {
		haxe_CallStack.lastException = e;
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
	}
};
kha_audio2_Audio._init = function() {
	kha_audio2_Audio.initContext();
	if(kha_audio2_Audio._context == null) {
		return false;
	}
	kha_audio2_Audio.samplesPerSecond = Math.round(kha_audio2_Audio._context.sampleRate);
	kha_audio2_Audio.buffer = new kha_audio2_Buffer(8192,2,kha_audio2_Audio._context.sampleRate | 0);
	kha_audio2_Audio.processingNode = kha_audio2_Audio._context.createScriptProcessor(2048,0,2);
	kha_audio2_Audio.processingNode.onaudioprocess = function(e) {
		var output1 = e.outputBuffer.getChannelData(0);
		var output2 = e.outputBuffer.getChannelData(1);
		if(kha_audio2_Audio.audioCallback != null) {
			kha_audio2_Audio.intBox.value = e.outputBuffer.length * 2;
			kha_audio2_Audio.audioCallback(kha_audio2_Audio.intBox,kha_audio2_Audio.buffer);
			var _g = 0;
			var _g1 = e.outputBuffer.length;
			while(_g < _g1) {
				var i = _g++;
				output1[i] = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
				kha_audio2_Audio.buffer.readLocation += 1;
				output2[i] = kha_audio2_Audio.buffer.data[kha_audio2_Audio.buffer.readLocation];
				kha_audio2_Audio.buffer.readLocation += 1;
				if(kha_audio2_Audio.buffer.readLocation >= kha_audio2_Audio.buffer.size) {
					kha_audio2_Audio.buffer.readLocation = 0;
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = e.outputBuffer.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				output1[i1] = 0;
				output2[i1] = 0;
			}
		}
	};
	kha_audio2_Audio.processingNode.connect(kha_audio2_Audio._context.destination);
	return true;
};
kha_audio2_Audio.wakeChannels = function() {
	kha_SystemImpl.mobileAudioPlaying = true;
	var _g = 0;
	var _g1 = kha_audio2_Audio.virtualChannels;
	while(_g < _g1.length) _g1[_g++].wake();
};
kha_audio2_Audio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var element = window.document.createElement("audio");
	element.src = URL.createObjectURL(new Blob([sound.compressedData.b.bufferValue],{ type : "audio/mp4"}));
	element.loop = loop;
	var channel = new kha_js_AEAudioChannel(element,loop);
	if(kha_SystemImpl.mobileAudioPlaying) {
		channel.play();
		return channel;
	} else {
		var virtualChannel = new kha_audio2_VirtualStreamChannel(channel,loop);
		kha_audio2_Audio.virtualChannels.push(virtualChannel);
		return virtualChannel;
	}
};
var kha_audio2_Audio1 = function() { };
$hxClasses["kha.audio2.Audio1"] = kha_audio2_Audio1;
kha_audio2_Audio1.__name__ = "kha.audio2.Audio1";
kha_audio2_Audio1._init = function() {
	kha_audio2_Audio1.soundChannels = new Array(32);
	kha_audio2_Audio1.streamChannels = new Array(32);
	kha_audio2_Audio1.internalSoundChannels = new Array(32);
	kha_audio2_Audio1.internalStreamChannels = new Array(32);
	kha_audio2_Audio1.sampleCache1 = new Float32Array(512);
	kha_audio2_Audio1.sampleCache2 = new Float32Array(512);
	kha_audio2_Audio1.lastAllocationCount = 0;
	kha_audio2_Audio.audioCallback = kha_audio2_Audio1.mix;
};
kha_audio2_Audio1.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_Audio1.mix = function(samplesBox,buffer) {
	var samples = samplesBox.value;
	if(kha_audio2_Audio1.sampleCache1.length < samples) {
		if(kha_audio2_Audio.disableGcInteractions) {
			haxe_Log.trace("Unexpected allocation request in audio thread.",{ fileName : "kha/audio2/Audio1.hx", lineNumber : 50, className : "kha.audio2.Audio1", methodName : "mix"});
			var _g = 0;
			while(_g < samples) {
				++_g;
				buffer.data[buffer.writeLocation] = 0;
				buffer.writeLocation += 1;
				if(buffer.writeLocation >= buffer.size) {
					buffer.writeLocation = 0;
				}
			}
			kha_audio2_Audio1.lastAllocationCount = 0;
			kha_audio2_Audio.disableGcInteractions = false;
			return;
		}
		kha_audio2_Audio1.sampleCache1 = new Float32Array(samples * 2);
		kha_audio2_Audio1.sampleCache2 = new Float32Array(samples * 2);
		kha_audio2_Audio1.lastAllocationCount = 0;
	} else if(kha_audio2_Audio1.lastAllocationCount > 100) {
		kha_audio2_Audio.disableGcInteractions = true;
	} else {
		kha_audio2_Audio1.lastAllocationCount += 1;
	}
	var _g1 = 0;
	while(_g1 < samples) kha_audio2_Audio1.sampleCache2[_g1++] = 0;
	var _g2 = 0;
	while(_g2 < 32) {
		var i = _g2++;
		kha_audio2_Audio1.internalSoundChannels[i] = kha_audio2_Audio1.soundChannels[i];
	}
	var _g3 = 0;
	while(_g3 < 32) {
		var i1 = _g3++;
		kha_audio2_Audio1.internalStreamChannels[i1] = kha_audio2_Audio1.streamChannels[i1];
	}
	var _g4 = 0;
	var _g5 = kha_audio2_Audio1.internalSoundChannels;
	while(_g4 < _g5.length) {
		var channel = _g5[_g4];
		++_g4;
		if(channel == null || channel.get_finished()) {
			continue;
		}
		channel.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g51 = 0;
		while(_g51 < samples) {
			var i2 = _g51++;
			kha_audio2_Audio1.sampleCache2[i2] += kha_audio2_Audio1.sampleCache1[i2] * channel.get_volume();
		}
	}
	var _g6 = 0;
	var _g7 = kha_audio2_Audio1.internalStreamChannels;
	while(_g6 < _g7.length) {
		var channel1 = _g7[_g6];
		++_g6;
		if(channel1 == null || channel1.get_finished()) {
			continue;
		}
		channel1.nextSamples(kha_audio2_Audio1.sampleCache1,samples,buffer.samplesPerSecond);
		var _g71 = 0;
		while(_g71 < samples) {
			var i3 = _g71++;
			kha_audio2_Audio1.sampleCache2[i3] += kha_audio2_Audio1.sampleCache1[i3] * channel1.get_volume();
		}
	}
	var _g8 = 0;
	while(_g8 < samples) {
		var a = kha_audio2_Audio1.sampleCache2[_g8++];
		var a1 = a < 1.0 ? a : 1.0;
		buffer.data[buffer.writeLocation] = a1 > -1.0 ? a1 : -1.0;
		buffer.writeLocation += 1;
		if(buffer.writeLocation >= buffer.size) {
			buffer.writeLocation = 0;
		}
	}
};
kha_audio2_Audio1.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = null;
	if(kha_audio2_Audio.samplesPerSecond != sound.sampleRate) {
		channel = new kha_audio2_ResamplingAudioChannel(loop,sound.sampleRate);
	} else {
		channel = new kha_audio2_AudioChannel(loop);
	}
	channel.data = sound.uncompressedData;
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == null || kha_audio2_Audio1.soundChannels[i].get_finished()) {
			kha_audio2_Audio1.soundChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
kha_audio2_Audio1._playAgain = function(channel) {
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.soundChannels[i] == channel) {
			kha_audio2_Audio1.soundChannels[i] = null;
		}
	}
	var _g1 = 0;
	while(_g1 < 32) {
		var i1 = _g1++;
		if(kha_audio2_Audio1.soundChannels[i1] == null || kha_audio2_Audio1.soundChannels[i1].get_finished() || kha_audio2_Audio1.soundChannels[i1] == channel) {
			kha_audio2_Audio1.soundChannels[i1] = channel;
			break;
		}
	}
};
kha_audio2_Audio1.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var hardwareChannel = kha_audio2_Audio.stream(sound,loop);
	if(hardwareChannel != null) {
		return hardwareChannel;
	}
	var channel = new kha_audio2_StreamChannel(sound.compressedData,loop);
	var foundChannel = false;
	var _g = 0;
	while(_g < 32) {
		var i = _g++;
		if(kha_audio2_Audio1.streamChannels[i] == null || kha_audio2_Audio1.streamChannels[i].get_finished()) {
			kha_audio2_Audio1.streamChannels[i] = channel;
			foundChannel = true;
			break;
		}
	}
	if(foundChannel) {
		return channel;
	} else {
		return null;
	}
};
var kha_audio2_AudioChannel = function(looping) {
	this.looping = false;
	this.stopped = false;
	this.paused = false;
	this.myPosition = 0;
	this.myVolume = 1;
	this.data = null;
	this.looping = looping;
};
$hxClasses["kha.audio2.AudioChannel"] = kha_audio2_AudioChannel;
kha_audio2_AudioChannel.__name__ = "kha.audio2.AudioChannel";
kha_audio2_AudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_AudioChannel.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_AudioChannel.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_AudioChannel.prototype = {
	data: null
	,myVolume: null
	,myPosition: null
	,paused: null
	,stopped: null
	,looping: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			while(_g < requestedLength) requestedSamples[_g++] = 0;
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g1 = 0;
			var a = this.data.length - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g11 = a < b ? a : b;
			while(_g1 < _g11) {
				++_g1;
				requestedSamples[requestedSamplesIndex++] = this.data[this.myPosition++];
			}
			if(this.myPosition >= this.data.length) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples[requestedSamplesIndex++] = 0;
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,length: null
	,get_length: function() {
		return this.data.length / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		this.myPosition = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2);
		var a = this.myPosition;
		var b = this.data.length;
		var a1 = a < b ? a : b;
		this.myPosition = a1 > 0 ? a1 : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_AudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_Buffer = function(size,channels,samplesPerSecond) {
	this.size = size;
	this.data = new Float32Array(size);
	this.channels = channels;
	this.samplesPerSecond = samplesPerSecond;
	this.readLocation = 0;
	this.writeLocation = 0;
};
$hxClasses["kha.audio2.Buffer"] = kha_audio2_Buffer;
kha_audio2_Buffer.__name__ = "kha.audio2.Buffer";
kha_audio2_Buffer.prototype = {
	channels: null
	,samplesPerSecond: null
	,data: null
	,size: null
	,readLocation: null
	,writeLocation: null
	,__class__: kha_audio2_Buffer
};
var kha_audio2_ResamplingAudioChannel = function(looping,sampleRate) {
	kha_audio2_AudioChannel.call(this,looping);
	this.sampleRate = sampleRate;
};
$hxClasses["kha.audio2.ResamplingAudioChannel"] = kha_audio2_ResamplingAudioChannel;
kha_audio2_ResamplingAudioChannel.__name__ = "kha.audio2.ResamplingAudioChannel";
kha_audio2_ResamplingAudioChannel.max = function(a,b) {
	if(a > b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_ResamplingAudioChannel.min = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
kha_audio2_ResamplingAudioChannel.__super__ = kha_audio2_AudioChannel;
kha_audio2_ResamplingAudioChannel.prototype = $extend(kha_audio2_AudioChannel.prototype,{
	sampleRate: null
	,nextSamples: function(requestedSamples,requestedLength,sampleRate) {
		if(this.paused || this.stopped) {
			var _g = 0;
			while(_g < requestedLength) requestedSamples[_g++] = 0;
			return;
		}
		var requestedSamplesIndex = 0;
		while(requestedSamplesIndex < requestedLength) {
			var _g1 = 0;
			var value = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
			var a = (value % 2 == 0 ? value : value + 1) - this.myPosition;
			var b = requestedLength - requestedSamplesIndex;
			var _g11 = a < b ? a : b;
			while(_g1 < _g11) {
				++_g1;
				var index = requestedSamplesIndex++;
				var position = this.myPosition++;
				var factor = this.sampleRate / sampleRate;
				var value1;
				if(position % 2 == 0) {
					position = position / 2 | 0;
					var pos = factor * position;
					var pos1 = Math.floor(pos);
					var pos2 = Math.floor(pos + 1);
					pos1 *= 2;
					pos2 *= 2;
					var maximum = this.data.length - 1;
					if(maximum % 2 == 0) {
						maximum = maximum;
					} else {
						--maximum;
					}
					var t = pos - Math.floor(pos);
					value1 = (1 - t) * (pos1 < 0 || pos1 > maximum ? 0 : this.data[pos1]) + t * (pos2 < 0 || pos2 > maximum ? 0 : this.data[pos2]);
				} else {
					position = position / 2 | 0;
					var pos3 = factor * position;
					var pos11 = Math.floor(pos3);
					var pos21 = Math.floor(pos3 + 1);
					pos11 = pos11 * 2 + 1;
					pos21 = pos21 * 2 + 1;
					var maximum1 = this.data.length - 1;
					if(maximum1 % 2 != 0) {
						maximum1 = maximum1;
					} else {
						--maximum1;
					}
					var t1 = pos3 - Math.floor(pos3);
					value1 = (1 - t1) * (pos11 < 1 || pos11 > maximum1 ? 0 : this.data[pos11]) + t1 * (pos21 < 1 || pos21 > maximum1 ? 0 : this.data[pos21]);
				}
				requestedSamples[index] = value1;
			}
			var value2 = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
			if(this.myPosition >= (value2 % 2 == 0 ? value2 : value2 + 1)) {
				this.myPosition = 0;
				if(!this.looping) {
					this.stopped = true;
					break;
				}
			}
		}
		while(requestedSamplesIndex < requestedLength) requestedSamples[requestedSamplesIndex++] = 0;
	}
	,sample: function(position,sampleRate) {
		var factor = this.sampleRate / sampleRate;
		if(position % 2 == 0) {
			position = position / 2 | 0;
			var pos = factor * position;
			var pos1 = Math.floor(pos);
			var pos2 = Math.floor(pos + 1);
			pos1 *= 2;
			pos2 *= 2;
			var maximum = this.data.length - 1;
			if(maximum % 2 == 0) {
				maximum = maximum;
			} else {
				--maximum;
			}
			var t = pos - Math.floor(pos);
			return (1 - t) * (pos1 < 0 || pos1 > maximum ? 0 : this.data[pos1]) + t * (pos2 < 0 || pos2 > maximum ? 0 : this.data[pos2]);
		} else {
			position = position / 2 | 0;
			var pos3 = factor * position;
			var pos11 = Math.floor(pos3);
			var pos21 = Math.floor(pos3 + 1);
			pos11 = pos11 * 2 + 1;
			pos21 = pos21 * 2 + 1;
			var maximum1 = this.data.length - 1;
			if(maximum1 % 2 != 0) {
				maximum1 = maximum1;
			} else {
				--maximum1;
			}
			var t1 = pos3 - Math.floor(pos3);
			return (1 - t1) * (pos11 < 1 || pos11 > maximum1 ? 0 : this.data[pos11]) + t1 * (pos21 < 1 || pos21 > maximum1 ? 0 : this.data[pos21]);
		}
	}
	,lerp: function(v0,v1,t) {
		return (1 - t) * v0 + t * v1;
	}
	,sampleLength: function(sampleRate) {
		var value = Math.ceil(this.data.length * (sampleRate / this.sampleRate));
		if(value % 2 == 0) {
			return value;
		} else {
			return value + 1;
		}
	}
	,play: function() {
		this.paused = false;
		this.stopped = false;
		kha_audio2_Audio1._playAgain(this);
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.myPosition = 0;
		this.stopped = true;
	}
	,get_length: function() {
		return this.data.length / this.sampleRate / 2;
	}
	,get_position: function() {
		return this.myPosition / kha_audio2_Audio.samplesPerSecond / 2;
	}
	,set_position: function(value) {
		var pos = Math.round(value * kha_audio2_Audio.samplesPerSecond * 2.0);
		if(pos % 2 == 0) {
			pos = pos;
		} else {
			++pos;
		}
		var value1 = Math.ceil(this.data.length * (kha_audio2_Audio.samplesPerSecond / this.sampleRate));
		var b = value1 % 2 == 0 ? value1 : value1 + 1;
		var a = pos < b ? pos : b;
		this.myPosition = a > 0 ? a : 0;
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_audio2_ResamplingAudioChannel
});
var kha_audio2_StreamChannel = function(data,loop) {
	this.paused = false;
	this.atend = false;
	this.myVolume = 1;
	this.loop = loop;
	this.reader = kha_audio2_ogg_vorbis_Reader.openFromBytes(data);
};
$hxClasses["kha.audio2.StreamChannel"] = kha_audio2_StreamChannel;
kha_audio2_StreamChannel.__name__ = "kha.audio2.StreamChannel";
kha_audio2_StreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_StreamChannel.prototype = {
	reader: null
	,atend: null
	,loop: null
	,myVolume: null
	,paused: null
	,nextSamples: function(samples,length,sampleRate) {
		if(this.paused) {
			var _g = 0;
			while(_g < length) samples[_g++] = 0;
			return;
		}
		var count = this.reader.read(samples,length / 2 | 0,2,sampleRate,true) * 2;
		if(count < length) {
			if(this.loop) {
				this.reader.set_currentMillisecond(0);
			} else {
				this.atend = true;
			}
			var _g1 = count;
			while(_g1 < length) samples[_g1++] = 0;
		}
	}
	,play: function() {
		this.paused = false;
	}
	,pause: function() {
		this.paused = true;
	}
	,stop: function() {
		this.atend = true;
	}
	,length: null
	,get_length: function() {
		return this.reader.get_totalMillisecond() / 1000.0;
	}
	,get_position: function() {
		return this.reader.get_currentMillisecond() / 1000.0;
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.myVolume;
	}
	,set_volume: function(value) {
		return this.myVolume = value;
	}
	,finished: null
	,get_finished: function() {
		return this.atend;
	}
	,__class__: kha_audio2_StreamChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_VirtualStreamChannel = function(aeChannel,looping) {
	this.mode = 2;
	this.aeChannel = aeChannel;
	this.looping = looping;
	this.lastTickTime = kha_Scheduler.realTime();
	this.lastPosition = 0;
};
$hxClasses["kha.audio2.VirtualStreamChannel"] = kha_audio2_VirtualStreamChannel;
kha_audio2_VirtualStreamChannel.__name__ = "kha.audio2.VirtualStreamChannel";
kha_audio2_VirtualStreamChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_audio2_VirtualStreamChannel.prototype = {
	aeChannel: null
	,mode: null
	,lastTickTime: null
	,lastPosition: null
	,looping: null
	,wake: function() {
		this.updatePosition();
		this.aeChannel.set_position(this.lastPosition);
		this.aeChannel.play();
	}
	,updatePosition: function() {
		var now = kha_Scheduler.realTime();
		switch(this.mode) {
		case 0:
			this.lastPosition = 0;
			break;
		case 1:
			break;
		case 2:
			this.lastPosition += now - this.lastTickTime;
			while(this.lastPosition > this.get_length()) this.lastPosition -= this.get_length();
			break;
		}
		this.lastTickTime = now;
	}
	,play: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.play();
		} else {
			this.updatePosition();
			this.mode = 2;
		}
	}
	,pause: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.pause();
		} else {
			this.updatePosition();
			this.mode = 1;
		}
	}
	,stop: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			this.aeChannel.stop();
		} else {
			this.updatePosition();
			this.mode = 0;
		}
	}
	,length: null
	,get_length: function() {
		return this.aeChannel.get_length();
	}
	,get_position: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_position();
		} else {
			this.updatePosition();
			return this.lastPosition;
		}
	}
	,set_position: function(value) {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.set_position(value);
		} else {
			this.updatePosition();
			return this.lastPosition = value;
		}
	}
	,get_volume: function() {
		return this.aeChannel.get_volume();
	}
	,set_volume: function(value) {
		return this.aeChannel.set_volume(value);
	}
	,finished: null
	,get_finished: function() {
		if(kha_SystemImpl.mobileAudioPlaying) {
			return this.aeChannel.get_finished();
		} else if(this.mode != 0) {
			if(!this.looping) {
				return this.get_position() >= this.get_length();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: kha_audio2_VirtualStreamChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_audio2_ogg_tools_Crc32 = function() { };
$hxClasses["kha.audio2.ogg.tools.Crc32"] = kha_audio2_ogg_tools_Crc32;
kha_audio2_ogg_tools_Crc32.__name__ = "kha.audio2.ogg.tools.Crc32";
kha_audio2_ogg_tools_Crc32.init = function() {
	if(kha_audio2_ogg_tools_Crc32.table != null) {
		return;
	}
	kha_audio2_ogg_tools_Crc32.table = new Array(256);
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		var s = i << 24;
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		s = s << 1 ^ (_$UInt_UInt_$Impl_$.gte(s,1 << 31) ? 79764919 : 0);
		kha_audio2_ogg_tools_Crc32.table[i] = s;
	}
};
kha_audio2_ogg_tools_Crc32.update = function(crc,byte) {
	return crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[byte ^ crc >>> 24];
};
var kha_audio2_ogg_tools_MathTools = function() { };
$hxClasses["kha.audio2.ogg.tools.MathTools"] = kha_audio2_ogg_tools_MathTools;
kha_audio2_ogg_tools_MathTools.__name__ = "kha.audio2.ogg.tools.MathTools";
kha_audio2_ogg_tools_MathTools.ilog = function(n) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	if(n < 16384) {
		if(n < 16) {
			return log2_4[n];
		} else if(n < 512) {
			return 5 + log2_4[n >> 5];
		} else {
			return 10 + log2_4[n >> 10];
		}
	} else if(n < 16777216) {
		if(n < 524288) {
			return 15 + log2_4[n >> 15];
		} else {
			return 20 + log2_4[n >> 20];
		}
	} else if(n < 536870912) {
		return 25 + log2_4[n >> 25];
	} else if(n < -2147483648) {
		return 30 + log2_4[n >> 30];
	} else {
		return 0;
	}
};
var kha_audio2_ogg_tools_Mdct = function() { };
$hxClasses["kha.audio2.ogg.tools.Mdct"] = kha_audio2_ogg_tools_Mdct;
kha_audio2_ogg_tools_Mdct.__name__ = "kha.audio2.ogg.tools.Mdct";
kha_audio2_ogg_tools_Mdct.inverseTransform = function(buffer,n,a,b,c,bitReverse) {
	var n2 = n >> 1;
	var n4 = n >> 2;
	var n8 = n >> 3;
	var buf2 = new Array(n2);
	var dOffset = n2 - 2;
	var aaOffset = 0;
	var eOffset = 0;
	while(eOffset != n2) {
		buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
		buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset += 4;
	}
	eOffset = n2 - 3;
	while(dOffset >= 0) {
		buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
		buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
		dOffset -= 2;
		aaOffset += 2;
		eOffset -= 4;
	}
	var aaOffset1 = n2 - 8;
	var eOffset0 = n4;
	var eOffset1 = 0;
	var dOffset0 = n4;
	var dOffset1 = 0;
	while(aaOffset1 >= 0) {
		var v41_21 = buf2[eOffset0 + 1] - buf2[eOffset1 + 1];
		var v40_20 = buf2[eOffset0] - buf2[eOffset1];
		buffer[dOffset0 + 1] = buf2[eOffset0 + 1] + buf2[eOffset1 + 1];
		buffer[dOffset0] = buf2[eOffset0] + buf2[eOffset1];
		buffer[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
		buffer[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
		v41_21 = buf2[eOffset0 + 3] - buf2[eOffset1 + 3];
		v40_20 = buf2[eOffset0 + 2] - buf2[eOffset1 + 2];
		buffer[dOffset0 + 3] = buf2[eOffset0 + 3] + buf2[eOffset1 + 3];
		buffer[dOffset0 + 2] = buf2[eOffset0 + 2] + buf2[eOffset1 + 2];
		buffer[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
		buffer[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
		aaOffset1 -= 8;
		dOffset0 += 4;
		dOffset1 += 4;
		eOffset0 += 4;
		eOffset1 += 4;
	}
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var i_off = n2 - 1 - n4 * 0;
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + -(n >> 3);
	var aOffset = 0;
	var i = (n >> 4 >> 2) + 1;
	while(--i > 0) {
		var k00_20 = buffer[eeOffset0] - buffer[eeOffset2];
		var k01_21 = buffer[eeOffset0 + (-1)] - buffer[eeOffset2 + (-1)];
		var _g = eeOffset0;
		buffer[_g] = buffer[_g] + buffer[eeOffset2];
		var _g1 = eeOffset0 + (-1);
		buffer[_g1] = buffer[_g1] + buffer[eeOffset2 + (-1)];
		buffer[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		buffer[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = buffer[eeOffset0 + (-2)] - buffer[eeOffset2 + (-2)];
		k01_21 = buffer[eeOffset0 + (-3)] - buffer[eeOffset2 + (-3)];
		var _g2 = eeOffset0 + (-2);
		buffer[_g2] = buffer[_g2] + buffer[eeOffset2 + (-2)];
		var _g3 = eeOffset0 + (-3);
		buffer[_g3] = buffer[_g3] + buffer[eeOffset2 + (-3)];
		buffer[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		buffer[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = buffer[eeOffset0 + (-4)] - buffer[eeOffset2 + (-4)];
		k01_21 = buffer[eeOffset0 + (-5)] - buffer[eeOffset2 + (-5)];
		var _g4 = eeOffset0 + (-4);
		buffer[_g4] = buffer[_g4] + buffer[eeOffset2 + (-4)];
		var _g5 = eeOffset0 + (-5);
		buffer[_g5] = buffer[_g5] + buffer[eeOffset2 + (-5)];
		buffer[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		buffer[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = buffer[eeOffset0 + (-6)] - buffer[eeOffset2 + (-6)];
		k01_21 = buffer[eeOffset0 + (-7)] - buffer[eeOffset2 + (-7)];
		var _g6 = eeOffset0 + (-6);
		buffer[_g6] = buffer[_g6] + buffer[eeOffset2 + (-6)];
		var _g7 = eeOffset0 + (-7);
		buffer[_g7] = buffer[_g7] + buffer[eeOffset2 + (-7)];
		buffer[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		buffer[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
	var i_off1 = n2 - 1 - n4;
	var eeOffset01 = i_off1;
	var eeOffset21 = i_off1 + -(n >> 3);
	var aOffset1 = 0;
	var i1 = (n >> 4 >> 2) + 1;
	while(--i1 > 0) {
		var k00_201 = buffer[eeOffset01] - buffer[eeOffset21];
		var k01_211 = buffer[eeOffset01 + (-1)] - buffer[eeOffset21 + (-1)];
		var _g8 = eeOffset01;
		buffer[_g8] = buffer[_g8] + buffer[eeOffset21];
		var _g9 = eeOffset01 + (-1);
		buffer[_g9] = buffer[_g9] + buffer[eeOffset21 + (-1)];
		buffer[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		buffer[eeOffset21 + (-1)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = buffer[eeOffset01 + (-2)] - buffer[eeOffset21 + (-2)];
		k01_211 = buffer[eeOffset01 + (-3)] - buffer[eeOffset21 + (-3)];
		var _g10 = eeOffset01 + (-2);
		buffer[_g10] = buffer[_g10] + buffer[eeOffset21 + (-2)];
		var _g11 = eeOffset01 + (-3);
		buffer[_g11] = buffer[_g11] + buffer[eeOffset21 + (-3)];
		buffer[eeOffset21 + (-2)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		buffer[eeOffset21 + (-3)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = buffer[eeOffset01 + (-4)] - buffer[eeOffset21 + (-4)];
		k01_211 = buffer[eeOffset01 + (-5)] - buffer[eeOffset21 + (-5)];
		var _g12 = eeOffset01 + (-4);
		buffer[_g12] = buffer[_g12] + buffer[eeOffset21 + (-4)];
		var _g13 = eeOffset01 + (-5);
		buffer[_g13] = buffer[_g13] + buffer[eeOffset21 + (-5)];
		buffer[eeOffset21 + (-4)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		buffer[eeOffset21 + (-5)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		k00_201 = buffer[eeOffset01 + (-6)] - buffer[eeOffset21 + (-6)];
		k01_211 = buffer[eeOffset01 + (-7)] - buffer[eeOffset21 + (-7)];
		var _g14 = eeOffset01 + (-6);
		buffer[_g14] = buffer[_g14] + buffer[eeOffset21 + (-6)];
		var _g15 = eeOffset01 + (-7);
		buffer[_g15] = buffer[_g15] + buffer[eeOffset21 + (-7)];
		buffer[eeOffset21 + (-6)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
		buffer[eeOffset21 + (-7)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
		aOffset1 += 8;
		eeOffset01 -= 8;
		eeOffset21 -= 8;
	}
	var d0 = n2 - 1 - n8 * 0;
	var aOffset2 = 0;
	var eOffset01 = d0;
	var eOffset2 = d0 + -(n >> 4);
	var i2 = (n >> 5 >> 2) + 1;
	while(--i2 > 0) {
		var k00_202 = buffer[eOffset01] - buffer[eOffset2];
		var k01_212 = buffer[eOffset01 + (-1)] - buffer[eOffset2 + (-1)];
		var _g16 = eOffset01;
		buffer[_g16] = buffer[_g16] + buffer[eOffset2];
		var _g17 = eOffset01 + (-1);
		buffer[_g17] = buffer[_g17] + buffer[eOffset2 + (-1)];
		buffer[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		buffer[eOffset2 + (-1)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = buffer[eOffset01 + (-2)] - buffer[eOffset2 + (-2)];
		k01_212 = buffer[eOffset01 + (-3)] - buffer[eOffset2 + (-3)];
		var _g18 = eOffset01 + (-2);
		buffer[_g18] = buffer[_g18] + buffer[eOffset2 + (-2)];
		var _g19 = eOffset01 + (-3);
		buffer[_g19] = buffer[_g19] + buffer[eOffset2 + (-3)];
		buffer[eOffset2 + (-2)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		buffer[eOffset2 + (-3)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = buffer[eOffset01 + (-4)] - buffer[eOffset2 + (-4)];
		k01_212 = buffer[eOffset01 + (-5)] - buffer[eOffset2 + (-5)];
		var _g20 = eOffset01 + (-4);
		buffer[_g20] = buffer[_g20] + buffer[eOffset2 + (-4)];
		var _g21 = eOffset01 + (-5);
		buffer[_g21] = buffer[_g21] + buffer[eOffset2 + (-5)];
		buffer[eOffset2 + (-4)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		buffer[eOffset2 + (-5)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		aOffset2 += 16;
		k00_202 = buffer[eOffset01 + (-6)] - buffer[eOffset2 + (-6)];
		k01_212 = buffer[eOffset01 + (-7)] - buffer[eOffset2 + (-7)];
		var _g22 = eOffset01 + (-6);
		buffer[_g22] = buffer[_g22] + buffer[eOffset2 + (-6)];
		var _g23 = eOffset01 + (-7);
		buffer[_g23] = buffer[_g23] + buffer[eOffset2 + (-7)];
		buffer[eOffset2 + (-6)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
		buffer[eOffset2 + (-7)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
		eOffset01 -= 8;
		eOffset2 -= 8;
		aOffset2 += 16;
	}
	var d01 = n2 - 1 - n8;
	var aOffset3 = 0;
	var eOffset02 = d01;
	var eOffset21 = d01 + -(n >> 4);
	var i3 = (n >> 5 >> 2) + 1;
	while(--i3 > 0) {
		var k00_203 = buffer[eOffset02] - buffer[eOffset21];
		var k01_213 = buffer[eOffset02 + (-1)] - buffer[eOffset21 + (-1)];
		var _g24 = eOffset02;
		buffer[_g24] = buffer[_g24] + buffer[eOffset21];
		var _g25 = eOffset02 + (-1);
		buffer[_g25] = buffer[_g25] + buffer[eOffset21 + (-1)];
		buffer[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		buffer[eOffset21 + (-1)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = buffer[eOffset02 + (-2)] - buffer[eOffset21 + (-2)];
		k01_213 = buffer[eOffset02 + (-3)] - buffer[eOffset21 + (-3)];
		var _g26 = eOffset02 + (-2);
		buffer[_g26] = buffer[_g26] + buffer[eOffset21 + (-2)];
		var _g27 = eOffset02 + (-3);
		buffer[_g27] = buffer[_g27] + buffer[eOffset21 + (-3)];
		buffer[eOffset21 + (-2)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		buffer[eOffset21 + (-3)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = buffer[eOffset02 + (-4)] - buffer[eOffset21 + (-4)];
		k01_213 = buffer[eOffset02 + (-5)] - buffer[eOffset21 + (-5)];
		var _g28 = eOffset02 + (-4);
		buffer[_g28] = buffer[_g28] + buffer[eOffset21 + (-4)];
		var _g29 = eOffset02 + (-5);
		buffer[_g29] = buffer[_g29] + buffer[eOffset21 + (-5)];
		buffer[eOffset21 + (-4)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		buffer[eOffset21 + (-5)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		aOffset3 += 16;
		k00_203 = buffer[eOffset02 + (-6)] - buffer[eOffset21 + (-6)];
		k01_213 = buffer[eOffset02 + (-7)] - buffer[eOffset21 + (-7)];
		var _g30 = eOffset02 + (-6);
		buffer[_g30] = buffer[_g30] + buffer[eOffset21 + (-6)];
		var _g31 = eOffset02 + (-7);
		buffer[_g31] = buffer[_g31] + buffer[eOffset21 + (-7)];
		buffer[eOffset21 + (-6)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
		buffer[eOffset21 + (-7)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
		eOffset02 -= 8;
		eOffset21 -= 8;
		aOffset3 += 16;
	}
	var d02 = n2 - 1 - n8 * 2;
	var aOffset4 = 0;
	var eOffset03 = d02;
	var eOffset22 = d02 + -(n >> 4);
	var i4 = (n >> 5 >> 2) + 1;
	while(--i4 > 0) {
		var k00_204 = buffer[eOffset03] - buffer[eOffset22];
		var k01_214 = buffer[eOffset03 + (-1)] - buffer[eOffset22 + (-1)];
		var _g32 = eOffset03;
		buffer[_g32] = buffer[_g32] + buffer[eOffset22];
		var _g33 = eOffset03 + (-1);
		buffer[_g33] = buffer[_g33] + buffer[eOffset22 + (-1)];
		buffer[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		buffer[eOffset22 + (-1)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = buffer[eOffset03 + (-2)] - buffer[eOffset22 + (-2)];
		k01_214 = buffer[eOffset03 + (-3)] - buffer[eOffset22 + (-3)];
		var _g34 = eOffset03 + (-2);
		buffer[_g34] = buffer[_g34] + buffer[eOffset22 + (-2)];
		var _g35 = eOffset03 + (-3);
		buffer[_g35] = buffer[_g35] + buffer[eOffset22 + (-3)];
		buffer[eOffset22 + (-2)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		buffer[eOffset22 + (-3)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = buffer[eOffset03 + (-4)] - buffer[eOffset22 + (-4)];
		k01_214 = buffer[eOffset03 + (-5)] - buffer[eOffset22 + (-5)];
		var _g36 = eOffset03 + (-4);
		buffer[_g36] = buffer[_g36] + buffer[eOffset22 + (-4)];
		var _g37 = eOffset03 + (-5);
		buffer[_g37] = buffer[_g37] + buffer[eOffset22 + (-5)];
		buffer[eOffset22 + (-4)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		buffer[eOffset22 + (-5)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		aOffset4 += 16;
		k00_204 = buffer[eOffset03 + (-6)] - buffer[eOffset22 + (-6)];
		k01_214 = buffer[eOffset03 + (-7)] - buffer[eOffset22 + (-7)];
		var _g38 = eOffset03 + (-6);
		buffer[_g38] = buffer[_g38] + buffer[eOffset22 + (-6)];
		var _g39 = eOffset03 + (-7);
		buffer[_g39] = buffer[_g39] + buffer[eOffset22 + (-7)];
		buffer[eOffset22 + (-6)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
		buffer[eOffset22 + (-7)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
		eOffset03 -= 8;
		eOffset22 -= 8;
		aOffset4 += 16;
	}
	var d03 = n2 - 1 - n8 * 3;
	var aOffset5 = 0;
	var eOffset04 = d03;
	var eOffset23 = d03 + -(n >> 4);
	var i5 = (n >> 5 >> 2) + 1;
	while(--i5 > 0) {
		var k00_205 = buffer[eOffset04] - buffer[eOffset23];
		var k01_215 = buffer[eOffset04 + (-1)] - buffer[eOffset23 + (-1)];
		var _g40 = eOffset04;
		buffer[_g40] = buffer[_g40] + buffer[eOffset23];
		var _g41 = eOffset04 + (-1);
		buffer[_g41] = buffer[_g41] + buffer[eOffset23 + (-1)];
		buffer[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		buffer[eOffset23 + (-1)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = buffer[eOffset04 + (-2)] - buffer[eOffset23 + (-2)];
		k01_215 = buffer[eOffset04 + (-3)] - buffer[eOffset23 + (-3)];
		var _g42 = eOffset04 + (-2);
		buffer[_g42] = buffer[_g42] + buffer[eOffset23 + (-2)];
		var _g43 = eOffset04 + (-3);
		buffer[_g43] = buffer[_g43] + buffer[eOffset23 + (-3)];
		buffer[eOffset23 + (-2)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		buffer[eOffset23 + (-3)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = buffer[eOffset04 + (-4)] - buffer[eOffset23 + (-4)];
		k01_215 = buffer[eOffset04 + (-5)] - buffer[eOffset23 + (-5)];
		var _g44 = eOffset04 + (-4);
		buffer[_g44] = buffer[_g44] + buffer[eOffset23 + (-4)];
		var _g45 = eOffset04 + (-5);
		buffer[_g45] = buffer[_g45] + buffer[eOffset23 + (-5)];
		buffer[eOffset23 + (-4)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		buffer[eOffset23 + (-5)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		aOffset5 += 16;
		k00_205 = buffer[eOffset04 + (-6)] - buffer[eOffset23 + (-6)];
		k01_215 = buffer[eOffset04 + (-7)] - buffer[eOffset23 + (-7)];
		var _g46 = eOffset04 + (-6);
		buffer[_g46] = buffer[_g46] + buffer[eOffset23 + (-6)];
		var _g47 = eOffset04 + (-7);
		buffer[_g47] = buffer[_g47] + buffer[eOffset23 + (-7)];
		buffer[eOffset23 + (-6)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
		buffer[eOffset23 + (-7)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
		eOffset04 -= 8;
		eOffset23 -= 8;
		aOffset5 += 16;
	}
	var _g48 = 2;
	var _g110 = ld - 3 >> 1;
	while(_g48 < _g110) {
		var l = _g48++;
		var k0 = n >> l + 2;
		var k0_2 = k0 >> 1;
		var lim = 1 << l + 1;
		var _g49 = 0;
		while(_g49 < lim) {
			var d04 = n2 - 1 - k0 * _g49++;
			var k1 = 1 << l + 3;
			var aOffset6 = 0;
			var eOffset05 = d04;
			var eOffset24 = d04 + -k0_2;
			var i6 = (n >> l + 4 >> 2) + 1;
			while(--i6 > 0) {
				var k00_206 = buffer[eOffset05] - buffer[eOffset24];
				var k01_216 = buffer[eOffset05 + (-1)] - buffer[eOffset24 + (-1)];
				var _g50 = eOffset05;
				buffer[_g50] = buffer[_g50] + buffer[eOffset24];
				var _g51 = eOffset05 + (-1);
				buffer[_g51] = buffer[_g51] + buffer[eOffset24 + (-1)];
				buffer[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				buffer[eOffset24 + (-1)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = buffer[eOffset05 + (-2)] - buffer[eOffset24 + (-2)];
				k01_216 = buffer[eOffset05 + (-3)] - buffer[eOffset24 + (-3)];
				var _g52 = eOffset05 + (-2);
				buffer[_g52] = buffer[_g52] + buffer[eOffset24 + (-2)];
				var _g53 = eOffset05 + (-3);
				buffer[_g53] = buffer[_g53] + buffer[eOffset24 + (-3)];
				buffer[eOffset24 + (-2)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				buffer[eOffset24 + (-3)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = buffer[eOffset05 + (-4)] - buffer[eOffset24 + (-4)];
				k01_216 = buffer[eOffset05 + (-5)] - buffer[eOffset24 + (-5)];
				var _g54 = eOffset05 + (-4);
				buffer[_g54] = buffer[_g54] + buffer[eOffset24 + (-4)];
				var _g55 = eOffset05 + (-5);
				buffer[_g55] = buffer[_g55] + buffer[eOffset24 + (-5)];
				buffer[eOffset24 + (-4)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				buffer[eOffset24 + (-5)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				aOffset6 += k1;
				k00_206 = buffer[eOffset05 + (-6)] - buffer[eOffset24 + (-6)];
				k01_216 = buffer[eOffset05 + (-7)] - buffer[eOffset24 + (-7)];
				var _g56 = eOffset05 + (-6);
				buffer[_g56] = buffer[_g56] + buffer[eOffset24 + (-6)];
				var _g57 = eOffset05 + (-7);
				buffer[_g57] = buffer[_g57] + buffer[eOffset24 + (-7)];
				buffer[eOffset24 + (-6)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
				buffer[eOffset24 + (-7)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
				eOffset05 -= 8;
				eOffset24 -= 8;
				aOffset6 += k1;
			}
		}
	}
	var _g210 = ld - 3 >> 1;
	var _g310 = ld - 6;
	while(_g210 < _g310) {
		var l1 = _g210++;
		var k01 = n >> l1 + 2;
		var k11 = 1 << l1 + 3;
		var k0_21 = k01 >> 1;
		var lim1 = 1 << l1 + 1;
		var aOffset7 = 0;
		var i_off2 = n2 - 1;
		var r = (n >> l1 + 6) + 1;
		while(--r > 0) {
			var A0 = a[aOffset7];
			var A1 = a[aOffset7 + 1];
			var A2 = a[aOffset7 + k11];
			var A3 = a[aOffset7 + k11 + 1];
			var A4 = a[aOffset7 + k11 * 2];
			var A5 = a[aOffset7 + k11 * 2 + 1];
			var A6 = a[aOffset7 + k11 * 3];
			var A7 = a[aOffset7 + k11 * 3 + 1];
			var eeOffset02 = i_off2;
			var eeOffset22 = i_off2 + -k0_21;
			var i7 = lim1 + 1;
			while(--i7 > 0) {
				var k00 = buffer[eeOffset02] - buffer[eeOffset22];
				var k111 = buffer[eeOffset02 + (-1)] - buffer[eeOffset22 + (-1)];
				buffer[eeOffset02] = buffer[eeOffset02] + buffer[eeOffset22];
				buffer[eeOffset02 + (-1)] = buffer[eeOffset02 + (-1)] + buffer[eeOffset22 + (-1)];
				buffer[eeOffset22] = k00 * A0 - k111 * A1;
				buffer[eeOffset22 + (-1)] = k111 * A0 + k00 * A1;
				k00 = buffer[eeOffset02 + (-2)] - buffer[eeOffset22 + (-2)];
				k111 = buffer[eeOffset02 + (-3)] - buffer[eeOffset22 + (-3)];
				buffer[eeOffset02 + (-2)] = buffer[eeOffset02 + (-2)] + buffer[eeOffset22 + (-2)];
				buffer[eeOffset02 + (-3)] = buffer[eeOffset02 + (-3)] + buffer[eeOffset22 + (-3)];
				buffer[eeOffset22 + (-2)] = k00 * A2 - k111 * A3;
				buffer[eeOffset22 + (-3)] = k111 * A2 + k00 * A3;
				k00 = buffer[eeOffset02 + (-4)] - buffer[eeOffset22 + (-4)];
				k111 = buffer[eeOffset02 + (-5)] - buffer[eeOffset22 + (-5)];
				buffer[eeOffset02 + (-4)] = buffer[eeOffset02 + (-4)] + buffer[eeOffset22 + (-4)];
				buffer[eeOffset02 + (-5)] = buffer[eeOffset02 + (-5)] + buffer[eeOffset22 + (-5)];
				buffer[eeOffset22 + (-4)] = k00 * A4 - k111 * A5;
				buffer[eeOffset22 + (-5)] = k111 * A4 + k00 * A5;
				k00 = buffer[eeOffset02 + (-6)] - buffer[eeOffset22 + (-6)];
				k111 = buffer[eeOffset02 + (-7)] - buffer[eeOffset22 + (-7)];
				buffer[eeOffset02 + (-6)] = buffer[eeOffset02 + (-6)] + buffer[eeOffset22 + (-6)];
				buffer[eeOffset02 + (-7)] = buffer[eeOffset02 + (-7)] + buffer[eeOffset22 + (-7)];
				buffer[eeOffset22 + (-6)] = k00 * A6 - k111 * A7;
				buffer[eeOffset22 + (-7)] = k111 * A6 + k00 * A7;
				eeOffset02 -= k01;
				eeOffset22 -= k01;
			}
			aOffset7 += k11 * 4;
			i_off2 -= 8;
		}
	}
	var i_off3 = n2 - 1;
	var A21 = a[n >> 3];
	var zOffset = i_off3;
	var baseOffset = i_off3 - 16 * (n >> 5);
	while(zOffset > baseOffset) {
		var t0 = buffer[zOffset];
		var t1 = buffer[zOffset + (-8)];
		buffer[zOffset + (-8)] = t0 - t1;
		buffer[zOffset] = t0 + t1;
		t0 = buffer[zOffset + (-1)];
		t1 = buffer[zOffset + (-9)];
		buffer[zOffset + (-9)] = t0 - t1;
		buffer[zOffset + (-1)] = t0 + t1;
		t0 = buffer[zOffset + (-2)];
		t1 = buffer[zOffset + (-10)];
		var k001 = t0 - t1;
		buffer[zOffset + (-2)] = t0 + t1;
		t0 = buffer[zOffset + (-3)];
		t1 = buffer[zOffset + (-11)];
		var k112 = t0 - t1;
		buffer[zOffset + (-3)] = t0 + t1;
		buffer[zOffset + (-10)] = (k001 + k112) * A21;
		buffer[zOffset + (-11)] = (k112 - k001) * A21;
		t0 = buffer[zOffset + (-4)];
		t1 = buffer[zOffset + (-12)];
		k001 = t1 - t0;
		buffer[zOffset + (-4)] = t0 + t1;
		t0 = buffer[zOffset + (-5)];
		t1 = buffer[zOffset + (-13)];
		k112 = t0 - t1;
		buffer[zOffset + (-5)] = t0 + t1;
		buffer[zOffset + (-12)] = k112;
		buffer[zOffset + (-13)] = k001;
		t0 = buffer[zOffset + (-6)];
		t1 = buffer[zOffset + (-14)];
		k001 = t1 - t0;
		buffer[zOffset + (-6)] = t0 + t1;
		t0 = buffer[zOffset + (-7)];
		t1 = buffer[zOffset + (-15)];
		k112 = t0 - t1;
		buffer[zOffset + (-7)] = t0 + t1;
		buffer[zOffset + (-14)] = (k001 + k112) * A21;
		buffer[zOffset + (-15)] = (k001 - k112) * A21;
		var t01 = buffer[zOffset];
		var t11 = buffer[zOffset + (-4)];
		var k002 = t01 - t11;
		var y0 = t01 + t11;
		t01 = buffer[zOffset + (-2)];
		t11 = buffer[zOffset + (-6)];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		buffer[zOffset] = y0 + y2;
		buffer[zOffset + (-2)] = y0 - y2;
		var k33 = buffer[zOffset + (-3)] - buffer[zOffset + (-7)];
		buffer[zOffset + (-4)] = k002 + k33;
		buffer[zOffset + (-6)] = k002 - k33;
		t01 = buffer[zOffset + (-1)];
		t11 = buffer[zOffset + (-5)];
		var k113 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = buffer[zOffset + (-3)] + buffer[zOffset + (-7)];
		buffer[zOffset + (-1)] = y1 + y3;
		buffer[zOffset + (-3)] = y1 - y3;
		buffer[zOffset + (-5)] = k113 - k22;
		buffer[zOffset + (-7)] = k113 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = buffer[zOffset1];
		var t12 = buffer[zOffset1 + (-4)];
		var k003 = t02 - t12;
		var y01 = t02 + t12;
		t02 = buffer[zOffset1 + (-2)];
		t12 = buffer[zOffset1 + (-6)];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		buffer[zOffset1] = y01 + y21;
		buffer[zOffset1 + (-2)] = y01 - y21;
		var k331 = buffer[zOffset1 + (-3)] - buffer[zOffset1 + (-7)];
		buffer[zOffset1 + (-4)] = k003 + k331;
		buffer[zOffset1 + (-6)] = k003 - k331;
		t02 = buffer[zOffset1 + (-1)];
		t12 = buffer[zOffset1 + (-5)];
		var k114 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = buffer[zOffset1 + (-3)] + buffer[zOffset1 + (-7)];
		buffer[zOffset1 + (-1)] = y11 + y31;
		buffer[zOffset1 + (-3)] = y11 - y31;
		buffer[zOffset1 + (-5)] = k114 - k221;
		buffer[zOffset1 + (-7)] = k114 + k221;
		zOffset -= 16;
	}
	var brOffset = 0;
	var dOffset01 = n4 - 4;
	var dOffset11 = n2 - 4;
	while(dOffset01 >= 0) {
		var k4 = bitReverse[brOffset];
		buf2[dOffset11 + 3] = buffer[k4];
		buf2[dOffset11 + 2] = buffer[k4 + 1];
		buf2[dOffset01 + 3] = buffer[k4 + 2];
		buf2[dOffset01 + 2] = buffer[k4 + 3];
		k4 = bitReverse[brOffset + 1];
		buf2[dOffset11 + 1] = buffer[k4];
		buf2[dOffset11] = buffer[k4 + 1];
		buf2[dOffset01 + 1] = buffer[k4 + 2];
		buf2[dOffset01] = buffer[k4 + 3];
		dOffset01 -= 4;
		dOffset11 -= 4;
		brOffset += 2;
	}
	var cOffset = 0;
	var dOffset2 = 0;
	var eOffset3 = n2 - 4;
	while(dOffset2 < eOffset3) {
		var a02 = buf2[dOffset2] - buf2[eOffset3 + 2];
		var a11 = buf2[dOffset2 + 1] + buf2[eOffset3 + 3];
		var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
		var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
		var b2 = buf2[dOffset2] + buf2[eOffset3 + 2];
		var b3 = buf2[dOffset2 + 1] - buf2[eOffset3 + 3];
		buf2[dOffset2] = b2 + b0;
		buf2[dOffset2 + 1] = b3 + b1;
		buf2[eOffset3 + 2] = b2 - b0;
		buf2[eOffset3 + 3] = b1 - b3;
		a02 = buf2[dOffset2 + 2] - buf2[eOffset3];
		a11 = buf2[dOffset2 + 3] + buf2[eOffset3 + 1];
		b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
		b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
		b2 = buf2[dOffset2 + 2] + buf2[eOffset3];
		b3 = buf2[dOffset2 + 3] - buf2[eOffset3 + 1];
		buf2[dOffset2 + 2] = b2 + b0;
		buf2[dOffset2 + 3] = b3 + b1;
		buf2[eOffset3] = b2 - b0;
		buf2[eOffset3 + 1] = b1 - b3;
		cOffset += 4;
		dOffset2 += 4;
		eOffset3 -= 4;
	}
	var bOffset = n2 - 8;
	var eOffset4 = n2 - 8;
	var dOffset02 = 0;
	var dOffset12 = n2 - 4;
	var dOffset21 = n2;
	var dOffset3 = n - 4;
	while(eOffset4 >= 0) {
		var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
		var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
		buffer[dOffset02] = p3;
		buffer[dOffset12 + 3] = -p3;
		buffer[dOffset21] = p2;
		buffer[dOffset3 + 3] = p2;
		var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
		var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
		buffer[dOffset02 + 1] = p1;
		buffer[dOffset12 + 2] = -p1;
		buffer[dOffset21 + 1] = p0;
		buffer[dOffset3 + 2] = p0;
		p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
		p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
		buffer[dOffset02 + 2] = p3;
		buffer[dOffset12 + 1] = -p3;
		buffer[dOffset21 + 2] = p2;
		buffer[dOffset3 + 1] = p2;
		p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
		p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
		buffer[dOffset02 + 3] = p1;
		buffer[dOffset12] = -p1;
		buffer[dOffset21 + 3] = p0;
		buffer[dOffset3] = p0;
		bOffset -= 8;
		eOffset4 -= 8;
		dOffset02 += 4;
		dOffset21 += 4;
		dOffset12 -= 4;
		dOffset3 -= 4;
	}
};
kha_audio2_ogg_tools_Mdct.step3Iter0Loop = function(n,e,i_off,k_off,a) {
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var aOffset = 0;
	var i = (n >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eeOffset0] - e[eeOffset2];
		var k01_21 = e[eeOffset0 + (-1)] - e[eeOffset2 + (-1)];
		var _g = eeOffset0;
		e[_g] = e[_g] + e[eeOffset2];
		var _g1 = eeOffset0 + (-1);
		e[_g1] = e[_g1] + e[eeOffset2 + (-1)];
		e[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-2)] - e[eeOffset2 + (-2)];
		k01_21 = e[eeOffset0 + (-3)] - e[eeOffset2 + (-3)];
		var _g2 = eeOffset0 + (-2);
		e[_g2] = e[_g2] + e[eeOffset2 + (-2)];
		var _g3 = eeOffset0 + (-3);
		e[_g3] = e[_g3] + e[eeOffset2 + (-3)];
		e[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-4)] - e[eeOffset2 + (-4)];
		k01_21 = e[eeOffset0 + (-5)] - e[eeOffset2 + (-5)];
		var _g4 = eeOffset0 + (-4);
		e[_g4] = e[_g4] + e[eeOffset2 + (-4)];
		var _g5 = eeOffset0 + (-5);
		e[_g5] = e[_g5] + e[eeOffset2 + (-5)];
		e[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		k00_20 = e[eeOffset0 + (-6)] - e[eeOffset2 + (-6)];
		k01_21 = e[eeOffset0 + (-7)] - e[eeOffset2 + (-7)];
		var _g6 = eeOffset0 + (-6);
		e[_g6] = e[_g6] + e[eeOffset2 + (-6)];
		var _g7 = eeOffset0 + (-7);
		e[_g7] = e[_g7] + e[eeOffset2 + (-7)];
		e[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += 8;
		eeOffset0 -= 8;
		eeOffset2 -= 8;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerRLoop = function(lim,e,d0,k_off,a,k1) {
	var aOffset = 0;
	var eOffset0 = d0;
	var eOffset2 = d0 + k_off;
	var i = (lim >> 2) + 1;
	while(--i > 0) {
		var k00_20 = e[eOffset0] - e[eOffset2];
		var k01_21 = e[eOffset0 + (-1)] - e[eOffset2 + (-1)];
		var _g = eOffset0;
		e[_g] = e[_g] + e[eOffset2];
		var _g1 = eOffset0 + (-1);
		e[_g1] = e[_g1] + e[eOffset2 + (-1)];
		e[eOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-2)] - e[eOffset2 + (-2)];
		k01_21 = e[eOffset0 + (-3)] - e[eOffset2 + (-3)];
		var _g2 = eOffset0 + (-2);
		e[_g2] = e[_g2] + e[eOffset2 + (-2)];
		var _g3 = eOffset0 + (-3);
		e[_g3] = e[_g3] + e[eOffset2 + (-3)];
		e[eOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-4)] - e[eOffset2 + (-4)];
		k01_21 = e[eOffset0 + (-5)] - e[eOffset2 + (-5)];
		var _g4 = eOffset0 + (-4);
		e[_g4] = e[_g4] + e[eOffset2 + (-4)];
		var _g5 = eOffset0 + (-5);
		e[_g5] = e[_g5] + e[eOffset2 + (-5)];
		e[eOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		aOffset += k1;
		k00_20 = e[eOffset0 + (-6)] - e[eOffset2 + (-6)];
		k01_21 = e[eOffset0 + (-7)] - e[eOffset2 + (-7)];
		var _g6 = eOffset0 + (-6);
		e[_g6] = e[_g6] + e[eOffset2 + (-6)];
		var _g7 = eOffset0 + (-7);
		e[_g7] = e[_g7] + e[eOffset2 + (-7)];
		e[eOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
		e[eOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
		eOffset0 -= 8;
		eOffset2 -= 8;
		aOffset += k1;
	}
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoop = function(n,e,i_off,k_off,a,aOffset0,aOffset1,k0) {
	var A0 = a[aOffset0];
	var A1 = a[aOffset0 + 1];
	var A2 = a[aOffset0 + aOffset1];
	var A3 = a[aOffset0 + aOffset1 + 1];
	var A4 = a[aOffset0 + aOffset1 * 2];
	var A5 = a[aOffset0 + aOffset1 * 2 + 1];
	var A6 = a[aOffset0 + aOffset1 * 3];
	var A7 = a[aOffset0 + aOffset1 * 3 + 1];
	var eeOffset0 = i_off;
	var eeOffset2 = i_off + k_off;
	var i = n + 1;
	while(--i > 0) {
		var k00 = e[eeOffset0] - e[eeOffset2];
		var k11 = e[eeOffset0 + (-1)] - e[eeOffset2 + (-1)];
		e[eeOffset0] = e[eeOffset0] + e[eeOffset2];
		e[eeOffset0 + (-1)] = e[eeOffset0 + (-1)] + e[eeOffset2 + (-1)];
		e[eeOffset2] = k00 * A0 - k11 * A1;
		e[eeOffset2 + (-1)] = k11 * A0 + k00 * A1;
		k00 = e[eeOffset0 + (-2)] - e[eeOffset2 + (-2)];
		k11 = e[eeOffset0 + (-3)] - e[eeOffset2 + (-3)];
		e[eeOffset0 + (-2)] = e[eeOffset0 + (-2)] + e[eeOffset2 + (-2)];
		e[eeOffset0 + (-3)] = e[eeOffset0 + (-3)] + e[eeOffset2 + (-3)];
		e[eeOffset2 + (-2)] = k00 * A2 - k11 * A3;
		e[eeOffset2 + (-3)] = k11 * A2 + k00 * A3;
		k00 = e[eeOffset0 + (-4)] - e[eeOffset2 + (-4)];
		k11 = e[eeOffset0 + (-5)] - e[eeOffset2 + (-5)];
		e[eeOffset0 + (-4)] = e[eeOffset0 + (-4)] + e[eeOffset2 + (-4)];
		e[eeOffset0 + (-5)] = e[eeOffset0 + (-5)] + e[eeOffset2 + (-5)];
		e[eeOffset2 + (-4)] = k00 * A4 - k11 * A5;
		e[eeOffset2 + (-5)] = k11 * A4 + k00 * A5;
		k00 = e[eeOffset0 + (-6)] - e[eeOffset2 + (-6)];
		k11 = e[eeOffset0 + (-7)] - e[eeOffset2 + (-7)];
		e[eeOffset0 + (-6)] = e[eeOffset0 + (-6)] + e[eeOffset2 + (-6)];
		e[eeOffset0 + (-7)] = e[eeOffset0 + (-7)] + e[eeOffset2 + (-7)];
		e[eeOffset2 + (-6)] = k00 * A6 - k11 * A7;
		e[eeOffset2 + (-7)] = k11 * A6 + k00 * A7;
		eeOffset0 -= k0;
		eeOffset2 -= k0;
	}
};
kha_audio2_ogg_tools_Mdct.iter54 = function(e,zOffset) {
	var t0 = e[zOffset];
	var t1 = e[zOffset + (-4)];
	var k00 = t0 - t1;
	var y0 = t0 + t1;
	t0 = e[zOffset + (-2)];
	t1 = e[zOffset + (-6)];
	var y2 = t0 + t1;
	var k22 = t0 - t1;
	e[zOffset] = y0 + y2;
	e[zOffset + (-2)] = y0 - y2;
	var k33 = e[zOffset + (-3)] - e[zOffset + (-7)];
	e[zOffset + (-4)] = k00 + k33;
	e[zOffset + (-6)] = k00 - k33;
	t0 = e[zOffset + (-1)];
	t1 = e[zOffset + (-5)];
	var k11 = t0 - t1;
	var y1 = t0 + t1;
	var y3 = e[zOffset + (-3)] + e[zOffset + (-7)];
	e[zOffset + (-1)] = y1 + y3;
	e[zOffset + (-3)] = y1 - y3;
	e[zOffset + (-5)] = k11 - k22;
	e[zOffset + (-7)] = k11 + k22;
};
kha_audio2_ogg_tools_Mdct.step3InnerSLoopLd654 = function(n,e,i_off,a,baseN) {
	var A2 = a[baseN >> 3];
	var zOffset = i_off;
	var baseOffset = i_off - 16 * n;
	while(zOffset > baseOffset) {
		var t0 = e[zOffset];
		var t1 = e[zOffset + (-8)];
		e[zOffset + (-8)] = t0 - t1;
		e[zOffset] = t0 + t1;
		t0 = e[zOffset + (-1)];
		t1 = e[zOffset + (-9)];
		e[zOffset + (-9)] = t0 - t1;
		e[zOffset + (-1)] = t0 + t1;
		t0 = e[zOffset + (-2)];
		t1 = e[zOffset + (-10)];
		var k00 = t0 - t1;
		e[zOffset + (-2)] = t0 + t1;
		t0 = e[zOffset + (-3)];
		t1 = e[zOffset + (-11)];
		var k11 = t0 - t1;
		e[zOffset + (-3)] = t0 + t1;
		e[zOffset + (-10)] = (k00 + k11) * A2;
		e[zOffset + (-11)] = (k11 - k00) * A2;
		t0 = e[zOffset + (-4)];
		t1 = e[zOffset + (-12)];
		k00 = t1 - t0;
		e[zOffset + (-4)] = t0 + t1;
		t0 = e[zOffset + (-5)];
		t1 = e[zOffset + (-13)];
		k11 = t0 - t1;
		e[zOffset + (-5)] = t0 + t1;
		e[zOffset + (-12)] = k11;
		e[zOffset + (-13)] = k00;
		t0 = e[zOffset + (-6)];
		t1 = e[zOffset + (-14)];
		k00 = t1 - t0;
		e[zOffset + (-6)] = t0 + t1;
		t0 = e[zOffset + (-7)];
		t1 = e[zOffset + (-15)];
		k11 = t0 - t1;
		e[zOffset + (-7)] = t0 + t1;
		e[zOffset + (-14)] = (k00 + k11) * A2;
		e[zOffset + (-15)] = (k00 - k11) * A2;
		var t01 = e[zOffset];
		var t11 = e[zOffset + (-4)];
		var k001 = t01 - t11;
		var y0 = t01 + t11;
		t01 = e[zOffset + (-2)];
		t11 = e[zOffset + (-6)];
		var y2 = t01 + t11;
		var k22 = t01 - t11;
		e[zOffset] = y0 + y2;
		e[zOffset + (-2)] = y0 - y2;
		var k33 = e[zOffset + (-3)] - e[zOffset + (-7)];
		e[zOffset + (-4)] = k001 + k33;
		e[zOffset + (-6)] = k001 - k33;
		t01 = e[zOffset + (-1)];
		t11 = e[zOffset + (-5)];
		var k111 = t01 - t11;
		var y1 = t01 + t11;
		var y3 = e[zOffset + (-3)] + e[zOffset + (-7)];
		e[zOffset + (-1)] = y1 + y3;
		e[zOffset + (-3)] = y1 - y3;
		e[zOffset + (-5)] = k111 - k22;
		e[zOffset + (-7)] = k111 + k22;
		var zOffset1 = zOffset - 8;
		var t02 = e[zOffset1];
		var t12 = e[zOffset1 + (-4)];
		var k002 = t02 - t12;
		var y01 = t02 + t12;
		t02 = e[zOffset1 + (-2)];
		t12 = e[zOffset1 + (-6)];
		var y21 = t02 + t12;
		var k221 = t02 - t12;
		e[zOffset1] = y01 + y21;
		e[zOffset1 + (-2)] = y01 - y21;
		var k331 = e[zOffset1 + (-3)] - e[zOffset1 + (-7)];
		e[zOffset1 + (-4)] = k002 + k331;
		e[zOffset1 + (-6)] = k002 - k331;
		t02 = e[zOffset1 + (-1)];
		t12 = e[zOffset1 + (-5)];
		var k112 = t02 - t12;
		var y11 = t02 + t12;
		var y31 = e[zOffset1 + (-3)] + e[zOffset1 + (-7)];
		e[zOffset1 + (-1)] = y11 + y31;
		e[zOffset1 + (-3)] = y11 - y31;
		e[zOffset1 + (-5)] = k112 - k221;
		e[zOffset1 + (-7)] = k112 + k221;
		zOffset -= 16;
	}
};
var kha_audio2_ogg_vorbis_Reader = function(input,seekFunc,inputLength) {
	this.seekFunc = seekFunc;
	this.inputLength = inputLength;
	this.decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	this.decoder.setupSampleNumber(seekFunc,inputLength);
	this.loopStart = this.get_header().comment.get_loopStart();
	this.loopLength = this.get_header().comment.get_loopLength();
};
$hxClasses["kha.audio2.ogg.vorbis.Reader"] = kha_audio2_ogg_vorbis_Reader;
kha_audio2_ogg_vorbis_Reader.__name__ = "kha.audio2.ogg.vorbis.Reader";
kha_audio2_ogg_vorbis_Reader.openFromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	var bytes1 = input;
	return new kha_audio2_ogg_vorbis_Reader(input,function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
};
kha_audio2_ogg_vorbis_Reader.seekBytes = function(bytes,pos) {
	bytes.set_position(pos);
};
kha_audio2_ogg_vorbis_Reader.readAll = function(bytes,output,useFloat) {
	if(useFloat == null) {
		useFloat = false;
	}
	var input = new haxe_io_BytesInput(bytes);
	var decoder = kha_audio2_ogg_vorbis_VorbisDecoder.start(input);
	var bytes1 = input;
	decoder.setupSampleNumber(function(pos) {
		kha_audio2_ogg_vorbis_Reader.seekBytes(bytes1,pos);
	},bytes.length);
	var header = decoder.header;
	var buffer = new Float32Array(4096 * header.channel);
	while(true) {
		var n = decoder.read(buffer,4096,header.channel,header.sampleRate,useFloat);
		var _g = 0;
		var _g1 = n * header.channel;
		while(_g < _g1) output.writeFloat(buffer[_g++]);
		if(n == 0) {
			break;
		}
	}
	return decoder.header;
};
kha_audio2_ogg_vorbis_Reader.prototype = {
	decoder: null
	,get_header: function() {
		return this.decoder.header;
	}
	,get_totalSample: function() {
		return this.decoder.totalSample;
	}
	,get_totalMillisecond: function() {
		return _$UInt_UInt_$Impl_$.toFloat(this.decoder.totalSample) / _$UInt_UInt_$Impl_$.toFloat(this.get_header().sampleRate) * 1000;
	}
	,get_currentSample: function() {
		return this.decoder.currentSample;
	}
	,set_currentSample: function(value) {
		this.decoder.seek(this.seekFunc,this.inputLength,value);
		return this.decoder.currentSample;
	}
	,get_currentMillisecond: function() {
		return _$UInt_UInt_$Impl_$.toFloat(this.get_currentSample()) / _$UInt_UInt_$Impl_$.toFloat(this.get_header().sampleRate) * 1000;
	}
	,set_currentMillisecond: function(value) {
		this.set_currentSample(Math.floor(_$UInt_UInt_$Impl_$.toFloat(this.get_header().sampleRate) * (value / 1000)));
		return this.get_currentMillisecond();
	}
	,loopStart: null
	,loopLength: null
	,seekFunc: null
	,inputLength: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if(useFloat == null) {
			useFloat = false;
		}
		this.decoder.ensurePosition(this.seekFunc);
		if(samples == null) {
			samples = this.decoder.totalSample;
		}
		if(channels == null) {
			channels = this.get_header().channel;
		}
		if(sampleRate == null) {
			sampleRate = this.get_header().sampleRate;
		}
		return this.decoder.read(output,samples,channels,sampleRate,useFloat);
	}
	,clone: function() {
		var reader = Object.create(kha_audio2_ogg_vorbis_Reader.prototype);
		reader.seekFunc = this.seekFunc;
		reader.inputLength = this.inputLength;
		reader.decoder = this.decoder.clone(this.seekFunc);
		reader.loopStart = this.loopStart;
		reader.loopLength = this.loopLength;
		return reader;
	}
	,sampleToMillisecond: function(samples) {
		return _$UInt_UInt_$Impl_$.toFloat(samples) / _$UInt_UInt_$Impl_$.toFloat(this.get_header().sampleRate) * 1000;
	}
	,millisecondToSample: function(millseconds) {
		return Math.floor(_$UInt_UInt_$Impl_$.toFloat(this.get_header().sampleRate) * (millseconds / 1000));
	}
	,__class__: kha_audio2_ogg_vorbis_Reader
	,__properties__: {set_currentMillisecond:"set_currentMillisecond",get_currentMillisecond:"get_currentMillisecond",set_currentSample:"set_currentSample",get_currentSample:"get_currentSample",get_totalMillisecond:"get_totalMillisecond",get_totalSample:"get_totalSample",get_header:"get_header"}
};
var kha_audio2_ogg_vorbis_VorbisDecodeState = function(input) {
	this.nextSeg = 0;
	this.firstDecode = false;
	this.bytesInSeg = 0;
	this.validBits = 0;
	this.input = input;
	this.inputPosition = 0;
	this.page = new kha_audio2_ogg_vorbis_data_Page();
	kha_audio2_ogg_tools_Crc32.init();
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecodeState"] = kha_audio2_ogg_vorbis_VorbisDecodeState;
kha_audio2_ogg_vorbis_VorbisDecodeState.__name__ = "kha.audio2.ogg.vorbis.VorbisDecodeState";
kha_audio2_ogg_vorbis_VorbisDecodeState.prototype = {
	page: null
	,eof: null
	,pFirst: null
	,pLast: null
	,validBits: null
	,inputPosition: null
	,input: null
	,discardSamplesDeferred: null
	,segments: null
	,bytesInSeg: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,currentSample: null
	,previousWindow: null
	,previousLength: null
	,finalY: null
	,firstDecode: null
	,nextSeg: null
	,acc: null
	,lastSeg: null
	,lastSegWhich: null
	,endSegWithKnownLoc: null
	,knownLocForPacket: null
	,error: null
	,currentLoc: null
	,currentLocValid: null
	,firstAudioPageOffset: null
	,setup: function(loc0,loc1) {
		this.inputPosition += 1;
		var segmentCount = this.input.readByte();
		this.inputPosition += segmentCount;
		var vec = new Array(segmentCount);
		var _g = 0;
		while(_g < segmentCount) vec[_g++] = this.input.readByte();
		this.segments = vec;
		this.endSegWithKnownLoc = -2;
		if(loc0 != -1 || loc1 != -1) {
			var i = segmentCount - 1;
			while(i >= 0) {
				if(this.segments[i] < 255) {
					break;
				}
				if(i >= 0) {
					this.endSegWithKnownLoc = i;
					this.knownLocForPacket = loc0;
				}
				--i;
			}
		}
		if(this.firstDecode) {
			var len = 0;
			var p = new kha_audio2_ogg_vorbis_data_ProbedPage();
			var _g1 = 0;
			while(_g1 < segmentCount) len += this.segments[_g1++];
			len += 27 + segmentCount;
			p.pageStart = this.firstAudioPageOffset;
			p.pageEnd = p.pageStart + len;
			p.firstDecodedSample = 0;
			p.lastDecodedSample = loc0;
			this.pFirst = p;
		}
		this.nextSeg = 0;
	}
	,clone: function(seekFunc) {
		var state = Object.create(kha_audio2_ogg_vorbis_VorbisDecodeState.prototype);
		seekFunc(this.inputPosition);
		state.input = this.input;
		state.eof = this.eof;
		state.validBits = this.validBits;
		state.discardSamplesDeferred = this.discardSamplesDeferred;
		state.firstDecode = this.firstDecode;
		state.nextSeg = this.nextSeg;
		state.bytesInSeg = this.bytesInSeg;
		state.acc = state.acc;
		state.lastSeg = this.lastSeg;
		state.lastSegWhich = this.lastSegWhich;
		state.currentLoc = this.currentLoc;
		state.currentLocValid = this.currentLocValid;
		state.inputPosition = this.inputPosition;
		state.firstAudioPageOffset = this.firstAudioPageOffset;
		state.error = this.error;
		state.segments = this.segments;
		state.pFirst = this.pFirst;
		state.pLast = this.pLast;
		state.page = this.page.clone();
		return state;
	}
	,next: function() {
		if(this.lastSeg) {
			return 0;
		}
		if(this.nextSeg == -1) {
			this.lastSegWhich = this.segments.length - 1;
			try {
				this.page.start(this);
			} catch( e ) {
				haxe_CallStack.lastException = e;
				var e1 = ((e) instanceof js__$Boot_HaxeError) ? e.val : e;
				if(((e1) instanceof kha_audio2_ogg_vorbis_data_ReaderError)) {
					this.lastSeg = true;
					this.error = e1;
					return 0;
				} else {
					throw e;
				}
			}
			if((this.page.flag & 1) == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 171, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "next"}));
			}
		}
		var len = this.segments[this.nextSeg++];
		if(len < 255) {
			this.lastSeg = true;
			this.lastSegWhich = this.nextSeg - 1;
		}
		if(this.nextSeg >= this.segments.length) {
			this.nextSeg = -1;
		}
		this.bytesInSeg = len;
		return len;
	}
	,startPacket: function() {
		while(this.nextSeg == -1) {
			this.page.start(this);
			if((this.page.flag & 1) != 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 193, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "startPacket"}));
			}
		}
		this.lastSeg = false;
		this.validBits = 0;
		this.bytesInSeg = 0;
	}
	,maybeStartPacket: function() {
		if(this.nextSeg == -1) {
			var eof = false;
			var x;
			try {
				this.inputPosition += 1;
				x = this.input.readByte();
			} catch( e ) {
				haxe_CallStack.lastException = e;
				if(((((e) instanceof js__$Boot_HaxeError) ? e.val : e) instanceof haxe_io_Eof)) {
					eof = true;
					x = 0;
				} else {
					throw e;
				}
			}
			if(eof) {
				return false;
			}
			var tmp;
			var tmp1;
			var tmp2;
			if(x == 79) {
				this.inputPosition += 1;
				tmp2 = this.input.readByte() != 103;
			} else {
				tmp2 = true;
			}
			if(!tmp2) {
				this.inputPosition += 1;
				tmp1 = this.input.readByte() != 103;
			} else {
				tmp1 = true;
			}
			if(!tmp1) {
				this.inputPosition += 1;
				tmp = this.input.readByte() != 83;
			} else {
				tmp = true;
			}
			if(tmp) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 218, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "maybeStartPacket"}));
			}
			this.page.startWithoutCapturePattern(this);
		}
		this.startPacket();
		return true;
	}
	,readBits: function(n) {
		if(this.validBits < 0) {
			return 0;
		} else if(this.validBits < n) {
			if(n > 24) {
				return this.readBits(24) + (this.readBits(n - 24) << 24);
			} else {
				if(this.validBits == 0) {
					this.acc = 0;
				}
				while(true) {
					if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
						this.validBits = -1;
						break;
					} else {
						this.bytesInSeg--;
						this.inputPosition += 1;
						this.acc = this.acc + (this.input.readByte() << this.validBits);
						this.validBits += 8;
					}
					if(!(this.validBits < n)) {
						break;
					}
				}
				if(this.validBits < 0) {
					return 0;
				} else {
					var z = this.acc & (1 << n) - 1;
					this.acc = this.acc >>> n;
					this.validBits -= n;
					return z;
				}
			}
		} else {
			var z1 = this.acc & (1 << n) - 1;
			this.acc = this.acc >>> n;
			this.validBits -= n;
			return z1;
		}
	}
	,readPacketRaw: function() {
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			return -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			return this.input.readByte();
		}
	}
	,readPacket: function() {
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		return x;
	}
	,flushPacket: function() {
		while(this.bytesInSeg != 0 || !this.lastSeg && this.next() != 0) {
			this.bytesInSeg--;
			this.inputPosition += 1;
			this.input.readByte();
		}
	}
	,vorbisValidate: function() {
		var header = new haxe_io_Bytes(new ArrayBuffer(6));
		var x;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x = this.input.readByte();
		}
		this.validBits = 0;
		header.b[0] = x;
		var x1;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x1 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x1 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[1] = x1;
		var x2;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x2 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x2 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[2] = x2;
		var x3;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x3 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x3 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[3] = x3;
		var x4;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x4 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x4 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[4] = x4;
		var x5;
		if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
			x5 = -1;
		} else {
			this.bytesInSeg--;
			this.inputPosition += 1;
			x5 = this.input.readByte();
		}
		this.validBits = 0;
		header.b[5] = x5;
		if(header.toString() != "vorbis") {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
		}
	}
	,firstPageValidate: function() {
		if(this.segments.length != 1) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"segmentCount",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 308, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
		if(this.segments[0] != 30) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 311, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "firstPageValidate"}));
		}
	}
	,startFirstDecode: function() {
		this.firstAudioPageOffset = this.inputPosition;
		this.firstDecode = true;
	}
	,capturePattern: function() {
		var tmp;
		var tmp1;
		var tmp2;
		this.inputPosition += 1;
		if(this.input.readByte() == 79) {
			this.inputPosition += 1;
			tmp2 = this.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			this.inputPosition += 1;
			tmp1 = this.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			this.inputPosition += 1;
			tmp = this.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 324, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
	}
	,skip: function(len) {
		this.inputPosition += len;
		var vec = new Array(len);
		var _g = 0;
		while(_g < len) vec[_g++] = this.input.readByte();
	}
	,prepHuffman: function() {
		if(this.validBits <= 24) {
			if(this.validBits == 0) {
				this.acc = 0;
			}
			while(true) {
				if(this.bytesInSeg == 0 && (this.lastSeg || this.next() == 0)) {
					return;
				} else {
					this.bytesInSeg--;
					this.inputPosition += 1;
					this.acc = this.acc + (this.input.readByte() << this.validBits);
					this.validBits += 8;
				}
				if(!(this.validBits <= 24)) {
					break;
				}
			}
		}
	}
	,decode: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		var val;
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = this.decodeScalarRaw(c);
		}
		if(c.sparse) {
			val = c.sortedValues[val];
		}
		return val;
	}
	,decodeRaw: function(c) {
		if(this.validBits < 10) {
			this.prepHuffman();
		}
		var i = c.fastHuffman[this.acc & 1023];
		if(i >= 0) {
			var l = c.codewordLengths[i];
			this.acc = this.acc >>> l;
			this.validBits -= l;
			if(this.validBits < 0) {
				this.validBits = 0;
				return -1;
			} else {
				return i;
			}
		} else {
			return this.decodeScalarRaw(c);
		}
	}
	,isLastByte: function() {
		if(this.bytesInSeg == 0) {
			return this.lastSeg;
		} else {
			return false;
		}
	}
	,finishDecodePacket: function(previousLength,n,r) {
		var left = r.left.start;
		var currentLocValid = false;
		var n2 = n >> 1;
		if(this.firstDecode) {
			this.currentLoc = -n2;
			this.discardSamplesDeferred = n - r.right.end;
			currentLocValid = true;
			this.firstDecode = false;
		} else if(this.discardSamplesDeferred != 0) {
			r.left.start += this.discardSamplesDeferred;
			left = r.left.start;
			this.discardSamplesDeferred = 0;
		}
		if(this.lastSegWhich == this.endSegWithKnownLoc) {
			if(currentLocValid && (this.page.flag & 4) != 0) {
				var currentEnd = this.knownLocForPacket - (n - r.right.end);
				if(currentEnd < this.currentLoc + r.right.end) {
					var len = currentEnd < this.currentLoc ? 0 : currentEnd - this.currentLoc;
					len += r.left.start;
					this.currentLoc += len;
					return { len : len, left : left, right : r.right.start};
				}
			}
			this.currentLoc = this.knownLocForPacket - (n2 - r.left.start);
			currentLocValid = true;
		}
		if(currentLocValid) {
			this.currentLoc += r.right.start - r.left.start;
		}
		return { len : r.right.end, left : left, right : r.right.start};
	}
	,readInt32: function() {
		this.inputPosition += 4;
		return this.input.readInt32();
	}
	,readByte: function() {
		this.inputPosition += 1;
		return this.input.readByte();
	}
	,read: function(n) {
		this.inputPosition += n;
		var vec = new Array(n);
		var _g = 0;
		while(_g < n) vec[_g++] = this.input.readByte();
		return vec;
	}
	,readBytes: function(n) {
		this.inputPosition += n;
		return this.input.read(n);
	}
	,readString: function(n) {
		this.inputPosition += n;
		return this.input.readString(n);
	}
	,getSampleNumber: function(seekFunc,inputLength) {
		var restoreOffset = this.inputPosition;
		var previousSafe = _$UInt_UInt_$Impl_$.gte(inputLength,65536) && _$UInt_UInt_$Impl_$.gte(inputLength - 65536,this.firstAudioPageOffset) ? inputLength - 65536 : this.firstAudioPageOffset;
		seekFunc(this.inputPosition = previousSafe);
		var end = 0;
		var last = false;
		var _g = this.findPage(seekFunc,inputLength);
		switch(_g._hx_index) {
		case 0:
			end = _g.end;
			last = _g.last;
			break;
		case 1:
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		var lastPageLoc = this.inputPosition;
		_hx_loop1: while(!last) {
			seekFunc(this.inputPosition = end);
			var _g3 = this.findPage(seekFunc,inputLength);
			switch(_g3._hx_index) {
			case 0:
				end = _g3.end;
				last = _g3.last;
				break;
			case 1:
				break _hx_loop1;
			}
			previousSafe = lastPageLoc + 1;
			lastPageLoc = this.inputPosition;
		}
		seekFunc(this.inputPosition = lastPageLoc);
		this.inputPosition += 6;
		var vec = new Array(6);
		var _g1 = 0;
		while(_g1 < 6) vec[_g1++] = this.input.readByte();
		this.inputPosition += 4;
		var lo = this.input.readInt32();
		this.inputPosition += 4;
		var hi = this.input.readInt32();
		if(lo == -1 && hi == -1 || hi > 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 553, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "getSampleNumber"}));
		}
		this.pLast = new kha_audio2_ogg_vorbis_data_ProbedPage();
		this.pLast.pageStart = lastPageLoc;
		this.pLast.pageEnd = end;
		this.pLast.lastDecodedSample = lo;
		this.pLast.firstDecodedSample = null;
		this.pLast.afterPreviousPageStart = previousSafe;
		seekFunc(this.inputPosition = restoreOffset);
		return lo;
	}
	,forcePageResync: function() {
		this.nextSeg = -1;
	}
	,setInputOffset: function(seekFunc,n) {
		seekFunc(this.inputPosition = n);
	}
	,findPage: function(seekFunc,inputLength) {
		try {
			while(true) {
				this.inputPosition += 1;
				if(this.input.readByte() == 79) {
					var retryLoc = this.inputPosition;
					if(retryLoc - 25 > inputLength) {
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
					}
					var tmp;
					var tmp1;
					this.inputPosition += 1;
					if(this.input.readByte() == 103) {
						this.inputPosition += 1;
						tmp1 = this.input.readByte() != 103;
					} else {
						tmp1 = true;
					}
					if(!tmp1) {
						this.inputPosition += 1;
						tmp = this.input.readByte() != 83;
					} else {
						tmp = true;
					}
					if(tmp) {
						continue;
					}
					var header = new Array(27);
					header[0] = 79;
					header[1] = 103;
					header[2] = 103;
					header[3] = 83;
					this.inputPosition += 1;
					header[4] = this.input.readByte();
					this.inputPosition += 1;
					header[5] = this.input.readByte();
					this.inputPosition += 1;
					header[6] = this.input.readByte();
					this.inputPosition += 1;
					header[7] = this.input.readByte();
					this.inputPosition += 1;
					header[8] = this.input.readByte();
					this.inputPosition += 1;
					header[9] = this.input.readByte();
					this.inputPosition += 1;
					header[10] = this.input.readByte();
					this.inputPosition += 1;
					header[11] = this.input.readByte();
					this.inputPosition += 1;
					header[12] = this.input.readByte();
					this.inputPosition += 1;
					header[13] = this.input.readByte();
					this.inputPosition += 1;
					header[14] = this.input.readByte();
					this.inputPosition += 1;
					header[15] = this.input.readByte();
					this.inputPosition += 1;
					header[16] = this.input.readByte();
					this.inputPosition += 1;
					header[17] = this.input.readByte();
					this.inputPosition += 1;
					header[18] = this.input.readByte();
					this.inputPosition += 1;
					header[19] = this.input.readByte();
					this.inputPosition += 1;
					header[20] = this.input.readByte();
					this.inputPosition += 1;
					header[21] = this.input.readByte();
					this.inputPosition += 1;
					header[22] = this.input.readByte();
					this.inputPosition += 1;
					header[23] = this.input.readByte();
					this.inputPosition += 1;
					header[24] = this.input.readByte();
					this.inputPosition += 1;
					header[25] = this.input.readByte();
					this.inputPosition += 1;
					header[26] = this.input.readByte();
					if(header[4] != 0) {
						seekFunc(this.inputPosition = retryLoc);
						continue;
					}
					var goal = header[22] + (header[23] << 8) + (header[24] << 16) + (header[25] << 24);
					header[22] = 0;
					header[23] = 0;
					header[24] = 0;
					header[25] = 0;
					var crc = 0;
					var _g = 0;
					while(_g < 27) crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[header[_g++] ^ crc >>> 24];
					var len = 0;
					try {
						var _g1 = 0;
						var _g2 = header[26];
						while(_g1 < _g2) {
							++_g1;
							this.inputPosition += 1;
							var s = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[s ^ crc >>> 24];
							len += s;
						}
						var _g3 = 0;
						var _g4 = len;
						while(_g3 < _g4) {
							++_g3;
							this.inputPosition += 1;
							var byte = this.input.readByte();
							crc = crc << 8 ^ kha_audio2_ogg_tools_Crc32.table[byte ^ crc >>> 24];
						}
					} catch( e ) {
						haxe_CallStack.lastException = e;
						if(((((e) instanceof js__$Boot_HaxeError) ? e.val : e) instanceof haxe_io_Eof)) {
							return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
						} else {
							throw e;
						}
					}
					if(crc == goal) {
						var end = this.inputPosition;
						seekFunc(this.inputPosition = retryLoc - 1);
						return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.Found(end,(header[5] & 4) != 0);
					}
				}
			}
		} catch( e1 ) {
			haxe_CallStack.lastException = e1;
			if(((((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1) instanceof haxe_io_Eof)) {
				return kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound;
			} else {
				throw e1;
			}
		}
	}
	,analyzePage: function(seekFunc,h) {
		var z = new kha_audio2_ogg_vorbis_data_ProbedPage();
		var packetType = new Array(255);
		z.pageStart = this.inputPosition;
		this.inputPosition += 27;
		var vec = new Array(27);
		var _g = 0;
		while(_g < 27) vec[_g++] = this.input.readByte();
		var n = vec[26];
		this.inputPosition += n;
		var vec1 = new Array(n);
		var _g1 = 0;
		while(_g1 < n) vec1[_g1++] = this.input.readByte();
		var len = 0;
		var _g2 = 0;
		var _g11 = vec[26];
		while(_g2 < _g11) len += vec1[_g2++];
		z.pageEnd = z.pageStart + 27 + vec[26] + len;
		z.lastDecodedSample = vec[6] + (vec[7] << 8) + (vec[8] << 16) + (vec[9] << 16);
		if((vec[5] & 4) != 0) {
			z.firstDecodedSample = null;
			seekFunc(this.inputPosition = z.pageStart);
			return z;
		}
		var numPacket = 0;
		var packetStart = (vec[5] & 1) == 0;
		var modeCount = h.modes.length;
		var _g21 = 0;
		var _g3 = vec[26];
		while(_g21 < _g3) {
			var i = _g21++;
			if(packetStart) {
				if(vec1[i] == 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				this.inputPosition += 1;
				var n1 = this.input.readByte();
				if((n1 & 1) != 0) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				n1 >>= 1;
				var n2 = modeCount - 1;
				var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
				n1 &= (1 << (n2 < 16384 ? n2 < 16 ? log2_4[n2] : n2 < 512 ? 5 + log2_4[n2 >> 5] : 10 + log2_4[n2 >> 10] : n2 < 16777216 ? n2 < 524288 ? 15 + log2_4[n2 >> 15] : 20 + log2_4[n2 >> 20] : n2 < 536870912 ? 25 + log2_4[n2 >> 25] : n2 < -2147483648 ? 30 + log2_4[n2 >> 30] : 0)) - 1;
				if(n1 >= modeCount) {
					seekFunc(this.inputPosition = z.pageStart);
					return null;
				}
				packetType[numPacket++] = h.modes[n1].blockflag;
				var len1 = vec1[i] - 1;
				this.inputPosition += len1;
				var vec2 = new Array(len1);
				var _g4 = 0;
				while(_g4 < len1) vec2[_g4++] = this.input.readByte();
			} else {
				var len2 = vec1[i];
				this.inputPosition += len2;
				var vec3 = new Array(len2);
				var _g5 = 0;
				while(_g5 < len2) vec3[_g5++] = this.input.readByte();
			}
			packetStart = vec1[i] < 255;
		}
		var samples = 0;
		if(numPacket > 1) {
			samples = packetType[numPacket - 1] ? h.blocksize1 : h.blocksize0;
		}
		var i1 = numPacket - 2;
		while(i1 >= 1) {
			--i1;
			if(packetType[i1]) {
				if(packetType[i1 + 1]) {
					samples += h.blocksize1 >> 1;
				} else {
					samples += (h.blocksize1 - h.blocksize0 >> 2) + (h.blocksize0 >> 1);
				}
			} else {
				samples += h.blocksize0 >> 1;
			}
			--i1;
		}
		z.firstDecodedSample = z.lastDecodedSample - samples;
		seekFunc(this.inputPosition = z.pageStart);
		return z;
	}
	,decodeScalarRaw: function(c) {
		this.prepHuffman();
		var codewordLengths = c.codewordLengths;
		var codewords = c.codewords;
		var sortedCodewords = c.sortedCodewords;
		if(c.entries > 8 ? sortedCodewords != null : codewords != null) {
			var n = this.acc;
			n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
			n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
			n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
			n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
			var code = n >>> 16 | n << 16;
			var x = 0;
			var n1 = c.sortedEntries;
			while(n1 > 1) {
				var m = x + (n1 >> 1);
				if(_$UInt_UInt_$Impl_$.gte(code,sortedCodewords[m])) {
					x = m;
					n1 -= n1 >> 1;
				} else {
					n1 >>= 1;
				}
			}
			if(!c.sparse) {
				x = c.sortedValues[x];
			}
			var len = codewordLengths[x];
			if(this.validBits >= len) {
				this.acc = this.acc >>> len;
				this.validBits -= len;
				return x;
			}
			this.validBits = 0;
			return -1;
		}
		var _g = 0;
		var _g1 = c.entries;
		while(_g < _g1) {
			var i = _g++;
			var cl = codewordLengths[i];
			if(cl == 255) {
				continue;
			}
			if(codewords[i] == (this.acc & (1 << cl) - 1)) {
				if(this.validBits >= cl) {
					this.acc = this.acc >>> cl;
					this.validBits -= cl;
					return i;
				}
				this.validBits = 0;
				return -1;
			}
		}
		this.error = new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 847, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "decodeScalarRaw"});
		this.validBits = 0;
		return -1;
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecodeState
};
var kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult = $hxEnums["kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult"] = { __ename__ : true, __constructs__ : ["Found","NotFound"]
	,Found: ($_=function(end,last) { return {_hx_index:0,end:end,last:last,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}; },$_.__params__ = ["end","last"],$_)
	,NotFound: {_hx_index:1,__enum__:"kha.audio2.ogg.vorbis._VorbisDecodeState.FindPageResult",toString:$estr}
};
kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.__empty_constructs__ = [kha_audio2_ogg_vorbis__$VorbisDecodeState_FindPageResult.NotFound];
var kha_audio2_ogg_vorbis_VorbisDecoder = function(header,decodeState) {
	this.header = header;
	this.decodeState = decodeState;
	this.totalSample = null;
	this.currentSample = 0;
	this.previousLength = 0;
	this.channelBuffers = new Array(header.channel);
	this.previousWindow = new Array(header.channel);
	this.finalY = new Array(header.channel);
	var _g = 0;
	var _g1 = header.channel;
	while(_g < _g1) {
		var i = _g++;
		this.channelBuffers[i] = new Array(header.blocksize1);
		this.previousWindow[i] = new Array(header.blocksize1 / 2 | 0);
		this.finalY[i] = [];
	}
	this.a = new Array(2);
	this.b = new Array(2);
	this.c = new Array(2);
	this.window = new Array(2);
	this.bitReverseData = new Array(2);
	this.initBlocksize(0,header.blocksize0);
	this.initBlocksize(1,header.blocksize1);
};
$hxClasses["kha.audio2.ogg.vorbis.VorbisDecoder"] = kha_audio2_ogg_vorbis_VorbisDecoder;
kha_audio2_ogg_vorbis_VorbisDecoder.__name__ = "kha.audio2.ogg.vorbis.VorbisDecoder";
kha_audio2_ogg_vorbis_VorbisDecoder.start = function(input) {
	var decodeState = new kha_audio2_ogg_vorbis_VorbisDecodeState(input);
	var decoder = new kha_audio2_ogg_vorbis_VorbisDecoder(kha_audio2_ogg_vorbis_data_Header.read(decodeState),decodeState);
	decodeState.startFirstDecode();
	decoder.pumpFirstFrame();
	return decoder;
};
kha_audio2_ogg_vorbis_VorbisDecoder.prototype = {
	previousWindow: null
	,previousLength: null
	,finalY: null
	,a: null
	,b: null
	,c: null
	,window: null
	,bitReverseData: null
	,channelBuffers: null
	,channelBufferStart: null
	,channelBufferEnd: null
	,header: null
	,currentSample: null
	,totalSample: null
	,decodeState: null
	,read: function(output,samples,channels,sampleRate,useFloat) {
		if((_$UInt_UInt_$Impl_$.toFloat(sampleRate) % _$UInt_UInt_$Impl_$.toFloat(this.header.sampleRate) | 0) != 0) {
			var this1 = this.header.sampleRate;
			throw new js__$Boot_HaxeError("Unsupported sampleRate : can't convert " + Std.string(this1 == null ? null : _$UInt_UInt_$Impl_$.toFloat(this1)) + " to " + sampleRate);
		}
		if(channels % this.header.channel != 0) {
			throw new js__$Boot_HaxeError("Unsupported channels : can't convert " + this.header.channel + " to " + channels);
		}
		var sampleRepeat = _$UInt_UInt_$Impl_$.toFloat(sampleRate) / _$UInt_UInt_$Impl_$.toFloat(this.header.sampleRate) | 0;
		var channelRepeat = channels / this.header.channel | 0;
		var n = 0;
		var len = Math.floor(samples / sampleRepeat);
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		var index = 0;
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			var _g = this.channelBufferStart;
			var _g1 = this.channelBufferStart + k;
			while(_g < _g1) {
				var j = _g++;
				var _g2 = 0;
				while(_g2 < sampleRepeat) {
					++_g2;
					var _g3 = 0;
					var _g11 = this.header.channel;
					while(_g3 < _g11) {
						var i = _g3++;
						var _g4 = 0;
						while(_g4 < channelRepeat) {
							++_g4;
							var value = this.channelBuffers[i][j];
							if(value > 1) {
								value = 1;
							} else if(value < -1) {
								value = -1;
							}
							if(useFloat) {
								output[index] = value;
								++index;
							}
						}
					}
				}
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		var _g5 = n;
		var _g12 = len;
		while(_g5 < _g12) {
			++_g5;
			var _g6 = 0;
			while(_g6 < sampleRepeat) {
				++_g6;
				var _g7 = 0;
				var _g13 = this.header.channel;
				while(_g7 < _g13) {
					++_g7;
					var _g8 = 0;
					while(_g8 < channelRepeat) {
						++_g8;
						if(useFloat) {
							output[index] = 0;
							++index;
						}
					}
				}
			}
		}
		this.currentSample += len;
		return len * sampleRepeat;
	}
	,skipSamples: function(len) {
		var n = 0;
		if(this.totalSample != null && len > this.totalSample - this.currentSample) {
			len = this.totalSample - this.currentSample;
		}
		while(n < len) {
			var k = this.channelBufferEnd - this.channelBufferStart;
			if(k >= len - n) {
				k = len - n;
			}
			n += k;
			this.channelBufferStart += k;
			if(n == len || this.getFrameFloat() == 0) {
				break;
			}
		}
		this.currentSample += len;
		return len;
	}
	,setupSampleNumber: function(seekFunc,inputLength) {
		if(this.totalSample == null) {
			this.totalSample = this.decodeState.getSampleNumber(seekFunc,inputLength);
		}
	}
	,seek: function(seekFunc,inputLength,sampleNumber) {
		if(this.currentSample == sampleNumber) {
			return;
		}
		if(this.totalSample == null) {
			this.setupSampleNumber(seekFunc,inputLength);
			if(this.totalSample == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 187, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
		if(sampleNumber < 0) {
			sampleNumber = 0;
		}
		var p0 = this.decodeState.pFirst;
		var p1 = this.decodeState.pLast;
		if(sampleNumber >= p1.lastDecodedSample) {
			sampleNumber = p1.lastDecodedSample - 1;
		}
		if(sampleNumber < p0.lastDecodedSample) {
			this.seekFrameFromPage(seekFunc,p0.pageStart,0,sampleNumber);
		} else {
			var attempts = 0;
			while(p0.pageEnd < p1.pageStart) {
				var startOffset = p0.pageEnd;
				var endOffset = p1.afterPreviousPageStart;
				var startSample = p0.lastDecodedSample;
				var endSample = p1.lastDecodedSample;
				if(startSample == null || endSample == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 219, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				if(_$UInt_UInt_$Impl_$.gt(endOffset,startOffset + 4000)) {
					endOffset = endOffset - 4000;
				}
				var probe = startOffset + Math.floor(_$UInt_UInt_$Impl_$.toFloat(endOffset - startOffset) / _$UInt_UInt_$Impl_$.toFloat(endSample - startSample) * (sampleNumber - startSample));
				if(attempts >= 4) {
					var probe2 = startOffset + (endOffset - startOffset >>> 1);
					probe = attempts >= 8 ? probe2 : _$UInt_UInt_$Impl_$.gt(probe2,probe) ? probe + (probe2 - probe >>> 1) : probe2 + (probe - probe2 >>> 1);
				}
				++attempts;
				seekFunc(this.decodeState.inputPosition = probe);
				switch(this.decodeState.findPage(seekFunc,inputLength)._hx_index) {
				case 0:
					break;
				case 1:
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 249, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				var q = this.decodeState.analyzePage(seekFunc,this.header);
				if(q == null) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 255, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
				}
				q.afterPreviousPageStart = probe;
				if(q.pageStart == p1.pageStart) {
					p1 = q;
					continue;
				}
				if(sampleNumber < q.lastDecodedSample) {
					p1 = q;
				} else {
					p0 = q;
				}
			}
			if(p0.lastDecodedSample <= sampleNumber && sampleNumber < p1.lastDecodedSample) {
				this.seekFrameFromPage(seekFunc,p1.pageStart,p0.lastDecodedSample,sampleNumber);
			} else {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 275, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "seek"}));
			}
		}
	}
	,seekFrameFromPage: function(seekFunc,pageStart,firstSample,targetSample) {
		var frame = 0;
		var frameStart = firstSample;
		seekFunc(this.decodeState.inputPosition = pageStart);
		this.decodeState.nextSeg = -1;
		var leftEnd = 0;
		var leftStart = 0;
		var prevState = null;
		var lastState = null;
		while(true) {
			prevState = lastState;
			lastState = this.decodeState.clone(seekFunc);
			var initialResult = this.decodeInitial();
			if(initialResult == null) {
				lastState = prevState;
				break;
			}
			leftStart = initialResult.left.start;
			leftEnd = initialResult.left.end;
			var start = frame == 0 ? leftEnd : leftStart;
			if(targetSample < frameStart + initialResult.right.start - start) {
				break;
			}
			var _this = this.decodeState;
			while(_this.bytesInSeg != 0 || !_this.lastSeg && _this.next() != 0) {
				_this.bytesInSeg--;
				_this.inputPosition += 1;
				_this.input.readByte();
			}
			frameStart += initialResult.right.start - start;
			++frame;
		}
		this.decodeState = lastState;
		seekFunc(this.decodeState.inputPosition);
		this.previousLength = 0;
		this.pumpFirstFrame();
		this.currentSample = frameStart;
		this.skipSamples(targetSample - frameStart);
	}
	,clone: function(seekFunc) {
		var decoder = Object.create(kha_audio2_ogg_vorbis_VorbisDecoder.prototype);
		decoder.currentSample = this.currentSample;
		decoder.totalSample = this.totalSample;
		decoder.previousLength = this.previousLength;
		decoder.channelBufferStart = this.channelBufferStart;
		decoder.channelBufferEnd = this.channelBufferEnd;
		decoder.a = this.a;
		decoder.b = this.b;
		decoder.c = this.c;
		decoder.window = this.window;
		decoder.bitReverseData = this.bitReverseData;
		decoder.header = this.header;
		decoder.decodeState = this.decodeState.clone(seekFunc);
		decoder.channelBuffers = new Array(this.header.channel);
		decoder.previousWindow = new Array(this.header.channel);
		decoder.finalY = new Array(this.header.channel);
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			decoder.channelBuffers[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.channelBuffers[i]);
			decoder.previousWindow[i] = kha_audio2_ogg_vorbis_VorbisTools.copyVector(this.previousWindow[i]);
			decoder.finalY[i] = Lambda.array(this.finalY[i]);
		}
		return decoder;
	}
	,ensurePosition: function(seekFunc) {
		seekFunc(this.decodeState.inputPosition);
	}
	,getFrameFloat: function() {
		var result = this.decodePacket();
		if(result == null) {
			this.channelBufferStart = this.channelBufferEnd = 0;
			return 0;
		}
		var len = this.finishFrame(result);
		this.channelBufferStart = result.left;
		this.channelBufferEnd = result.left + len;
		return len;
	}
	,pumpFirstFrame: function() {
		this.finishFrame(this.decodePacket());
	}
	,finishFrame: function(r) {
		var len = r.len;
		var right = r.right;
		var left = r.left;
		if(this.previousLength != 0) {
			var n = this.previousLength;
			var w = this.getWindow(n);
			var _g = 0;
			var _g1 = this.header.channel;
			while(_g < _g1) {
				var i = _g++;
				var cb = this.channelBuffers[i];
				var pw = this.previousWindow[i];
				var _g2 = 0;
				while(_g2 < n) {
					var j = _g2++;
					cb[left + j] = cb[left + j] * w[j] + pw[j] * w[n - 1 - j];
				}
			}
		}
		var prev = this.previousLength;
		this.previousLength = len - right;
		var _g3 = 0;
		var _g11 = this.header.channel;
		while(_g3 < _g11) {
			var i1 = _g3++;
			var pw1 = this.previousWindow[i1];
			var cb1 = this.channelBuffers[i1];
			var _g4 = 0;
			var _g12 = len - right;
			while(_g4 < _g12) {
				var j1 = _g4++;
				pw1[j1] = cb1[right + j1];
			}
		}
		if(prev == 0) {
			return 0;
		}
		if(len < right) {
			right = len;
		}
		return right - left;
	}
	,getWindow: function(len) {
		len <<= 1;
		if(len == this.header.blocksize0) {
			return this.window[0];
		} else if(len == this.header.blocksize1) {
			return this.window[1];
		} else {
			return null;
		}
	}
	,initBlocksize: function(bs,n) {
		var n2 = n >> 1;
		this.a[bs] = new Array(n2);
		this.b[bs] = new Array(n2);
		this.c[bs] = new Array(n >> 2);
		this.window[bs] = new Array(n2);
		this.bitReverseData[bs] = new Array(n >> 3);
		kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors(n,this.a[bs],this.b[bs],this.c[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeWindow(n,this.window[bs]);
		kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse(n,this.bitReverseData[bs]);
	}
	,inverseMdct: function(buffer,n,blocktype) {
		var bt = blocktype ? 1 : 0;
		var a = this.a[bt];
		var b = this.b[bt];
		var c = this.c[bt];
		var bitReverse = this.bitReverseData[bt];
		var n2 = n >> 1;
		var n4 = n >> 2;
		var n8 = n >> 3;
		var buf2 = new Array(n2);
		var dOffset = n2 - 2;
		var aaOffset = 0;
		var eOffset = 0;
		while(eOffset != n2) {
			buf2[dOffset + 1] = buffer[eOffset] * a[aaOffset] - buffer[eOffset + 2] * a[aaOffset + 1];
			buf2[dOffset] = buffer[eOffset] * a[aaOffset + 1] + buffer[eOffset + 2] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset += 4;
		}
		eOffset = n2 - 3;
		while(dOffset >= 0) {
			buf2[dOffset + 1] = -buffer[eOffset + 2] * a[aaOffset] - -buffer[eOffset] * a[aaOffset + 1];
			buf2[dOffset] = -buffer[eOffset + 2] * a[aaOffset + 1] + -buffer[eOffset] * a[aaOffset];
			dOffset -= 2;
			aaOffset += 2;
			eOffset -= 4;
		}
		var aaOffset1 = n2 - 8;
		var eOffset0 = n4;
		var eOffset1 = 0;
		var dOffset0 = n4;
		var dOffset1 = 0;
		while(aaOffset1 >= 0) {
			var v41_21 = buf2[eOffset0 + 1] - buf2[eOffset1 + 1];
			var v40_20 = buf2[eOffset0] - buf2[eOffset1];
			buffer[dOffset0 + 1] = buf2[eOffset0 + 1] + buf2[eOffset1 + 1];
			buffer[dOffset0] = buf2[eOffset0] + buf2[eOffset1];
			buffer[dOffset1 + 1] = v41_21 * a[aaOffset1 + 4] - v40_20 * a[aaOffset1 + 5];
			buffer[dOffset1] = v40_20 * a[aaOffset1 + 4] + v41_21 * a[aaOffset1 + 5];
			v41_21 = buf2[eOffset0 + 3] - buf2[eOffset1 + 3];
			v40_20 = buf2[eOffset0 + 2] - buf2[eOffset1 + 2];
			buffer[dOffset0 + 3] = buf2[eOffset0 + 3] + buf2[eOffset1 + 3];
			buffer[dOffset0 + 2] = buf2[eOffset0 + 2] + buf2[eOffset1 + 2];
			buffer[dOffset1 + 3] = v41_21 * a[aaOffset1] - v40_20 * a[aaOffset1 + 1];
			buffer[dOffset1 + 2] = v40_20 * a[aaOffset1] + v41_21 * a[aaOffset1 + 1];
			aaOffset1 -= 8;
			dOffset0 += 4;
			dOffset1 += 4;
			eOffset0 += 4;
			eOffset1 += 4;
		}
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
		var i_off = n2 - 1 - n4 * 0;
		var eeOffset0 = i_off;
		var eeOffset2 = i_off + -(n >> 3);
		var aOffset = 0;
		var i = (n >> 4 >> 2) + 1;
		while(--i > 0) {
			var k00_20 = buffer[eeOffset0] - buffer[eeOffset2];
			var k01_21 = buffer[eeOffset0 + (-1)] - buffer[eeOffset2 + (-1)];
			var _g = eeOffset0;
			buffer[_g] = buffer[_g] + buffer[eeOffset2];
			var _g1 = eeOffset0 + (-1);
			buffer[_g1] = buffer[_g1] + buffer[eeOffset2 + (-1)];
			buffer[eeOffset2] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			buffer[eeOffset2 + (-1)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = buffer[eeOffset0 + (-2)] - buffer[eeOffset2 + (-2)];
			k01_21 = buffer[eeOffset0 + (-3)] - buffer[eeOffset2 + (-3)];
			var _g2 = eeOffset0 + (-2);
			buffer[_g2] = buffer[_g2] + buffer[eeOffset2 + (-2)];
			var _g3 = eeOffset0 + (-3);
			buffer[_g3] = buffer[_g3] + buffer[eeOffset2 + (-3)];
			buffer[eeOffset2 + (-2)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			buffer[eeOffset2 + (-3)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = buffer[eeOffset0 + (-4)] - buffer[eeOffset2 + (-4)];
			k01_21 = buffer[eeOffset0 + (-5)] - buffer[eeOffset2 + (-5)];
			var _g4 = eeOffset0 + (-4);
			buffer[_g4] = buffer[_g4] + buffer[eeOffset2 + (-4)];
			var _g5 = eeOffset0 + (-5);
			buffer[_g5] = buffer[_g5] + buffer[eeOffset2 + (-5)];
			buffer[eeOffset2 + (-4)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			buffer[eeOffset2 + (-5)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			k00_20 = buffer[eeOffset0 + (-6)] - buffer[eeOffset2 + (-6)];
			k01_21 = buffer[eeOffset0 + (-7)] - buffer[eeOffset2 + (-7)];
			var _g6 = eeOffset0 + (-6);
			buffer[_g6] = buffer[_g6] + buffer[eeOffset2 + (-6)];
			var _g7 = eeOffset0 + (-7);
			buffer[_g7] = buffer[_g7] + buffer[eeOffset2 + (-7)];
			buffer[eeOffset2 + (-6)] = k00_20 * a[aOffset] - k01_21 * a[aOffset + 1];
			buffer[eeOffset2 + (-7)] = k01_21 * a[aOffset] + k00_20 * a[aOffset + 1];
			aOffset += 8;
			eeOffset0 -= 8;
			eeOffset2 -= 8;
		}
		var i_off1 = n2 - 1 - n4;
		var eeOffset01 = i_off1;
		var eeOffset21 = i_off1 + -(n >> 3);
		var aOffset1 = 0;
		var i1 = (n >> 4 >> 2) + 1;
		while(--i1 > 0) {
			var k00_201 = buffer[eeOffset01] - buffer[eeOffset21];
			var k01_211 = buffer[eeOffset01 + (-1)] - buffer[eeOffset21 + (-1)];
			var _g8 = eeOffset01;
			buffer[_g8] = buffer[_g8] + buffer[eeOffset21];
			var _g9 = eeOffset01 + (-1);
			buffer[_g9] = buffer[_g9] + buffer[eeOffset21 + (-1)];
			buffer[eeOffset21] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			buffer[eeOffset21 + (-1)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = buffer[eeOffset01 + (-2)] - buffer[eeOffset21 + (-2)];
			k01_211 = buffer[eeOffset01 + (-3)] - buffer[eeOffset21 + (-3)];
			var _g10 = eeOffset01 + (-2);
			buffer[_g10] = buffer[_g10] + buffer[eeOffset21 + (-2)];
			var _g11 = eeOffset01 + (-3);
			buffer[_g11] = buffer[_g11] + buffer[eeOffset21 + (-3)];
			buffer[eeOffset21 + (-2)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			buffer[eeOffset21 + (-3)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = buffer[eeOffset01 + (-4)] - buffer[eeOffset21 + (-4)];
			k01_211 = buffer[eeOffset01 + (-5)] - buffer[eeOffset21 + (-5)];
			var _g12 = eeOffset01 + (-4);
			buffer[_g12] = buffer[_g12] + buffer[eeOffset21 + (-4)];
			var _g13 = eeOffset01 + (-5);
			buffer[_g13] = buffer[_g13] + buffer[eeOffset21 + (-5)];
			buffer[eeOffset21 + (-4)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			buffer[eeOffset21 + (-5)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			k00_201 = buffer[eeOffset01 + (-6)] - buffer[eeOffset21 + (-6)];
			k01_211 = buffer[eeOffset01 + (-7)] - buffer[eeOffset21 + (-7)];
			var _g14 = eeOffset01 + (-6);
			buffer[_g14] = buffer[_g14] + buffer[eeOffset21 + (-6)];
			var _g15 = eeOffset01 + (-7);
			buffer[_g15] = buffer[_g15] + buffer[eeOffset21 + (-7)];
			buffer[eeOffset21 + (-6)] = k00_201 * a[aOffset1] - k01_211 * a[aOffset1 + 1];
			buffer[eeOffset21 + (-7)] = k01_211 * a[aOffset1] + k00_201 * a[aOffset1 + 1];
			aOffset1 += 8;
			eeOffset01 -= 8;
			eeOffset21 -= 8;
		}
		var d0 = n2 - 1 - n8 * 0;
		var aOffset2 = 0;
		var eOffset01 = d0;
		var eOffset2 = d0 + -(n >> 4);
		var i2 = (n >> 5 >> 2) + 1;
		while(--i2 > 0) {
			var k00_202 = buffer[eOffset01] - buffer[eOffset2];
			var k01_212 = buffer[eOffset01 + (-1)] - buffer[eOffset2 + (-1)];
			var _g16 = eOffset01;
			buffer[_g16] = buffer[_g16] + buffer[eOffset2];
			var _g17 = eOffset01 + (-1);
			buffer[_g17] = buffer[_g17] + buffer[eOffset2 + (-1)];
			buffer[eOffset2] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			buffer[eOffset2 + (-1)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = buffer[eOffset01 + (-2)] - buffer[eOffset2 + (-2)];
			k01_212 = buffer[eOffset01 + (-3)] - buffer[eOffset2 + (-3)];
			var _g18 = eOffset01 + (-2);
			buffer[_g18] = buffer[_g18] + buffer[eOffset2 + (-2)];
			var _g19 = eOffset01 + (-3);
			buffer[_g19] = buffer[_g19] + buffer[eOffset2 + (-3)];
			buffer[eOffset2 + (-2)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			buffer[eOffset2 + (-3)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = buffer[eOffset01 + (-4)] - buffer[eOffset2 + (-4)];
			k01_212 = buffer[eOffset01 + (-5)] - buffer[eOffset2 + (-5)];
			var _g20 = eOffset01 + (-4);
			buffer[_g20] = buffer[_g20] + buffer[eOffset2 + (-4)];
			var _g21 = eOffset01 + (-5);
			buffer[_g21] = buffer[_g21] + buffer[eOffset2 + (-5)];
			buffer[eOffset2 + (-4)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			buffer[eOffset2 + (-5)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			aOffset2 += 16;
			k00_202 = buffer[eOffset01 + (-6)] - buffer[eOffset2 + (-6)];
			k01_212 = buffer[eOffset01 + (-7)] - buffer[eOffset2 + (-7)];
			var _g22 = eOffset01 + (-6);
			buffer[_g22] = buffer[_g22] + buffer[eOffset2 + (-6)];
			var _g23 = eOffset01 + (-7);
			buffer[_g23] = buffer[_g23] + buffer[eOffset2 + (-7)];
			buffer[eOffset2 + (-6)] = k00_202 * a[aOffset2] - k01_212 * a[aOffset2 + 1];
			buffer[eOffset2 + (-7)] = k01_212 * a[aOffset2] + k00_202 * a[aOffset2 + 1];
			eOffset01 -= 8;
			eOffset2 -= 8;
			aOffset2 += 16;
		}
		var d01 = n2 - 1 - n8;
		var aOffset3 = 0;
		var eOffset02 = d01;
		var eOffset21 = d01 + -(n >> 4);
		var i3 = (n >> 5 >> 2) + 1;
		while(--i3 > 0) {
			var k00_203 = buffer[eOffset02] - buffer[eOffset21];
			var k01_213 = buffer[eOffset02 + (-1)] - buffer[eOffset21 + (-1)];
			var _g24 = eOffset02;
			buffer[_g24] = buffer[_g24] + buffer[eOffset21];
			var _g25 = eOffset02 + (-1);
			buffer[_g25] = buffer[_g25] + buffer[eOffset21 + (-1)];
			buffer[eOffset21] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			buffer[eOffset21 + (-1)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = buffer[eOffset02 + (-2)] - buffer[eOffset21 + (-2)];
			k01_213 = buffer[eOffset02 + (-3)] - buffer[eOffset21 + (-3)];
			var _g26 = eOffset02 + (-2);
			buffer[_g26] = buffer[_g26] + buffer[eOffset21 + (-2)];
			var _g27 = eOffset02 + (-3);
			buffer[_g27] = buffer[_g27] + buffer[eOffset21 + (-3)];
			buffer[eOffset21 + (-2)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			buffer[eOffset21 + (-3)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = buffer[eOffset02 + (-4)] - buffer[eOffset21 + (-4)];
			k01_213 = buffer[eOffset02 + (-5)] - buffer[eOffset21 + (-5)];
			var _g28 = eOffset02 + (-4);
			buffer[_g28] = buffer[_g28] + buffer[eOffset21 + (-4)];
			var _g29 = eOffset02 + (-5);
			buffer[_g29] = buffer[_g29] + buffer[eOffset21 + (-5)];
			buffer[eOffset21 + (-4)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			buffer[eOffset21 + (-5)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			aOffset3 += 16;
			k00_203 = buffer[eOffset02 + (-6)] - buffer[eOffset21 + (-6)];
			k01_213 = buffer[eOffset02 + (-7)] - buffer[eOffset21 + (-7)];
			var _g30 = eOffset02 + (-6);
			buffer[_g30] = buffer[_g30] + buffer[eOffset21 + (-6)];
			var _g31 = eOffset02 + (-7);
			buffer[_g31] = buffer[_g31] + buffer[eOffset21 + (-7)];
			buffer[eOffset21 + (-6)] = k00_203 * a[aOffset3] - k01_213 * a[aOffset3 + 1];
			buffer[eOffset21 + (-7)] = k01_213 * a[aOffset3] + k00_203 * a[aOffset3 + 1];
			eOffset02 -= 8;
			eOffset21 -= 8;
			aOffset3 += 16;
		}
		var d02 = n2 - 1 - n8 * 2;
		var aOffset4 = 0;
		var eOffset03 = d02;
		var eOffset22 = d02 + -(n >> 4);
		var i4 = (n >> 5 >> 2) + 1;
		while(--i4 > 0) {
			var k00_204 = buffer[eOffset03] - buffer[eOffset22];
			var k01_214 = buffer[eOffset03 + (-1)] - buffer[eOffset22 + (-1)];
			var _g32 = eOffset03;
			buffer[_g32] = buffer[_g32] + buffer[eOffset22];
			var _g33 = eOffset03 + (-1);
			buffer[_g33] = buffer[_g33] + buffer[eOffset22 + (-1)];
			buffer[eOffset22] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			buffer[eOffset22 + (-1)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = buffer[eOffset03 + (-2)] - buffer[eOffset22 + (-2)];
			k01_214 = buffer[eOffset03 + (-3)] - buffer[eOffset22 + (-3)];
			var _g34 = eOffset03 + (-2);
			buffer[_g34] = buffer[_g34] + buffer[eOffset22 + (-2)];
			var _g35 = eOffset03 + (-3);
			buffer[_g35] = buffer[_g35] + buffer[eOffset22 + (-3)];
			buffer[eOffset22 + (-2)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			buffer[eOffset22 + (-3)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = buffer[eOffset03 + (-4)] - buffer[eOffset22 + (-4)];
			k01_214 = buffer[eOffset03 + (-5)] - buffer[eOffset22 + (-5)];
			var _g36 = eOffset03 + (-4);
			buffer[_g36] = buffer[_g36] + buffer[eOffset22 + (-4)];
			var _g37 = eOffset03 + (-5);
			buffer[_g37] = buffer[_g37] + buffer[eOffset22 + (-5)];
			buffer[eOffset22 + (-4)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			buffer[eOffset22 + (-5)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			aOffset4 += 16;
			k00_204 = buffer[eOffset03 + (-6)] - buffer[eOffset22 + (-6)];
			k01_214 = buffer[eOffset03 + (-7)] - buffer[eOffset22 + (-7)];
			var _g38 = eOffset03 + (-6);
			buffer[_g38] = buffer[_g38] + buffer[eOffset22 + (-6)];
			var _g39 = eOffset03 + (-7);
			buffer[_g39] = buffer[_g39] + buffer[eOffset22 + (-7)];
			buffer[eOffset22 + (-6)] = k00_204 * a[aOffset4] - k01_214 * a[aOffset4 + 1];
			buffer[eOffset22 + (-7)] = k01_214 * a[aOffset4] + k00_204 * a[aOffset4 + 1];
			eOffset03 -= 8;
			eOffset22 -= 8;
			aOffset4 += 16;
		}
		var d03 = n2 - 1 - n8 * 3;
		var aOffset5 = 0;
		var eOffset04 = d03;
		var eOffset23 = d03 + -(n >> 4);
		var i5 = (n >> 5 >> 2) + 1;
		while(--i5 > 0) {
			var k00_205 = buffer[eOffset04] - buffer[eOffset23];
			var k01_215 = buffer[eOffset04 + (-1)] - buffer[eOffset23 + (-1)];
			var _g40 = eOffset04;
			buffer[_g40] = buffer[_g40] + buffer[eOffset23];
			var _g41 = eOffset04 + (-1);
			buffer[_g41] = buffer[_g41] + buffer[eOffset23 + (-1)];
			buffer[eOffset23] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			buffer[eOffset23 + (-1)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = buffer[eOffset04 + (-2)] - buffer[eOffset23 + (-2)];
			k01_215 = buffer[eOffset04 + (-3)] - buffer[eOffset23 + (-3)];
			var _g42 = eOffset04 + (-2);
			buffer[_g42] = buffer[_g42] + buffer[eOffset23 + (-2)];
			var _g43 = eOffset04 + (-3);
			buffer[_g43] = buffer[_g43] + buffer[eOffset23 + (-3)];
			buffer[eOffset23 + (-2)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			buffer[eOffset23 + (-3)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = buffer[eOffset04 + (-4)] - buffer[eOffset23 + (-4)];
			k01_215 = buffer[eOffset04 + (-5)] - buffer[eOffset23 + (-5)];
			var _g44 = eOffset04 + (-4);
			buffer[_g44] = buffer[_g44] + buffer[eOffset23 + (-4)];
			var _g45 = eOffset04 + (-5);
			buffer[_g45] = buffer[_g45] + buffer[eOffset23 + (-5)];
			buffer[eOffset23 + (-4)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			buffer[eOffset23 + (-5)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			aOffset5 += 16;
			k00_205 = buffer[eOffset04 + (-6)] - buffer[eOffset23 + (-6)];
			k01_215 = buffer[eOffset04 + (-7)] - buffer[eOffset23 + (-7)];
			var _g46 = eOffset04 + (-6);
			buffer[_g46] = buffer[_g46] + buffer[eOffset23 + (-6)];
			var _g47 = eOffset04 + (-7);
			buffer[_g47] = buffer[_g47] + buffer[eOffset23 + (-7)];
			buffer[eOffset23 + (-6)] = k00_205 * a[aOffset5] - k01_215 * a[aOffset5 + 1];
			buffer[eOffset23 + (-7)] = k01_215 * a[aOffset5] + k00_205 * a[aOffset5 + 1];
			eOffset04 -= 8;
			eOffset23 -= 8;
			aOffset5 += 16;
		}
		var _g48 = 2;
		var _g110 = ld - 3 >> 1;
		while(_g48 < _g110) {
			var l = _g48++;
			var k0 = n >> l + 2;
			var k0_2 = k0 >> 1;
			var lim = 1 << l + 1;
			var _g49 = 0;
			while(_g49 < lim) {
				var d04 = n2 - 1 - k0 * _g49++;
				var k1 = 1 << l + 3;
				var aOffset6 = 0;
				var eOffset05 = d04;
				var eOffset24 = d04 + -k0_2;
				var i6 = (n >> l + 4 >> 2) + 1;
				while(--i6 > 0) {
					var k00_206 = buffer[eOffset05] - buffer[eOffset24];
					var k01_216 = buffer[eOffset05 + (-1)] - buffer[eOffset24 + (-1)];
					var _g50 = eOffset05;
					buffer[_g50] = buffer[_g50] + buffer[eOffset24];
					var _g51 = eOffset05 + (-1);
					buffer[_g51] = buffer[_g51] + buffer[eOffset24 + (-1)];
					buffer[eOffset24] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					buffer[eOffset24 + (-1)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = buffer[eOffset05 + (-2)] - buffer[eOffset24 + (-2)];
					k01_216 = buffer[eOffset05 + (-3)] - buffer[eOffset24 + (-3)];
					var _g52 = eOffset05 + (-2);
					buffer[_g52] = buffer[_g52] + buffer[eOffset24 + (-2)];
					var _g53 = eOffset05 + (-3);
					buffer[_g53] = buffer[_g53] + buffer[eOffset24 + (-3)];
					buffer[eOffset24 + (-2)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					buffer[eOffset24 + (-3)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = buffer[eOffset05 + (-4)] - buffer[eOffset24 + (-4)];
					k01_216 = buffer[eOffset05 + (-5)] - buffer[eOffset24 + (-5)];
					var _g54 = eOffset05 + (-4);
					buffer[_g54] = buffer[_g54] + buffer[eOffset24 + (-4)];
					var _g55 = eOffset05 + (-5);
					buffer[_g55] = buffer[_g55] + buffer[eOffset24 + (-5)];
					buffer[eOffset24 + (-4)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					buffer[eOffset24 + (-5)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					aOffset6 += k1;
					k00_206 = buffer[eOffset05 + (-6)] - buffer[eOffset24 + (-6)];
					k01_216 = buffer[eOffset05 + (-7)] - buffer[eOffset24 + (-7)];
					var _g56 = eOffset05 + (-6);
					buffer[_g56] = buffer[_g56] + buffer[eOffset24 + (-6)];
					var _g57 = eOffset05 + (-7);
					buffer[_g57] = buffer[_g57] + buffer[eOffset24 + (-7)];
					buffer[eOffset24 + (-6)] = k00_206 * a[aOffset6] - k01_216 * a[aOffset6 + 1];
					buffer[eOffset24 + (-7)] = k01_216 * a[aOffset6] + k00_206 * a[aOffset6 + 1];
					eOffset05 -= 8;
					eOffset24 -= 8;
					aOffset6 += k1;
				}
			}
		}
		var _g210 = ld - 3 >> 1;
		var _g310 = ld - 6;
		while(_g210 < _g310) {
			var l1 = _g210++;
			var k01 = n >> l1 + 2;
			var k11 = 1 << l1 + 3;
			var k0_21 = k01 >> 1;
			var lim1 = 1 << l1 + 1;
			var aOffset7 = 0;
			var i_off2 = n2 - 1;
			var r = (n >> l1 + 6) + 1;
			while(--r > 0) {
				var A0 = a[aOffset7];
				var A1 = a[aOffset7 + 1];
				var A2 = a[aOffset7 + k11];
				var A3 = a[aOffset7 + k11 + 1];
				var A4 = a[aOffset7 + k11 * 2];
				var A5 = a[aOffset7 + k11 * 2 + 1];
				var A6 = a[aOffset7 + k11 * 3];
				var A7 = a[aOffset7 + k11 * 3 + 1];
				var eeOffset02 = i_off2;
				var eeOffset22 = i_off2 + -k0_21;
				var i7 = lim1 + 1;
				while(--i7 > 0) {
					var k00 = buffer[eeOffset02] - buffer[eeOffset22];
					var k111 = buffer[eeOffset02 + (-1)] - buffer[eeOffset22 + (-1)];
					buffer[eeOffset02] = buffer[eeOffset02] + buffer[eeOffset22];
					buffer[eeOffset02 + (-1)] = buffer[eeOffset02 + (-1)] + buffer[eeOffset22 + (-1)];
					buffer[eeOffset22] = k00 * A0 - k111 * A1;
					buffer[eeOffset22 + (-1)] = k111 * A0 + k00 * A1;
					k00 = buffer[eeOffset02 + (-2)] - buffer[eeOffset22 + (-2)];
					k111 = buffer[eeOffset02 + (-3)] - buffer[eeOffset22 + (-3)];
					buffer[eeOffset02 + (-2)] = buffer[eeOffset02 + (-2)] + buffer[eeOffset22 + (-2)];
					buffer[eeOffset02 + (-3)] = buffer[eeOffset02 + (-3)] + buffer[eeOffset22 + (-3)];
					buffer[eeOffset22 + (-2)] = k00 * A2 - k111 * A3;
					buffer[eeOffset22 + (-3)] = k111 * A2 + k00 * A3;
					k00 = buffer[eeOffset02 + (-4)] - buffer[eeOffset22 + (-4)];
					k111 = buffer[eeOffset02 + (-5)] - buffer[eeOffset22 + (-5)];
					buffer[eeOffset02 + (-4)] = buffer[eeOffset02 + (-4)] + buffer[eeOffset22 + (-4)];
					buffer[eeOffset02 + (-5)] = buffer[eeOffset02 + (-5)] + buffer[eeOffset22 + (-5)];
					buffer[eeOffset22 + (-4)] = k00 * A4 - k111 * A5;
					buffer[eeOffset22 + (-5)] = k111 * A4 + k00 * A5;
					k00 = buffer[eeOffset02 + (-6)] - buffer[eeOffset22 + (-6)];
					k111 = buffer[eeOffset02 + (-7)] - buffer[eeOffset22 + (-7)];
					buffer[eeOffset02 + (-6)] = buffer[eeOffset02 + (-6)] + buffer[eeOffset22 + (-6)];
					buffer[eeOffset02 + (-7)] = buffer[eeOffset02 + (-7)] + buffer[eeOffset22 + (-7)];
					buffer[eeOffset22 + (-6)] = k00 * A6 - k111 * A7;
					buffer[eeOffset22 + (-7)] = k111 * A6 + k00 * A7;
					eeOffset02 -= k01;
					eeOffset22 -= k01;
				}
				aOffset7 += k11 * 4;
				i_off2 -= 8;
			}
		}
		var i_off3 = n2 - 1;
		var A21 = a[n >> 3];
		var zOffset = i_off3;
		var baseOffset = i_off3 - 16 * (n >> 5);
		while(zOffset > baseOffset) {
			var t0 = buffer[zOffset];
			var t1 = buffer[zOffset + (-8)];
			buffer[zOffset + (-8)] = t0 - t1;
			buffer[zOffset] = t0 + t1;
			t0 = buffer[zOffset + (-1)];
			t1 = buffer[zOffset + (-9)];
			buffer[zOffset + (-9)] = t0 - t1;
			buffer[zOffset + (-1)] = t0 + t1;
			t0 = buffer[zOffset + (-2)];
			t1 = buffer[zOffset + (-10)];
			var k001 = t0 - t1;
			buffer[zOffset + (-2)] = t0 + t1;
			t0 = buffer[zOffset + (-3)];
			t1 = buffer[zOffset + (-11)];
			var k112 = t0 - t1;
			buffer[zOffset + (-3)] = t0 + t1;
			buffer[zOffset + (-10)] = (k001 + k112) * A21;
			buffer[zOffset + (-11)] = (k112 - k001) * A21;
			t0 = buffer[zOffset + (-4)];
			t1 = buffer[zOffset + (-12)];
			k001 = t1 - t0;
			buffer[zOffset + (-4)] = t0 + t1;
			t0 = buffer[zOffset + (-5)];
			t1 = buffer[zOffset + (-13)];
			k112 = t0 - t1;
			buffer[zOffset + (-5)] = t0 + t1;
			buffer[zOffset + (-12)] = k112;
			buffer[zOffset + (-13)] = k001;
			t0 = buffer[zOffset + (-6)];
			t1 = buffer[zOffset + (-14)];
			k001 = t1 - t0;
			buffer[zOffset + (-6)] = t0 + t1;
			t0 = buffer[zOffset + (-7)];
			t1 = buffer[zOffset + (-15)];
			k112 = t0 - t1;
			buffer[zOffset + (-7)] = t0 + t1;
			buffer[zOffset + (-14)] = (k001 + k112) * A21;
			buffer[zOffset + (-15)] = (k001 - k112) * A21;
			var t01 = buffer[zOffset];
			var t11 = buffer[zOffset + (-4)];
			var k002 = t01 - t11;
			var y0 = t01 + t11;
			t01 = buffer[zOffset + (-2)];
			t11 = buffer[zOffset + (-6)];
			var y2 = t01 + t11;
			var k22 = t01 - t11;
			buffer[zOffset] = y0 + y2;
			buffer[zOffset + (-2)] = y0 - y2;
			var k33 = buffer[zOffset + (-3)] - buffer[zOffset + (-7)];
			buffer[zOffset + (-4)] = k002 + k33;
			buffer[zOffset + (-6)] = k002 - k33;
			t01 = buffer[zOffset + (-1)];
			t11 = buffer[zOffset + (-5)];
			var k113 = t01 - t11;
			var y1 = t01 + t11;
			var y3 = buffer[zOffset + (-3)] + buffer[zOffset + (-7)];
			buffer[zOffset + (-1)] = y1 + y3;
			buffer[zOffset + (-3)] = y1 - y3;
			buffer[zOffset + (-5)] = k113 - k22;
			buffer[zOffset + (-7)] = k113 + k22;
			var zOffset1 = zOffset - 8;
			var t02 = buffer[zOffset1];
			var t12 = buffer[zOffset1 + (-4)];
			var k003 = t02 - t12;
			var y01 = t02 + t12;
			t02 = buffer[zOffset1 + (-2)];
			t12 = buffer[zOffset1 + (-6)];
			var y21 = t02 + t12;
			var k221 = t02 - t12;
			buffer[zOffset1] = y01 + y21;
			buffer[zOffset1 + (-2)] = y01 - y21;
			var k331 = buffer[zOffset1 + (-3)] - buffer[zOffset1 + (-7)];
			buffer[zOffset1 + (-4)] = k003 + k331;
			buffer[zOffset1 + (-6)] = k003 - k331;
			t02 = buffer[zOffset1 + (-1)];
			t12 = buffer[zOffset1 + (-5)];
			var k114 = t02 - t12;
			var y11 = t02 + t12;
			var y31 = buffer[zOffset1 + (-3)] + buffer[zOffset1 + (-7)];
			buffer[zOffset1 + (-1)] = y11 + y31;
			buffer[zOffset1 + (-3)] = y11 - y31;
			buffer[zOffset1 + (-5)] = k114 - k221;
			buffer[zOffset1 + (-7)] = k114 + k221;
			zOffset -= 16;
		}
		var brOffset = 0;
		var dOffset01 = n4 - 4;
		var dOffset11 = n2 - 4;
		while(dOffset01 >= 0) {
			var k4 = bitReverse[brOffset];
			buf2[dOffset11 + 3] = buffer[k4];
			buf2[dOffset11 + 2] = buffer[k4 + 1];
			buf2[dOffset01 + 3] = buffer[k4 + 2];
			buf2[dOffset01 + 2] = buffer[k4 + 3];
			k4 = bitReverse[brOffset + 1];
			buf2[dOffset11 + 1] = buffer[k4];
			buf2[dOffset11] = buffer[k4 + 1];
			buf2[dOffset01 + 1] = buffer[k4 + 2];
			buf2[dOffset01] = buffer[k4 + 3];
			dOffset01 -= 4;
			dOffset11 -= 4;
			brOffset += 2;
		}
		var cOffset = 0;
		var dOffset2 = 0;
		var eOffset3 = n2 - 4;
		while(dOffset2 < eOffset3) {
			var a02 = buf2[dOffset2] - buf2[eOffset3 + 2];
			var a11 = buf2[dOffset2 + 1] + buf2[eOffset3 + 3];
			var b0 = c[cOffset + 1] * a02 + c[cOffset] * a11;
			var b1 = c[cOffset + 1] * a11 - c[cOffset] * a02;
			var b2 = buf2[dOffset2] + buf2[eOffset3 + 2];
			var b3 = buf2[dOffset2 + 1] - buf2[eOffset3 + 3];
			buf2[dOffset2] = b2 + b0;
			buf2[dOffset2 + 1] = b3 + b1;
			buf2[eOffset3 + 2] = b2 - b0;
			buf2[eOffset3 + 3] = b1 - b3;
			a02 = buf2[dOffset2 + 2] - buf2[eOffset3];
			a11 = buf2[dOffset2 + 3] + buf2[eOffset3 + 1];
			b0 = c[cOffset + 3] * a02 + c[cOffset + 2] * a11;
			b1 = c[cOffset + 3] * a11 - c[cOffset + 2] * a02;
			b2 = buf2[dOffset2 + 2] + buf2[eOffset3];
			b3 = buf2[dOffset2 + 3] - buf2[eOffset3 + 1];
			buf2[dOffset2 + 2] = b2 + b0;
			buf2[dOffset2 + 3] = b3 + b1;
			buf2[eOffset3] = b2 - b0;
			buf2[eOffset3 + 1] = b1 - b3;
			cOffset += 4;
			dOffset2 += 4;
			eOffset3 -= 4;
		}
		var bOffset = n2 - 8;
		var eOffset4 = n2 - 8;
		var dOffset02 = 0;
		var dOffset12 = n2 - 4;
		var dOffset21 = n2;
		var dOffset3 = n - 4;
		while(eOffset4 >= 0) {
			var p3 = buf2[eOffset4 + 6] * b[bOffset + 7] - buf2[eOffset4 + 7] * b[bOffset + 6];
			var p2 = -buf2[eOffset4 + 6] * b[bOffset + 6] - buf2[eOffset4 + 7] * b[bOffset + 7];
			buffer[dOffset02] = p3;
			buffer[dOffset12 + 3] = -p3;
			buffer[dOffset21] = p2;
			buffer[dOffset3 + 3] = p2;
			var p1 = buf2[eOffset4 + 4] * b[bOffset + 5] - buf2[eOffset4 + 5] * b[bOffset + 4];
			var p0 = -buf2[eOffset4 + 4] * b[bOffset + 4] - buf2[eOffset4 + 5] * b[bOffset + 5];
			buffer[dOffset02 + 1] = p1;
			buffer[dOffset12 + 2] = -p1;
			buffer[dOffset21 + 1] = p0;
			buffer[dOffset3 + 2] = p0;
			p3 = buf2[eOffset4 + 2] * b[bOffset + 3] - buf2[eOffset4 + 3] * b[bOffset + 2];
			p2 = -buf2[eOffset4 + 2] * b[bOffset + 2] - buf2[eOffset4 + 3] * b[bOffset + 3];
			buffer[dOffset02 + 2] = p3;
			buffer[dOffset12 + 1] = -p3;
			buffer[dOffset21 + 2] = p2;
			buffer[dOffset3 + 1] = p2;
			p1 = buf2[eOffset4] * b[bOffset + 1] - buf2[eOffset4 + 1] * b[bOffset];
			p0 = -buf2[eOffset4] * b[bOffset] - buf2[eOffset4 + 1] * b[bOffset + 1];
			buffer[dOffset02 + 3] = p1;
			buffer[dOffset12] = -p1;
			buffer[dOffset21 + 3] = p0;
			buffer[dOffset3] = p0;
			bOffset -= 8;
			eOffset4 -= 8;
			dOffset02 += 4;
			dOffset21 += 4;
			dOffset12 -= 4;
			dOffset3 -= 4;
		}
	}
	,decodePacket: function() {
		var result = this.decodeInitial();
		if(result == null) {
			return null;
		}
		return this.decodePacketRest(result);
	}
	,decodeInitial: function() {
		this.channelBufferStart = this.channelBufferEnd = 0;
		while(true) {
			if(!this.decodeState.maybeStartPacket()) {
				return null;
			}
			if(this.decodeState.readBits(1) != 0) {
				while(true) {
					var _this = this.decodeState;
					var x;
					if(_this.bytesInSeg == 0 && (_this.lastSeg || _this.next() == 0)) {
						x = -1;
					} else {
						_this.bytesInSeg--;
						_this.inputPosition += 1;
						x = _this.input.readByte();
					}
					_this.validBits = 0;
					if(!(-1 != x)) {
						break;
					}
				}
				continue;
			}
			break;
		}
		var n = this.header.modes.length - 1;
		var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
		var i = this.decodeState.readBits(n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0);
		if(i == -1 || i >= this.header.modes.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 519, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodeInitial"}));
		}
		var m = this.header.modes[i];
		var n1;
		var prev;
		var next;
		if(m.blockflag) {
			n1 = this.header.blocksize1;
			prev = this.decodeState.readBits(1);
			next = this.decodeState.readBits(1);
		} else {
			next = 0;
			prev = 0;
			n1 = this.header.blocksize0;
		}
		var windowCenter = n1 >> 1;
		return { mode : i, left : m.blockflag && prev == 0 ? { start : n1 - this.header.blocksize0 >> 2, end : n1 + this.header.blocksize0 >> 2} : { start : 0, end : windowCenter}, right : m.blockflag && next == 0 ? { start : n1 * 3 - this.header.blocksize0 >> 2, end : n1 * 3 + this.header.blocksize0 >> 2} : { start : windowCenter, end : n1}};
	}
	,decodePacketRest: function(r) {
		var m = this.header.modes[r.mode];
		var zeroChannel = new Array(256);
		var reallyZeroChannel = new Array(256);
		var n = m.blockflag ? this.header.blocksize1 : this.header.blocksize0;
		var map = this.header.mapping[m.mapping];
		var n2 = n >> 1;
		var rangeList = [256,128,86,64];
		var codebooks = this.header.codebooks;
		var _g = 0;
		var _g1 = this.header.channel;
		while(_g < _g1) {
			var i = _g++;
			var s = map.chan[i].mux;
			zeroChannel[i] = false;
			var floor = this.header.floorConfig[map.submapFloor[s]];
			if(floor.type == 0) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecoder.hx", lineNumber : 581, className : "kha.audio2.ogg.vorbis.VorbisDecoder", methodName : "decodePacketRest"}));
			} else {
				var g = floor.floor1;
				if(this.decodeState.readBits(1) != 0) {
					var fy = [];
					var step2Flag = new Array(256);
					var range = rangeList[g.floor1Multiplier - 1];
					var offset = 2;
					fy = this.finalY[i];
					var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					fy[0] = this.decodeState.readBits((range < 16384 ? range < 16 ? log2_4[range] : range < 512 ? 5 + log2_4[range >> 5] : 10 + log2_4[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_4[range >> 15] : 20 + log2_4[range >> 20] : range < 536870912 ? 25 + log2_4[range >> 25] : range < -2147483648 ? 30 + log2_4[range >> 30] : 0) - 1);
					var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
					fy[1] = this.decodeState.readBits((range < 16384 ? range < 16 ? log2_41[range] : range < 512 ? 5 + log2_41[range >> 5] : 10 + log2_41[range >> 10] : range < 16777216 ? range < 524288 ? 15 + log2_41[range >> 15] : 20 + log2_41[range >> 20] : range < 536870912 ? 25 + log2_41[range >> 25] : range < -2147483648 ? 30 + log2_41[range >> 30] : 0) - 1);
					var _g2 = 0;
					var _g11 = g.partitions;
					while(_g2 < _g11) {
						var pclass = g.partitionClassList[_g2++];
						var cdim = g.classDimensions[pclass];
						var cbits = g.classSubclasses[pclass];
						var csub = (1 << cbits) - 1;
						var cval = 0;
						if(cbits != 0) {
							var c = codebooks[g.classMasterbooks[pclass]];
							var _this = this.decodeState;
							if(_this.validBits < 10) {
								_this.prepHuffman();
							}
							var i1 = c.fastHuffman[_this.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								_this.acc = _this.acc >>> l;
								_this.validBits -= l;
								if(_this.validBits < 0) {
									_this.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = _this.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							cval = val;
						}
						var books = g.subclassBooks[pclass];
						var _g3 = 0;
						while(_g3 < cdim) {
							++_g3;
							var book = books[cval & csub];
							cval >>= cbits;
							var tmp = offset++;
							var tmp1;
							if(book >= 0) {
								var _this1 = this.decodeState;
								var c1 = codebooks[book];
								if(_this1.validBits < 10) {
									_this1.prepHuffman();
								}
								var i2 = c1.fastHuffman[_this1.acc & 1023];
								var val1;
								if(i2 >= 0) {
									var l1 = c1.codewordLengths[i2];
									_this1.acc = _this1.acc >>> l1;
									_this1.validBits -= l1;
									if(_this1.validBits < 0) {
										_this1.validBits = 0;
										val1 = -1;
									} else {
										val1 = i2;
									}
								} else {
									val1 = _this1.decodeScalarRaw(c1);
								}
								if(c1.sparse) {
									val1 = c1.sortedValues[val1];
								}
								tmp1 = val1;
							} else {
								tmp1 = 0;
							}
							fy[tmp] = tmp1;
						}
					}
					if(this.decodeState.validBits == -1) {
						zeroChannel[i] = true;
						continue;
					}
					step2Flag[1] = true;
					step2Flag[0] = true;
					var naighbors = g.neighbors;
					var xlist = g.xlist;
					var _g21 = 2;
					var _g31 = g.values;
					while(_g21 < _g31) {
						var j = _g21++;
						var low = naighbors[j][0];
						var high = naighbors[j][1];
						var x0 = xlist[low];
						var y0 = fy[low];
						var dy = fy[high] - y0;
						var off = Math.abs(dy) * (xlist[j] - x0) / (xlist[high] - x0) | 0;
						var lowroom = dy < 0 ? y0 - off : y0 + off;
						var val2 = fy[j];
						var highroom = range - lowroom;
						if(val2 != 0) {
							step2Flag[high] = true;
							step2Flag[low] = true;
							step2Flag[j] = true;
							if(val2 >= (highroom < lowroom ? highroom * 2 : lowroom * 2)) {
								if(highroom > lowroom) {
									fy[j] = val2 - lowroom + lowroom;
								} else {
									fy[j] = lowroom - val2 + highroom - 1;
								}
							} else if((val2 & 1) != 0) {
								fy[j] = lowroom - (val2 + 1 >> 1);
							} else {
								fy[j] = lowroom + (val2 >> 1);
							}
						} else {
							step2Flag[j] = false;
							fy[j] = lowroom;
						}
					}
					var _g4 = 0;
					var _g5 = g.values;
					while(_g4 < _g5) {
						var j1 = _g4++;
						if(!step2Flag[j1]) {
							fy[j1] = -1;
						}
					}
				} else {
					zeroChannel[i] = true;
				}
			}
		}
		var _g22 = 0;
		var _g32 = this.header.channel;
		while(_g22 < _g32) {
			var i3 = _g22++;
			reallyZeroChannel[i3] = zeroChannel[i3];
		}
		var _g41 = 0;
		var _g51 = map.couplingSteps;
		while(_g41 < _g51) {
			var i4 = _g41++;
			if(!zeroChannel[map.chan[i4].magnitude] || !zeroChannel[map.chan[i4].angle]) {
				var index = map.chan[i4].magnitude;
				zeroChannel[map.chan[i4].angle] = false;
				zeroChannel[index] = false;
			}
		}
		var _g6 = 0;
		var _g7 = map.submaps;
		while(_g6 < _g7) {
			var i5 = _g6++;
			var residueBuffers = new Array(this.header.channel);
			var doNotDecode = new Array(256);
			var ch = 0;
			var _g61 = 0;
			var _g71 = this.header.channel;
			while(_g61 < _g71) {
				var j2 = _g61++;
				if(map.chan[j2].mux == i5) {
					if(zeroChannel[j2]) {
						doNotDecode[ch] = true;
						residueBuffers[ch] = null;
					} else {
						doNotDecode[ch] = false;
						residueBuffers[ch] = this.channelBuffers[j2];
					}
					++ch;
				}
			}
			this.header.residueConfig[map.submapResidue[i5]].decode(this.decodeState,this.header,residueBuffers,ch,n2,doNotDecode,this.channelBuffers);
		}
		var i6 = map.couplingSteps;
		var n21 = n >> 1;
		while(--i6 >= 0) {
			var m1 = this.channelBuffers[map.chan[i6].magnitude];
			var a = this.channelBuffers[map.chan[i6].angle];
			var _g8 = 0;
			while(_g8 < n21) {
				var j3 = _g8++;
				var a2;
				var m2;
				if(m1[j3] > 0) {
					if(a[j3] > 0) {
						m2 = m1[j3];
						a2 = m1[j3] - a[j3];
					} else {
						a2 = m1[j3];
						m2 = m1[j3] + a[j3];
					}
				} else if(a[j3] > 0) {
					m2 = m1[j3];
					a2 = m1[j3] + a[j3];
				} else {
					a2 = m1[j3];
					m2 = m1[j3] - a[j3];
				}
				m1[j3] = m2;
				a[j3] = a2;
			}
		}
		var _g81 = 0;
		var _g9 = this.header.channel;
		while(_g81 < _g9) {
			var i7 = _g81++;
			if(reallyZeroChannel[i7]) {
				var _g82 = 0;
				while(_g82 < n21) this.channelBuffers[i7][_g82++] = 0;
			} else {
				map.doFloor(this.header.floorConfig,i7,n,this.channelBuffers[i7],this.finalY[i7],null);
			}
		}
		var _g10 = 0;
		var _g111 = this.header.channel;
		while(_g10 < _g111) this.inverseMdct(this.channelBuffers[_g10++],n,m.blockflag);
		var _this2 = this.decodeState;
		while(_this2.bytesInSeg != 0 || !_this2.lastSeg && _this2.next() != 0) {
			_this2.bytesInSeg--;
			_this2.inputPosition += 1;
			_this2.input.readByte();
		}
		return this.decodeState.finishDecodePacket(this.previousLength,n,r);
	}
	,__class__: kha_audio2_ogg_vorbis_VorbisDecoder
};
var kha_audio2_ogg_vorbis_VorbisTools = function() { };
$hxClasses["kha.audio2.ogg.vorbis.VorbisTools"] = kha_audio2_ogg_vorbis_VorbisTools;
kha_audio2_ogg_vorbis_VorbisTools.__name__ = "kha.audio2.ogg.vorbis.VorbisTools";
kha_audio2_ogg_vorbis_VorbisTools.assert = function(b,p) {
};
kha_audio2_ogg_vorbis_VorbisTools.neighbors = function(x,n) {
	var low = -1;
	var high = 65536;
	var plow = 0;
	var phigh = 0;
	var _g = 0;
	while(_g < n) {
		var i = _g++;
		if(x[i] > low && x[i] < x[n]) {
			plow = i;
			low = x[i];
		}
		if(x[i] < high && x[i] > x[n]) {
			phigh = i;
			high = x[i];
		}
	}
	return { low : plow, high : phigh};
};
kha_audio2_ogg_vorbis_VorbisTools.floatUnpack = function(x) {
	var mantissa = _$UInt_UInt_$Impl_$.toFloat(x & 2097151);
	return ((x & -2147483648) != 0 ? -mantissa : mantissa) * Math.pow(2,((x & 2145386496) >>> 21) - 788);
};
kha_audio2_ogg_vorbis_VorbisTools.bitReverse = function(n) {
	n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
	n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
	n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
	n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
	return n >>> 16 | n << 16;
};
kha_audio2_ogg_vorbis_VorbisTools.pointCompare = function(a,b) {
	if(a.x < b.x) {
		return -1;
	} else if(a.x > b.x) {
		return 1;
	} else {
		return 0;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.uintAsc = function(a,b) {
	if(_$UInt_UInt_$Impl_$.gt(b,a)) {
		return -1;
	} else if(a == b) {
		return 0;
	} else {
		return 1;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.lookup1Values = function(entries,dim) {
	var r = Math.exp(Math.log(entries) / dim) | 0;
	if((Math.pow(r + 1,dim) | 0) <= entries) {
		++r;
	}
	return r;
};
kha_audio2_ogg_vorbis_VorbisTools.computeWindow = function(n,$window) {
	var n2 = n >> 1;
	var _g = 0;
	while(_g < n2) {
		var i = _g++;
		$window[i] = Math.sin(1.5707963267948966 * kha_audio2_ogg_vorbis_VorbisTools.square(Math.sin((i + 0.5) / n2 * 0.5 * 3.14159265358979323846264)));
	}
};
kha_audio2_ogg_vorbis_VorbisTools.square = function(f) {
	return f * f;
};
kha_audio2_ogg_vorbis_VorbisTools.computeBitReverse = function(n,rev) {
	var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
	var ld = (n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0) - 1;
	var n8 = n >> 3;
	var _g = 0;
	while(_g < n8) {
		var i = _g++;
		var n1 = i;
		n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
		n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
		n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
		n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
		rev[i] = (n1 >>> 16 | n1 << 16) >>> 32 - ld + 3 << 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.computeTwiddleFactors = function(n,af,bf,cf) {
	var n4 = n >> 2;
	var n8 = n >> 3;
	var k2 = 0;
	var _g = 0;
	while(_g < n4) {
		var k = _g++;
		af[k2] = Math.cos(4 * k * 3.14159265358979323846264 / n);
		af[k2 + 1] = -Math.sin(4 * k * 3.14159265358979323846264 / n);
		bf[k2] = Math.cos((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		bf[k2 + 1] = Math.sin((k2 + 1) * 3.14159265358979323846264 / n / 2) * 0.5;
		k2 += 2;
	}
	var k21 = 0;
	var _g2 = 0;
	while(_g2 < n8) {
		++_g2;
		cf[k21] = Math.cos(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		cf[k21 + 1] = -Math.sin(2 * (k21 + 1) * 3.14159265358979323846264 / n);
		k21 += 2;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.drawLine = function(output,x0,y0,x1,y1,n) {
	if(kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable == null) {
		kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable = new Array(32);
		var _g = 0;
		while(_g < 32) {
			var i = _g++;
			kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[i] = new Array(64);
			var _g1 = 1;
			while(_g1 < 64) {
				var j = _g1++;
				kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[i][j] = i / j | 0;
			}
		}
	}
	var dy = y1 - y0;
	var adx = x1 - x0;
	var ady = dy < 0 ? -dy : dy;
	var base;
	var y = y0;
	var err = 0;
	var sy;
	if(adx < 64 && ady < 32) {
		if(dy < 0) {
			base = -kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base - 1;
		} else {
			base = kha_audio2_ogg_vorbis_VorbisTools.integerDivideTable[ady][adx];
			sy = base + 1;
		}
	} else {
		base = dy / adx | 0;
		sy = dy < 0 ? base - 1 : base + 1;
	}
	ady -= (base < 0 ? -base : base) * adx;
	if(x1 > n) {
		x1 = n;
	}
	output[x0] = output[x0] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y0];
	var _g2 = x0 + 1;
	var _g11 = x1;
	while(_g2 < _g11) {
		var i1 = _g2++;
		err += ady;
		if(err >= adx) {
			err -= adx;
			y += sy;
		} else {
			y += base;
		}
		output[i1] = output[i1] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[y];
	}
};
kha_audio2_ogg_vorbis_VorbisTools.predictPoint = function(x,x0,x1,y0,y1) {
	var dy = y1 - y0;
	var off = Math.abs(dy) * (x - x0) / (x1 - x0) | 0;
	if(dy < 0) {
		return y0 - off;
	} else {
		return y0 + off;
	}
};
kha_audio2_ogg_vorbis_VorbisTools.emptyFloatVector = function(len) {
	return new Array(len);
};
kha_audio2_ogg_vorbis_VorbisTools.copyVector = function(source) {
	var dest = new Array(source.length);
	var _g = 0;
	var _g1 = source.length;
	while(_g < _g1) {
		var i = _g++;
		dest[i] = source[i];
	}
	return dest;
};
var kha_audio2_ogg_vorbis_data_Codebook = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Codebook"] = kha_audio2_ogg_vorbis_data_Codebook;
kha_audio2_ogg_vorbis_data_Codebook.__name__ = "kha.audio2.ogg.vorbis.data.Codebook";
kha_audio2_ogg_vorbis_data_Codebook.read = function(decodeState) {
	var c = new kha_audio2_ogg_vorbis_data_Codebook();
	if(decodeState.readBits(8) != 66 || decodeState.readBits(8) != 67 || decodeState.readBits(8) != 86) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 40, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	var x = decodeState.readBits(8);
	c.dimensions = (decodeState.readBits(8) << 8) + x;
	var x1 = decodeState.readBits(8);
	var y = decodeState.readBits(8);
	c.entries = (decodeState.readBits(8) << 16) + (y << 8) + x1;
	var ordered = decodeState.readBits(1);
	c.sparse = ordered != 0 ? false : decodeState.readBits(1) != 0;
	var lengths = new Array(c.entries);
	if(!c.sparse) {
		c.codewordLengths = lengths;
	}
	var total = 0;
	if(ordered != 0) {
		var currentEntry = 0;
		var currentLength = decodeState.readBits(5) + 1;
		while(currentEntry < c.entries) {
			var limit = c.entries - currentEntry;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			var n = decodeState.readBits(limit < 16384 ? limit < 16 ? log2_4[limit] : limit < 512 ? 5 + log2_4[limit >> 5] : 10 + log2_4[limit >> 10] : limit < 16777216 ? limit < 524288 ? 15 + log2_4[limit >> 15] : 20 + log2_4[limit >> 20] : limit < 536870912 ? 25 + log2_4[limit >> 25] : limit < -2147483648 ? 30 + log2_4[limit >> 30] : 0);
			if(currentEntry + n > c.entries) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook entrys",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			var _g = 0;
			while(_g < n) lengths[currentEntry + _g++] = currentLength;
			currentEntry += n;
			++currentLength;
		}
	} else {
		var _g1 = 0;
		var _g11 = c.entries;
		while(_g1 < _g11) {
			var j = _g1++;
			if((c.sparse ? decodeState.readBits(1) : 1) != 0) {
				lengths[j] = decodeState.readBits(5) + 1;
				++total;
			} else {
				lengths[j] = 255;
			}
		}
	}
	if(c.sparse && total >= c.entries >> 2) {
		c.codewordLengths = lengths;
		c.sparse = false;
	}
	var tmp;
	if(c.sparse) {
		tmp = total;
	} else {
		var sortedCount = 0;
		var _g2 = 0;
		var _g12 = c.entries;
		while(_g2 < _g12) {
			var l = lengths[_g2++];
			if(l > 10 && l != 255) {
				++sortedCount;
			}
		}
		tmp = sortedCount;
	}
	c.sortedEntries = tmp;
	var values = null;
	if(!c.sparse) {
		c.codewords = new Array(c.entries);
	} else if(c.sortedEntries != 0) {
		c.codewordLengths = new Array(c.sortedEntries);
		c.codewords = new Array(c.entries);
		values = new Array(c.entries);
	}
	if(!c.computeCodewords(lengths,c.entries,values)) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"compute codewords",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 120, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.sortedEntries != 0) {
		c.sortedCodewords = [];
		c.sortedValues = new Array(c.sortedEntries);
		c.computeSortedHuffman(lengths,values);
	}
	if(c.sparse) {
		c.codewords = null;
		lengths = null;
	}
	c.computeAcceleratedHuffman();
	c.lookupType = decodeState.readBits(4);
	if(c.lookupType > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"codebook lookup type",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 143, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
	}
	if(c.lookupType > 0) {
		var x2 = decodeState.readBits(32);
		var mantissa = _$UInt_UInt_$Impl_$.toFloat(x2 & 2097151);
		c.minimumValue = ((x2 & -2147483648) != 0 ? -mantissa : mantissa) * Math.pow(2,((x2 & 2145386496) >>> 21) - 788);
		var x3 = decodeState.readBits(32);
		var mantissa1 = _$UInt_UInt_$Impl_$.toFloat(x3 & 2097151);
		c.deltaValue = ((x3 & -2147483648) != 0 ? -mantissa1 : mantissa1) * Math.pow(2,((x3 & 2145386496) >>> 21) - 788);
		c.valueBits = decodeState.readBits(4) + 1;
		c.sequenceP = decodeState.readBits(1) != 0;
		if(c.lookupType == 1) {
			c.lookupValues = kha_audio2_ogg_vorbis_VorbisTools.lookup1Values(c.entries,c.dimensions);
		} else {
			c.lookupValues = c.entries * c.dimensions;
		}
		var mults = new Array(c.lookupValues);
		var _g3 = 0;
		var _g13 = c.lookupValues;
		while(_g3 < _g13) {
			var j1 = _g3++;
			var q = decodeState.readBits(c.valueBits);
			if(q == -1) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"fail lookup",{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 161, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "read"}));
			}
			mults[j1] = q;
		}
		c.multiplicands = new Array(c.lookupValues);
		var _g21 = 0;
		var _g31 = c.lookupValues;
		while(_g21 < _g31) {
			var j2 = _g21++;
			c.multiplicands[j2] = mults[j2] * c.deltaValue + c.minimumValue;
		}
		if(c.lookupType == 2 && c.sequenceP) {
			var _g22 = 1;
			var _g32 = c.lookupValues;
			while(_g22 < _g32) {
				var j3 = _g22++;
				c.multiplicands[j3] = c.multiplicands[j3 - 1];
			}
			c.sequenceP = false;
		}
	}
	return c;
};
kha_audio2_ogg_vorbis_data_Codebook.prototype = {
	dimensions: null
	,entries: null
	,codewordLengths: null
	,minimumValue: null
	,deltaValue: null
	,valueBits: null
	,lookupType: null
	,sequenceP: null
	,sparse: null
	,lookupValues: null
	,multiplicands: null
	,codewords: null
	,fastHuffman: null
	,sortedCodewords: null
	,sortedValues: null
	,sortedEntries: null
	,addEntry: function(huffCode,symbol,count,len,values) {
		if(!this.sparse) {
			this.codewords[symbol] = huffCode;
		} else {
			this.codewords[count] = huffCode;
			this.codewordLengths[count] = len;
			values[count] = symbol;
		}
	}
	,includeInSort: function(len) {
		if(this.sparse) {
			return true;
		} else if(len == 255) {
			return false;
		} else if(len > 10) {
			return true;
		} else {
			return false;
		}
	}
	,computeCodewords: function(len,n,values) {
		var available = new Array(32);
		available[0] = 0;
		available[1] = 0;
		available[2] = 0;
		available[3] = 0;
		available[4] = 0;
		available[5] = 0;
		available[6] = 0;
		available[7] = 0;
		available[8] = 0;
		available[9] = 0;
		available[10] = 0;
		available[11] = 0;
		available[12] = 0;
		available[13] = 0;
		available[14] = 0;
		available[15] = 0;
		available[16] = 0;
		available[17] = 0;
		available[18] = 0;
		available[19] = 0;
		available[20] = 0;
		available[21] = 0;
		available[22] = 0;
		available[23] = 0;
		available[24] = 0;
		available[25] = 0;
		available[26] = 0;
		available[27] = 0;
		available[28] = 0;
		available[29] = 0;
		available[30] = 0;
		available[31] = 0;
		var k = 0;
		while(k < n) {
			if(len[k] < 255) {
				break;
			}
			++k;
		}
		if(k == n) {
			return true;
		}
		var m = 0;
		m = 1;
		if(!this.sparse) {
			this.codewords[k] = 0;
		} else {
			this.codewords[0] = 0;
			this.codewordLengths[0] = len[k];
			values[0] = k;
		}
		var i = 0;
		while(++i <= len[k]) available[i] = 1 << 32 - i;
		i = k;
		while(++i < n) {
			var z = len[i];
			if(z == 255) {
				continue;
			}
			while(z > 0 && available[z] == 0) --z;
			if(z == 0) {
				return false;
			}
			var res = available[z];
			available[z] = 0;
			var n1 = res;
			n1 = (res & -1431655766) >>> 1 | (res & 1431655765) << 1;
			n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
			n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
			n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
			var huffCode = n1 >>> 16 | n1 << 16;
			var count = m++;
			if(!this.sparse) {
				this.codewords[i] = huffCode;
			} else {
				this.codewords[count] = huffCode;
				this.codewordLengths[count] = len[i];
				values[count] = i;
			}
			if(z != len[i]) {
				var y = len[i];
				while(y > z) {
					available[y] = res + (1 << 32 - y);
					--y;
				}
			}
		}
		return true;
	}
	,computeSortedHuffman: function(lengths,values) {
		if(!this.sparse) {
			var k = 0;
			var _g = 0;
			var _g1 = this.entries;
			while(_g < _g1) {
				var i = _g++;
				var len = lengths[i];
				if(this.sparse ? true : len == 255 ? false : len > 10) {
					var n = this.codewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					this.sortedCodewords[k++] = n >>> 16 | n << 16;
				}
			}
		} else {
			var _g2 = 0;
			var _g11 = this.sortedEntries;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var n1 = this.codewords[i1];
				n1 = (n1 & -1431655766) >>> 1 | (n1 & 1431655765) << 1;
				n1 = (n1 & -858993460) >>> 2 | (n1 & 858993459) << 2;
				n1 = (n1 & -252645136) >>> 4 | (n1 & 252645135) << 4;
				n1 = (n1 & -16711936) >>> 8 | (n1 & 16711935) << 8;
				this.sortedCodewords[i1] = n1 >>> 16 | n1 << 16;
			}
		}
		this.sortedCodewords[this.sortedEntries] = -1;
		this.sortedCodewords.sort(kha_audio2_ogg_vorbis_VorbisTools.uintAsc);
		var _g3 = 0;
		var _g12 = this.sparse ? this.sortedEntries : this.entries;
		while(_g3 < _g12) {
			var i2 = _g3++;
			var huffLen = this.sparse ? lengths[values[i2]] : lengths[i2];
			if(this.sparse ? true : huffLen == 255 ? false : huffLen > 10) {
				var n2 = this.codewords[i2];
				n2 = (n2 & -1431655766) >>> 1 | (n2 & 1431655765) << 1;
				n2 = (n2 & -858993460) >>> 2 | (n2 & 858993459) << 2;
				n2 = (n2 & -252645136) >>> 4 | (n2 & 252645135) << 4;
				n2 = (n2 & -16711936) >>> 8 | (n2 & 16711935) << 8;
				var code = n2 >>> 16 | n2 << 16;
				var x = 0;
				var n3 = this.sortedEntries;
				while(n3 > 1) {
					var m = x + (n3 >> 1);
					if(_$UInt_UInt_$Impl_$.gte(code,this.sortedCodewords[m])) {
						x = m;
						n3 -= n3 >> 1;
					} else {
						n3 >>= 1;
					}
				}
				if(this.sparse) {
					this.sortedValues[x] = values[i2];
					this.codewordLengths[x] = huffLen;
				} else {
					this.sortedValues[x] = i2;
				}
			}
		}
	}
	,computeAcceleratedHuffman: function() {
		this.fastHuffman = new Array(1024);
		this.fastHuffman[0] = -1;
		var _g = 0;
		while(_g < 1024) this.fastHuffman[_g++] = -1;
		var _g2 = 0;
		var _g3 = this.sparse ? this.sortedEntries : this.entries;
		while(_g2 < _g3) {
			var i = _g2++;
			if(this.codewordLengths[i] <= 10) {
				var z;
				if(this.sparse) {
					var n = this.sortedCodewords[i];
					n = (n & -1431655766) >>> 1 | (n & 1431655765) << 1;
					n = (n & -858993460) >>> 2 | (n & 858993459) << 2;
					n = (n & -252645136) >>> 4 | (n & 252645135) << 4;
					n = (n & -16711936) >>> 8 | (n & 16711935) << 8;
					z = n >>> 16 | n << 16;
				} else {
					z = this.codewords[i];
				}
				while(z < 1024) {
					this.fastHuffman[z] = i;
					z += 1 << this.codewordLengths[i];
				}
			}
		}
	}
	,codebookDecode: function(decodeState,output,offset,len) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		var minimumValue = this.minimumValue;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		if(this.lookupType == 1) {
			var div = 1;
			var last = 0.0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var val1 = multiplicands[_$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0] + last;
				var _g2 = offset + _g++;
				output[_g2] = output[_g2] + val1;
				if(sequenceP) {
					last = val1 + minimumValue;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		if(sequenceP) {
			var last1 = 0.0;
			var _g3 = 0;
			var _g11 = len;
			while(_g3 < _g11) {
				var i1 = _g3++;
				var val2 = multiplicands[z + i1] + last1;
				var _g4 = offset + i1;
				output[_g4] = output[_g4] + val2;
				last1 = val2 + minimumValue;
			}
		} else {
			var _g5 = 0;
			var _g12 = len;
			while(_g5 < _g12) {
				var i2 = _g5++;
				var _g6 = offset + i2;
				output[_g6] = output[_g6] + multiplicands[z + i2];
			}
		}
		return true;
	}
	,codebookDecodeStep: function(decodeState,output,offset,len,step) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		var z = val;
		var last = 0.0;
		if(z < 0) {
			return false;
		}
		if(len > this.dimensions) {
			len = this.dimensions;
		}
		var lookupValues = this.lookupValues;
		var sequenceP = this.sequenceP;
		var multiplicands = this.multiplicands;
		if(this.lookupType == 1) {
			var div = 1;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var val1 = multiplicands[_$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0] + last;
				var _g2 = offset + _g++ * step;
				output[_g2] = output[_g2] + val1;
				if(sequenceP) {
					last = val1;
				}
				div = div * lookupValues;
			}
			return true;
		}
		z *= this.dimensions;
		var _g3 = 0;
		var _g11 = len;
		while(_g3 < _g11) {
			var i1 = _g3++;
			var val2 = multiplicands[z + i1] + last;
			var _g4 = offset + i1 * step;
			output[_g4] = output[_g4] + val2;
			if(sequenceP) {
				last = val2;
			}
		}
		return true;
	}
	,decodeStart: function(decodeState) {
		if(decodeState.validBits < 10) {
			decodeState.prepHuffman();
		}
		var i = this.fastHuffman[decodeState.acc & 1023];
		var val;
		if(i >= 0) {
			var l = this.codewordLengths[i];
			decodeState.acc = decodeState.acc >>> l;
			decodeState.validBits -= l;
			if(decodeState.validBits < 0) {
				decodeState.validBits = 0;
				val = -1;
			} else {
				val = i;
			}
		} else {
			val = decodeState.decodeScalarRaw(this);
		}
		if(this.sparse) {
			val = this.sortedValues[val];
		}
		return val;
	}
	,decodeDeinterleaveRepeat: function(decodeState,residueBuffers,ch,cInter,pInter,len,totalDecode) {
		var effective = this.dimensions;
		if(this.lookupType == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 488, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
		}
		var multiplicands = this.multiplicands;
		var sequenceP = this.sequenceP;
		var lookupValues = this.lookupValues;
		while(totalDecode > 0) {
			var last = 0.0;
			if(decodeState.validBits < 10) {
				decodeState.prepHuffman();
			}
			var i = this.fastHuffman[decodeState.acc & 1023];
			var val;
			if(i >= 0) {
				var l = this.codewordLengths[i];
				decodeState.acc = decodeState.acc >>> l;
				decodeState.validBits -= l;
				if(decodeState.validBits < 0) {
					decodeState.validBits = 0;
					val = -1;
				} else {
					val = i;
				}
			} else {
				val = decodeState.decodeScalarRaw(this);
			}
			if(this.sparse) {
				val = this.sortedValues[val];
			}
			var z = val;
			if(z < 0) {
				if(decodeState.bytesInSeg == 0 && decodeState.lastSeg) {
					return null;
				}
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Codebook.hx", lineNumber : 503, className : "kha.audio2.ogg.vorbis.data.Codebook", methodName : "decodeDeinterleaveRepeat"}));
			}
			if(cInter + pInter * ch + effective > len * ch) {
				effective = len * ch - (pInter * ch - cInter);
			}
			if(this.lookupType == 1) {
				var div = 1;
				if(sequenceP) {
					var _g = 0;
					var _g1 = effective;
					while(_g < _g1) {
						++_g;
						var val1 = multiplicands[_$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0] + last;
						var _g2 = pInter;
						var _g11 = residueBuffers[cInter];
						_g11[_g2] = _g11[_g2] + val1;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val1;
						div = div * lookupValues;
					}
				} else {
					var _g3 = 0;
					var _g12 = effective;
					while(_g3 < _g12) {
						++_g3;
						var _g4 = pInter;
						var _g13 = residueBuffers[cInter];
						_g13[_g4] = _g13[_g4] + multiplicands[_$UInt_UInt_$Impl_$.toFloat(z / div | 0) % _$UInt_UInt_$Impl_$.toFloat(lookupValues) | 0];
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						div = div * lookupValues;
					}
				}
			} else {
				z *= this.dimensions;
				if(sequenceP) {
					var _g5 = 0;
					var _g14 = effective;
					while(_g5 < _g14) {
						var val2 = multiplicands[z + _g5++] + last;
						var _g6 = pInter;
						var _g15 = residueBuffers[cInter];
						_g15[_g6] = _g15[_g6] + val2;
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
						last = val2;
					}
				} else {
					var _g7 = 0;
					var _g16 = effective;
					while(_g7 < _g16) {
						var _g8 = pInter;
						var _g17 = residueBuffers[cInter];
						_g17[_g8] = _g17[_g8] + multiplicands[z + _g7++];
						if(++cInter == ch) {
							cInter = 0;
							++pInter;
						}
					}
				}
			}
			totalDecode -= effective;
		}
		return { cInter : cInter, pInter : pInter};
	}
	,residueDecode: function(decodeState,target,offset,n,rtype) {
		if(rtype == 0) {
			var step = n / this.dimensions | 0;
			var _g = 0;
			while(_g < step) {
				var k = _g++;
				if(!this.codebookDecodeStep(decodeState,target,offset + k,n - offset - k,step)) {
					return false;
				}
			}
		} else {
			var k1 = 0;
			while(k1 < n) {
				if(!this.codebookDecode(decodeState,target,offset,n - k1)) {
					return false;
				}
				k1 += this.dimensions;
				offset += this.dimensions;
			}
		}
		return true;
	}
	,__class__: kha_audio2_ogg_vorbis_data_Codebook
};
var kha_audio2_ogg_vorbis_data_Comment = function() {
	this.data = new haxe_ds_StringMap();
};
$hxClasses["kha.audio2.ogg.vorbis.data.Comment"] = kha_audio2_ogg_vorbis_data_Comment;
kha_audio2_ogg_vorbis_data_Comment.__name__ = "kha.audio2.ogg.vorbis.data.Comment";
kha_audio2_ogg_vorbis_data_Comment.prototype = {
	data: null
	,get_title: function() {
		return this.getString("title");
	}
	,get_loopStart: function() {
		return Std.parseInt(this.getString("loopstart"));
	}
	,get_loopLength: function() {
		return Std.parseInt(this.getString("looplength"));
	}
	,get_version: function() {
		return this.getString("version");
	}
	,get_album: function() {
		return this.getString("album");
	}
	,get_organization: function() {
		return this.getString("organization");
	}
	,get_tracknumber: function() {
		return this.getString("tracknumber");
	}
	,get_performer: function() {
		return this.getString("performer");
	}
	,get_copyright: function() {
		return this.getString("copyright");
	}
	,get_license: function() {
		return this.getString("license");
	}
	,get_artist: function() {
		return this.getString("artist");
	}
	,get_description: function() {
		return this.getString("description");
	}
	,get_genre: function() {
		return this.getString("genre");
	}
	,get_date: function() {
		return this.getString("date");
	}
	,get_location: function() {
		return this.getString("location");
	}
	,get_contact: function() {
		return this.getString("contact");
	}
	,get_isrc: function() {
		return this.getString("isrc");
	}
	,get_artists: function() {
		return this.getArray("artist");
	}
	,add: function(key,value) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			(__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key]).push(value);
		} else {
			var v = [value];
			var _this2 = this.data;
			if(__map_reserved[key] != null) {
				_this2.setReserved(key,v);
			} else {
				_this2.h[key] = v;
			}
		}
	}
	,getString: function(key) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			return (__map_reserved[key] != null ? _this1.getReserved(key) : _this1.h[key])[0];
		} else {
			return null;
		}
	}
	,getArray: function(key) {
		key = key.toLowerCase();
		var _this = this.data;
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.data;
			if(__map_reserved[key] != null) {
				return _this1.getReserved(key);
			} else {
				return _this1.h[key];
			}
		} else {
			return null;
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Comment
	,__properties__: {get_artists:"get_artists",get_isrc:"get_isrc",get_contact:"get_contact",get_location:"get_location",get_date:"get_date",get_genre:"get_genre",get_description:"get_description",get_artist:"get_artist",get_license:"get_license",get_copyright:"get_copyright",get_performer:"get_performer",get_tracknumber:"get_tracknumber",get_organization:"get_organization",get_album:"get_album",get_version:"get_version",get_loopLength:"get_loopLength",get_loopStart:"get_loopStart",get_title:"get_title"}
};
var kha_audio2_ogg_vorbis_data_Floor = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor"] = kha_audio2_ogg_vorbis_data_Floor;
kha_audio2_ogg_vorbis_data_Floor.__name__ = "kha.audio2.ogg.vorbis.data.Floor";
kha_audio2_ogg_vorbis_data_Floor.read = function(decodeState,codebooks) {
	var floor = new kha_audio2_ogg_vorbis_data_Floor();
	floor.type = decodeState.readBits(16);
	if(floor.type > 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 28, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	}
	if(floor.type == 0) {
		var g = floor.floor0 = new kha_audio2_ogg_vorbis_data_Floor0();
		g.order = decodeState.readBits(8);
		g.rate = decodeState.readBits(16);
		g.barkMapSize = decodeState.readBits(16);
		g.amplitudeBits = decodeState.readBits(6);
		g.amplitudeOffset = decodeState.readBits(8);
		g.numberOfBooks = decodeState.readBits(4) + 1;
		var _g = 0;
		var _g1 = g.numberOfBooks;
		while(_g < _g1) g.bookList[_g++] = decodeState.readBits(8);
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 41, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
	} else {
		var p = [];
		var g1 = floor.floor1 = new kha_audio2_ogg_vorbis_data_Floor1();
		var maxClass = -1;
		g1.partitions = decodeState.readBits(5);
		g1.partitionClassList = new Array(g1.partitions);
		var _g2 = 0;
		var _g11 = g1.partitions;
		while(_g2 < _g11) {
			var j = _g2++;
			g1.partitionClassList[j] = decodeState.readBits(4);
			if(g1.partitionClassList[j] > maxClass) {
				maxClass = g1.partitionClassList[j];
			}
		}
		g1.classDimensions = new Array(maxClass + 1);
		g1.classMasterbooks = new Array(maxClass + 1);
		g1.classSubclasses = new Array(maxClass + 1);
		g1.subclassBooks = new Array(maxClass + 1);
		var _g21 = 0;
		var _g3 = maxClass + 1;
		while(_g21 < _g3) {
			var j1 = _g21++;
			g1.classDimensions[j1] = decodeState.readBits(3) + 1;
			g1.classSubclasses[j1] = decodeState.readBits(2);
			if(g1.classSubclasses[j1] != 0) {
				g1.classMasterbooks[j1] = decodeState.readBits(8);
				if(g1.classMasterbooks[j1] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 64, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
			var kl = 1 << g1.classSubclasses[j1];
			g1.subclassBooks[j1] = new Array(kl);
			var _g22 = 0;
			while(_g22 < kl) {
				var k = _g22++;
				g1.subclassBooks[j1][k] = decodeState.readBits(8) - 1;
				if(g1.subclassBooks[j1][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Floor.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Floor", methodName : "read"}));
				}
			}
		}
		g1.floor1Multiplier = decodeState.readBits(2) + 1;
		g1.rangebits = decodeState.readBits(4);
		g1.xlist = new Array(250);
		g1.xlist[0] = 0;
		g1.xlist[1] = 1 << g1.rangebits;
		g1.values = 2;
		var _g4 = 0;
		var _g5 = g1.partitions;
		while(_g4 < _g5) {
			var _g41 = 0;
			var _g51 = g1.classDimensions[g1.partitionClassList[_g4++]];
			while(_g41 < _g51) {
				++_g41;
				g1.xlist[g1.values] = decodeState.readBits(g1.rangebits);
				g1.values++;
			}
		}
		var _g6 = 0;
		var _g7 = g1.values;
		while(_g6 < _g7) {
			var j2 = _g6++;
			p.push(new kha_audio2_ogg_vorbis_data_IntPoint());
			p[j2].x = g1.xlist[j2];
			p[j2].y = j2;
		}
		p.sort(kha_audio2_ogg_vorbis_VorbisTools.pointCompare);
		g1.sortedOrder = new Array(g1.values);
		var _g8 = 0;
		var _g9 = g1.values;
		while(_g8 < _g9) {
			var j3 = _g8++;
			g1.sortedOrder[j3] = p[j3].y;
		}
		g1.neighbors = new Array(g1.values);
		var _g10 = 2;
		var _g111 = g1.values;
		while(_g10 < _g111) {
			var j4 = _g10++;
			var x = g1.xlist;
			var low = -1;
			var high = 65536;
			var plow = 0;
			var phigh = 0;
			var _g12 = 0;
			while(_g12 < j4) {
				var i = _g12++;
				if(x[i] > low && x[i] < x[j4]) {
					plow = i;
					low = x[i];
				}
				if(x[i] < high && x[i] > x[j4]) {
					phigh = i;
					high = x[i];
				}
			}
			g1.neighbors[j4] = new Array(g1.values);
			g1.neighbors[j4][0] = plow;
			g1.neighbors[j4][1] = phigh;
		}
	}
	return floor;
};
kha_audio2_ogg_vorbis_data_Floor.prototype = {
	floor0: null
	,floor1: null
	,type: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor
};
var kha_audio2_ogg_vorbis_data_Floor0 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor0"] = kha_audio2_ogg_vorbis_data_Floor0;
kha_audio2_ogg_vorbis_data_Floor0.__name__ = "kha.audio2.ogg.vorbis.data.Floor0";
kha_audio2_ogg_vorbis_data_Floor0.prototype = {
	order: null
	,rate: null
	,barkMapSize: null
	,amplitudeBits: null
	,amplitudeOffset: null
	,numberOfBooks: null
	,bookList: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor0
};
var kha_audio2_ogg_vorbis_data_Floor1 = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Floor1"] = kha_audio2_ogg_vorbis_data_Floor1;
kha_audio2_ogg_vorbis_data_Floor1.__name__ = "kha.audio2.ogg.vorbis.data.Floor1";
kha_audio2_ogg_vorbis_data_Floor1.prototype = {
	partitions: null
	,partitionClassList: null
	,classDimensions: null
	,classSubclasses: null
	,classMasterbooks: null
	,subclassBooks: null
	,xlist: null
	,sortedOrder: null
	,neighbors: null
	,floor1Multiplier: null
	,rangebits: null
	,values: null
	,__class__: kha_audio2_ogg_vorbis_data_Floor1
};
var kha_audio2_ogg_vorbis_data_Header = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Header"] = kha_audio2_ogg_vorbis_data_Header;
kha_audio2_ogg_vorbis_data_Header.__name__ = "kha.audio2.ogg.vorbis.data.Header";
kha_audio2_ogg_vorbis_data_Header.read = function(decodeState) {
	var page = decodeState.page;
	page.start(decodeState);
	if((page.flag & 2) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"not firstPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 4) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"lastPage",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if((page.flag & 1) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"continuedPacket",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.firstPageValidate();
	decodeState.inputPosition += 1;
	if(decodeState.input.readByte() != 1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"decodeState head",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 57, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header = new haxe_io_Bytes(new ArrayBuffer(6));
	var x;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[0] = x;
	var x1;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x1 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x1 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[1] = x1;
	var x2;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x2 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x2 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[2] = x2;
	var x3;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x3 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x3 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[3] = x3;
	var x4;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x4 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x4 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[4] = x4;
	var x5;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x5 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x5 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header.b[5] = x5;
	if(header.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	decodeState.inputPosition += 4;
	var version = decodeState.input.readInt32();
	if(version != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"vorbis version : " + version,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 66, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header1 = new kha_audio2_ogg_vorbis_data_Header();
	decodeState.inputPosition += 1;
	header1.channel = decodeState.input.readByte();
	if(header1.channel == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no channel",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 73, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	} else if(header1.channel > 16) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,"too many channels",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 75, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.sampleRate = decodeState.input.readInt32();
	if(header1.sampleRate == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,"no sampling rate",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 80, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 4;
	header1.maximumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.nominalBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 4;
	header1.minimumBitRate = decodeState.input.readInt32();
	decodeState.inputPosition += 1;
	var x6 = decodeState.input.readByte();
	var log0 = x6 & 15;
	var log1 = x6 >> 4;
	header1.blocksize0 = 1 << log0;
	header1.blocksize1 = 1 << log1;
	if(log0 < 6 || log0 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 93, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log1 < 6 || log1 > 13) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 96, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	if(log0 > log1) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 99, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.inputPosition += 1;
	var x7 = decodeState.input.readByte();
	if((x7 & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 105, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.page.start(decodeState);
	decodeState.startPacket();
	var len = 0;
	var output = new haxe_io_BytesOutput();
	while(true) {
		len = decodeState.next();
		if(!(len != 0)) {
			break;
		}
		decodeState.inputPosition += len;
		output.write(decodeState.input.read(len));
		decodeState.bytesInSeg = 0;
	}
	var packetInput = new haxe_io_BytesInput(output.getBytes());
	packetInput.readByte();
	packetInput.read(6);
	header1.vendor = packetInput.readString(packetInput.readInt32());
	header1.comment = new kha_audio2_ogg_vorbis_data_Comment();
	var commentCount = packetInput.readInt32();
	var _g = 0;
	while(_g < commentCount) {
		++_g;
		var str = packetInput.readString(packetInput.readInt32());
		var splitter = str.indexOf("=");
		if(splitter != -1) {
			header1.comment.add(str.substring(0,splitter),str.substring(splitter + 1));
		}
	}
	if((packetInput.readByte() & 1) == 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 141, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	decodeState.startPacket();
	var x8;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x8 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x8 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	if(x8 != 5) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"setup packet",{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 149, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
	}
	var header2 = new haxe_io_Bytes(new ArrayBuffer(6));
	var x9;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x9 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x9 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[0] = x9;
	var x10;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x10 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x10 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[1] = x10;
	var x11;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x11 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x11 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[2] = x11;
	var x12;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x12 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x12 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[3] = x12;
	var x13;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x13 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x13 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[4] = x13;
	var x14;
	if(decodeState.bytesInSeg == 0 && (decodeState.lastSeg || decodeState.next() == 0)) {
		x14 = -1;
	} else {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		x14 = decodeState.input.readByte();
	}
	decodeState.validBits = 0;
	header2.b[5] = x14;
	if(header2.toString() != "vorbis") {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"vorbis header",{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 301, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "vorbisValidate"}));
	}
	var codebookCount = decodeState.readBits(8) + 1;
	header1.codebooks = new Array(codebookCount);
	var _g1 = 0;
	while(_g1 < codebookCount) header1.codebooks[_g1++] = kha_audio2_ogg_vorbis_data_Codebook.read(decodeState);
	x7 = decodeState.readBits(6) + 1;
	var _g2 = 0;
	var _g3 = x7;
	while(_g2 < _g3) {
		++_g2;
		if(decodeState.readBits(16) != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 165, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	var floorCount = decodeState.readBits(6) + 1;
	header1.floorConfig = new Array(floorCount);
	var _g4 = 0;
	while(_g4 < floorCount) header1.floorConfig[_g4++] = kha_audio2_ogg_vorbis_data_Floor.read(decodeState,header1.codebooks);
	var residueCount = decodeState.readBits(6) + 1;
	header1.residueConfig = new Array(residueCount);
	var _g6 = 0;
	while(_g6 < residueCount) header1.residueConfig[_g6++] = kha_audio2_ogg_vorbis_data_Residue.read(decodeState,header1.codebooks);
	var mappingCount = decodeState.readBits(6) + 1;
	header1.mapping = new Array(mappingCount);
	var _g8 = 0;
	while(_g8 < mappingCount) {
		var map = kha_audio2_ogg_vorbis_data_Mapping.read(decodeState,header1.channel);
		header1.mapping[_g8++] = map;
		var _g81 = 0;
		var _g9 = map.submaps;
		while(_g81 < _g9) {
			var j = _g81++;
			if(map.submapFloor[j] >= header1.floorConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 191, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
			if(map.submapResidue[j] >= header1.residueConfig.length) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 194, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
			}
		}
	}
	var modeCount = decodeState.readBits(6) + 1;
	header1.modes = new Array(modeCount);
	var _g10 = 0;
	while(_g10 < modeCount) {
		var mode = kha_audio2_ogg_vorbis_data_Mode.read(decodeState);
		header1.modes[_g10++] = mode;
		if(mode.mapping >= header1.mapping.length) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Header.hx", lineNumber : 205, className : "kha.audio2.ogg.vorbis.data.Header", methodName : "read"}));
		}
	}
	while(decodeState.bytesInSeg != 0 || !decodeState.lastSeg && decodeState.next() != 0) {
		decodeState.bytesInSeg--;
		decodeState.inputPosition += 1;
		decodeState.input.readByte();
	}
	return header1;
};
kha_audio2_ogg_vorbis_data_Header.prototype = {
	maximumBitRate: null
	,nominalBitRate: null
	,minimumBitRate: null
	,sampleRate: null
	,channel: null
	,blocksize0: null
	,blocksize1: null
	,codebooks: null
	,floorConfig: null
	,residueConfig: null
	,mapping: null
	,modes: null
	,comment: null
	,vendor: null
	,__class__: kha_audio2_ogg_vorbis_data_Header
};
var kha_audio2_ogg_vorbis_data_IntPoint = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.IntPoint"] = kha_audio2_ogg_vorbis_data_IntPoint;
kha_audio2_ogg_vorbis_data_IntPoint.__name__ = "kha.audio2.ogg.vorbis.data.IntPoint";
kha_audio2_ogg_vorbis_data_IntPoint.prototype = {
	x: null
	,y: null
	,__class__: kha_audio2_ogg_vorbis_data_IntPoint
};
var kha_audio2_ogg_vorbis_data_Mapping = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mapping"] = kha_audio2_ogg_vorbis_data_Mapping;
kha_audio2_ogg_vorbis_data_Mapping.__name__ = "kha.audio2.ogg.vorbis.data.Mapping";
kha_audio2_ogg_vorbis_data_Mapping.read = function(decodeState,channels) {
	var m = new kha_audio2_ogg_vorbis_data_Mapping();
	var mappingType = decodeState.readBits(16);
	if(mappingType != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,"mapping type " + mappingType,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	m.chan = new Array(channels);
	var _g = 0;
	while(_g < channels) m.chan[_g++] = new kha_audio2_ogg_vorbis_data_MappingChannel();
	if(decodeState.readBits(1) != 0) {
		m.submaps = decodeState.readBits(4) + 1;
	} else {
		m.submaps = 1;
	}
	if(decodeState.readBits(1) != 0) {
		m.couplingSteps = decodeState.readBits(8) + 1;
		var _g2 = 0;
		var _g3 = m.couplingSteps;
		while(_g2 < _g3) {
			var k = _g2++;
			var n = channels - 1;
			var log2_4 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			m.chan[k].magnitude = decodeState.readBits(n < 16384 ? n < 16 ? log2_4[n] : n < 512 ? 5 + log2_4[n >> 5] : 10 + log2_4[n >> 10] : n < 16777216 ? n < 524288 ? 15 + log2_4[n >> 15] : 20 + log2_4[n >> 20] : n < 536870912 ? 25 + log2_4[n >> 25] : n < -2147483648 ? 30 + log2_4[n >> 30] : 0);
			var n1 = channels - 1;
			var log2_41 = [0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4];
			m.chan[k].angle = decodeState.readBits(n1 < 16384 ? n1 < 16 ? log2_41[n1] : n1 < 512 ? 5 + log2_41[n1 >> 5] : 10 + log2_41[n1 >> 10] : n1 < 16777216 ? n1 < 524288 ? 15 + log2_41[n1 >> 15] : 20 + log2_41[n1 >> 20] : n1 < 536870912 ? 25 + log2_41[n1 >> 25] : n1 < -2147483648 ? 30 + log2_41[n1 >> 30] : 0);
			if(m.chan[k].magnitude >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 46, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].angle >= channels) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 49, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
			if(m.chan[k].magnitude == m.chan[k].angle) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 52, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		m.couplingSteps = 0;
	}
	if(decodeState.readBits(2) != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 61, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
	}
	if(m.submaps > 1) {
		var _g21 = 0;
		while(_g21 < channels) {
			var j = _g21++;
			m.chan[j].mux = decodeState.readBits(4);
			if(m.chan[j].mux >= m.submaps) {
				throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 67, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "read"}));
			}
		}
	} else {
		var _g22 = 0;
		while(_g22 < channels) m.chan[_g22++].mux = 0;
	}
	m.submapFloor = new Array(m.submaps);
	m.submapResidue = new Array(m.submaps);
	var _g23 = 0;
	var _g31 = m.submaps;
	while(_g23 < _g31) {
		var j1 = _g23++;
		decodeState.readBits(8);
		m.submapFloor[j1] = decodeState.readBits(8);
		m.submapResidue[j1] = decodeState.readBits(8);
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mapping.prototype = {
	couplingSteps: null
	,chan: null
	,submaps: null
	,submapFloor: null
	,submapResidue: null
	,doFloor: function(floors,i,n,target,finalY,step2Flag) {
		var n2 = n >> 1;
		var floor = floors[this.submapFloor[this.chan[i].mux]];
		if(floor.type == 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mapping.hx", lineNumber : 94, className : "kha.audio2.ogg.vorbis.data.Mapping", methodName : "doFloor"}));
		} else {
			var g = floor.floor1;
			var lx = 0;
			var ly = finalY[0] * g.floor1Multiplier;
			var _g = 1;
			var _g1 = g.values;
			while(_g < _g1) {
				var j = g.sortedOrder[_g++];
				if(finalY[j] >= 0) {
					var hy = finalY[j] * g.floor1Multiplier;
					var hx = g.xlist[j];
					kha_audio2_ogg_vorbis_VorbisTools.drawLine(target,lx,ly,hx,hy,n2);
					lx = hx;
					ly = hy;
				}
			}
			if(lx < n2) {
				var _g2 = lx;
				while(_g2 < n2) {
					var j1 = _g2++;
					target[j1] = target[j1] * kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE[ly];
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Mapping
};
var kha_audio2_ogg_vorbis_data_MappingChannel = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.MappingChannel"] = kha_audio2_ogg_vorbis_data_MappingChannel;
kha_audio2_ogg_vorbis_data_MappingChannel.__name__ = "kha.audio2.ogg.vorbis.data.MappingChannel";
kha_audio2_ogg_vorbis_data_MappingChannel.prototype = {
	magnitude: null
	,angle: null
	,mux: null
	,__class__: kha_audio2_ogg_vorbis_data_MappingChannel
};
var kha_audio2_ogg_vorbis_data_Mode = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Mode"] = kha_audio2_ogg_vorbis_data_Mode;
kha_audio2_ogg_vorbis_data_Mode.__name__ = "kha.audio2.ogg.vorbis.data.Mode";
kha_audio2_ogg_vorbis_data_Mode.read = function(decodeState) {
	var m = new kha_audio2_ogg_vorbis_data_Mode();
	m.blockflag = decodeState.readBits(1) != 0;
	m.windowtype = decodeState.readBits(16);
	m.transformtype = decodeState.readBits(16);
	m.mapping = decodeState.readBits(8);
	if(m.windowtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 22, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	if(m.transformtype != 0) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Mode.hx", lineNumber : 25, className : "kha.audio2.ogg.vorbis.data.Mode", methodName : "read"}));
	}
	return m;
};
kha_audio2_ogg_vorbis_data_Mode.prototype = {
	blockflag: null
	,mapping: null
	,windowtype: null
	,transformtype: null
	,__class__: kha_audio2_ogg_vorbis_data_Mode
};
var kha_audio2_ogg_vorbis_data_Page = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Page"] = kha_audio2_ogg_vorbis_data_Page;
kha_audio2_ogg_vorbis_data_Page.__name__ = "kha.audio2.ogg.vorbis.data.Page";
kha_audio2_ogg_vorbis_data_Page.prototype = {
	flag: null
	,clone: function() {
		var page = new kha_audio2_ogg_vorbis_data_Page();
		page.flag = this.flag;
		return page;
	}
	,start: function(decodeState) {
		var tmp;
		var tmp1;
		var tmp2;
		decodeState.inputPosition += 1;
		if(decodeState.input.readByte() == 79) {
			decodeState.inputPosition += 1;
			tmp2 = decodeState.input.readByte() != 103;
		} else {
			tmp2 = true;
		}
		if(!tmp2) {
			decodeState.inputPosition += 1;
			tmp1 = decodeState.input.readByte() != 103;
		} else {
			tmp1 = true;
		}
		if(!tmp1) {
			decodeState.inputPosition += 1;
			tmp = decodeState.input.readByte() != 83;
		} else {
			tmp = true;
		}
		if(tmp) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,null,{ fileName : "kha/audio2/ogg/vorbis/VorbisDecodeState.hx", lineNumber : 324, className : "kha.audio2.ogg.vorbis.VorbisDecodeState", methodName : "capturePattern"}));
		}
		this.startWithoutCapturePattern(decodeState);
	}
	,startWithoutCapturePattern: function(decodeState) {
		decodeState.inputPosition += 1;
		var version = decodeState.input.readByte();
		if(version != 0) {
			throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,"" + version,{ fileName : "kha/audio2/ogg/vorbis/data/Page.hx", lineNumber : 34, className : "kha.audio2.ogg.vorbis.data.Page", methodName : "startWithoutCapturePattern"}));
		}
		decodeState.inputPosition += 1;
		this.flag = decodeState.input.readByte();
		decodeState.inputPosition += 4;
		var loc0 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		var loc1 = decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.inputPosition += 4;
		decodeState.input.readInt32();
		decodeState.setup(loc0,loc1);
	}
	,__class__: kha_audio2_ogg_vorbis_data_Page
};
var kha_audio2_ogg_vorbis_data_PageFlag = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.PageFlag"] = kha_audio2_ogg_vorbis_data_PageFlag;
kha_audio2_ogg_vorbis_data_PageFlag.__name__ = "kha.audio2.ogg.vorbis.data.PageFlag";
var kha_audio2_ogg_vorbis_data_ProbedPage = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.ProbedPage"] = kha_audio2_ogg_vorbis_data_ProbedPage;
kha_audio2_ogg_vorbis_data_ProbedPage.__name__ = "kha.audio2.ogg.vorbis.data.ProbedPage";
kha_audio2_ogg_vorbis_data_ProbedPage.prototype = {
	pageStart: null
	,pageEnd: null
	,afterPreviousPageStart: null
	,firstDecodedSample: null
	,lastDecodedSample: null
	,__class__: kha_audio2_ogg_vorbis_data_ProbedPage
};
var kha_audio2_ogg_vorbis_data_ReaderError = function(type,message,posInfos) {
	if(message == null) {
		message = "";
	}
	this.type = type;
	this.message = message;
	this.posInfos = posInfos;
};
$hxClasses["kha.audio2.ogg.vorbis.data.ReaderError"] = kha_audio2_ogg_vorbis_data_ReaderError;
kha_audio2_ogg_vorbis_data_ReaderError.__name__ = "kha.audio2.ogg.vorbis.data.ReaderError";
kha_audio2_ogg_vorbis_data_ReaderError.prototype = {
	type: null
	,message: null
	,posInfos: null
	,__class__: kha_audio2_ogg_vorbis_data_ReaderError
};
var kha_audio2_ogg_vorbis_data_ReaderErrorType = $hxEnums["kha.audio2.ogg.vorbis.data.ReaderErrorType"] = { __ename__ : true, __constructs__ : ["NEED_MORE_DATA","INVALID_API_MIXING","OUTOFMEM","FEATURE_NOT_SUPPORTED","TOO_MANY_CHANNELS","FILE_OPEN_FAILURE","SEEK_WITHOUT_LENGTH","UNEXPECTED_EOF","SEEK_INVALID","INVALID_SETUP","INVALID_STREAM","MISSING_CAPTURE_PATTERN","INVALID_STREAM_STRUCTURE_VERSION","CONTINUED_PACKET_FLAG_INVALID","INCORRECT_STREAM_SERIAL_NUMBER","INVALID_FIRST_PAGE","BAD_PACKET_TYPE","CANT_FIND_LAST_PAGE","SEEK_FAILED","OTHER"]
	,NEED_MORE_DATA: {_hx_index:0,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_API_MIXING: {_hx_index:1,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OUTOFMEM: {_hx_index:2,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FEATURE_NOT_SUPPORTED: {_hx_index:3,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,TOO_MANY_CHANNELS: {_hx_index:4,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,FILE_OPEN_FAILURE: {_hx_index:5,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_WITHOUT_LENGTH: {_hx_index:6,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,UNEXPECTED_EOF: {_hx_index:7,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_INVALID: {_hx_index:8,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_SETUP: {_hx_index:9,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM: {_hx_index:10,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,MISSING_CAPTURE_PATTERN: {_hx_index:11,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_STREAM_STRUCTURE_VERSION: {_hx_index:12,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CONTINUED_PACKET_FLAG_INVALID: {_hx_index:13,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INCORRECT_STREAM_SERIAL_NUMBER: {_hx_index:14,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,INVALID_FIRST_PAGE: {_hx_index:15,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,BAD_PACKET_TYPE: {_hx_index:16,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,CANT_FIND_LAST_PAGE: {_hx_index:17,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,SEEK_FAILED: {_hx_index:18,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
	,OTHER: {_hx_index:19,__enum__:"kha.audio2.ogg.vorbis.data.ReaderErrorType",toString:$estr}
};
kha_audio2_ogg_vorbis_data_ReaderErrorType.__empty_constructs__ = [kha_audio2_ogg_vorbis_data_ReaderErrorType.NEED_MORE_DATA,kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_API_MIXING,kha_audio2_ogg_vorbis_data_ReaderErrorType.OUTOFMEM,kha_audio2_ogg_vorbis_data_ReaderErrorType.FEATURE_NOT_SUPPORTED,kha_audio2_ogg_vorbis_data_ReaderErrorType.TOO_MANY_CHANNELS,kha_audio2_ogg_vorbis_data_ReaderErrorType.FILE_OPEN_FAILURE,kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_WITHOUT_LENGTH,kha_audio2_ogg_vorbis_data_ReaderErrorType.UNEXPECTED_EOF,kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_INVALID,kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM,kha_audio2_ogg_vorbis_data_ReaderErrorType.MISSING_CAPTURE_PATTERN,kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_STREAM_STRUCTURE_VERSION,kha_audio2_ogg_vorbis_data_ReaderErrorType.CONTINUED_PACKET_FLAG_INVALID,kha_audio2_ogg_vorbis_data_ReaderErrorType.INCORRECT_STREAM_SERIAL_NUMBER,kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_FIRST_PAGE,kha_audio2_ogg_vorbis_data_ReaderErrorType.BAD_PACKET_TYPE,kha_audio2_ogg_vorbis_data_ReaderErrorType.CANT_FIND_LAST_PAGE,kha_audio2_ogg_vorbis_data_ReaderErrorType.SEEK_FAILED,kha_audio2_ogg_vorbis_data_ReaderErrorType.OTHER];
var kha_audio2_ogg_vorbis_data_Residue = function() {
};
$hxClasses["kha.audio2.ogg.vorbis.data.Residue"] = kha_audio2_ogg_vorbis_data_Residue;
kha_audio2_ogg_vorbis_data_Residue.__name__ = "kha.audio2.ogg.vorbis.data.Residue";
kha_audio2_ogg_vorbis_data_Residue.read = function(decodeState,codebooks) {
	var r = new kha_audio2_ogg_vorbis_data_Residue();
	r.type = decodeState.readBits(16);
	if(r.type > 2) {
		throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 29, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
	}
	var residueCascade = new Array(64);
	r.begin = decodeState.readBits(24);
	r.end = decodeState.readBits(24);
	r.partSize = decodeState.readBits(24) + 1;
	var classifications = r.classifications = decodeState.readBits(6) + 1;
	r.classbook = decodeState.readBits(8);
	var _g = 0;
	var _g1 = r.classifications;
	while(_g < _g1) {
		var j = _g++;
		var highBits = 0;
		var lowBits = decodeState.readBits(3);
		if(decodeState.readBits(1) != 0) {
			highBits = decodeState.readBits(5);
		}
		residueCascade[j] = highBits * 8 + lowBits;
	}
	r.residueBooks = new Array(r.classifications);
	var _g2 = 0;
	var _g3 = r.classifications;
	while(_g2 < _g3) {
		var j1 = _g2++;
		r.residueBooks[j1] = new Array(8);
		var _g21 = 0;
		while(_g21 < 8) {
			var k = _g21++;
			if((residueCascade[j1] & 1 << k) != 0) {
				r.residueBooks[j1][k] = decodeState.readBits(8);
				if(r.residueBooks[j1][k] >= codebooks.length) {
					throw new js__$Boot_HaxeError(new kha_audio2_ogg_vorbis_data_ReaderError(kha_audio2_ogg_vorbis_data_ReaderErrorType.INVALID_SETUP,null,{ fileName : "kha/audio2/ogg/vorbis/data/Residue.hx", lineNumber : 55, className : "kha.audio2.ogg.vorbis.data.Residue", methodName : "read"}));
				}
			} else {
				r.residueBooks[j1][k] = -1;
			}
		}
	}
	var el = codebooks[r.classbook].entries;
	var classwords = codebooks[r.classbook].dimensions;
	r.classdata = new Array(el);
	var _g4 = 0;
	while(_g4 < el) {
		var j2 = _g4++;
		var temp = j2;
		var k1 = classwords;
		var cd = r.classdata[j2] = new Array(classwords);
		while(--k1 >= 0) {
			cd[k1] = temp % classifications;
			temp = temp / classifications | 0;
		}
	}
	return r;
};
kha_audio2_ogg_vorbis_data_Residue.prototype = {
	begin: null
	,end: null
	,partSize: null
	,classifications: null
	,classbook: null
	,classdata: null
	,residueBooks: null
	,type: null
	,decode: function(decodeState,header,residueBuffers,ch,n,doNotDecode,channelBuffers) {
		var codebooks = header.codebooks;
		var classwords = codebooks[this.classbook].dimensions;
		var partSize = this.partSize;
		var partRead = _$UInt_UInt_$Impl_$.toFloat(this.end - this.begin) / _$UInt_UInt_$Impl_$.toFloat(partSize) | 0;
		var classifications = new Array(header.channel * partRead + 1);
		var _g = 0;
		while(_g < ch) {
			var i = _g++;
			if(!doNotDecode[i]) {
				var buffer = residueBuffers[i];
				var _g1 = 0;
				var _g11 = buffer.length;
				while(_g1 < _g11) buffer[_g1++] = 0;
			}
		}
		if(this.type == 2 && ch != 1) {
			var _g2 = 0;
			while(_g2 < ch) {
				var j = _g2++;
				if(!doNotDecode[j]) {
					break;
				} else if(j == ch - 1) {
					return;
				}
			}
			var _g4 = 0;
			while(_g4 < 8) {
				var pass = _g4++;
				var pcount = 0;
				if(ch == 2) {
					while(pcount < partRead) {
						var z = this.begin + pcount * partSize;
						var cInter = z & 1;
						var pInter = z >>> 1;
						if(pass == 0) {
							var c = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i1 = c.fastHuffman[decodeState.acc & 1023];
							var val;
							if(i1 >= 0) {
								var l = c.codewordLengths[i1];
								decodeState.acc = decodeState.acc >>> l;
								decodeState.validBits -= l;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val = -1;
								} else {
									val = i1;
								}
							} else {
								val = decodeState.decodeScalarRaw(c);
							}
							if(c.sparse) {
								val = c.sortedValues[val];
							}
							var q = val;
							if(q == -1) {
								return;
							}
							var i2 = classwords;
							while(--i2 >= 0) {
								classifications[i2 + pcount] = q % this.classifications;
								q = q / this.classifications | 0;
							}
						}
						var _g41 = 0;
						while(_g41 < classwords) {
							++_g41;
							if(pcount >= partRead) {
								break;
							}
							var z1 = this.begin + pcount * partSize;
							var b = this.residueBooks[classifications[pcount]][pass];
							if(b >= 0) {
								var result = codebooks[b].decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter,pInter,n,partSize);
								if(result == null) {
									return;
								} else {
									cInter = result.cInter;
									pInter = result.pInter;
								}
							} else {
								z1 = z1 + partSize;
								cInter = z1 & 1;
								pInter = z1 >>> 1;
							}
							++pcount;
						}
					}
				} else if(ch == 1) {
					while(pcount < partRead) {
						var cInter1 = 0;
						var pInter1 = this.begin + pcount * partSize;
						if(pass == 0) {
							var c1 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i3 = c1.fastHuffman[decodeState.acc & 1023];
							var val1;
							if(i3 >= 0) {
								var l1 = c1.codewordLengths[i3];
								decodeState.acc = decodeState.acc >>> l1;
								decodeState.validBits -= l1;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val1 = -1;
								} else {
									val1 = i3;
								}
							} else {
								val1 = decodeState.decodeScalarRaw(c1);
							}
							if(c1.sparse) {
								val1 = c1.sortedValues[val1];
							}
							var q1 = val1;
							if(q1 == -1) {
								return;
							}
							var i4 = classwords;
							while(--i4 >= 0) {
								classifications[i4 + pcount] = q1 % this.classifications;
								q1 = q1 / this.classifications | 0;
							}
						}
						var _g42 = 0;
						while(_g42 < classwords) {
							++_g42;
							if(pcount >= partRead) {
								break;
							}
							var z2 = this.begin + pcount * partSize;
							var b1 = this.residueBooks[classifications[pcount]][pass];
							if(b1 >= 0) {
								var result1 = codebooks[b1].decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter1,pInter1,n,partSize);
								if(result1 == null) {
									return;
								} else {
									cInter1 = result1.cInter;
									pInter1 = result1.pInter;
								}
							} else {
								z2 = z2 + partSize;
								cInter1 = 0;
								pInter1 = z2;
							}
							++pcount;
						}
					}
				} else {
					while(pcount < partRead) {
						var z3 = this.begin + pcount * partSize;
						var cInter2 = _$UInt_UInt_$Impl_$.toFloat(z3) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						var pInter2 = _$UInt_UInt_$Impl_$.toFloat(z3) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
						if(pass == 0) {
							var c2 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i5 = c2.fastHuffman[decodeState.acc & 1023];
							var val2;
							if(i5 >= 0) {
								var l2 = c2.codewordLengths[i5];
								decodeState.acc = decodeState.acc >>> l2;
								decodeState.validBits -= l2;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val2 = -1;
								} else {
									val2 = i5;
								}
							} else {
								val2 = decodeState.decodeScalarRaw(c2);
							}
							if(c2.sparse) {
								val2 = c2.sortedValues[val2];
							}
							var q2 = val2;
							if(q2 == -1) {
								return;
							}
							var i6 = classwords;
							while(--i6 >= 0) {
								classifications[i6 + pcount] = q2 % this.classifications;
								q2 = q2 / this.classifications | 0;
							}
						}
						var _g43 = 0;
						while(_g43 < classwords) {
							++_g43;
							if(pcount >= partRead) {
								break;
							}
							var z4 = this.begin + pcount * partSize;
							var b2 = this.residueBooks[classifications[pcount]][pass];
							if(b2 >= 0) {
								var result2 = codebooks[b2].decodeDeinterleaveRepeat(decodeState,residueBuffers,ch,cInter2,pInter2,n,partSize);
								if(result2 == null) {
									return;
								} else {
									cInter2 = result2.cInter;
									pInter2 = result2.pInter;
								}
							} else {
								z4 = z4 + partSize;
								cInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) % _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
								pInter2 = _$UInt_UInt_$Impl_$.toFloat(z4) / _$UInt_UInt_$Impl_$.toFloat(ch) | 0;
							}
							++pcount;
						}
					}
				}
			}
			return;
		}
		var _g21 = 0;
		while(_g21 < 8) {
			var pass1 = _g21++;
			var pcount1 = 0;
			while(pcount1 < partRead) {
				if(pass1 == 0) {
					var _g22 = 0;
					while(_g22 < ch) {
						var j1 = _g22++;
						if(!doNotDecode[j1]) {
							var c3 = codebooks[this.classbook];
							if(decodeState.validBits < 10) {
								decodeState.prepHuffman();
							}
							var i7 = c3.fastHuffman[decodeState.acc & 1023];
							var val3;
							if(i7 >= 0) {
								var l3 = c3.codewordLengths[i7];
								decodeState.acc = decodeState.acc >>> l3;
								decodeState.validBits -= l3;
								if(decodeState.validBits < 0) {
									decodeState.validBits = 0;
									val3 = -1;
								} else {
									val3 = i7;
								}
							} else {
								val3 = decodeState.decodeScalarRaw(c3);
							}
							if(c3.sparse) {
								val3 = c3.sortedValues[val3];
							}
							var temp = val3;
							if(temp == -1) {
								return;
							}
							var i8 = classwords;
							while(--i8 >= 0) {
								classifications[j1 * partRead + i8 + pcount1] = temp % this.classifications;
								temp = temp / this.classifications | 0;
							}
						}
					}
				}
				var _g23 = 0;
				while(_g23 < classwords) {
					++_g23;
					if(pcount1 >= partRead) {
						break;
					}
					var _g24 = 0;
					while(_g24 < ch) {
						var j2 = _g24++;
						if(!doNotDecode[j2]) {
							var b3 = this.residueBooks[classifications[j2 * partRead + pcount1]][pass1];
							if(b3 >= 0) {
								if(!codebooks[b3].residueDecode(decodeState,residueBuffers[j2],this.begin + pcount1 * partSize,partSize,this.type)) {
									return;
								}
							}
						}
					}
					++pcount1;
				}
			}
		}
	}
	,__class__: kha_audio2_ogg_vorbis_data_Residue
};
var kha_audio2_ogg_vorbis_data_Setting = function() { };
$hxClasses["kha.audio2.ogg.vorbis.data.Setting"] = kha_audio2_ogg_vorbis_data_Setting;
kha_audio2_ogg_vorbis_data_Setting.__name__ = "kha.audio2.ogg.vorbis.data.Setting";
var kha_graphics1_Graphics = function() { };
$hxClasses["kha.graphics1.Graphics"] = kha_graphics1_Graphics;
kha_graphics1_Graphics.__name__ = "kha.graphics1.Graphics";
kha_graphics1_Graphics.__isInterface__ = true;
kha_graphics1_Graphics.prototype = {
	begin: null
	,end: null
	,setPixel: null
	,__class__: kha_graphics1_Graphics
};
var kha_graphics2_Graphics = function() {
	this.transformations = [new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1)];
	this.transformationIndex = 0;
	this.opacities = [1];
	this.myFontSize = 12;
	this.pipe = null;
};
$hxClasses["kha.graphics2.Graphics"] = kha_graphics2_Graphics;
kha_graphics2_Graphics.__name__ = "kha.graphics2.Graphics";
kha_graphics2_Graphics.prototype = {
	begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
	}
	,end: function() {
	}
	,flush: function() {
	}
	,clear: function(color) {
	}
	,drawImage: function(img,x,y) {
		this.drawSubImage(img,x,y,0,0,img.get_width(),img.get_height());
	}
	,drawSubImage: function(img,x,y,sx,sy,sw,sh) {
		this.drawScaledSubImage(img,sx,sy,sw,sh,x,y,sw,sh);
	}
	,drawScaledImage: function(img,dx,dy,dw,dh) {
		this.drawScaledSubImage(img,0,0,img.get_width(),img.get_height(),dx,dy,dw,dh);
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,fillRect: function(x,y,width,height) {
	}
	,drawString: function(text,x,y) {
	}
	,drawCharacters: function(text,start,length,x,y) {
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
	}
	,get_imageScaleQuality: function() {
		return 0;
	}
	,set_imageScaleQuality: function(value) {
		return 1;
	}
	,get_mipmapScaleQuality: function() {
		return 0;
	}
	,set_mipmapScaleQuality: function(value) {
		return 1;
	}
	,get_color: function() {
		return -16777216;
	}
	,set_color: function(color) {
		return -16777216;
	}
	,get_font: function() {
		return null;
	}
	,set_font: function(font) {
		return null;
	}
	,get_fontSize: function() {
		return this.myFontSize;
	}
	,set_fontSize: function(value) {
		return this.myFontSize = value;
	}
	,get_transformation: function() {
		return this.transformations[this.transformationIndex];
	}
	,set_transformation: function(transformation) {
		this.setTransformation(transformation);
		var _this = this.transformations[this.transformationIndex];
		_this._00 = transformation._00;
		_this._10 = transformation._10;
		_this._20 = transformation._20;
		_this._01 = transformation._01;
		_this._11 = transformation._11;
		_this._21 = transformation._21;
		_this._02 = transformation._02;
		_this._12 = transformation._12;
		_this._22 = transformation._22;
		return transformation;
	}
	,pushTransformation: function(trans) {
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = trans._00;
		_this._10 = trans._10;
		_this._20 = trans._20;
		_this._01 = trans._01;
		_this._11 = trans._11;
		_this._21 = trans._21;
		_this._02 = trans._02;
		_this._12 = trans._12;
		_this._22 = trans._22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,popTransformation: function() {
		this.transformationIndex--;
		this.setTransformation(this.transformations[this.transformationIndex]);
		return this.transformations[this.transformationIndex + 1];
	}
	,scale: function(x,y) {
		var _this = this.transformations[this.transformationIndex];
		var _this__10 = 0;
		var _this__20 = 0;
		var _this__01 = 0;
		var _this__21 = 0;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var _01 = _this__01 * m._00 + y * m._01 + _this__21 * m._02;
		var _11 = _this__01 * m._10 + y * m._11 + _this__21 * m._12;
		var _21 = _this__01 * m._20 + y * m._21 + _this__21 * m._22;
		var _02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var _12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var _22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		_this._00 = x * m._00 + _this__10 * m._01 + _this__20 * m._02;
		_this._10 = x * m._10 + _this__10 * m._11 + _this__20 * m._12;
		_this._20 = x * m._20 + _this__10 * m._21 + _this__20 * m._22;
		_this._01 = _01;
		_this._11 = _11;
		_this._21 = _21;
		_this._02 = _02;
		_this._12 = _12;
		_this._22 = _22;
	}
	,translation: function(tx,ty) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		return new kha_math_FastMatrix3(_this__00 * m._00 + _this__10 * m._01 + tx * m._02,_this__00 * m._10 + _this__10 * m._11 + tx * m._12,_this__00 * m._20 + _this__10 * m._21 + tx * m._22,_this__01 * m._00 + _this__11 * m._01 + ty * m._02,_this__01 * m._10 + _this__11 * m._11 + ty * m._12,_this__01 * m._20 + _this__11 * m._21 + ty * m._22,_this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02,_this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12,_this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22);
	}
	,translate: function(tx,ty) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var _01 = _this__01 * m._00 + _this__11 * m._01 + ty * m._02;
		var _11 = _this__01 * m._10 + _this__11 * m._11 + ty * m._12;
		var _21 = _this__01 * m._20 + _this__11 * m._21 + ty * m._22;
		var _02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var _12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var _22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		_this._00 = _this__00 * m._00 + _this__10 * m._01 + tx * m._02;
		_this._10 = _this__00 * m._10 + _this__10 * m._11 + tx * m._12;
		_this._20 = _this__00 * m._20 + _this__10 * m._21 + tx * m._22;
		_this._01 = _01;
		_this._11 = _11;
		_this._21 = _21;
		_this._02 = _02;
		_this._12 = _12;
		_this._22 = _22;
	}
	,pushTranslation: function(tx,ty) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var m = this.transformations[this.transformationIndex];
		var _00 = _this__00 * m._00 + _this__10 * m._01 + tx * m._02;
		var _10 = _this__00 * m._10 + _this__10 * m._11 + tx * m._12;
		var _20 = _this__00 * m._20 + _this__10 * m._21 + tx * m._22;
		var _01 = _this__01 * m._00 + _this__11 * m._01 + ty * m._02;
		var _11 = _this__01 * m._10 + _this__11 * m._11 + ty * m._12;
		var _21 = _this__01 * m._20 + _this__11 * m._21 + ty * m._22;
		var _02 = _this__02 * m._00 + _this__12 * m._01 + _this__22 * m._02;
		var _12 = _this__02 * m._10 + _this__12 * m._11 + _this__22 * m._12;
		var _22 = _this__02 * m._20 + _this__12 * m._21 + _this__22 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = _00;
		_this._10 = _10;
		_this._20 = _20;
		_this._01 = _01;
		_this._11 = _11;
		_this._21 = _21;
		_this._02 = _02;
		_this._12 = _12;
		_this._22 = _22;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,rotation: function(angle,centerx,centery) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var _00 = Math.cos(angle);
		var _10 = -Math.sin(angle);
		var _01 = Math.sin(angle);
		var _11 = Math.cos(angle);
		var m__20 = 0;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _001 = _this__00 * _00 + _this__10 * _01 + centerx * m__02;
		var _101 = _this__00 * _10 + _this__10 * _11 + centerx * m__12;
		var _20 = _this__00 * m__20 + _this__10 * m__21 + centerx * m__22;
		var _011 = _this__01 * _00 + _this__11 * _01 + centery * m__02;
		var _111 = _this__01 * _10 + _this__11 * _11 + centery * m__12;
		var _21 = _this__01 * m__20 + _this__11 * m__21 + centery * m__22;
		var _02 = _this__02 * _00 + _this__12 * _01 + _this__22 * m__02;
		var _12 = _this__02 * _10 + _this__12 * _11 + _this__22 * m__12;
		var _22 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__00 = 1;
		var m__10 = 0;
		var m__201 = -centerx;
		var m__01 = 0;
		var m__11 = 1;
		var m__211 = -centery;
		var m__021 = 0;
		var m__121 = 0;
		var m__221 = 1;
		var _002 = _001 * m__00 + _101 * m__01 + _20 * m__021;
		var _102 = _001 * m__10 + _101 * m__11 + _20 * m__121;
		var _201 = _001 * m__201 + _101 * m__211 + _20 * m__221;
		var _012 = _011 * m__00 + _111 * m__01 + _21 * m__021;
		var _112 = _011 * m__10 + _111 * m__11 + _21 * m__121;
		var _211 = _011 * m__201 + _111 * m__211 + _21 * m__221;
		var _021 = _02 * m__00 + _12 * m__01 + _22 * m__021;
		var _121 = _02 * m__10 + _12 * m__11 + _22 * m__121;
		var _221 = _02 * m__201 + _12 * m__211 + _22 * m__221;
		var m = this.transformations[this.transformationIndex];
		return new kha_math_FastMatrix3(_002 * m._00 + _102 * m._01 + _201 * m._02,_002 * m._10 + _102 * m._11 + _201 * m._12,_002 * m._20 + _102 * m._21 + _201 * m._22,_012 * m._00 + _112 * m._01 + _211 * m._02,_012 * m._10 + _112 * m._11 + _211 * m._12,_012 * m._20 + _112 * m._21 + _211 * m._22,_021 * m._00 + _121 * m._01 + _221 * m._02,_021 * m._10 + _121 * m._11 + _221 * m._12,_021 * m._20 + _121 * m._21 + _221 * m._22);
	}
	,rotate: function(angle,centerx,centery) {
		var _this = this.transformations[this.transformationIndex];
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var _00 = Math.cos(angle);
		var _10 = -Math.sin(angle);
		var _01 = Math.sin(angle);
		var _11 = Math.cos(angle);
		var m__20 = 0;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _001 = _this__00 * _00 + _this__10 * _01 + centerx * m__02;
		var _101 = _this__00 * _10 + _this__10 * _11 + centerx * m__12;
		var _20 = _this__00 * m__20 + _this__10 * m__21 + centerx * m__22;
		var _011 = _this__01 * _00 + _this__11 * _01 + centery * m__02;
		var _111 = _this__01 * _10 + _this__11 * _11 + centery * m__12;
		var _21 = _this__01 * m__20 + _this__11 * m__21 + centery * m__22;
		var _02 = _this__02 * _00 + _this__12 * _01 + _this__22 * m__02;
		var _12 = _this__02 * _10 + _this__12 * _11 + _this__22 * m__12;
		var _22 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__00 = 1;
		var m__10 = 0;
		var m__201 = -centerx;
		var m__01 = 0;
		var m__11 = 1;
		var m__211 = -centery;
		var m__021 = 0;
		var m__121 = 0;
		var m__221 = 1;
		var _002 = _001 * m__00 + _101 * m__01 + _20 * m__021;
		var _102 = _001 * m__10 + _101 * m__11 + _20 * m__121;
		var _201 = _001 * m__201 + _101 * m__211 + _20 * m__221;
		var _012 = _011 * m__00 + _111 * m__01 + _21 * m__021;
		var _112 = _011 * m__10 + _111 * m__11 + _21 * m__121;
		var _211 = _011 * m__201 + _111 * m__211 + _21 * m__221;
		var _021 = _02 * m__00 + _12 * m__01 + _22 * m__021;
		var _121 = _02 * m__10 + _12 * m__11 + _22 * m__121;
		var _221 = _02 * m__201 + _12 * m__211 + _22 * m__221;
		var m = this.transformations[this.transformationIndex];
		var _013 = _012 * m._00 + _112 * m._01 + _211 * m._02;
		var _113 = _012 * m._10 + _112 * m._11 + _211 * m._12;
		var _212 = _012 * m._20 + _112 * m._21 + _211 * m._22;
		var _022 = _021 * m._00 + _121 * m._01 + _221 * m._02;
		var _122 = _021 * m._10 + _121 * m._11 + _221 * m._12;
		var _222 = _021 * m._20 + _121 * m._21 + _221 * m._22;
		_this._00 = _002 * m._00 + _102 * m._01 + _201 * m._02;
		_this._10 = _002 * m._10 + _102 * m._11 + _201 * m._12;
		_this._20 = _002 * m._20 + _102 * m._21 + _201 * m._22;
		_this._01 = _013;
		_this._11 = _113;
		_this._21 = _212;
		_this._02 = _022;
		_this._12 = _122;
		_this._22 = _222;
	}
	,pushRotation: function(angle,centerx,centery) {
		var _this__00 = 1;
		var _this__10 = 0;
		var _this__01 = 0;
		var _this__11 = 1;
		var _this__02 = 0;
		var _this__12 = 0;
		var _this__22 = 1;
		var _00 = Math.cos(angle);
		var _10 = -Math.sin(angle);
		var _01 = Math.sin(angle);
		var _11 = Math.cos(angle);
		var m__20 = 0;
		var m__21 = 0;
		var m__02 = 0;
		var m__12 = 0;
		var m__22 = 1;
		var _001 = _this__00 * _00 + _this__10 * _01 + centerx * m__02;
		var _101 = _this__00 * _10 + _this__10 * _11 + centerx * m__12;
		var _20 = _this__00 * m__20 + _this__10 * m__21 + centerx * m__22;
		var _011 = _this__01 * _00 + _this__11 * _01 + centery * m__02;
		var _111 = _this__01 * _10 + _this__11 * _11 + centery * m__12;
		var _21 = _this__01 * m__20 + _this__11 * m__21 + centery * m__22;
		var _02 = _this__02 * _00 + _this__12 * _01 + _this__22 * m__02;
		var _12 = _this__02 * _10 + _this__12 * _11 + _this__22 * m__12;
		var _22 = _this__02 * m__20 + _this__12 * m__21 + _this__22 * m__22;
		var m__00 = 1;
		var m__10 = 0;
		var m__201 = -centerx;
		var m__01 = 0;
		var m__11 = 1;
		var m__211 = -centery;
		var m__021 = 0;
		var m__121 = 0;
		var m__221 = 1;
		var _002 = _001 * m__00 + _101 * m__01 + _20 * m__021;
		var _102 = _001 * m__10 + _101 * m__11 + _20 * m__121;
		var _201 = _001 * m__201 + _101 * m__211 + _20 * m__221;
		var _012 = _011 * m__00 + _111 * m__01 + _21 * m__021;
		var _112 = _011 * m__10 + _111 * m__11 + _21 * m__121;
		var _211 = _011 * m__201 + _111 * m__211 + _21 * m__221;
		var _021 = _02 * m__00 + _12 * m__01 + _22 * m__021;
		var _121 = _02 * m__10 + _12 * m__11 + _22 * m__121;
		var _221 = _02 * m__201 + _12 * m__211 + _22 * m__221;
		var m = this.transformations[this.transformationIndex];
		var _003 = _002 * m._00 + _102 * m._01 + _201 * m._02;
		var _103 = _002 * m._10 + _102 * m._11 + _201 * m._12;
		var _202 = _002 * m._20 + _102 * m._21 + _201 * m._22;
		var _013 = _012 * m._00 + _112 * m._01 + _211 * m._02;
		var _113 = _012 * m._10 + _112 * m._11 + _211 * m._12;
		var _212 = _012 * m._20 + _112 * m._21 + _211 * m._22;
		var _022 = _021 * m._00 + _121 * m._01 + _221 * m._02;
		var _122 = _021 * m._10 + _121 * m._11 + _221 * m._12;
		var _222 = _021 * m._20 + _121 * m._21 + _221 * m._22;
		this.transformationIndex++;
		if(this.transformationIndex == this.transformations.length) {
			this.transformations.push(new kha_math_FastMatrix3(1,0,0,0,1,0,0,0,1));
		}
		var _this = this.transformations[this.transformationIndex];
		_this._00 = _003;
		_this._10 = _103;
		_this._20 = _202;
		_this._01 = _013;
		_this._11 = _113;
		_this._21 = _212;
		_this._02 = _022;
		_this._12 = _122;
		_this._22 = _222;
		this.setTransformation(this.transformations[this.transformationIndex]);
	}
	,pushOpacity: function(opacity) {
		this.opacities.push(opacity);
	}
	,popOpacity: function() {
		return this.opacities.pop();
	}
	,get_opacity: function() {
		return this.opacities[this.opacities.length - 1];
	}
	,set_opacity: function(opacity) {
		return this.opacities[this.opacities.length - 1] = opacity;
	}
	,scissor: function(x,y,width,height) {
	}
	,disableScissor: function() {
	}
	,pipe: null
	,get_pipeline: function() {
		return this.pipe;
	}
	,set_pipeline: function(pipeline) {
		this.setPipeline(pipeline);
		return this.pipe = pipeline;
	}
	,transformations: null
	,transformationIndex: null
	,opacities: null
	,myFontSize: null
	,setTransformation: function(transformation) {
	}
	,setOpacity: function(opacity) {
	}
	,setPipeline: function(pipeline) {
	}
	,__class__: kha_graphics2_Graphics
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline",set_opacity:"set_opacity",get_opacity:"get_opacity",set_transformation:"set_transformation",get_transformation:"get_transformation",set_fontSize:"set_fontSize",get_fontSize:"get_fontSize",set_font:"set_font",get_font:"get_font",set_color:"set_color",get_color:"get_color",set_mipmapScaleQuality:"set_mipmapScaleQuality",get_mipmapScaleQuality:"get_mipmapScaleQuality",set_imageScaleQuality:"set_imageScaleQuality",get_imageScaleQuality:"get_imageScaleQuality"}
};
var kha_graphics2_Graphics1 = function(canvas) {
	this.canvas = canvas;
};
$hxClasses["kha.graphics2.Graphics1"] = kha_graphics2_Graphics1;
kha_graphics2_Graphics1.__name__ = "kha.graphics2.Graphics1";
kha_graphics2_Graphics1.__interfaces__ = [kha_graphics1_Graphics];
kha_graphics2_Graphics1.prototype = {
	canvas: null
	,texture: null
	,pixels: null
	,begin: function() {
		if(this.texture == null || (this.texture.get_realWidth() != this.canvas.get_width() || this.texture.get_realHeight() != this.canvas.get_height())) {
			this.texture = kha_Image.create(this.canvas.get_width(),this.canvas.get_height(),0,2);
		}
		this.pixels = this.texture.lock();
	}
	,end: function() {
		this.texture.unlock();
		this.canvas.get_g2().begin(false);
		this.canvas.get_g2().drawImage(this.texture,0,0);
		this.canvas.get_g2().end();
	}
	,setPixel: function(x,y,color) {
		this.pixels.setInt32(y * this.texture.get_stride() + x * 4,kha__$Color_Color_$Impl_$.fromBytes(color & 255,(color & 65280) >>> 8,(color & 16711680) >>> 16,color >>> 24));
	}
	,__class__: kha_graphics2_Graphics1
};
var kha_graphics2_truetype_VectorOfIntPointer = function() {
};
$hxClasses["kha.graphics2.truetype.VectorOfIntPointer"] = kha_graphics2_truetype_VectorOfIntPointer;
kha_graphics2_truetype_VectorOfIntPointer.__name__ = "kha.graphics2.truetype.VectorOfIntPointer";
kha_graphics2_truetype_VectorOfIntPointer.prototype = {
	value: null
	,__class__: kha_graphics2_truetype_VectorOfIntPointer
};
var kha_graphics2_truetype_Stbtt_$temp_$rect = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_rect"] = kha_graphics2_truetype_Stbtt_$temp_$rect;
kha_graphics2_truetype_Stbtt_$temp_$rect.__name__ = "kha.graphics2.truetype.Stbtt_temp_rect";
kha_graphics2_truetype_Stbtt_$temp_$rect.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$rect
};
var kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_glyph_h_metrics";
kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics.prototype = {
	advanceWidth: null
	,leftSideBearing: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_font_v_metrics"] = kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics;
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.__name__ = "kha.graphics2.truetype.Stbtt_temp_font_v_metrics";
kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics.prototype = {
	ascent: null
	,descent: null
	,lineGap: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics
};
var kha_graphics2_truetype_Stbtt_$temp_$region = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_temp_region"] = kha_graphics2_truetype_Stbtt_$temp_$region;
kha_graphics2_truetype_Stbtt_$temp_$region.__name__ = "kha.graphics2.truetype.Stbtt_temp_region";
kha_graphics2_truetype_Stbtt_$temp_$region.prototype = {
	width: null
	,height: null
	,xoff: null
	,yoff: null
	,__class__: kha_graphics2_truetype_Stbtt_$temp_$region
};
var kha_graphics2_truetype_Stbtt_$_$buf = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__buf"] = kha_graphics2_truetype_Stbtt_$_$buf;
kha_graphics2_truetype_Stbtt_$_$buf.__name__ = "kha.graphics2.truetype.Stbtt__buf";
kha_graphics2_truetype_Stbtt_$_$buf.prototype = {
	data: null
	,cursor: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$buf
};
var kha_graphics2_truetype_Stbtt_$bakedchar = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_bakedchar"] = kha_graphics2_truetype_Stbtt_$bakedchar;
kha_graphics2_truetype_Stbtt_$bakedchar.__name__ = "kha.graphics2.truetype.Stbtt_bakedchar";
kha_graphics2_truetype_Stbtt_$bakedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,__class__: kha_graphics2_truetype_Stbtt_$bakedchar
};
var kha_graphics2_truetype_Stbtt_$aligned_$quad = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_aligned_quad"] = kha_graphics2_truetype_Stbtt_$aligned_$quad;
kha_graphics2_truetype_Stbtt_$aligned_$quad.__name__ = "kha.graphics2.truetype.Stbtt_aligned_quad";
kha_graphics2_truetype_Stbtt_$aligned_$quad.prototype = {
	x0: null
	,y0: null
	,s0: null
	,t0: null
	,x1: null
	,y1: null
	,s1: null
	,t1: null
	,__class__: kha_graphics2_truetype_Stbtt_$aligned_$quad
};
var kha_graphics2_truetype_Stbtt_$packedchar = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_packedchar"] = kha_graphics2_truetype_Stbtt_$packedchar;
kha_graphics2_truetype_Stbtt_$packedchar.__name__ = "kha.graphics2.truetype.Stbtt_packedchar";
kha_graphics2_truetype_Stbtt_$packedchar.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,xoff: null
	,yoff: null
	,xadvance: null
	,xoff2: null
	,yoff2: null
	,__class__: kha_graphics2_truetype_Stbtt_$packedchar
};
var kha_graphics2_truetype_Stbtt_$pack_$range = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_range"] = kha_graphics2_truetype_Stbtt_$pack_$range;
kha_graphics2_truetype_Stbtt_$pack_$range.__name__ = "kha.graphics2.truetype.Stbtt_pack_range";
kha_graphics2_truetype_Stbtt_$pack_$range.prototype = {
	font_size: null
	,first_unicode_codepoint_in_range: null
	,array_of_unicode_codepoints: null
	,num_chars: null
	,chardata_for_range: null
	,h_oversample: null
	,v_oversample: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$range
};
var kha_graphics2_truetype_Stbtt_$pack_$context = function() { };
$hxClasses["kha.graphics2.truetype.Stbtt_pack_context"] = kha_graphics2_truetype_Stbtt_$pack_$context;
kha_graphics2_truetype_Stbtt_$pack_$context.__name__ = "kha.graphics2.truetype.Stbtt_pack_context";
kha_graphics2_truetype_Stbtt_$pack_$context.prototype = {
	width: null
	,height: null
	,stride_in_bytes: null
	,padding: null
	,h_oversample: null
	,v_oversample: null
	,pixels: null
	,__class__: kha_graphics2_truetype_Stbtt_$pack_$context
};
var kha_graphics2_truetype_Stbtt_$fontinfo = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_fontinfo"] = kha_graphics2_truetype_Stbtt_$fontinfo;
kha_graphics2_truetype_Stbtt_$fontinfo.__name__ = "kha.graphics2.truetype.Stbtt_fontinfo";
kha_graphics2_truetype_Stbtt_$fontinfo.prototype = {
	data: null
	,fontstart: null
	,numGlyphs: null
	,loca: null
	,head: null
	,glyf: null
	,hhea: null
	,hmtx: null
	,kern: null
	,gpos: null
	,index_map: null
	,indexToLocFormat: null
	,cff: null
	,charstrings: null
	,gsubrs: null
	,subrs: null
	,fontdicts: null
	,fdselect: null
	,__class__: kha_graphics2_truetype_Stbtt_$fontinfo
};
var kha_graphics2_truetype_Stbtt_$vertex = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt_vertex"] = kha_graphics2_truetype_Stbtt_$vertex;
kha_graphics2_truetype_Stbtt_$vertex.__name__ = "kha.graphics2.truetype.Stbtt_vertex";
kha_graphics2_truetype_Stbtt_$vertex.prototype = {
	x: null
	,y: null
	,cx: null
	,cy: null
	,cx1: null
	,cy1: null
	,type: null
	,padding: null
	,__class__: kha_graphics2_truetype_Stbtt_$vertex
};
var kha_graphics2_truetype_Stbtt_$_$bitmap = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__bitmap"] = kha_graphics2_truetype_Stbtt_$_$bitmap;
kha_graphics2_truetype_Stbtt_$_$bitmap.__name__ = "kha.graphics2.truetype.Stbtt__bitmap";
kha_graphics2_truetype_Stbtt_$_$bitmap.prototype = {
	w: null
	,h: null
	,stride: null
	,pixels: null
	,pixels_offset: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$bitmap
};
var kha_graphics2_truetype_Stbtt_$_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__edge"] = kha_graphics2_truetype_Stbtt_$_$edge;
kha_graphics2_truetype_Stbtt_$_$edge.__name__ = "kha.graphics2.truetype.Stbtt__edge";
kha_graphics2_truetype_Stbtt_$_$edge.prototype = {
	x0: null
	,y0: null
	,x1: null
	,y1: null
	,invert: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$edge
};
var kha_graphics2_truetype_Stbtt_$_$active_$edge = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__active_edge"] = kha_graphics2_truetype_Stbtt_$_$active_$edge;
kha_graphics2_truetype_Stbtt_$_$active_$edge.__name__ = "kha.graphics2.truetype.Stbtt__active_edge";
kha_graphics2_truetype_Stbtt_$_$active_$edge.prototype = {
	next: null
	,fx: null
	,fdx: null
	,fdy: null
	,direction: null
	,sy: null
	,ey: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$active_$edge
};
var kha_graphics2_truetype_Stbtt_$_$point = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__point"] = kha_graphics2_truetype_Stbtt_$_$point;
kha_graphics2_truetype_Stbtt_$_$point.__name__ = "kha.graphics2.truetype.Stbtt__point";
kha_graphics2_truetype_Stbtt_$_$point.prototype = {
	x: null
	,y: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$point
};
var kha_graphics2_truetype_Stbtt_$_$csctx = function() {
};
$hxClasses["kha.graphics2.truetype.Stbtt__csctx"] = kha_graphics2_truetype_Stbtt_$_$csctx;
kha_graphics2_truetype_Stbtt_$_$csctx.__name__ = "kha.graphics2.truetype.Stbtt__csctx";
kha_graphics2_truetype_Stbtt_$_$csctx.prototype = {
	bounds: null
	,started: null
	,first_x: null
	,first_y: null
	,x: null
	,y: null
	,min_x: null
	,min_y: null
	,max_x: null
	,max_y: null
	,pvertices: null
	,num_vertices: null
	,__class__: kha_graphics2_truetype_Stbtt_$_$csctx
};
var kha_graphics2_truetype_StbTruetype = function() { };
$hxClasses["kha.graphics2.truetype.StbTruetype"] = kha_graphics2_truetype_StbTruetype;
kha_graphics2_truetype_StbTruetype.__name__ = "kha.graphics2.truetype.StbTruetype";
kha_graphics2_truetype_StbTruetype.STBTT_assert = function(value) {
	if(!value) {
		throw new js__$Boot_HaxeError("Error");
	}
};
kha_graphics2_truetype_StbTruetype.STBTT_POINT_SIZE = function(x) {
	return -x;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_get8 = function(b) {
	if(b.cursor >= b.data.get_length()) {
		return 0;
	}
	var pos = b.cursor++;
	if(pos == null) {
		pos = 0;
	}
	return b.data.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_peek8 = function(b) {
	if(b.cursor >= b.data.get_length()) {
		return 0;
	}
	var pos = b.cursor;
	if(pos == null) {
		pos = 0;
	}
	return b.data.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_seek = function(b,o) {
	if(!(!(o > b.data.get_length() || o < 0))) {
		throw new js__$Boot_HaxeError("Error");
	}
	b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_skip = function(b,o) {
	var o1 = b.cursor + o;
	if(!(!(o1 > b.data.get_length() || o1 < 0))) {
		throw new js__$Boot_HaxeError("Error");
	}
	b.cursor = o1 > b.data.get_length() || o1 < 0 ? b.data.get_length() : o1;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_get = function(b,n) {
	var v = 0;
	if(!(n >= 1 && n <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var _g = 0;
	while(_g < n) {
		++_g;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	return v;
};
kha_graphics2_truetype_StbTruetype.stbtt__new_buf = function(p,size) {
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	if(size >= 1073741824) {
		throw new js__$Boot_HaxeError("Error");
	}
	r.data = p;
	r.cursor = 0;
	return r;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_get16 = function(b) {
	var v = 0;
	var _g = 0;
	while(_g < 2) {
		++_g;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	return v;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_get32 = function(b) {
	var v = 0;
	var _g = 0;
	while(_g < 4) {
		++_g;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	return v;
};
kha_graphics2_truetype_StbTruetype.stbtt__buf_range = function(b,o,s) {
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	if(o < 0 || s < 0 || o > b.data.get_length() || s > b.data.get_length() - o) {
		return r;
	}
	r.data = b.data.sub(o,s);
	return r;
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_get_index = function(b) {
	var start = b.cursor;
	var v = 0;
	var _g = 0;
	while(_g < 2) {
		++_g;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	if(count > 0) {
		var offsize;
		if(b.cursor >= b.data.get_length()) {
			offsize = 0;
		} else {
			var pos1 = b.cursor++;
			if(pos1 == null) {
				pos1 = 0;
			}
			offsize = b.data.readU8(pos1);
		}
		if(!(offsize >= 1 && offsize <= 4)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var o = b.cursor + offsize * count;
		if(!(!(o > b.data.get_length() || o < 0))) {
			throw new js__$Boot_HaxeError("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var v2 = 0;
		if(!(offsize >= 1 && offsize <= 4)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var _g1 = 0;
		var _g11 = offsize;
		while(_g1 < _g11) {
			++_g1;
			var v3;
			if(b.cursor >= b.data.get_length()) {
				v3 = 0;
			} else {
				var pos2 = b.cursor++;
				if(pos2 == null) {
					pos2 = 0;
				}
				v3 = b.data.readU8(pos2);
			}
			v2 = v2 << 8 | v3;
		}
		var o1 = b.cursor + (v2 - 1);
		if(!(!(o1 > b.data.get_length() || o1 < 0))) {
			throw new js__$Boot_HaxeError("Error");
		}
		b.cursor = o1 > b.data.get_length() || o1 < 0 ? b.data.get_length() : o1;
		var s = b.cursor - start;
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
			return r;
		} else {
			r.data = b.data.sub(start,s);
			return r;
		}
	}
	return b;
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_int = function(b) {
	var b0;
	if(b.cursor >= b.data.get_length()) {
		b0 = 0;
	} else {
		var pos = b.cursor++;
		if(pos == null) {
			pos = 0;
		}
		b0 = b.data.readU8(pos);
	}
	if(b0 >= 32 && b0 <= 246) {
		return b0 - 139;
	} else if(b0 >= 247 && b0 <= 250) {
		var tmp;
		if(b.cursor >= b.data.get_length()) {
			tmp = 0;
		} else {
			var pos1 = b.cursor++;
			if(pos1 == null) {
				pos1 = 0;
			}
			tmp = b.data.readU8(pos1);
		}
		return (b0 - 247) * 256 + tmp + 108;
	} else if(b0 >= 251 && b0 <= 254) {
		var tmp1;
		if(b.cursor >= b.data.get_length()) {
			tmp1 = 0;
		} else {
			var pos2 = b.cursor++;
			if(pos2 == null) {
				pos2 = 0;
			}
			tmp1 = b.data.readU8(pos2);
		}
		return -(b0 - 251) * 256 - tmp1 - 108;
	} else if(b0 == 28) {
		var v = 0;
		var _g = 0;
		while(_g < 2) {
			++_g;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos3 = b.cursor++;
				if(pos3 == null) {
					pos3 = 0;
				}
				v1 = b.data.readU8(pos3);
			}
			v = v << 8 | v1;
		}
		return v;
	} else if(b0 == 29) {
		var v2 = 0;
		var _g1 = 0;
		while(_g1 < 4) {
			++_g1;
			var v3;
			if(b.cursor >= b.data.get_length()) {
				v3 = 0;
			} else {
				var pos4 = b.cursor++;
				if(pos4 == null) {
					pos4 = 0;
				}
				v3 = b.data.readU8(pos4);
			}
			v2 = v2 << 8 | v3;
		}
		return v2;
	} else {
		throw new js__$Boot_HaxeError("Error");
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_skip_operand = function(b) {
	var v;
	var b0;
	if(b.cursor >= b.data.get_length()) {
		b0 = 0;
	} else {
		var pos = b.cursor;
		if(pos == null) {
			pos = 0;
		}
		b0 = b.data.readU8(pos);
	}
	if(b0 < 28) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(b0 == 30) {
		var o = b.cursor + 1;
		if(!(!(o > b.data.get_length() || o < 0))) {
			throw new js__$Boot_HaxeError("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		while(b.cursor < b.data.get_length()) {
			if(b.cursor >= b.data.get_length()) {
				v = 0;
			} else {
				var pos1 = b.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				v = b.data.readU8(pos1);
			}
			if((v & 15) == 15 || v >> 4 == 15) {
				break;
			}
		}
	} else {
		var b01;
		if(b.cursor >= b.data.get_length()) {
			b01 = 0;
		} else {
			var pos2 = b.cursor++;
			if(pos2 == null) {
				pos2 = 0;
			}
			b01 = b.data.readU8(pos2);
		}
		if(!(b01 >= 32 && b01 <= 246)) {
			if(b01 >= 247 && b01 <= 250) {
				if(b.cursor < b.data.get_length()) {
					var pos3 = b.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
				}
			} else if(b01 >= 251 && b01 <= 254) {
				if(b.cursor < b.data.get_length()) {
					var pos4 = b.cursor++;
					if(pos4 == null) {
						pos4 = 0;
					}
				}
			} else if(b01 == 28) {
				var _g = 0;
				while(_g < 2) {
					++_g;
					if(b.cursor < b.data.get_length()) {
						var pos5 = b.cursor++;
						if(pos5 == null) {
							pos5 = 0;
						}
					}
				}
			} else if(b01 == 29) {
				var _g1 = 0;
				while(_g1 < 4) {
					++_g1;
					if(b.cursor < b.data.get_length()) {
						var pos6 = b.cursor++;
						if(pos6 == null) {
							pos6 = 0;
						}
					}
				}
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__dict_get = function(b,key) {
	if(0 > b.data.get_length()) {
		throw new js__$Boot_HaxeError("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var ret = null;
	while(b.cursor < b.data.get_length()) {
		var start = b.cursor;
		var op;
		while(true) {
			var tmp;
			if(b.cursor >= b.data.get_length()) {
				tmp = 0;
			} else {
				var pos = b.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = b.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(b.cursor >= b.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = b.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = b.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw new js__$Boot_HaxeError("Error");
			}
			if(b0 == 30) {
				var o = b.cursor + 1;
				if(!(!(o > b.data.get_length() || o < 0))) {
					throw new js__$Boot_HaxeError("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				while(b.cursor < b.data.get_length()) {
					if(b.cursor >= b.data.get_length()) {
						v = 0;
					} else {
						var pos2 = b.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = b.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(b.cursor >= b.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = b.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = b.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(b.cursor < b.data.get_length()) {
							var pos4 = b.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(b.cursor < b.data.get_length()) {
							var pos5 = b.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
						}
					} else if(b01 == 28) {
						var _g = 0;
						while(_g < 2) {
							++_g;
							if(b.cursor < b.data.get_length()) {
								var pos6 = b.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
							}
						}
					} else if(b01 == 29) {
						var _g1 = 0;
						while(_g1 < 4) {
							++_g1;
							if(b.cursor < b.data.get_length()) {
								var pos7 = b.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
							}
						}
					} else {
						throw new js__$Boot_HaxeError("Error");
					}
				}
			}
		}
		var end = b.cursor;
		if(b.cursor >= b.data.get_length()) {
			op = 0;
		} else {
			var pos8 = b.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = b.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(b.cursor >= b.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = b.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = b.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == key) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				ret = r;
			} else {
				r.data = b.data.sub(start,s);
				ret = r;
			}
			break;
		}
	}
	if(ret != null) {
		return ret;
	} else {
		var r1 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r1.data = null;
		r1.cursor = 0;
		if(0 > b.data.get_length() || 0 > b.data.get_length()) {
			return r1;
		} else {
			r1.data = b.data.sub(0,0);
			return r1;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__dict_get_ints = function(b,key,outcount,out) {
	var i = 0;
	if(0 > b.data.get_length()) {
		throw new js__$Boot_HaxeError("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var ret = null;
	while(b.cursor < b.data.get_length()) {
		var start = b.cursor;
		var op;
		while(true) {
			var tmp;
			if(b.cursor >= b.data.get_length()) {
				tmp = 0;
			} else {
				var pos = b.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = b.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(b.cursor >= b.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = b.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = b.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw new js__$Boot_HaxeError("Error");
			}
			if(b0 == 30) {
				var o = b.cursor + 1;
				if(!(!(o > b.data.get_length() || o < 0))) {
					throw new js__$Boot_HaxeError("Error");
				}
				b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
				while(b.cursor < b.data.get_length()) {
					if(b.cursor >= b.data.get_length()) {
						v = 0;
					} else {
						var pos2 = b.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = b.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(b.cursor >= b.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = b.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = b.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(b.cursor < b.data.get_length()) {
							var pos4 = b.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(b.cursor < b.data.get_length()) {
							var pos5 = b.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
						}
					} else if(b01 == 28) {
						var _g = 0;
						while(_g < 2) {
							++_g;
							if(b.cursor < b.data.get_length()) {
								var pos6 = b.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
							}
						}
					} else if(b01 == 29) {
						var _g1 = 0;
						while(_g1 < 4) {
							++_g1;
							if(b.cursor < b.data.get_length()) {
								var pos7 = b.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
							}
						}
					} else {
						throw new js__$Boot_HaxeError("Error");
					}
				}
			}
		}
		var end = b.cursor;
		if(b.cursor >= b.data.get_length()) {
			op = 0;
		} else {
			var pos8 = b.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = b.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(b.cursor >= b.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = b.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = b.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == key) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start) {
				ret = r;
			} else {
				r.data = b.data.sub(start,s);
				ret = r;
			}
			break;
		}
	}
	var operands;
	if(ret != null) {
		operands = ret;
	} else {
		var r1 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r1.data = null;
		r1.cursor = 0;
		if(0 > b.data.get_length() || 0 > b.data.get_length()) {
			operands = r1;
		} else {
			r1.data = b.data.sub(0,0);
			operands = r1;
		}
	}
	while(i < outcount && operands.cursor < operands.data.get_length()) {
		var b02;
		if(operands.cursor >= operands.data.get_length()) {
			b02 = 0;
		} else {
			var pos10 = operands.cursor++;
			if(pos10 == null) {
				pos10 = 0;
			}
			b02 = operands.data.readU8(pos10);
		}
		var tmp1;
		if(b02 >= 32 && b02 <= 246) {
			tmp1 = b02 - 139;
		} else if(b02 >= 247 && b02 <= 250) {
			var tmp2;
			if(operands.cursor >= operands.data.get_length()) {
				tmp2 = 0;
			} else {
				var pos11 = operands.cursor++;
				if(pos11 == null) {
					pos11 = 0;
				}
				tmp2 = operands.data.readU8(pos11);
			}
			tmp1 = (b02 - 247) * 256 + tmp2 + 108;
		} else if(b02 >= 251 && b02 <= 254) {
			var tmp3;
			if(operands.cursor >= operands.data.get_length()) {
				tmp3 = 0;
			} else {
				var pos12 = operands.cursor++;
				if(pos12 == null) {
					pos12 = 0;
				}
				tmp3 = operands.data.readU8(pos12);
			}
			tmp1 = -(b02 - 251) * 256 - tmp3 - 108;
		} else if(b02 == 28) {
			var v1 = 0;
			var _g2 = 0;
			while(_g2 < 2) {
				++_g2;
				var v2;
				if(operands.cursor >= operands.data.get_length()) {
					v2 = 0;
				} else {
					var pos13 = operands.cursor++;
					if(pos13 == null) {
						pos13 = 0;
					}
					v2 = operands.data.readU8(pos13);
				}
				v1 = v1 << 8 | v2;
			}
			tmp1 = v1;
		} else if(b02 == 29) {
			var v3 = 0;
			var _g3 = 0;
			while(_g3 < 4) {
				++_g3;
				var v4;
				if(operands.cursor >= operands.data.get_length()) {
					v4 = 0;
				} else {
					var pos14 = operands.cursor++;
					if(pos14 == null) {
						pos14 = 0;
					}
					v4 = operands.data.readU8(pos14);
				}
				v3 = v3 << 8 | v4;
			}
			tmp1 = v3;
		} else {
			throw new js__$Boot_HaxeError("Error");
		}
		out[i] = tmp1;
		++i;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_index_count = function(b) {
	if(0 > b.data.get_length()) {
		throw new js__$Boot_HaxeError("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	while(_g < 2) {
		++_g;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	return v;
};
kha_graphics2_truetype_StbTruetype.stbtt__cff_index_get = function(b,i) {
	if(0 > b.data.get_length()) {
		throw new js__$Boot_HaxeError("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	while(_g < 2) {
		++_g;
		var v1;
		if(b.cursor >= b.data.get_length()) {
			v1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = b.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	var offsize;
	if(b.cursor >= b.data.get_length()) {
		offsize = 0;
	} else {
		var pos1 = b.cursor++;
		if(pos1 == null) {
			pos1 = 0;
		}
		offsize = b.data.readU8(pos1);
	}
	if(!(i >= 0 && i < count)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var o = b.cursor + i * offsize;
	if(!(!(o > b.data.get_length() || o < 0))) {
		throw new js__$Boot_HaxeError("Error");
	}
	b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
	var v2 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var _g1 = 0;
	var _g11 = offsize;
	while(_g1 < _g11) {
		++_g1;
		var v3;
		if(b.cursor >= b.data.get_length()) {
			v3 = 0;
		} else {
			var pos2 = b.cursor++;
			if(pos2 == null) {
				pos2 = 0;
			}
			v3 = b.data.readU8(pos2);
		}
		v2 = v2 << 8 | v3;
	}
	var start = v2;
	var v4 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var _g2 = 0;
	var _g12 = offsize;
	while(_g2 < _g12) {
		++_g2;
		var v5;
		if(b.cursor >= b.data.get_length()) {
			v5 = 0;
		} else {
			var pos3 = b.cursor++;
			if(pos3 == null) {
				pos3 = 0;
			}
			v5 = b.data.readU8(pos3);
		}
		v4 = v4 << 8 | v5;
	}
	var o1 = 2 + (count + 1) * offsize + start;
	var s = v4 - start;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	if(o1 < 0 || s < 0 || o1 > b.data.get_length() || s > b.data.get_length() - o1) {
		return r;
	} else {
		r.data = b.data.sub(o1,s);
		return r;
	}
};
kha_graphics2_truetype_StbTruetype.ttBYTE = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	return p.readU8(pos);
};
kha_graphics2_truetype_StbTruetype.ttCHAR = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos);
	if(n >= 128) {
		return n - 256;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttUSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	return p.readU8(pos + 1) | p.readU8(pos) << 8;
};
kha_graphics2_truetype_StbTruetype.ttSHORT = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos + 1) | p.readU8(pos) << 8;
	if((n & 32768) != 0) {
		return n - 65536;
	}
	return n;
};
kha_graphics2_truetype_StbTruetype.ttULONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var pos1 = pos;
	if(pos == null) {
		pos1 = 0;
	}
	return p.readU8(pos1 + 3) | p.readU8(pos1 + 2) << 8 | p.readU8(pos1 + 1) << 16 | p.readU8(pos1) << 24;
};
kha_graphics2_truetype_StbTruetype.ttLONG = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	return p.readU8(pos + 3) | p.readU8(pos + 2) << 8 | p.readU8(pos + 1) << 16 | p.readU8(pos) << 24;
};
kha_graphics2_truetype_StbTruetype.to_stbtt_uint16 = function(value) {
	return value & 65535;
};
kha_graphics2_truetype_StbTruetype.ttFixed = function(p,pos) {
	if(pos == null) {
		pos = 0;
	}
	var pos1 = pos;
	if(pos == null) {
		pos1 = 0;
	}
	return p.readU8(pos1 + 3) | p.readU8(pos1 + 2) << 8 | p.readU8(pos1 + 1) << 16 | p.readU8(pos1) << 24;
};
kha_graphics2_truetype_StbTruetype.stbtt_tag4 = function(p,pos,c0,c1,c2,c3) {
	if(p.readU8(pos) == c0 && p.readU8(pos + 1) == c1 && p.readU8(pos + 2) == c2) {
		return p.readU8(pos + 3) == c3;
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_tag = function(p,pos,str) {
	if(p.readU8(pos) == HxOverrides.cca(str,0) && p.readU8(pos + 1) == HxOverrides.cca(str,1) && p.readU8(pos + 2) == HxOverrides.cca(str,2)) {
		return p.readU8(pos + 3) == HxOverrides.cca(str,3);
	} else {
		return false;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__isfont = function(font) {
	if(font.readU8(0) == HxOverrides.cca("1",0) && font.readU8(1) == 0 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	if(font.readU8(0) == HxOverrides.cca("typ1",0) && font.readU8(1) == HxOverrides.cca("typ1",1) && font.readU8(2) == HxOverrides.cca("typ1",2) && font.readU8(3) == HxOverrides.cca("typ1",3)) {
		return true;
	}
	if(font.readU8(0) == HxOverrides.cca("OTTO",0) && font.readU8(1) == HxOverrides.cca("OTTO",1) && font.readU8(2) == HxOverrides.cca("OTTO",2) && font.readU8(3) == HxOverrides.cca("OTTO",3)) {
		return true;
	}
	if(font.readU8(0) == 0 && font.readU8(1) == 1 && font.readU8(2) == 0 && font.readU8(3) == 0) {
		return true;
	}
	if(font.readU8(0) == HxOverrides.cca("true",0) && font.readU8(1) == HxOverrides.cca("true",1) && font.readU8(2) == HxOverrides.cca("true",2) && font.readU8(3) == HxOverrides.cca("true",3)) {
		return true;
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__find_table = function(data,fontstart,tag) {
	var pos = fontstart + 4;
	if(pos == null) {
		pos = 0;
	}
	var num_tables = data.readU8(pos + 1) | data.readU8(pos) << 8;
	var tabledir = fontstart + 12;
	var _g = 0;
	while(_g < num_tables) {
		var loc = tabledir + 16 * _g++;
		if(data.readU8(loc) == HxOverrides.cca(tag,0) && data.readU8(loc + 1) == HxOverrides.cca(tag,1) && data.readU8(loc + 2) == HxOverrides.cca(tag,2) && data.readU8(loc + 3) == HxOverrides.cca(tag,3)) {
			var pos1 = loc + 8;
			if(pos1 == null) {
				pos1 = 0;
			}
			var pos2 = pos1;
			if(pos2 == null) {
				pos2 = 0;
			}
			return data.readU8(pos2 + 3) | data.readU8(pos2 + 2) << 8 | data.readU8(pos2 + 1) << 16 | data.readU8(pos2) << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontOffsetForIndex = function(font_collection,index) {
	if(kha_graphics2_truetype_StbTruetype.stbtt__isfont(font_collection)) {
		if(index == 0) {
			return 0;
		} else {
			return -1;
		}
	}
	if(font_collection.readU8(0) == HxOverrides.cca("ttcf",0) && font_collection.readU8(1) == HxOverrides.cca("ttcf",1) && font_collection.readU8(2) == HxOverrides.cca("ttcf",2) && font_collection.readU8(3) == HxOverrides.cca("ttcf",3)) {
		if((font_collection.readU8(7) | font_collection.readU8(6) << 8 | font_collection.readU8(5) << 16 | font_collection.readU8(4) << 24) == 65536 || (font_collection.readU8(7) | font_collection.readU8(6) << 8 | font_collection.readU8(5) << 16 | font_collection.readU8(4) << 24) == 131072) {
			if(index >= (font_collection.readU8(11) | font_collection.readU8(10) << 8 | font_collection.readU8(9) << 16 | font_collection.readU8(8) << 24)) {
				return -1;
			}
			var pos = 12 + index * 4;
			if(pos == null) {
				pos = 0;
			}
			var pos1 = pos;
			if(pos1 == null) {
				pos1 = 0;
			}
			return font_collection.readU8(pos1 + 3) | font_collection.readU8(pos1 + 2) << 8 | font_collection.readU8(pos1 + 1) << 16 | font_collection.readU8(pos1) << 24;
		}
	}
	return -1;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetNumberOfFonts = function(font_collection) {
	if(kha_graphics2_truetype_StbTruetype.stbtt__isfont(font_collection)) {
		return 1;
	}
	if(font_collection.readU8(0) == HxOverrides.cca("ttcf",0) && font_collection.readU8(1) == HxOverrides.cca("ttcf",1) && font_collection.readU8(2) == HxOverrides.cca("ttcf",2) && font_collection.readU8(3) == HxOverrides.cca("ttcf",3)) {
		if((font_collection.readU8(7) | font_collection.readU8(6) << 8 | font_collection.readU8(5) << 16 | font_collection.readU8(4) << 24) == 65536 || (font_collection.readU8(7) | font_collection.readU8(6) << 8 | font_collection.readU8(5) << 16 | font_collection.readU8(4) << 24) == 131072) {
			return font_collection.readU8(11) | font_collection.readU8(10) << 8 | font_collection.readU8(9) << 16 | font_collection.readU8(8) << 24;
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt__get_subrs = function(cff,fontdict) {
	var subrsoff = [0];
	var private_loc = [0,0];
	var i = 0;
	if(0 > fontdict.data.get_length()) {
		throw new js__$Boot_HaxeError("Error");
	}
	fontdict.cursor = 0 > fontdict.data.get_length() ? fontdict.data.get_length() : 0;
	var ret = null;
	while(fontdict.cursor < fontdict.data.get_length()) {
		var start = fontdict.cursor;
		var op;
		while(true) {
			var tmp;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				tmp = 0;
			} else {
				var pos = fontdict.cursor;
				if(pos == null) {
					pos = 0;
				}
				tmp = fontdict.data.readU8(pos);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v;
			var b0;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				b0 = 0;
			} else {
				var pos1 = fontdict.cursor;
				if(pos1 == null) {
					pos1 = 0;
				}
				b0 = fontdict.data.readU8(pos1);
			}
			if(b0 < 28) {
				throw new js__$Boot_HaxeError("Error");
			}
			if(b0 == 30) {
				var o = fontdict.cursor + 1;
				if(!(!(o > fontdict.data.get_length() || o < 0))) {
					throw new js__$Boot_HaxeError("Error");
				}
				fontdict.cursor = o > fontdict.data.get_length() || o < 0 ? fontdict.data.get_length() : o;
				while(fontdict.cursor < fontdict.data.get_length()) {
					if(fontdict.cursor >= fontdict.data.get_length()) {
						v = 0;
					} else {
						var pos2 = fontdict.cursor++;
						if(pos2 == null) {
							pos2 = 0;
						}
						v = fontdict.data.readU8(pos2);
					}
					if((v & 15) == 15 || v >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(fontdict.cursor >= fontdict.data.get_length()) {
					b01 = 0;
				} else {
					var pos3 = fontdict.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					b01 = fontdict.data.readU8(pos3);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(fontdict.cursor < fontdict.data.get_length()) {
							var pos4 = fontdict.cursor++;
							if(pos4 == null) {
								pos4 = 0;
							}
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(fontdict.cursor < fontdict.data.get_length()) {
							var pos5 = fontdict.cursor++;
							if(pos5 == null) {
								pos5 = 0;
							}
						}
					} else if(b01 == 28) {
						var _g = 0;
						while(_g < 2) {
							++_g;
							if(fontdict.cursor < fontdict.data.get_length()) {
								var pos6 = fontdict.cursor++;
								if(pos6 == null) {
									pos6 = 0;
								}
							}
						}
					} else if(b01 == 29) {
						var _g1 = 0;
						while(_g1 < 4) {
							++_g1;
							if(fontdict.cursor < fontdict.data.get_length()) {
								var pos7 = fontdict.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
							}
						}
					} else {
						throw new js__$Boot_HaxeError("Error");
					}
				}
			}
		}
		var end = fontdict.cursor;
		if(fontdict.cursor >= fontdict.data.get_length()) {
			op = 0;
		} else {
			var pos8 = fontdict.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			op = fontdict.data.readU8(pos8);
		}
		if(op == 12) {
			var op1;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				op1 = 0;
			} else {
				var pos9 = fontdict.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				op1 = fontdict.data.readU8(pos9);
			}
			op = op1 | 256;
		}
		if(op == 18) {
			var s = end - start;
			var r = new kha_graphics2_truetype_Stbtt_$_$buf();
			r.data = null;
			r.cursor = 0;
			if(start < 0 || s < 0 || start > fontdict.data.get_length() || s > fontdict.data.get_length() - start) {
				ret = r;
			} else {
				r.data = fontdict.data.sub(start,s);
				ret = r;
			}
			break;
		}
	}
	var operands;
	if(ret != null) {
		operands = ret;
	} else {
		var r1 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r1.data = null;
		r1.cursor = 0;
		if(0 > fontdict.data.get_length() || 0 > fontdict.data.get_length()) {
			operands = r1;
		} else {
			r1.data = fontdict.data.sub(0,0);
			operands = r1;
		}
	}
	while(i < 2 && operands.cursor < operands.data.get_length()) {
		var b02;
		if(operands.cursor >= operands.data.get_length()) {
			b02 = 0;
		} else {
			var pos10 = operands.cursor++;
			if(pos10 == null) {
				pos10 = 0;
			}
			b02 = operands.data.readU8(pos10);
		}
		var tmp1;
		if(b02 >= 32 && b02 <= 246) {
			tmp1 = b02 - 139;
		} else if(b02 >= 247 && b02 <= 250) {
			var tmp2;
			if(operands.cursor >= operands.data.get_length()) {
				tmp2 = 0;
			} else {
				var pos11 = operands.cursor++;
				if(pos11 == null) {
					pos11 = 0;
				}
				tmp2 = operands.data.readU8(pos11);
			}
			tmp1 = (b02 - 247) * 256 + tmp2 + 108;
		} else if(b02 >= 251 && b02 <= 254) {
			var tmp3;
			if(operands.cursor >= operands.data.get_length()) {
				tmp3 = 0;
			} else {
				var pos12 = operands.cursor++;
				if(pos12 == null) {
					pos12 = 0;
				}
				tmp3 = operands.data.readU8(pos12);
			}
			tmp1 = -(b02 - 251) * 256 - tmp3 - 108;
		} else if(b02 == 28) {
			var v1 = 0;
			var _g2 = 0;
			while(_g2 < 2) {
				++_g2;
				var v2;
				if(operands.cursor >= operands.data.get_length()) {
					v2 = 0;
				} else {
					var pos13 = operands.cursor++;
					if(pos13 == null) {
						pos13 = 0;
					}
					v2 = operands.data.readU8(pos13);
				}
				v1 = v1 << 8 | v2;
			}
			tmp1 = v1;
		} else if(b02 == 29) {
			var v3 = 0;
			var _g3 = 0;
			while(_g3 < 4) {
				++_g3;
				var v4;
				if(operands.cursor >= operands.data.get_length()) {
					v4 = 0;
				} else {
					var pos14 = operands.cursor++;
					if(pos14 == null) {
						pos14 = 0;
					}
					v4 = operands.data.readU8(pos14);
				}
				v3 = v3 << 8 | v4;
			}
			tmp1 = v3;
		} else {
			throw new js__$Boot_HaxeError("Error");
		}
		private_loc[i] = tmp1;
		++i;
	}
	if(private_loc[1] == 0 || private_loc[0] == 0) {
		var r2 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r2.data = null;
		r2.cursor = 0;
		return r2;
	}
	var o1 = private_loc[1];
	var s1 = private_loc[0];
	var r3 = new kha_graphics2_truetype_Stbtt_$_$buf();
	r3.data = null;
	r3.cursor = 0;
	var pdict;
	if(o1 < 0 || s1 < 0 || o1 > cff.data.get_length() || s1 > cff.data.get_length() - o1) {
		pdict = r3;
	} else {
		r3.data = cff.data.sub(o1,s1);
		pdict = r3;
	}
	var i1 = 0;
	if(0 > pdict.data.get_length()) {
		throw new js__$Boot_HaxeError("Error");
	}
	pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
	var ret1 = null;
	while(pdict.cursor < pdict.data.get_length()) {
		var start1 = pdict.cursor;
		var op2;
		while(true) {
			var tmp4;
			if(pdict.cursor >= pdict.data.get_length()) {
				tmp4 = 0;
			} else {
				var pos15 = pdict.cursor;
				if(pos15 == null) {
					pos15 = 0;
				}
				tmp4 = pdict.data.readU8(pos15);
			}
			if(!(tmp4 >= 28)) {
				break;
			}
			var v5;
			var b03;
			if(pdict.cursor >= pdict.data.get_length()) {
				b03 = 0;
			} else {
				var pos16 = pdict.cursor;
				if(pos16 == null) {
					pos16 = 0;
				}
				b03 = pdict.data.readU8(pos16);
			}
			if(b03 < 28) {
				throw new js__$Boot_HaxeError("Error");
			}
			if(b03 == 30) {
				var o2 = pdict.cursor + 1;
				if(!(!(o2 > pdict.data.get_length() || o2 < 0))) {
					throw new js__$Boot_HaxeError("Error");
				}
				pdict.cursor = o2 > pdict.data.get_length() || o2 < 0 ? pdict.data.get_length() : o2;
				while(pdict.cursor < pdict.data.get_length()) {
					if(pdict.cursor >= pdict.data.get_length()) {
						v5 = 0;
					} else {
						var pos17 = pdict.cursor++;
						if(pos17 == null) {
							pos17 = 0;
						}
						v5 = pdict.data.readU8(pos17);
					}
					if((v5 & 15) == 15 || v5 >> 4 == 15) {
						break;
					}
				}
			} else {
				var b04;
				if(pdict.cursor >= pdict.data.get_length()) {
					b04 = 0;
				} else {
					var pos18 = pdict.cursor++;
					if(pos18 == null) {
						pos18 = 0;
					}
					b04 = pdict.data.readU8(pos18);
				}
				if(!(b04 >= 32 && b04 <= 246)) {
					if(b04 >= 247 && b04 <= 250) {
						if(pdict.cursor < pdict.data.get_length()) {
							var pos19 = pdict.cursor++;
							if(pos19 == null) {
								pos19 = 0;
							}
						}
					} else if(b04 >= 251 && b04 <= 254) {
						if(pdict.cursor < pdict.data.get_length()) {
							var pos20 = pdict.cursor++;
							if(pos20 == null) {
								pos20 = 0;
							}
						}
					} else if(b04 == 28) {
						var _g4 = 0;
						while(_g4 < 2) {
							++_g4;
							if(pdict.cursor < pdict.data.get_length()) {
								var pos21 = pdict.cursor++;
								if(pos21 == null) {
									pos21 = 0;
								}
							}
						}
					} else if(b04 == 29) {
						var _g5 = 0;
						while(_g5 < 4) {
							++_g5;
							if(pdict.cursor < pdict.data.get_length()) {
								var pos22 = pdict.cursor++;
								if(pos22 == null) {
									pos22 = 0;
								}
							}
						}
					} else {
						throw new js__$Boot_HaxeError("Error");
					}
				}
			}
		}
		var end1 = pdict.cursor;
		if(pdict.cursor >= pdict.data.get_length()) {
			op2 = 0;
		} else {
			var pos23 = pdict.cursor++;
			if(pos23 == null) {
				pos23 = 0;
			}
			op2 = pdict.data.readU8(pos23);
		}
		if(op2 == 12) {
			var op3;
			if(pdict.cursor >= pdict.data.get_length()) {
				op3 = 0;
			} else {
				var pos24 = pdict.cursor++;
				if(pos24 == null) {
					pos24 = 0;
				}
				op3 = pdict.data.readU8(pos24);
			}
			op2 = op3 | 256;
		}
		if(op2 == 19) {
			var s2 = end1 - start1;
			var r4 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r4.data = null;
			r4.cursor = 0;
			if(start1 < 0 || s2 < 0 || start1 > pdict.data.get_length() || s2 > pdict.data.get_length() - start1) {
				ret1 = r4;
			} else {
				r4.data = pdict.data.sub(start1,s2);
				ret1 = r4;
			}
			break;
		}
	}
	var operands1;
	if(ret1 != null) {
		operands1 = ret1;
	} else {
		var r5 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r5.data = null;
		r5.cursor = 0;
		if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
			operands1 = r5;
		} else {
			r5.data = pdict.data.sub(0,0);
			operands1 = r5;
		}
	}
	while(i1 < 1 && operands1.cursor < operands1.data.get_length()) {
		var b05;
		if(operands1.cursor >= operands1.data.get_length()) {
			b05 = 0;
		} else {
			var pos25 = operands1.cursor++;
			if(pos25 == null) {
				pos25 = 0;
			}
			b05 = operands1.data.readU8(pos25);
		}
		var tmp5;
		if(b05 >= 32 && b05 <= 246) {
			tmp5 = b05 - 139;
		} else if(b05 >= 247 && b05 <= 250) {
			var tmp6;
			if(operands1.cursor >= operands1.data.get_length()) {
				tmp6 = 0;
			} else {
				var pos26 = operands1.cursor++;
				if(pos26 == null) {
					pos26 = 0;
				}
				tmp6 = operands1.data.readU8(pos26);
			}
			tmp5 = (b05 - 247) * 256 + tmp6 + 108;
		} else if(b05 >= 251 && b05 <= 254) {
			var tmp7;
			if(operands1.cursor >= operands1.data.get_length()) {
				tmp7 = 0;
			} else {
				var pos27 = operands1.cursor++;
				if(pos27 == null) {
					pos27 = 0;
				}
				tmp7 = operands1.data.readU8(pos27);
			}
			tmp5 = -(b05 - 251) * 256 - tmp7 - 108;
		} else if(b05 == 28) {
			var v6 = 0;
			var _g6 = 0;
			while(_g6 < 2) {
				++_g6;
				var v7;
				if(operands1.cursor >= operands1.data.get_length()) {
					v7 = 0;
				} else {
					var pos28 = operands1.cursor++;
					if(pos28 == null) {
						pos28 = 0;
					}
					v7 = operands1.data.readU8(pos28);
				}
				v6 = v6 << 8 | v7;
			}
			tmp5 = v6;
		} else if(b05 == 29) {
			var v8 = 0;
			var _g7 = 0;
			while(_g7 < 4) {
				++_g7;
				var v9;
				if(operands1.cursor >= operands1.data.get_length()) {
					v9 = 0;
				} else {
					var pos29 = operands1.cursor++;
					if(pos29 == null) {
						pos29 = 0;
					}
					v9 = operands1.data.readU8(pos29);
				}
				v8 = v8 << 8 | v9;
			}
			tmp5 = v8;
		} else {
			throw new js__$Boot_HaxeError("Error");
		}
		subrsoff[i1] = tmp5;
		++i1;
	}
	if(subrsoff[0] == 0) {
		var r6 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r6.data = null;
		r6.cursor = 0;
		return r6;
	}
	var o3 = private_loc[1] + subrsoff[0];
	if(!(!(o3 > cff.data.get_length() || o3 < 0))) {
		throw new js__$Boot_HaxeError("Error");
	}
	cff.cursor = o3 > cff.data.get_length() || o3 < 0 ? cff.data.get_length() : o3;
	var start2 = cff.cursor;
	var v10 = 0;
	var _g8 = 0;
	while(_g8 < 2) {
		++_g8;
		var v11;
		if(cff.cursor >= cff.data.get_length()) {
			v11 = 0;
		} else {
			var pos30 = cff.cursor++;
			if(pos30 == null) {
				pos30 = 0;
			}
			v11 = cff.data.readU8(pos30);
		}
		v10 = v10 << 8 | v11;
	}
	var count = v10;
	if(count > 0) {
		var offsize;
		if(cff.cursor >= cff.data.get_length()) {
			offsize = 0;
		} else {
			var pos31 = cff.cursor++;
			if(pos31 == null) {
				pos31 = 0;
			}
			offsize = cff.data.readU8(pos31);
		}
		if(!(offsize >= 1 && offsize <= 4)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var o4 = cff.cursor + offsize * count;
		if(!(!(o4 > cff.data.get_length() || o4 < 0))) {
			throw new js__$Boot_HaxeError("Error");
		}
		cff.cursor = o4 > cff.data.get_length() || o4 < 0 ? cff.data.get_length() : o4;
		var v12 = 0;
		if(!(offsize >= 1 && offsize <= 4)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var _g9 = 0;
		var _g11 = offsize;
		while(_g9 < _g11) {
			++_g9;
			var v13;
			if(cff.cursor >= cff.data.get_length()) {
				v13 = 0;
			} else {
				var pos32 = cff.cursor++;
				if(pos32 == null) {
					pos32 = 0;
				}
				v13 = cff.data.readU8(pos32);
			}
			v12 = v12 << 8 | v13;
		}
		var o5 = cff.cursor + (v12 - 1);
		if(!(!(o5 > cff.data.get_length() || o5 < 0))) {
			throw new js__$Boot_HaxeError("Error");
		}
		cff.cursor = o5 > cff.data.get_length() || o5 < 0 ? cff.data.get_length() : o5;
		var s3 = cff.cursor - start2;
		var r7 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r7.data = null;
		r7.cursor = 0;
		if(start2 < 0 || s3 < 0 || start2 > cff.data.get_length() || s3 > cff.data.get_length() - start2) {
			return r7;
		} else {
			r7.data = cff.data.sub(start2,s3);
			return r7;
		}
	} else {
		return cff;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_InitFont = function(info,data,fontstart) {
	info.data = data;
	info.fontstart = fontstart;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	info.cff = r;
	var cmap = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"cmap");
	info.loca = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"loca");
	info.head = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"head");
	info.glyf = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"glyf");
	info.hhea = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hhea");
	info.hmtx = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"hmtx");
	info.kern = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"kern");
	info.gpos = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"GPOS");
	if(cmap == 0 || info.head == 0 || info.hhea == 0 || info.hmtx == 0) {
		return false;
	}
	if(info.glyf != 0) {
		if(info.loca == 0) {
			return false;
		}
	} else {
		var topdict;
		var topdictidx;
		var cstype = [2];
		var charstrings = [0];
		var fdarrayoff = [0];
		var fdselectoff = [0];
		var cff = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"CFF ");
		if(cff == 0) {
			return false;
		}
		var r1 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r1.data = null;
		r1.cursor = 0;
		info.fontdicts = r1;
		var r2 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r2.data = null;
		r2.cursor = 0;
		info.fdselect = r2;
		var cff_data = data.sub(cff,data.get_length() - cff);
		var r3 = new kha_graphics2_truetype_Stbtt_$_$buf();
		if(cff_data.get_length() >= 1073741824) {
			throw new js__$Boot_HaxeError("Error");
		}
		r3.data = cff_data;
		r3.cursor = 0;
		info.cff = r3;
		var b = info.cff;
		var o = b.cursor + 2;
		if(!(!(o > b.data.get_length() || o < 0))) {
			throw new js__$Boot_HaxeError("Error");
		}
		b.cursor = o > b.data.get_length() || o < 0 ? b.data.get_length() : o;
		var o1;
		if(b.cursor >= b.data.get_length()) {
			o1 = 0;
		} else {
			var pos = b.cursor++;
			if(pos == null) {
				pos = 0;
			}
			o1 = b.data.readU8(pos);
		}
		if(!(!(o1 > b.data.get_length() || o1 < 0))) {
			throw new js__$Boot_HaxeError("Error");
		}
		b.cursor = o1 > b.data.get_length() || o1 < 0 ? b.data.get_length() : o1;
		var start = b.cursor;
		var v = 0;
		var _g = 0;
		while(_g < 2) {
			++_g;
			var v1;
			if(b.cursor >= b.data.get_length()) {
				v1 = 0;
			} else {
				var pos1 = b.cursor++;
				if(pos1 == null) {
					pos1 = 0;
				}
				v1 = b.data.readU8(pos1);
			}
			v = v << 8 | v1;
		}
		var count = v;
		if(count > 0) {
			var offsize;
			if(b.cursor >= b.data.get_length()) {
				offsize = 0;
			} else {
				var pos2 = b.cursor++;
				if(pos2 == null) {
					pos2 = 0;
				}
				offsize = b.data.readU8(pos2);
			}
			if(!(offsize >= 1 && offsize <= 4)) {
				throw new js__$Boot_HaxeError("Error");
			}
			var o2 = b.cursor + offsize * count;
			if(!(!(o2 > b.data.get_length() || o2 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			b.cursor = o2 > b.data.get_length() || o2 < 0 ? b.data.get_length() : o2;
			var v2 = 0;
			if(!(offsize >= 1 && offsize <= 4)) {
				throw new js__$Boot_HaxeError("Error");
			}
			var _g1 = 0;
			var _g11 = offsize;
			while(_g1 < _g11) {
				++_g1;
				var v3;
				if(b.cursor >= b.data.get_length()) {
					v3 = 0;
				} else {
					var pos3 = b.cursor++;
					if(pos3 == null) {
						pos3 = 0;
					}
					v3 = b.data.readU8(pos3);
				}
				v2 = v2 << 8 | v3;
			}
			var o3 = b.cursor + (v2 - 1);
			if(!(!(o3 > b.data.get_length() || o3 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			b.cursor = o3 > b.data.get_length() || o3 < 0 ? b.data.get_length() : o3;
			var s = b.cursor - start;
			var r4 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r4.data = null;
			r4.cursor = 0;
			if(!(start < 0 || s < 0 || start > b.data.get_length() || s > b.data.get_length() - start)) {
				r4.data = b.data.sub(start,s);
			}
		}
		var start1 = b.cursor;
		var v4 = 0;
		var _g2 = 0;
		while(_g2 < 2) {
			++_g2;
			var v5;
			if(b.cursor >= b.data.get_length()) {
				v5 = 0;
			} else {
				var pos4 = b.cursor++;
				if(pos4 == null) {
					pos4 = 0;
				}
				v5 = b.data.readU8(pos4);
			}
			v4 = v4 << 8 | v5;
		}
		var count1 = v4;
		if(count1 > 0) {
			var offsize1;
			if(b.cursor >= b.data.get_length()) {
				offsize1 = 0;
			} else {
				var pos5 = b.cursor++;
				if(pos5 == null) {
					pos5 = 0;
				}
				offsize1 = b.data.readU8(pos5);
			}
			if(!(offsize1 >= 1 && offsize1 <= 4)) {
				throw new js__$Boot_HaxeError("Error");
			}
			var o4 = b.cursor + offsize1 * count1;
			if(!(!(o4 > b.data.get_length() || o4 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			b.cursor = o4 > b.data.get_length() || o4 < 0 ? b.data.get_length() : o4;
			var v6 = 0;
			if(!(offsize1 >= 1 && offsize1 <= 4)) {
				throw new js__$Boot_HaxeError("Error");
			}
			var _g3 = 0;
			var _g12 = offsize1;
			while(_g3 < _g12) {
				++_g3;
				var v7;
				if(b.cursor >= b.data.get_length()) {
					v7 = 0;
				} else {
					var pos6 = b.cursor++;
					if(pos6 == null) {
						pos6 = 0;
					}
					v7 = b.data.readU8(pos6);
				}
				v6 = v6 << 8 | v7;
			}
			var o5 = b.cursor + (v6 - 1);
			if(!(!(o5 > b.data.get_length() || o5 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			b.cursor = o5 > b.data.get_length() || o5 < 0 ? b.data.get_length() : o5;
			var s1 = b.cursor - start1;
			var r5 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r5.data = null;
			r5.cursor = 0;
			if(start1 < 0 || s1 < 0 || start1 > b.data.get_length() || s1 > b.data.get_length() - start1) {
				topdictidx = r5;
			} else {
				r5.data = b.data.sub(start1,s1);
				topdictidx = r5;
			}
		} else {
			topdictidx = b;
		}
		if(0 > topdictidx.data.get_length()) {
			throw new js__$Boot_HaxeError("Error");
		}
		topdictidx.cursor = 0 > topdictidx.data.get_length() ? topdictidx.data.get_length() : 0;
		var v8 = 0;
		var _g4 = 0;
		while(_g4 < 2) {
			++_g4;
			var v9;
			if(topdictidx.cursor >= topdictidx.data.get_length()) {
				v9 = 0;
			} else {
				var pos7 = topdictidx.cursor++;
				if(pos7 == null) {
					pos7 = 0;
				}
				v9 = topdictidx.data.readU8(pos7);
			}
			v8 = v8 << 8 | v9;
		}
		var count2 = v8;
		var offsize2;
		if(topdictidx.cursor >= topdictidx.data.get_length()) {
			offsize2 = 0;
		} else {
			var pos8 = topdictidx.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			offsize2 = topdictidx.data.readU8(pos8);
		}
		if(0 >= count2) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(!(offsize2 >= 1 && offsize2 <= 4)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var o6 = topdictidx.cursor + 0 * offsize2;
		if(!(!(o6 > topdictidx.data.get_length() || o6 < 0))) {
			throw new js__$Boot_HaxeError("Error");
		}
		topdictidx.cursor = o6 > topdictidx.data.get_length() || o6 < 0 ? topdictidx.data.get_length() : o6;
		var v10 = 0;
		if(!(offsize2 >= 1 && offsize2 <= 4)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var _g5 = 0;
		var _g13 = offsize2;
		while(_g5 < _g13) {
			++_g5;
			var v11;
			if(topdictidx.cursor >= topdictidx.data.get_length()) {
				v11 = 0;
			} else {
				var pos9 = topdictidx.cursor++;
				if(pos9 == null) {
					pos9 = 0;
				}
				v11 = topdictidx.data.readU8(pos9);
			}
			v10 = v10 << 8 | v11;
		}
		var start2 = v10;
		var v12 = 0;
		if(!(offsize2 >= 1 && offsize2 <= 4)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var _g6 = 0;
		var _g14 = offsize2;
		while(_g6 < _g14) {
			++_g6;
			var v13;
			if(topdictidx.cursor >= topdictidx.data.get_length()) {
				v13 = 0;
			} else {
				var pos10 = topdictidx.cursor++;
				if(pos10 == null) {
					pos10 = 0;
				}
				v13 = topdictidx.data.readU8(pos10);
			}
			v12 = v12 << 8 | v13;
		}
		var o7 = 2 + (count2 + 1) * offsize2 + start2;
		var s2 = v12 - start2;
		var r6 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r6.data = null;
		r6.cursor = 0;
		if(o7 < 0 || s2 < 0 || o7 > topdictidx.data.get_length() || s2 > topdictidx.data.get_length() - o7) {
			topdict = r6;
		} else {
			r6.data = topdictidx.data.sub(o7,s2);
			topdict = r6;
		}
		var start3 = b.cursor;
		var v14 = 0;
		var _g7 = 0;
		while(_g7 < 2) {
			++_g7;
			var v15;
			if(b.cursor >= b.data.get_length()) {
				v15 = 0;
			} else {
				var pos11 = b.cursor++;
				if(pos11 == null) {
					pos11 = 0;
				}
				v15 = b.data.readU8(pos11);
			}
			v14 = v14 << 8 | v15;
		}
		var count3 = v14;
		if(count3 > 0) {
			var offsize3;
			if(b.cursor >= b.data.get_length()) {
				offsize3 = 0;
			} else {
				var pos12 = b.cursor++;
				if(pos12 == null) {
					pos12 = 0;
				}
				offsize3 = b.data.readU8(pos12);
			}
			if(!(offsize3 >= 1 && offsize3 <= 4)) {
				throw new js__$Boot_HaxeError("Error");
			}
			var o8 = b.cursor + offsize3 * count3;
			if(!(!(o8 > b.data.get_length() || o8 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			b.cursor = o8 > b.data.get_length() || o8 < 0 ? b.data.get_length() : o8;
			var v16 = 0;
			if(!(offsize3 >= 1 && offsize3 <= 4)) {
				throw new js__$Boot_HaxeError("Error");
			}
			var _g8 = 0;
			var _g15 = offsize3;
			while(_g8 < _g15) {
				++_g8;
				var v17;
				if(b.cursor >= b.data.get_length()) {
					v17 = 0;
				} else {
					var pos13 = b.cursor++;
					if(pos13 == null) {
						pos13 = 0;
					}
					v17 = b.data.readU8(pos13);
				}
				v16 = v16 << 8 | v17;
			}
			var o9 = b.cursor + (v16 - 1);
			if(!(!(o9 > b.data.get_length() || o9 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			b.cursor = o9 > b.data.get_length() || o9 < 0 ? b.data.get_length() : o9;
			var s3 = b.cursor - start3;
			var r7 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r7.data = null;
			r7.cursor = 0;
			if(!(start3 < 0 || s3 < 0 || start3 > b.data.get_length() || s3 > b.data.get_length() - start3)) {
				r7.data = b.data.sub(start3,s3);
			}
		}
		var start4 = b.cursor;
		var v18 = 0;
		var _g9 = 0;
		while(_g9 < 2) {
			++_g9;
			var v19;
			if(b.cursor >= b.data.get_length()) {
				v19 = 0;
			} else {
				var pos14 = b.cursor++;
				if(pos14 == null) {
					pos14 = 0;
				}
				v19 = b.data.readU8(pos14);
			}
			v18 = v18 << 8 | v19;
		}
		var count4 = v18;
		var tmp;
		if(count4 > 0) {
			var offsize4;
			if(b.cursor >= b.data.get_length()) {
				offsize4 = 0;
			} else {
				var pos15 = b.cursor++;
				if(pos15 == null) {
					pos15 = 0;
				}
				offsize4 = b.data.readU8(pos15);
			}
			if(!(offsize4 >= 1 && offsize4 <= 4)) {
				throw new js__$Boot_HaxeError("Error");
			}
			var o10 = b.cursor + offsize4 * count4;
			if(!(!(o10 > b.data.get_length() || o10 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			b.cursor = o10 > b.data.get_length() || o10 < 0 ? b.data.get_length() : o10;
			var v20 = 0;
			if(!(offsize4 >= 1 && offsize4 <= 4)) {
				throw new js__$Boot_HaxeError("Error");
			}
			var _g10 = 0;
			var _g16 = offsize4;
			while(_g10 < _g16) {
				++_g10;
				var v21;
				if(b.cursor >= b.data.get_length()) {
					v21 = 0;
				} else {
					var pos16 = b.cursor++;
					if(pos16 == null) {
						pos16 = 0;
					}
					v21 = b.data.readU8(pos16);
				}
				v20 = v20 << 8 | v21;
			}
			var o11 = b.cursor + (v20 - 1);
			if(!(!(o11 > b.data.get_length() || o11 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			b.cursor = o11 > b.data.get_length() || o11 < 0 ? b.data.get_length() : o11;
			var s4 = b.cursor - start4;
			var r8 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r8.data = null;
			r8.cursor = 0;
			if(start4 < 0 || s4 < 0 || start4 > b.data.get_length() || s4 > b.data.get_length() - start4) {
				tmp = r8;
			} else {
				r8.data = b.data.sub(start4,s4);
				tmp = r8;
			}
		} else {
			tmp = b;
		}
		info.gsubrs = tmp;
		var i = 0;
		if(0 > topdict.data.get_length()) {
			throw new js__$Boot_HaxeError("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start5 = topdict.cursor;
			var op;
			while(true) {
				var tmp1;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp1 = 0;
				} else {
					var pos17 = topdict.cursor;
					if(pos17 == null) {
						pos17 = 0;
					}
					tmp1 = topdict.data.readU8(pos17);
				}
				if(!(tmp1 >= 28)) {
					break;
				}
				var v22;
				var b0;
				if(topdict.cursor >= topdict.data.get_length()) {
					b0 = 0;
				} else {
					var pos18 = topdict.cursor;
					if(pos18 == null) {
						pos18 = 0;
					}
					b0 = topdict.data.readU8(pos18);
				}
				if(b0 < 28) {
					throw new js__$Boot_HaxeError("Error");
				}
				if(b0 == 30) {
					var o12 = topdict.cursor + 1;
					if(!(!(o12 > topdict.data.get_length() || o12 < 0))) {
						throw new js__$Boot_HaxeError("Error");
					}
					topdict.cursor = o12 > topdict.data.get_length() || o12 < 0 ? topdict.data.get_length() : o12;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v22 = 0;
						} else {
							var pos19 = topdict.cursor++;
							if(pos19 == null) {
								pos19 = 0;
							}
							v22 = topdict.data.readU8(pos19);
						}
						if((v22 & 15) == 15 || v22 >> 4 == 15) {
							break;
						}
					}
				} else {
					var b01;
					if(topdict.cursor >= topdict.data.get_length()) {
						b01 = 0;
					} else {
						var pos20 = topdict.cursor++;
						if(pos20 == null) {
							pos20 = 0;
						}
						b01 = topdict.data.readU8(pos20);
					}
					if(!(b01 >= 32 && b01 <= 246)) {
						if(b01 >= 247 && b01 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos21 = topdict.cursor++;
								if(pos21 == null) {
									pos21 = 0;
								}
							}
						} else if(b01 >= 251 && b01 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos22 = topdict.cursor++;
								if(pos22 == null) {
									pos22 = 0;
								}
							}
						} else if(b01 == 28) {
							var _g17 = 0;
							while(_g17 < 2) {
								++_g17;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos23 = topdict.cursor++;
									if(pos23 == null) {
										pos23 = 0;
									}
								}
							}
						} else if(b01 == 29) {
							var _g18 = 0;
							while(_g18 < 4) {
								++_g18;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos24 = topdict.cursor++;
									if(pos24 == null) {
										pos24 = 0;
									}
								}
							}
						} else {
							throw new js__$Boot_HaxeError("Error");
						}
					}
				}
			}
			var end = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op = 0;
			} else {
				var pos25 = topdict.cursor++;
				if(pos25 == null) {
					pos25 = 0;
				}
				op = topdict.data.readU8(pos25);
			}
			if(op == 12) {
				var op1;
				if(topdict.cursor >= topdict.data.get_length()) {
					op1 = 0;
				} else {
					var pos26 = topdict.cursor++;
					if(pos26 == null) {
						pos26 = 0;
					}
					op1 = topdict.data.readU8(pos26);
				}
				op = op1 | 256;
			}
			if(op == 17) {
				var s5 = end - start5;
				var r9 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r9.data = null;
				r9.cursor = 0;
				if(start5 < 0 || s5 < 0 || start5 > topdict.data.get_length() || s5 > topdict.data.get_length() - start5) {
					ret = r9;
				} else {
					r9.data = topdict.data.sub(start5,s5);
					ret = r9;
				}
				break;
			}
		}
		var operands;
		if(ret != null) {
			operands = ret;
		} else {
			var r10 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r10.data = null;
			r10.cursor = 0;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands = r10;
			} else {
				r10.data = topdict.data.sub(0,0);
				operands = r10;
			}
		}
		while(i < 1 && operands.cursor < operands.data.get_length()) {
			var b02;
			if(operands.cursor >= operands.data.get_length()) {
				b02 = 0;
			} else {
				var pos27 = operands.cursor++;
				if(pos27 == null) {
					pos27 = 0;
				}
				b02 = operands.data.readU8(pos27);
			}
			var tmp2;
			if(b02 >= 32 && b02 <= 246) {
				tmp2 = b02 - 139;
			} else if(b02 >= 247 && b02 <= 250) {
				var tmp3;
				if(operands.cursor >= operands.data.get_length()) {
					tmp3 = 0;
				} else {
					var pos28 = operands.cursor++;
					if(pos28 == null) {
						pos28 = 0;
					}
					tmp3 = operands.data.readU8(pos28);
				}
				tmp2 = (b02 - 247) * 256 + tmp3 + 108;
			} else if(b02 >= 251 && b02 <= 254) {
				var tmp4;
				if(operands.cursor >= operands.data.get_length()) {
					tmp4 = 0;
				} else {
					var pos29 = operands.cursor++;
					if(pos29 == null) {
						pos29 = 0;
					}
					tmp4 = operands.data.readU8(pos29);
				}
				tmp2 = -(b02 - 251) * 256 - tmp4 - 108;
			} else if(b02 == 28) {
				var v23 = 0;
				var _g19 = 0;
				while(_g19 < 2) {
					++_g19;
					var v24;
					if(operands.cursor >= operands.data.get_length()) {
						v24 = 0;
					} else {
						var pos30 = operands.cursor++;
						if(pos30 == null) {
							pos30 = 0;
						}
						v24 = operands.data.readU8(pos30);
					}
					v23 = v23 << 8 | v24;
				}
				tmp2 = v23;
			} else if(b02 == 29) {
				var v25 = 0;
				var _g20 = 0;
				while(_g20 < 4) {
					++_g20;
					var v26;
					if(operands.cursor >= operands.data.get_length()) {
						v26 = 0;
					} else {
						var pos31 = operands.cursor++;
						if(pos31 == null) {
							pos31 = 0;
						}
						v26 = operands.data.readU8(pos31);
					}
					v25 = v25 << 8 | v26;
				}
				tmp2 = v25;
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			charstrings[i] = tmp2;
			++i;
		}
		var i1 = 0;
		if(0 > topdict.data.get_length()) {
			throw new js__$Boot_HaxeError("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret1 = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start6 = topdict.cursor;
			var op2;
			while(true) {
				var tmp5;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp5 = 0;
				} else {
					var pos32 = topdict.cursor;
					if(pos32 == null) {
						pos32 = 0;
					}
					tmp5 = topdict.data.readU8(pos32);
				}
				if(!(tmp5 >= 28)) {
					break;
				}
				var v27;
				var b03;
				if(topdict.cursor >= topdict.data.get_length()) {
					b03 = 0;
				} else {
					var pos33 = topdict.cursor;
					if(pos33 == null) {
						pos33 = 0;
					}
					b03 = topdict.data.readU8(pos33);
				}
				if(b03 < 28) {
					throw new js__$Boot_HaxeError("Error");
				}
				if(b03 == 30) {
					var o13 = topdict.cursor + 1;
					if(!(!(o13 > topdict.data.get_length() || o13 < 0))) {
						throw new js__$Boot_HaxeError("Error");
					}
					topdict.cursor = o13 > topdict.data.get_length() || o13 < 0 ? topdict.data.get_length() : o13;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v27 = 0;
						} else {
							var pos34 = topdict.cursor++;
							if(pos34 == null) {
								pos34 = 0;
							}
							v27 = topdict.data.readU8(pos34);
						}
						if((v27 & 15) == 15 || v27 >> 4 == 15) {
							break;
						}
					}
				} else {
					var b04;
					if(topdict.cursor >= topdict.data.get_length()) {
						b04 = 0;
					} else {
						var pos35 = topdict.cursor++;
						if(pos35 == null) {
							pos35 = 0;
						}
						b04 = topdict.data.readU8(pos35);
					}
					if(!(b04 >= 32 && b04 <= 246)) {
						if(b04 >= 247 && b04 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos36 = topdict.cursor++;
								if(pos36 == null) {
									pos36 = 0;
								}
							}
						} else if(b04 >= 251 && b04 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos37 = topdict.cursor++;
								if(pos37 == null) {
									pos37 = 0;
								}
							}
						} else if(b04 == 28) {
							var _g21 = 0;
							while(_g21 < 2) {
								++_g21;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos38 = topdict.cursor++;
									if(pos38 == null) {
										pos38 = 0;
									}
								}
							}
						} else if(b04 == 29) {
							var _g22 = 0;
							while(_g22 < 4) {
								++_g22;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos39 = topdict.cursor++;
									if(pos39 == null) {
										pos39 = 0;
									}
								}
							}
						} else {
							throw new js__$Boot_HaxeError("Error");
						}
					}
				}
			}
			var end1 = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op2 = 0;
			} else {
				var pos40 = topdict.cursor++;
				if(pos40 == null) {
					pos40 = 0;
				}
				op2 = topdict.data.readU8(pos40);
			}
			if(op2 == 12) {
				var op3;
				if(topdict.cursor >= topdict.data.get_length()) {
					op3 = 0;
				} else {
					var pos41 = topdict.cursor++;
					if(pos41 == null) {
						pos41 = 0;
					}
					op3 = topdict.data.readU8(pos41);
				}
				op2 = op3 | 256;
			}
			if(op2 == 262) {
				var s6 = end1 - start6;
				var r11 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r11.data = null;
				r11.cursor = 0;
				if(start6 < 0 || s6 < 0 || start6 > topdict.data.get_length() || s6 > topdict.data.get_length() - start6) {
					ret1 = r11;
				} else {
					r11.data = topdict.data.sub(start6,s6);
					ret1 = r11;
				}
				break;
			}
		}
		var operands1;
		if(ret1 != null) {
			operands1 = ret1;
		} else {
			var r12 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r12.data = null;
			r12.cursor = 0;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands1 = r12;
			} else {
				r12.data = topdict.data.sub(0,0);
				operands1 = r12;
			}
		}
		while(i1 < 1 && operands1.cursor < operands1.data.get_length()) {
			var b05;
			if(operands1.cursor >= operands1.data.get_length()) {
				b05 = 0;
			} else {
				var pos42 = operands1.cursor++;
				if(pos42 == null) {
					pos42 = 0;
				}
				b05 = operands1.data.readU8(pos42);
			}
			var tmp6;
			if(b05 >= 32 && b05 <= 246) {
				tmp6 = b05 - 139;
			} else if(b05 >= 247 && b05 <= 250) {
				var tmp7;
				if(operands1.cursor >= operands1.data.get_length()) {
					tmp7 = 0;
				} else {
					var pos43 = operands1.cursor++;
					if(pos43 == null) {
						pos43 = 0;
					}
					tmp7 = operands1.data.readU8(pos43);
				}
				tmp6 = (b05 - 247) * 256 + tmp7 + 108;
			} else if(b05 >= 251 && b05 <= 254) {
				var tmp8;
				if(operands1.cursor >= operands1.data.get_length()) {
					tmp8 = 0;
				} else {
					var pos44 = operands1.cursor++;
					if(pos44 == null) {
						pos44 = 0;
					}
					tmp8 = operands1.data.readU8(pos44);
				}
				tmp6 = -(b05 - 251) * 256 - tmp8 - 108;
			} else if(b05 == 28) {
				var v28 = 0;
				var _g23 = 0;
				while(_g23 < 2) {
					++_g23;
					var v29;
					if(operands1.cursor >= operands1.data.get_length()) {
						v29 = 0;
					} else {
						var pos45 = operands1.cursor++;
						if(pos45 == null) {
							pos45 = 0;
						}
						v29 = operands1.data.readU8(pos45);
					}
					v28 = v28 << 8 | v29;
				}
				tmp6 = v28;
			} else if(b05 == 29) {
				var v30 = 0;
				var _g24 = 0;
				while(_g24 < 4) {
					++_g24;
					var v31;
					if(operands1.cursor >= operands1.data.get_length()) {
						v31 = 0;
					} else {
						var pos46 = operands1.cursor++;
						if(pos46 == null) {
							pos46 = 0;
						}
						v31 = operands1.data.readU8(pos46);
					}
					v30 = v30 << 8 | v31;
				}
				tmp6 = v30;
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			cstype[i1] = tmp6;
			++i1;
		}
		var i2 = 0;
		if(0 > topdict.data.get_length()) {
			throw new js__$Boot_HaxeError("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret2 = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start7 = topdict.cursor;
			var op4;
			while(true) {
				var tmp9;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp9 = 0;
				} else {
					var pos47 = topdict.cursor;
					if(pos47 == null) {
						pos47 = 0;
					}
					tmp9 = topdict.data.readU8(pos47);
				}
				if(!(tmp9 >= 28)) {
					break;
				}
				var v32;
				var b06;
				if(topdict.cursor >= topdict.data.get_length()) {
					b06 = 0;
				} else {
					var pos48 = topdict.cursor;
					if(pos48 == null) {
						pos48 = 0;
					}
					b06 = topdict.data.readU8(pos48);
				}
				if(b06 < 28) {
					throw new js__$Boot_HaxeError("Error");
				}
				if(b06 == 30) {
					var o14 = topdict.cursor + 1;
					if(!(!(o14 > topdict.data.get_length() || o14 < 0))) {
						throw new js__$Boot_HaxeError("Error");
					}
					topdict.cursor = o14 > topdict.data.get_length() || o14 < 0 ? topdict.data.get_length() : o14;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v32 = 0;
						} else {
							var pos49 = topdict.cursor++;
							if(pos49 == null) {
								pos49 = 0;
							}
							v32 = topdict.data.readU8(pos49);
						}
						if((v32 & 15) == 15 || v32 >> 4 == 15) {
							break;
						}
					}
				} else {
					var b07;
					if(topdict.cursor >= topdict.data.get_length()) {
						b07 = 0;
					} else {
						var pos50 = topdict.cursor++;
						if(pos50 == null) {
							pos50 = 0;
						}
						b07 = topdict.data.readU8(pos50);
					}
					if(!(b07 >= 32 && b07 <= 246)) {
						if(b07 >= 247 && b07 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos51 = topdict.cursor++;
								if(pos51 == null) {
									pos51 = 0;
								}
							}
						} else if(b07 >= 251 && b07 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos52 = topdict.cursor++;
								if(pos52 == null) {
									pos52 = 0;
								}
							}
						} else if(b07 == 28) {
							var _g25 = 0;
							while(_g25 < 2) {
								++_g25;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos53 = topdict.cursor++;
									if(pos53 == null) {
										pos53 = 0;
									}
								}
							}
						} else if(b07 == 29) {
							var _g26 = 0;
							while(_g26 < 4) {
								++_g26;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos54 = topdict.cursor++;
									if(pos54 == null) {
										pos54 = 0;
									}
								}
							}
						} else {
							throw new js__$Boot_HaxeError("Error");
						}
					}
				}
			}
			var end2 = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op4 = 0;
			} else {
				var pos55 = topdict.cursor++;
				if(pos55 == null) {
					pos55 = 0;
				}
				op4 = topdict.data.readU8(pos55);
			}
			if(op4 == 12) {
				var op5;
				if(topdict.cursor >= topdict.data.get_length()) {
					op5 = 0;
				} else {
					var pos56 = topdict.cursor++;
					if(pos56 == null) {
						pos56 = 0;
					}
					op5 = topdict.data.readU8(pos56);
				}
				op4 = op5 | 256;
			}
			if(op4 == 292) {
				var s7 = end2 - start7;
				var r13 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r13.data = null;
				r13.cursor = 0;
				if(start7 < 0 || s7 < 0 || start7 > topdict.data.get_length() || s7 > topdict.data.get_length() - start7) {
					ret2 = r13;
				} else {
					r13.data = topdict.data.sub(start7,s7);
					ret2 = r13;
				}
				break;
			}
		}
		var operands2;
		if(ret2 != null) {
			operands2 = ret2;
		} else {
			var r14 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r14.data = null;
			r14.cursor = 0;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands2 = r14;
			} else {
				r14.data = topdict.data.sub(0,0);
				operands2 = r14;
			}
		}
		while(i2 < 1 && operands2.cursor < operands2.data.get_length()) {
			var b08;
			if(operands2.cursor >= operands2.data.get_length()) {
				b08 = 0;
			} else {
				var pos57 = operands2.cursor++;
				if(pos57 == null) {
					pos57 = 0;
				}
				b08 = operands2.data.readU8(pos57);
			}
			var tmp10;
			if(b08 >= 32 && b08 <= 246) {
				tmp10 = b08 - 139;
			} else if(b08 >= 247 && b08 <= 250) {
				var tmp11;
				if(operands2.cursor >= operands2.data.get_length()) {
					tmp11 = 0;
				} else {
					var pos58 = operands2.cursor++;
					if(pos58 == null) {
						pos58 = 0;
					}
					tmp11 = operands2.data.readU8(pos58);
				}
				tmp10 = (b08 - 247) * 256 + tmp11 + 108;
			} else if(b08 >= 251 && b08 <= 254) {
				var tmp12;
				if(operands2.cursor >= operands2.data.get_length()) {
					tmp12 = 0;
				} else {
					var pos59 = operands2.cursor++;
					if(pos59 == null) {
						pos59 = 0;
					}
					tmp12 = operands2.data.readU8(pos59);
				}
				tmp10 = -(b08 - 251) * 256 - tmp12 - 108;
			} else if(b08 == 28) {
				var v33 = 0;
				var _g27 = 0;
				while(_g27 < 2) {
					++_g27;
					var v34;
					if(operands2.cursor >= operands2.data.get_length()) {
						v34 = 0;
					} else {
						var pos60 = operands2.cursor++;
						if(pos60 == null) {
							pos60 = 0;
						}
						v34 = operands2.data.readU8(pos60);
					}
					v33 = v33 << 8 | v34;
				}
				tmp10 = v33;
			} else if(b08 == 29) {
				var v35 = 0;
				var _g28 = 0;
				while(_g28 < 4) {
					++_g28;
					var v36;
					if(operands2.cursor >= operands2.data.get_length()) {
						v36 = 0;
					} else {
						var pos61 = operands2.cursor++;
						if(pos61 == null) {
							pos61 = 0;
						}
						v36 = operands2.data.readU8(pos61);
					}
					v35 = v35 << 8 | v36;
				}
				tmp10 = v35;
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			fdarrayoff[i2] = tmp10;
			++i2;
		}
		var i3 = 0;
		if(0 > topdict.data.get_length()) {
			throw new js__$Boot_HaxeError("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret3 = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start8 = topdict.cursor;
			var op6;
			while(true) {
				var tmp13;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp13 = 0;
				} else {
					var pos62 = topdict.cursor;
					if(pos62 == null) {
						pos62 = 0;
					}
					tmp13 = topdict.data.readU8(pos62);
				}
				if(!(tmp13 >= 28)) {
					break;
				}
				var v37;
				var b09;
				if(topdict.cursor >= topdict.data.get_length()) {
					b09 = 0;
				} else {
					var pos63 = topdict.cursor;
					if(pos63 == null) {
						pos63 = 0;
					}
					b09 = topdict.data.readU8(pos63);
				}
				if(b09 < 28) {
					throw new js__$Boot_HaxeError("Error");
				}
				if(b09 == 30) {
					var o15 = topdict.cursor + 1;
					if(!(!(o15 > topdict.data.get_length() || o15 < 0))) {
						throw new js__$Boot_HaxeError("Error");
					}
					topdict.cursor = o15 > topdict.data.get_length() || o15 < 0 ? topdict.data.get_length() : o15;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v37 = 0;
						} else {
							var pos64 = topdict.cursor++;
							if(pos64 == null) {
								pos64 = 0;
							}
							v37 = topdict.data.readU8(pos64);
						}
						if((v37 & 15) == 15 || v37 >> 4 == 15) {
							break;
						}
					}
				} else {
					var b010;
					if(topdict.cursor >= topdict.data.get_length()) {
						b010 = 0;
					} else {
						var pos65 = topdict.cursor++;
						if(pos65 == null) {
							pos65 = 0;
						}
						b010 = topdict.data.readU8(pos65);
					}
					if(!(b010 >= 32 && b010 <= 246)) {
						if(b010 >= 247 && b010 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos66 = topdict.cursor++;
								if(pos66 == null) {
									pos66 = 0;
								}
							}
						} else if(b010 >= 251 && b010 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos67 = topdict.cursor++;
								if(pos67 == null) {
									pos67 = 0;
								}
							}
						} else if(b010 == 28) {
							var _g29 = 0;
							while(_g29 < 2) {
								++_g29;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos68 = topdict.cursor++;
									if(pos68 == null) {
										pos68 = 0;
									}
								}
							}
						} else if(b010 == 29) {
							var _g30 = 0;
							while(_g30 < 4) {
								++_g30;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos69 = topdict.cursor++;
									if(pos69 == null) {
										pos69 = 0;
									}
								}
							}
						} else {
							throw new js__$Boot_HaxeError("Error");
						}
					}
				}
			}
			var end3 = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op6 = 0;
			} else {
				var pos70 = topdict.cursor++;
				if(pos70 == null) {
					pos70 = 0;
				}
				op6 = topdict.data.readU8(pos70);
			}
			if(op6 == 12) {
				var op7;
				if(topdict.cursor >= topdict.data.get_length()) {
					op7 = 0;
				} else {
					var pos71 = topdict.cursor++;
					if(pos71 == null) {
						pos71 = 0;
					}
					op7 = topdict.data.readU8(pos71);
				}
				op6 = op7 | 256;
			}
			if(op6 == 293) {
				var s8 = end3 - start8;
				var r15 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r15.data = null;
				r15.cursor = 0;
				if(start8 < 0 || s8 < 0 || start8 > topdict.data.get_length() || s8 > topdict.data.get_length() - start8) {
					ret3 = r15;
				} else {
					r15.data = topdict.data.sub(start8,s8);
					ret3 = r15;
				}
				break;
			}
		}
		var operands3;
		if(ret3 != null) {
			operands3 = ret3;
		} else {
			var r16 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r16.data = null;
			r16.cursor = 0;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands3 = r16;
			} else {
				r16.data = topdict.data.sub(0,0);
				operands3 = r16;
			}
		}
		while(i3 < 1 && operands3.cursor < operands3.data.get_length()) {
			var b011;
			if(operands3.cursor >= operands3.data.get_length()) {
				b011 = 0;
			} else {
				var pos72 = operands3.cursor++;
				if(pos72 == null) {
					pos72 = 0;
				}
				b011 = operands3.data.readU8(pos72);
			}
			var tmp14;
			if(b011 >= 32 && b011 <= 246) {
				tmp14 = b011 - 139;
			} else if(b011 >= 247 && b011 <= 250) {
				var tmp15;
				if(operands3.cursor >= operands3.data.get_length()) {
					tmp15 = 0;
				} else {
					var pos73 = operands3.cursor++;
					if(pos73 == null) {
						pos73 = 0;
					}
					tmp15 = operands3.data.readU8(pos73);
				}
				tmp14 = (b011 - 247) * 256 + tmp15 + 108;
			} else if(b011 >= 251 && b011 <= 254) {
				var tmp16;
				if(operands3.cursor >= operands3.data.get_length()) {
					tmp16 = 0;
				} else {
					var pos74 = operands3.cursor++;
					if(pos74 == null) {
						pos74 = 0;
					}
					tmp16 = operands3.data.readU8(pos74);
				}
				tmp14 = -(b011 - 251) * 256 - tmp16 - 108;
			} else if(b011 == 28) {
				var v38 = 0;
				var _g31 = 0;
				while(_g31 < 2) {
					++_g31;
					var v39;
					if(operands3.cursor >= operands3.data.get_length()) {
						v39 = 0;
					} else {
						var pos75 = operands3.cursor++;
						if(pos75 == null) {
							pos75 = 0;
						}
						v39 = operands3.data.readU8(pos75);
					}
					v38 = v38 << 8 | v39;
				}
				tmp14 = v38;
			} else if(b011 == 29) {
				var v40 = 0;
				var _g32 = 0;
				while(_g32 < 4) {
					++_g32;
					var v41;
					if(operands3.cursor >= operands3.data.get_length()) {
						v41 = 0;
					} else {
						var pos76 = operands3.cursor++;
						if(pos76 == null) {
							pos76 = 0;
						}
						v41 = operands3.data.readU8(pos76);
					}
					v40 = v40 << 8 | v41;
				}
				tmp14 = v40;
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			fdselectoff[i3] = tmp14;
			++i3;
		}
		var subrsoff = [0];
		var private_loc = [0,0];
		var i4 = 0;
		if(0 > topdict.data.get_length()) {
			throw new js__$Boot_HaxeError("Error");
		}
		topdict.cursor = 0 > topdict.data.get_length() ? topdict.data.get_length() : 0;
		var ret4 = null;
		while(topdict.cursor < topdict.data.get_length()) {
			var start9 = topdict.cursor;
			var op8;
			while(true) {
				var tmp17;
				if(topdict.cursor >= topdict.data.get_length()) {
					tmp17 = 0;
				} else {
					var pos77 = topdict.cursor;
					if(pos77 == null) {
						pos77 = 0;
					}
					tmp17 = topdict.data.readU8(pos77);
				}
				if(!(tmp17 >= 28)) {
					break;
				}
				var v42;
				var b012;
				if(topdict.cursor >= topdict.data.get_length()) {
					b012 = 0;
				} else {
					var pos78 = topdict.cursor;
					if(pos78 == null) {
						pos78 = 0;
					}
					b012 = topdict.data.readU8(pos78);
				}
				if(b012 < 28) {
					throw new js__$Boot_HaxeError("Error");
				}
				if(b012 == 30) {
					var o16 = topdict.cursor + 1;
					if(!(!(o16 > topdict.data.get_length() || o16 < 0))) {
						throw new js__$Boot_HaxeError("Error");
					}
					topdict.cursor = o16 > topdict.data.get_length() || o16 < 0 ? topdict.data.get_length() : o16;
					while(topdict.cursor < topdict.data.get_length()) {
						if(topdict.cursor >= topdict.data.get_length()) {
							v42 = 0;
						} else {
							var pos79 = topdict.cursor++;
							if(pos79 == null) {
								pos79 = 0;
							}
							v42 = topdict.data.readU8(pos79);
						}
						if((v42 & 15) == 15 || v42 >> 4 == 15) {
							break;
						}
					}
				} else {
					var b013;
					if(topdict.cursor >= topdict.data.get_length()) {
						b013 = 0;
					} else {
						var pos80 = topdict.cursor++;
						if(pos80 == null) {
							pos80 = 0;
						}
						b013 = topdict.data.readU8(pos80);
					}
					if(!(b013 >= 32 && b013 <= 246)) {
						if(b013 >= 247 && b013 <= 250) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos81 = topdict.cursor++;
								if(pos81 == null) {
									pos81 = 0;
								}
							}
						} else if(b013 >= 251 && b013 <= 254) {
							if(topdict.cursor < topdict.data.get_length()) {
								var pos82 = topdict.cursor++;
								if(pos82 == null) {
									pos82 = 0;
								}
							}
						} else if(b013 == 28) {
							var _g33 = 0;
							while(_g33 < 2) {
								++_g33;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos83 = topdict.cursor++;
									if(pos83 == null) {
										pos83 = 0;
									}
								}
							}
						} else if(b013 == 29) {
							var _g34 = 0;
							while(_g34 < 4) {
								++_g34;
								if(topdict.cursor < topdict.data.get_length()) {
									var pos84 = topdict.cursor++;
									if(pos84 == null) {
										pos84 = 0;
									}
								}
							}
						} else {
							throw new js__$Boot_HaxeError("Error");
						}
					}
				}
			}
			var end4 = topdict.cursor;
			if(topdict.cursor >= topdict.data.get_length()) {
				op8 = 0;
			} else {
				var pos85 = topdict.cursor++;
				if(pos85 == null) {
					pos85 = 0;
				}
				op8 = topdict.data.readU8(pos85);
			}
			if(op8 == 12) {
				var op9;
				if(topdict.cursor >= topdict.data.get_length()) {
					op9 = 0;
				} else {
					var pos86 = topdict.cursor++;
					if(pos86 == null) {
						pos86 = 0;
					}
					op9 = topdict.data.readU8(pos86);
				}
				op8 = op9 | 256;
			}
			if(op8 == 18) {
				var s9 = end4 - start9;
				var r17 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r17.data = null;
				r17.cursor = 0;
				if(start9 < 0 || s9 < 0 || start9 > topdict.data.get_length() || s9 > topdict.data.get_length() - start9) {
					ret4 = r17;
				} else {
					r17.data = topdict.data.sub(start9,s9);
					ret4 = r17;
				}
				break;
			}
		}
		var operands4;
		if(ret4 != null) {
			operands4 = ret4;
		} else {
			var r18 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r18.data = null;
			r18.cursor = 0;
			if(0 > topdict.data.get_length() || 0 > topdict.data.get_length()) {
				operands4 = r18;
			} else {
				r18.data = topdict.data.sub(0,0);
				operands4 = r18;
			}
		}
		while(i4 < 2 && operands4.cursor < operands4.data.get_length()) {
			var b014;
			if(operands4.cursor >= operands4.data.get_length()) {
				b014 = 0;
			} else {
				var pos87 = operands4.cursor++;
				if(pos87 == null) {
					pos87 = 0;
				}
				b014 = operands4.data.readU8(pos87);
			}
			var tmp18;
			if(b014 >= 32 && b014 <= 246) {
				tmp18 = b014 - 139;
			} else if(b014 >= 247 && b014 <= 250) {
				var tmp19;
				if(operands4.cursor >= operands4.data.get_length()) {
					tmp19 = 0;
				} else {
					var pos88 = operands4.cursor++;
					if(pos88 == null) {
						pos88 = 0;
					}
					tmp19 = operands4.data.readU8(pos88);
				}
				tmp18 = (b014 - 247) * 256 + tmp19 + 108;
			} else if(b014 >= 251 && b014 <= 254) {
				var tmp20;
				if(operands4.cursor >= operands4.data.get_length()) {
					tmp20 = 0;
				} else {
					var pos89 = operands4.cursor++;
					if(pos89 == null) {
						pos89 = 0;
					}
					tmp20 = operands4.data.readU8(pos89);
				}
				tmp18 = -(b014 - 251) * 256 - tmp20 - 108;
			} else if(b014 == 28) {
				var v43 = 0;
				var _g35 = 0;
				while(_g35 < 2) {
					++_g35;
					var v44;
					if(operands4.cursor >= operands4.data.get_length()) {
						v44 = 0;
					} else {
						var pos90 = operands4.cursor++;
						if(pos90 == null) {
							pos90 = 0;
						}
						v44 = operands4.data.readU8(pos90);
					}
					v43 = v43 << 8 | v44;
				}
				tmp18 = v43;
			} else if(b014 == 29) {
				var v45 = 0;
				var _g36 = 0;
				while(_g36 < 4) {
					++_g36;
					var v46;
					if(operands4.cursor >= operands4.data.get_length()) {
						v46 = 0;
					} else {
						var pos91 = operands4.cursor++;
						if(pos91 == null) {
							pos91 = 0;
						}
						v46 = operands4.data.readU8(pos91);
					}
					v45 = v45 << 8 | v46;
				}
				tmp18 = v45;
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			private_loc[i4] = tmp18;
			++i4;
		}
		var tmp21;
		if(private_loc[1] == 0 || private_loc[0] == 0) {
			var r19 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r19.data = null;
			r19.cursor = 0;
			tmp21 = r19;
		} else {
			var o17 = private_loc[1];
			var s10 = private_loc[0];
			var r20 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r20.data = null;
			r20.cursor = 0;
			var pdict;
			if(o17 < 0 || s10 < 0 || o17 > b.data.get_length() || s10 > b.data.get_length() - o17) {
				pdict = r20;
			} else {
				r20.data = b.data.sub(o17,s10);
				pdict = r20;
			}
			var i5 = 0;
			if(0 > pdict.data.get_length()) {
				throw new js__$Boot_HaxeError("Error");
			}
			pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
			var ret5 = null;
			while(pdict.cursor < pdict.data.get_length()) {
				var start10 = pdict.cursor;
				var op10;
				while(true) {
					var tmp22;
					if(pdict.cursor >= pdict.data.get_length()) {
						tmp22 = 0;
					} else {
						var pos92 = pdict.cursor;
						if(pos92 == null) {
							pos92 = 0;
						}
						tmp22 = pdict.data.readU8(pos92);
					}
					if(!(tmp22 >= 28)) {
						break;
					}
					var v47;
					var b015;
					if(pdict.cursor >= pdict.data.get_length()) {
						b015 = 0;
					} else {
						var pos93 = pdict.cursor;
						if(pos93 == null) {
							pos93 = 0;
						}
						b015 = pdict.data.readU8(pos93);
					}
					if(b015 < 28) {
						throw new js__$Boot_HaxeError("Error");
					}
					if(b015 == 30) {
						var o18 = pdict.cursor + 1;
						if(!(!(o18 > pdict.data.get_length() || o18 < 0))) {
							throw new js__$Boot_HaxeError("Error");
						}
						pdict.cursor = o18 > pdict.data.get_length() || o18 < 0 ? pdict.data.get_length() : o18;
						while(pdict.cursor < pdict.data.get_length()) {
							if(pdict.cursor >= pdict.data.get_length()) {
								v47 = 0;
							} else {
								var pos94 = pdict.cursor++;
								if(pos94 == null) {
									pos94 = 0;
								}
								v47 = pdict.data.readU8(pos94);
							}
							if((v47 & 15) == 15 || v47 >> 4 == 15) {
								break;
							}
						}
					} else {
						var b016;
						if(pdict.cursor >= pdict.data.get_length()) {
							b016 = 0;
						} else {
							var pos95 = pdict.cursor++;
							if(pos95 == null) {
								pos95 = 0;
							}
							b016 = pdict.data.readU8(pos95);
						}
						if(!(b016 >= 32 && b016 <= 246)) {
							if(b016 >= 247 && b016 <= 250) {
								if(pdict.cursor < pdict.data.get_length()) {
									var pos96 = pdict.cursor++;
									if(pos96 == null) {
										pos96 = 0;
									}
								}
							} else if(b016 >= 251 && b016 <= 254) {
								if(pdict.cursor < pdict.data.get_length()) {
									var pos97 = pdict.cursor++;
									if(pos97 == null) {
										pos97 = 0;
									}
								}
							} else if(b016 == 28) {
								var _g37 = 0;
								while(_g37 < 2) {
									++_g37;
									if(pdict.cursor < pdict.data.get_length()) {
										var pos98 = pdict.cursor++;
										if(pos98 == null) {
											pos98 = 0;
										}
									}
								}
							} else if(b016 == 29) {
								var _g38 = 0;
								while(_g38 < 4) {
									++_g38;
									if(pdict.cursor < pdict.data.get_length()) {
										var pos99 = pdict.cursor++;
										if(pos99 == null) {
											pos99 = 0;
										}
									}
								}
							} else {
								throw new js__$Boot_HaxeError("Error");
							}
						}
					}
				}
				var end5 = pdict.cursor;
				if(pdict.cursor >= pdict.data.get_length()) {
					op10 = 0;
				} else {
					var pos100 = pdict.cursor++;
					if(pos100 == null) {
						pos100 = 0;
					}
					op10 = pdict.data.readU8(pos100);
				}
				if(op10 == 12) {
					var op11;
					if(pdict.cursor >= pdict.data.get_length()) {
						op11 = 0;
					} else {
						var pos101 = pdict.cursor++;
						if(pos101 == null) {
							pos101 = 0;
						}
						op11 = pdict.data.readU8(pos101);
					}
					op10 = op11 | 256;
				}
				if(op10 == 19) {
					var s11 = end5 - start10;
					var r21 = new kha_graphics2_truetype_Stbtt_$_$buf();
					r21.data = null;
					r21.cursor = 0;
					if(start10 < 0 || s11 < 0 || start10 > pdict.data.get_length() || s11 > pdict.data.get_length() - start10) {
						ret5 = r21;
					} else {
						r21.data = pdict.data.sub(start10,s11);
						ret5 = r21;
					}
					break;
				}
			}
			var operands5;
			if(ret5 != null) {
				operands5 = ret5;
			} else {
				var r22 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r22.data = null;
				r22.cursor = 0;
				if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
					operands5 = r22;
				} else {
					r22.data = pdict.data.sub(0,0);
					operands5 = r22;
				}
			}
			while(i5 < 1 && operands5.cursor < operands5.data.get_length()) {
				var b017;
				if(operands5.cursor >= operands5.data.get_length()) {
					b017 = 0;
				} else {
					var pos102 = operands5.cursor++;
					if(pos102 == null) {
						pos102 = 0;
					}
					b017 = operands5.data.readU8(pos102);
				}
				var tmp23;
				if(b017 >= 32 && b017 <= 246) {
					tmp23 = b017 - 139;
				} else if(b017 >= 247 && b017 <= 250) {
					var tmp24;
					if(operands5.cursor >= operands5.data.get_length()) {
						tmp24 = 0;
					} else {
						var pos103 = operands5.cursor++;
						if(pos103 == null) {
							pos103 = 0;
						}
						tmp24 = operands5.data.readU8(pos103);
					}
					tmp23 = (b017 - 247) * 256 + tmp24 + 108;
				} else if(b017 >= 251 && b017 <= 254) {
					var tmp25;
					if(operands5.cursor >= operands5.data.get_length()) {
						tmp25 = 0;
					} else {
						var pos104 = operands5.cursor++;
						if(pos104 == null) {
							pos104 = 0;
						}
						tmp25 = operands5.data.readU8(pos104);
					}
					tmp23 = -(b017 - 251) * 256 - tmp25 - 108;
				} else if(b017 == 28) {
					var v48 = 0;
					var _g39 = 0;
					while(_g39 < 2) {
						++_g39;
						var v49;
						if(operands5.cursor >= operands5.data.get_length()) {
							v49 = 0;
						} else {
							var pos105 = operands5.cursor++;
							if(pos105 == null) {
								pos105 = 0;
							}
							v49 = operands5.data.readU8(pos105);
						}
						v48 = v48 << 8 | v49;
					}
					tmp23 = v48;
				} else if(b017 == 29) {
					var v50 = 0;
					var _g40 = 0;
					while(_g40 < 4) {
						++_g40;
						var v51;
						if(operands5.cursor >= operands5.data.get_length()) {
							v51 = 0;
						} else {
							var pos106 = operands5.cursor++;
							if(pos106 == null) {
								pos106 = 0;
							}
							v51 = operands5.data.readU8(pos106);
						}
						v50 = v50 << 8 | v51;
					}
					tmp23 = v50;
				} else {
					throw new js__$Boot_HaxeError("Error");
				}
				subrsoff[i5] = tmp23;
				++i5;
			}
			if(subrsoff[0] == 0) {
				var r23 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r23.data = null;
				r23.cursor = 0;
				tmp21 = r23;
			} else {
				var o19 = private_loc[1] + subrsoff[0];
				if(!(!(o19 > b.data.get_length() || o19 < 0))) {
					throw new js__$Boot_HaxeError("Error");
				}
				b.cursor = o19 > b.data.get_length() || o19 < 0 ? b.data.get_length() : o19;
				var start11 = b.cursor;
				var v52 = 0;
				var _g41 = 0;
				while(_g41 < 2) {
					++_g41;
					var v53;
					if(b.cursor >= b.data.get_length()) {
						v53 = 0;
					} else {
						var pos107 = b.cursor++;
						if(pos107 == null) {
							pos107 = 0;
						}
						v53 = b.data.readU8(pos107);
					}
					v52 = v52 << 8 | v53;
				}
				var count5 = v52;
				if(count5 > 0) {
					var offsize5;
					if(b.cursor >= b.data.get_length()) {
						offsize5 = 0;
					} else {
						var pos108 = b.cursor++;
						if(pos108 == null) {
							pos108 = 0;
						}
						offsize5 = b.data.readU8(pos108);
					}
					if(!(offsize5 >= 1 && offsize5 <= 4)) {
						throw new js__$Boot_HaxeError("Error");
					}
					var o20 = b.cursor + offsize5 * count5;
					if(!(!(o20 > b.data.get_length() || o20 < 0))) {
						throw new js__$Boot_HaxeError("Error");
					}
					b.cursor = o20 > b.data.get_length() || o20 < 0 ? b.data.get_length() : o20;
					var v54 = 0;
					if(!(offsize5 >= 1 && offsize5 <= 4)) {
						throw new js__$Boot_HaxeError("Error");
					}
					var _g42 = 0;
					var _g110 = offsize5;
					while(_g42 < _g110) {
						++_g42;
						var v55;
						if(b.cursor >= b.data.get_length()) {
							v55 = 0;
						} else {
							var pos109 = b.cursor++;
							if(pos109 == null) {
								pos109 = 0;
							}
							v55 = b.data.readU8(pos109);
						}
						v54 = v54 << 8 | v55;
					}
					var o21 = b.cursor + (v54 - 1);
					if(!(!(o21 > b.data.get_length() || o21 < 0))) {
						throw new js__$Boot_HaxeError("Error");
					}
					b.cursor = o21 > b.data.get_length() || o21 < 0 ? b.data.get_length() : o21;
					var s12 = b.cursor - start11;
					var r24 = new kha_graphics2_truetype_Stbtt_$_$buf();
					r24.data = null;
					r24.cursor = 0;
					if(start11 < 0 || s12 < 0 || start11 > b.data.get_length() || s12 > b.data.get_length() - start11) {
						tmp21 = r24;
					} else {
						r24.data = b.data.sub(start11,s12);
						tmp21 = r24;
					}
				} else {
					tmp21 = b;
				}
			}
		}
		info.subrs = tmp21;
		if(cstype[0] != 2) {
			return false;
		}
		if(charstrings[0] == 0) {
			return false;
		}
		if(fdarrayoff[0] != 0) {
			if(fdselectoff[0] == 0) {
				return false;
			}
			var o22 = fdarrayoff[0];
			if(!(!(o22 > b.data.get_length() || o22 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			b.cursor = o22 > b.data.get_length() || o22 < 0 ? b.data.get_length() : o22;
			var start12 = b.cursor;
			var v56 = 0;
			var _g43 = 0;
			while(_g43 < 2) {
				++_g43;
				var v57;
				if(b.cursor >= b.data.get_length()) {
					v57 = 0;
				} else {
					var pos110 = b.cursor++;
					if(pos110 == null) {
						pos110 = 0;
					}
					v57 = b.data.readU8(pos110);
				}
				v56 = v56 << 8 | v57;
			}
			var count6 = v56;
			var tmp26;
			if(count6 > 0) {
				var offsize6;
				if(b.cursor >= b.data.get_length()) {
					offsize6 = 0;
				} else {
					var pos111 = b.cursor++;
					if(pos111 == null) {
						pos111 = 0;
					}
					offsize6 = b.data.readU8(pos111);
				}
				if(!(offsize6 >= 1 && offsize6 <= 4)) {
					throw new js__$Boot_HaxeError("Error");
				}
				var o23 = b.cursor + offsize6 * count6;
				if(!(!(o23 > b.data.get_length() || o23 < 0))) {
					throw new js__$Boot_HaxeError("Error");
				}
				b.cursor = o23 > b.data.get_length() || o23 < 0 ? b.data.get_length() : o23;
				var v58 = 0;
				if(!(offsize6 >= 1 && offsize6 <= 4)) {
					throw new js__$Boot_HaxeError("Error");
				}
				var _g44 = 0;
				var _g111 = offsize6;
				while(_g44 < _g111) {
					++_g44;
					var v59;
					if(b.cursor >= b.data.get_length()) {
						v59 = 0;
					} else {
						var pos112 = b.cursor++;
						if(pos112 == null) {
							pos112 = 0;
						}
						v59 = b.data.readU8(pos112);
					}
					v58 = v58 << 8 | v59;
				}
				var o24 = b.cursor + (v58 - 1);
				if(!(!(o24 > b.data.get_length() || o24 < 0))) {
					throw new js__$Boot_HaxeError("Error");
				}
				b.cursor = o24 > b.data.get_length() || o24 < 0 ? b.data.get_length() : o24;
				var s13 = b.cursor - start12;
				var r25 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r25.data = null;
				r25.cursor = 0;
				if(start12 < 0 || s13 < 0 || start12 > b.data.get_length() || s13 > b.data.get_length() - start12) {
					tmp26 = r25;
				} else {
					r25.data = b.data.sub(start12,s13);
					tmp26 = r25;
				}
			} else {
				tmp26 = b;
			}
			info.fontdicts = tmp26;
			var o25 = fdselectoff[0];
			var s14 = b.data.get_length() - fdselectoff[0];
			var r26 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r26.data = null;
			r26.cursor = 0;
			var tmp27;
			if(o25 < 0 || s14 < 0 || o25 > b.data.get_length() || s14 > b.data.get_length() - o25) {
				tmp27 = r26;
			} else {
				r26.data = b.data.sub(o25,s14);
				tmp27 = r26;
			}
			info.fdselect = tmp27;
		}
		var o26 = charstrings[0];
		if(!(!(o26 > b.data.get_length() || o26 < 0))) {
			throw new js__$Boot_HaxeError("Error");
		}
		b.cursor = o26 > b.data.get_length() || o26 < 0 ? b.data.get_length() : o26;
		var start13 = b.cursor;
		var v60 = 0;
		var _g45 = 0;
		while(_g45 < 2) {
			++_g45;
			var v61;
			if(b.cursor >= b.data.get_length()) {
				v61 = 0;
			} else {
				var pos113 = b.cursor++;
				if(pos113 == null) {
					pos113 = 0;
				}
				v61 = b.data.readU8(pos113);
			}
			v60 = v60 << 8 | v61;
		}
		var count7 = v60;
		var tmp28;
		if(count7 > 0) {
			var offsize7;
			if(b.cursor >= b.data.get_length()) {
				offsize7 = 0;
			} else {
				var pos114 = b.cursor++;
				if(pos114 == null) {
					pos114 = 0;
				}
				offsize7 = b.data.readU8(pos114);
			}
			if(!(offsize7 >= 1 && offsize7 <= 4)) {
				throw new js__$Boot_HaxeError("Error");
			}
			var o27 = b.cursor + offsize7 * count7;
			if(!(!(o27 > b.data.get_length() || o27 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			b.cursor = o27 > b.data.get_length() || o27 < 0 ? b.data.get_length() : o27;
			var v62 = 0;
			if(!(offsize7 >= 1 && offsize7 <= 4)) {
				throw new js__$Boot_HaxeError("Error");
			}
			var _g46 = 0;
			var _g112 = offsize7;
			while(_g46 < _g112) {
				++_g46;
				var v63;
				if(b.cursor >= b.data.get_length()) {
					v63 = 0;
				} else {
					var pos115 = b.cursor++;
					if(pos115 == null) {
						pos115 = 0;
					}
					v63 = b.data.readU8(pos115);
				}
				v62 = v62 << 8 | v63;
			}
			var o28 = b.cursor + (v62 - 1);
			if(!(!(o28 > b.data.get_length() || o28 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			b.cursor = o28 > b.data.get_length() || o28 < 0 ? b.data.get_length() : o28;
			var s15 = b.cursor - start13;
			var r27 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r27.data = null;
			r27.cursor = 0;
			if(start13 < 0 || s15 < 0 || start13 > b.data.get_length() || s15 > b.data.get_length() - start13) {
				tmp28 = r27;
			} else {
				r27.data = b.data.sub(start13,s15);
				tmp28 = r27;
			}
		} else {
			tmp28 = b;
		}
		info.charstrings = tmp28;
	}
	var t = kha_graphics2_truetype_StbTruetype.stbtt__find_table(data,fontstart,"maxp");
	if(t != 0) {
		var pos116 = t + 4;
		if(pos116 == null) {
			pos116 = 0;
		}
		info.numGlyphs = data.readU8(pos116 + 1) | data.readU8(pos116) << 8;
	} else {
		info.numGlyphs = 65535;
	}
	var pos117 = cmap + 2;
	if(pos117 == null) {
		pos117 = 0;
	}
	var numTables = data.readU8(pos117 + 1) | data.readU8(pos117) << 8;
	info.index_map = 0;
	var _g47 = 0;
	while(_g47 < numTables) {
		var encoding_record = cmap + 4 + 8 * _g47++;
		var pos118 = encoding_record;
		if(encoding_record == null) {
			pos118 = 0;
		}
		switch(data.readU8(pos118 + 1) | data.readU8(pos118) << 8) {
		case 0:
			var pos119 = encoding_record + 4;
			if(pos119 == null) {
				pos119 = 0;
			}
			var pos120 = pos119;
			if(pos120 == null) {
				pos120 = 0;
			}
			info.index_map = cmap + (data.readU8(pos120 + 3) | data.readU8(pos120 + 2) << 8 | data.readU8(pos120 + 1) << 16 | data.readU8(pos120) << 24);
			break;
		case 3:
			var pos121 = encoding_record + 2;
			if(pos121 == null) {
				pos121 = 0;
			}
			switch(data.readU8(pos121 + 1) | data.readU8(pos121) << 8) {
			case 1:case 10:
				var pos122 = encoding_record + 4;
				if(pos122 == null) {
					pos122 = 0;
				}
				var pos123 = pos122;
				if(pos123 == null) {
					pos123 = 0;
				}
				info.index_map = cmap + (data.readU8(pos123 + 3) | data.readU8(pos123 + 2) << 8 | data.readU8(pos123 + 1) << 16 | data.readU8(pos123) << 24);
				break;
			}
			break;
		}
	}
	if(info.index_map == 0) {
		return false;
	}
	var pos124 = info.head + 50;
	if(pos124 == null) {
		pos124 = 0;
	}
	info.indexToLocFormat = data.readU8(pos124 + 1) | data.readU8(pos124) << 8;
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex = function(info,unicode_codepoint) {
	var data = info.data;
	var index_map = info.index_map;
	var pos = index_map;
	if(index_map == null) {
		pos = 0;
	}
	var format = data.readU8(pos + 1) | data.readU8(pos) << 8;
	if(format == 0) {
		var pos1 = index_map + 2;
		if(pos1 == null) {
			pos1 = 0;
		}
		if(unicode_codepoint < (data.readU8(pos1 + 1) | data.readU8(pos1) << 8) - 6) {
			var pos2 = index_map + 6 + unicode_codepoint;
			if(pos2 == null) {
				pos2 = 0;
			}
			return data.readU8(pos2);
		}
		return 0;
	} else if(format == 6) {
		var pos3 = index_map + 6;
		if(pos3 == null) {
			pos3 = 0;
		}
		var first = data.readU8(pos3 + 1) | data.readU8(pos3) << 8;
		var pos4 = index_map + 8;
		if(pos4 == null) {
			pos4 = 0;
		}
		if(unicode_codepoint >= first && unicode_codepoint < first + (data.readU8(pos4 + 1) | data.readU8(pos4) << 8)) {
			var pos5 = index_map + 10 + (unicode_codepoint - first) * 2;
			if(pos5 == null) {
				pos5 = 0;
			}
			return data.readU8(pos5 + 1) | data.readU8(pos5) << 8;
		}
		return 0;
	} else if(format == 2) {
		throw new js__$Boot_HaxeError("Error");
	} else if(format == 4) {
		var pos6 = index_map + 6;
		if(pos6 == null) {
			pos6 = 0;
		}
		var segcount = (data.readU8(pos6 + 1) | data.readU8(pos6) << 8) >> 1;
		var pos7 = index_map + 8;
		if(pos7 == null) {
			pos7 = 0;
		}
		var searchRange = (data.readU8(pos7 + 1) | data.readU8(pos7) << 8) >> 1;
		var pos8 = index_map + 10;
		if(pos8 == null) {
			pos8 = 0;
		}
		var entrySelector = data.readU8(pos8 + 1) | data.readU8(pos8) << 8;
		var pos9 = index_map + 12;
		if(pos9 == null) {
			pos9 = 0;
		}
		var rangeShift = (data.readU8(pos9 + 1) | data.readU8(pos9) << 8) >> 1;
		var endCount = index_map + 14;
		var search = endCount;
		if(unicode_codepoint > 65535) {
			return 0;
		}
		var pos10 = endCount + rangeShift * 2;
		if(pos10 == null) {
			pos10 = 0;
		}
		if(unicode_codepoint >= (data.readU8(pos10 + 1) | data.readU8(pos10) << 8)) {
			search = endCount + rangeShift * 2;
		}
		search -= 2;
		while(entrySelector != 0) {
			searchRange >>= 1;
			var pos11 = search + searchRange * 2;
			if(pos11 == null) {
				pos11 = 0;
			}
			if(unicode_codepoint > (data.readU8(pos11 + 1) | data.readU8(pos11) << 8)) {
				search += searchRange * 2;
			}
			--entrySelector;
		}
		search += 2;
		var item = search - endCount >> 1 & 65535;
		var pos12 = endCount + 2 * item;
		if(pos12 == null) {
			pos12 = 0;
		}
		if(unicode_codepoint > (data.readU8(pos12 + 1) | data.readU8(pos12) << 8)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var pos13 = index_map + 14 + segcount * 2 + 2 + 2 * item;
		if(pos13 == null) {
			pos13 = 0;
		}
		var start = data.readU8(pos13 + 1) | data.readU8(pos13) << 8;
		if(unicode_codepoint < start) {
			return 0;
		}
		var pos14 = index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos14 == null) {
			pos14 = 0;
		}
		var offset = data.readU8(pos14 + 1) | data.readU8(pos14) << 8;
		if(offset == 0) {
			var pos15 = index_map + 14 + segcount * 4 + 2 + 2 * item;
			if(pos15 == null) {
				pos15 = 0;
			}
			var n = data.readU8(pos15 + 1) | data.readU8(pos15) << 8;
			return unicode_codepoint + ((n & 32768) != 0 ? n - 65536 : n) & 65535;
		}
		var pos16 = offset + (unicode_codepoint - start) * 2 + index_map + 14 + segcount * 6 + 2 + 2 * item;
		if(pos16 == null) {
			pos16 = 0;
		}
		return data.readU8(pos16 + 1) | data.readU8(pos16) << 8;
	} else if(format == 12 || format == 13) {
		var pos17 = index_map + 12;
		if(pos17 == null) {
			pos17 = 0;
		}
		var pos18 = pos17;
		if(pos18 == null) {
			pos18 = 0;
		}
		var low = 0;
		var high = data.readU8(pos18 + 3) | data.readU8(pos18 + 2) << 8 | data.readU8(pos18 + 1) << 16 | data.readU8(pos18) << 24;
		while(low < high) {
			var mid = low + (high - low >> 1);
			var pos19 = index_map + 16 + mid * 12;
			if(pos19 == null) {
				pos19 = 0;
			}
			var pos20 = pos19;
			if(pos20 == null) {
				pos20 = 0;
			}
			var start_char = data.readU8(pos20 + 3) | data.readU8(pos20 + 2) << 8 | data.readU8(pos20 + 1) << 16 | data.readU8(pos20) << 24;
			var pos21 = index_map + 16 + mid * 12 + 4;
			if(pos21 == null) {
				pos21 = 0;
			}
			var pos22 = pos21;
			if(pos22 == null) {
				pos22 = 0;
			}
			if(unicode_codepoint < start_char) {
				high = mid;
			} else if(unicode_codepoint > (data.readU8(pos22 + 3) | data.readU8(pos22 + 2) << 8 | data.readU8(pos22 + 1) << 16 | data.readU8(pos22) << 24)) {
				low = mid + 1;
			} else {
				var pos23 = index_map + 16 + mid * 12 + 8;
				if(pos23 == null) {
					pos23 = 0;
				}
				var pos24 = pos23;
				if(pos24 == null) {
					pos24 = 0;
				}
				var start_glyph = data.readU8(pos24 + 3) | data.readU8(pos24 + 2) << 8 | data.readU8(pos24 + 1) << 16 | data.readU8(pos24) << 24;
				if(format == 12) {
					return start_glyph + unicode_codepoint - start_char;
				} else {
					return start_glyph;
				}
			}
		}
		return 0;
	}
	throw new js__$Boot_HaxeError("Error");
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointShape = function(info,unicode_codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,unicode_codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_setvertex = function(v,type,x,y,cx,cy) {
	v.type = type;
	v.x = x;
	v.y = y;
	v.cx = cx;
	v.cy = cy;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset = function(info,glyph_index) {
	var g1;
	var g2;
	if(!(info.cff.data == null || info.cff.data.get_length() == 0)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(glyph_index >= info.numGlyphs) {
		return -1;
	}
	if(info.indexToLocFormat >= 2) {
		return -1;
	}
	if(info.indexToLocFormat == 0) {
		var p = info.data;
		var pos = info.loca + glyph_index * 2;
		if(pos == null) {
			pos = 0;
		}
		g1 = info.glyf + (p.readU8(pos + 1) | p.readU8(pos) << 8) * 2;
		var p1 = info.data;
		var pos1 = info.loca + glyph_index * 2 + 2;
		if(pos1 == null) {
			pos1 = 0;
		}
		g2 = info.glyf + (p1.readU8(pos1 + 1) | p1.readU8(pos1) << 8) * 2;
	} else {
		var p2 = info.data;
		var pos2 = info.loca + glyph_index * 4;
		if(pos2 == null) {
			pos2 = 0;
		}
		var pos3 = pos2;
		if(pos3 == null) {
			pos3 = 0;
		}
		g1 = info.glyf + (p2.readU8(pos3 + 3) | p2.readU8(pos3 + 2) << 8 | p2.readU8(pos3 + 1) << 16 | p2.readU8(pos3) << 24);
		var p3 = info.data;
		var pos4 = info.loca + glyph_index * 4 + 4;
		if(pos4 == null) {
			pos4 = 0;
		}
		var pos5 = pos4;
		if(pos5 == null) {
			pos5 = 0;
		}
		g2 = info.glyf + (p3.readU8(pos5 + 3) | p3.readU8(pos5 + 2) << 8 | p3.readU8(pos5 + 1) << 16 | p3.readU8(pos5) << 24);
	}
	if(g1 == g2) {
		return -1;
	} else {
		return g1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox = function(info,glyph_index,rect) {
	if(info.cff.data != null && info.cff.data.get_length() > 0) {
		kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphInfoT2(info,glyph_index,rect);
	} else {
		var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
		if(g < 0) {
			return false;
		}
		var p = info.data;
		var pos = g + 2;
		if(pos == null) {
			pos = 0;
		}
		var n = p.readU8(pos + 1) | p.readU8(pos) << 8;
		rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
		var p1 = info.data;
		var pos1 = g + 4;
		if(pos1 == null) {
			pos1 = 0;
		}
		var n1 = p1.readU8(pos1 + 1) | p1.readU8(pos1) << 8;
		rect.y0 = (n1 & 32768) != 0 ? n1 - 65536 : n1;
		var p2 = info.data;
		var pos2 = g + 6;
		if(pos2 == null) {
			pos2 = 0;
		}
		var n2 = p2.readU8(pos2 + 1) | p2.readU8(pos2) << 8;
		rect.x1 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
		var p3 = info.data;
		var pos3 = g + 8;
		if(pos3 == null) {
			pos3 = 0;
		}
		var n3 = p3.readU8(pos3 + 1) | p3.readU8(pos3) << 8;
		rect.y1 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	}
	return true;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBox = function(info,codepoint,rect) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),rect);
};
kha_graphics2_truetype_StbTruetype.stbtt_IsGlyphEmpty = function(info,glyph_index) {
	if(info.cff.data != null && info.cff.data.get_length() > 0) {
		return kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphInfoT2(info,glyph_index,null) == 0;
	}
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return true;
	}
	var p = info.data;
	var pos = g;
	if(g == null) {
		pos = 0;
	}
	var n = p.readU8(pos + 1) | p.readU8(pos) << 8;
	return ((n & 32768) != 0 ? n - 65536 : n) == 0;
};
kha_graphics2_truetype_StbTruetype.stbtt__close_shape = function(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy) {
	if(start_off) {
		if(was_off) {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + scx >> 1,cy + scy >> 1,cx,cy);
		}
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,scx,scy);
	} else if(was_off) {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,sx,sy,cx,cy);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,sx,sy,0,0);
	}
	return num_vertices;
};
kha_graphics2_truetype_StbTruetype.copyVertices = function(from,to,offset,count) {
	var _g = 0;
	while(_g < count) {
		var i = _g++;
		to[offset + i] = from[i];
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeTT = function(info,glyph_index) {
	var data = info.data;
	var vertices = null;
	var num_vertices = 0;
	var g = kha_graphics2_truetype_StbTruetype.stbtt__GetGlyfOffset(info,glyph_index);
	if(g < 0) {
		return null;
	}
	var pos = g;
	if(g == null) {
		pos = 0;
	}
	var n = data.readU8(pos + 1) | data.readU8(pos) << 8;
	var numberOfContours = (n & 32768) != 0 ? n - 65536 : n;
	if(numberOfContours > 0) {
		var flags = 0;
		var j = 0;
		var next_move = 0;
		var off = 0;
		var was_off = false;
		var start_off = false;
		var endPtsOfContoursOffset = g + 10;
		var pos1 = endPtsOfContoursOffset + numberOfContours * 2;
		if(pos1 == null) {
			pos1 = 0;
		}
		var pointsIndex = endPtsOfContoursOffset + numberOfContours * 2 + 2 + (data.readU8(pos1 + 1) | data.readU8(pos1) << 8);
		var pos2 = endPtsOfContoursOffset + numberOfContours * 2 - 2;
		if(pos2 == null) {
			pos2 = 0;
		}
		var n1 = 1 + (data.readU8(pos2 + 1) | data.readU8(pos2) << 8);
		var m = n1 + 2 * numberOfContours;
		vertices = new Array(m);
		if(vertices == null) {
			return null;
		} else {
			var _g = 0;
			var _g1 = vertices.length;
			while(_g < _g1) vertices[_g++] = new kha_graphics2_truetype_Stbtt_$vertex();
		}
		next_move = 0;
		var flagcount = 0;
		off = m - n1;
		var _g2 = 0;
		while(_g2 < n1) {
			var i = _g2++;
			if(flagcount == 0) {
				flags = data.readU8(pointsIndex++);
				if((flags & 8) != 0) {
					flagcount = data.readU8(pointsIndex++);
				}
			} else {
				--flagcount;
			}
			vertices[off + i].type = flags;
		}
		var x = 0;
		var _g21 = 0;
		while(_g21 < n1) {
			var i1 = _g21++;
			flags = vertices[off + i1].type;
			if((flags & 2) != 0) {
				var dx = data.readU8(pointsIndex++);
				x += (flags & 16) != 0 ? dx : -dx;
			} else if((flags & 16) == 0) {
				var value;
				var n2 = data.readU8(pointsIndex + 1) | data.readU8(pointsIndex) << 8;
				if((n2 & 32768) != 0) {
					value = n2 - 65536;
				} else {
					value = n2;
				}
				x += value;
				pointsIndex += 2;
			}
			vertices[off + i1].x = x;
		}
		var y = 0;
		var _g4 = 0;
		while(_g4 < n1) {
			var i2 = _g4++;
			flags = vertices[off + i2].type;
			if((flags & 4) != 0) {
				var dy = data.readU8(pointsIndex++);
				y += (flags & 32) != 0 ? dy : -dy;
			} else if((flags & 32) == 0) {
				var value1;
				var n3 = data.readU8(pointsIndex + 1) | data.readU8(pointsIndex) << 8;
				if((n3 & 32768) != 0) {
					value1 = n3 - 65536;
				} else {
					value1 = n3;
				}
				y += value1;
				pointsIndex += 2;
			}
			vertices[off + i2].y = y;
		}
		num_vertices = 0;
		var scy = 0;
		var scx = 0;
		var cy = 0;
		var cx = 0;
		var sy = 0;
		var sx = 0;
		var i3 = 0;
		while(i3 < n1) {
			flags = vertices[off + i3].type;
			x = vertices[off + i3].x;
			y = vertices[off + i3].y;
			if(next_move == i3) {
				if(i3 != 0) {
					num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
				}
				start_off = (flags & 1) == 0;
				if(start_off) {
					scx = x;
					scy = y;
					if((vertices[off + i3 + 1].type & 1) == 0) {
						sx = x + vertices[off + i3 + 1].x >> 1;
						sy = y + vertices[off + i3 + 1].y >> 1;
					} else {
						sx = vertices[off + i3 + 1].x;
						sy = vertices[off + i3 + 1].y;
						++i3;
					}
				} else {
					sx = x;
					sy = y;
				}
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],1,sx,sy,0,0);
				was_off = false;
				var pos3 = endPtsOfContoursOffset + j * 2;
				if(pos3 == null) {
					pos3 = 0;
				}
				next_move = 1 + (data.readU8(pos3 + 1) | data.readU8(pos3) << 8);
				++j;
			} else if((flags & 1) == 0) {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,cx + x >> 1,cy + y >> 1,cx,cy);
				}
				cx = x;
				cy = y;
				was_off = true;
			} else {
				if(was_off) {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],3,x,y,cx,cy);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(vertices[num_vertices++],2,x,y,0,0);
				}
				was_off = false;
			}
			++i3;
		}
		num_vertices = kha_graphics2_truetype_StbTruetype.stbtt__close_shape(vertices,num_vertices,was_off,start_off,sx,sy,scx,scy,cx,cy);
	} else if(numberOfContours < 0) {
		var more = 1;
		var compIndex = g + 10;
		num_vertices = 0;
		vertices = null;
		while(more != 0) {
			var comp_num_verts = 0;
			var comp_verts = null;
			var tmp = null;
			var mtx0 = 1;
			var mtx1 = 0;
			var mtx2 = 0;
			var mtx3 = 1;
			var mtx4 = 0;
			var mtx5 = 0;
			var pos4 = compIndex;
			if(pos4 == null) {
				pos4 = 0;
			}
			var n4 = data.readU8(pos4 + 1) | data.readU8(pos4) << 8;
			var flags1 = (n4 & 32768) != 0 ? n4 - 65536 : n4;
			var pos5 = compIndex += 2;
			if(pos5 == null) {
				pos5 = 0;
			}
			var n5 = data.readU8(pos5 + 1) | data.readU8(pos5) << 8;
			compIndex += 2;
			if((flags1 & 2) != 0) {
				if((flags1 & 1) != 0) {
					var pos6 = compIndex;
					if(pos6 == null) {
						pos6 = 0;
					}
					var n6 = data.readU8(pos6 + 1) | data.readU8(pos6) << 8;
					mtx4 = (n6 & 32768) != 0 ? n6 - 65536 : n6;
					var pos7 = compIndex += 2;
					if(pos7 == null) {
						pos7 = 0;
					}
					var n7 = data.readU8(pos7 + 1) | data.readU8(pos7) << 8;
					mtx5 = (n7 & 32768) != 0 ? n7 - 65536 : n7;
					compIndex += 2;
				} else {
					var pos8 = compIndex;
					if(pos8 == null) {
						pos8 = 0;
					}
					var n8 = data.readU8(pos8);
					mtx4 = n8 >= 128 ? n8 - 256 : n8;
					var pos9 = ++compIndex;
					if(pos9 == null) {
						pos9 = 0;
					}
					var n9 = data.readU8(pos9);
					mtx5 = n9 >= 128 ? n9 - 256 : n9;
					++compIndex;
				}
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			if((flags1 & 8) != 0) {
				var pos10 = compIndex;
				if(pos10 == null) {
					pos10 = 0;
				}
				var n10 = data.readU8(pos10 + 1) | data.readU8(pos10) << 8;
				mtx3 = ((n10 & 32768) != 0 ? n10 - 65536 : n10) / 16384.0;
				mtx0 = mtx3;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
			} else if((flags1 & 64) != 0) {
				var pos11 = compIndex;
				if(pos11 == null) {
					pos11 = 0;
				}
				var n11 = data.readU8(pos11 + 1) | data.readU8(pos11) << 8;
				mtx0 = ((n11 & 32768) != 0 ? n11 - 65536 : n11) / 16384.0;
				compIndex += 2;
				mtx2 = 0;
				mtx1 = mtx2;
				var pos12 = compIndex;
				if(pos12 == null) {
					pos12 = 0;
				}
				var n12 = data.readU8(pos12 + 1) | data.readU8(pos12) << 8;
				mtx3 = ((n12 & 32768) != 0 ? n12 - 65536 : n12) / 16384.0;
				compIndex += 2;
			} else if((flags1 & 128) != 0) {
				var pos13 = compIndex;
				if(pos13 == null) {
					pos13 = 0;
				}
				var n13 = data.readU8(pos13 + 1) | data.readU8(pos13) << 8;
				mtx0 = ((n13 & 32768) != 0 ? n13 - 65536 : n13) / 16384.0;
				var pos14 = compIndex += 2;
				if(pos14 == null) {
					pos14 = 0;
				}
				var n14 = data.readU8(pos14 + 1) | data.readU8(pos14) << 8;
				mtx1 = ((n14 & 32768) != 0 ? n14 - 65536 : n14) / 16384.0;
				var pos15 = compIndex += 2;
				if(pos15 == null) {
					pos15 = 0;
				}
				var n15 = data.readU8(pos15 + 1) | data.readU8(pos15) << 8;
				mtx2 = ((n15 & 32768) != 0 ? n15 - 65536 : n15) / 16384.0;
				var pos16 = compIndex += 2;
				if(pos16 == null) {
					pos16 = 0;
				}
				var n16 = data.readU8(pos16 + 1) | data.readU8(pos16) << 8;
				mtx3 = ((n16 & 32768) != 0 ? n16 - 65536 : n16) / 16384.0;
				compIndex += 2;
			}
			var m1 = Math.sqrt(mtx0 * mtx0 + mtx1 * mtx1);
			var n17 = Math.sqrt(mtx2 * mtx2 + mtx3 * mtx3);
			comp_verts = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,(n5 & 32768) != 0 ? n5 - 65536 : n5);
			comp_num_verts = comp_verts == null ? 0 : comp_verts.length;
			if(comp_num_verts > 0) {
				var _g3 = 0;
				var _g11 = comp_num_verts;
				while(_g3 < _g11) {
					var v = comp_verts[_g3++];
					var x1 = v.x;
					var y1 = v.y;
					v.x = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.y = n17 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
					x1 = v.cx;
					y1 = v.cy;
					v.cx = m1 * (mtx0 * x1 + mtx2 * y1 + mtx4) | 0;
					v.cy = n17 * (mtx1 * x1 + mtx3 * y1 + mtx5) | 0;
				}
				tmp = new Array(num_vertices + comp_num_verts);
				if(tmp == null) {
					return null;
				}
				if(num_vertices > 0) {
					kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp,0,num_vertices);
				}
				kha_graphics2_truetype_StbTruetype.copyVertices(comp_verts,tmp,num_vertices,comp_num_verts);
				vertices = tmp;
				num_vertices += comp_num_verts;
			}
			more = flags1 & 32;
		}
	}
	if(vertices == null) {
		return null;
	}
	if(vertices.length < num_vertices) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(num_vertices < vertices.length) {
		var tmp1 = new Array(num_vertices);
		kha_graphics2_truetype_StbTruetype.copyVertices(vertices,tmp1,0,num_vertices);
		return tmp1;
	} else {
		return vertices;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__CSCTX_INIT = function(bounds) {
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = bounds;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	return tmp;
};
kha_graphics2_truetype_StbTruetype.stbtt__track_vertex = function(c,x,y) {
	if(x > c.max_x || !c.started) {
		c.max_x = x;
	}
	if(y > c.max_y || !c.started) {
		c.max_y = y;
	}
	if(x < c.min_x || !c.started) {
		c.min_x = x;
	}
	if(y < c.min_y || !c.started) {
		c.min_y = y;
	}
	c.started = true;
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_v = function(c,type,x,y,cx,cy,cx1,cy1) {
	if(c.bounds) {
		if(x > c.max_x || !c.started) {
			c.max_x = x;
		}
		if(y > c.max_y || !c.started) {
			c.max_y = y;
		}
		if(x < c.min_x || !c.started) {
			c.min_x = x;
		}
		if(y < c.min_y || !c.started) {
			c.min_y = y;
		}
		c.started = true;
		if(type == 4) {
			if(cx > c.max_x || !c.started) {
				c.max_x = cx;
			}
			if(cy > c.max_y || !c.started) {
				c.max_y = cy;
			}
			if(cx < c.min_x || !c.started) {
				c.min_x = cx;
			}
			if(cy < c.min_y || !c.started) {
				c.min_y = cy;
			}
			c.started = true;
			if(cx1 > c.max_x || !c.started) {
				c.max_x = cx1;
			}
			if(cy1 > c.max_y || !c.started) {
				c.max_y = cy1;
			}
			if(cx1 < c.min_x || !c.started) {
				c.min_x = cx1;
			}
			if(cy1 < c.min_y || !c.started) {
				c.min_y = cy1;
			}
			c.started = true;
		}
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],type,x,y,cx,cy);
		c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx1 , Int);
		c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy1 , Int);
	}
	c.num_vertices++;
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_close_shape = function(ctx) {
	if(ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
		var x = ctx.first_x | 0;
		var y = ctx.first_y | 0;
		if(ctx.bounds) {
			if(x > ctx.max_x || !ctx.started) {
				ctx.max_x = x;
			}
			if(y > ctx.max_y || !ctx.started) {
				ctx.max_y = y;
			}
			if(x < ctx.min_x || !ctx.started) {
				ctx.min_x = x;
			}
			if(y < ctx.min_y || !ctx.started) {
				ctx.min_y = y;
			}
			ctx.started = true;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],2,x,y,0,0);
			ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(0 , Int);
			ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(0 , Int);
		}
		ctx.num_vertices++;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_rmove_to = function(ctx,dx,dy) {
	if(ctx.first_x != ctx.x || ctx.first_y != ctx.y) {
		var x = ctx.first_x | 0;
		var y = ctx.first_y | 0;
		if(ctx.bounds) {
			if(x > ctx.max_x || !ctx.started) {
				ctx.max_x = x;
			}
			if(y > ctx.max_y || !ctx.started) {
				ctx.max_y = y;
			}
			if(x < ctx.min_x || !ctx.started) {
				ctx.min_x = x;
			}
			if(y < ctx.min_y || !ctx.started) {
				ctx.min_y = y;
			}
			ctx.started = true;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],2,x,y,0,0);
			ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(0 , Int);
			ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(0 , Int);
		}
		ctx.num_vertices++;
	}
	ctx.first_x = ctx.x = ctx.x + dx;
	ctx.first_y = ctx.y = ctx.y + dy;
	var x1 = ctx.x | 0;
	var y1 = ctx.y | 0;
	if(ctx.bounds) {
		if(x1 > ctx.max_x || !ctx.started) {
			ctx.max_x = x1;
		}
		if(y1 > ctx.max_y || !ctx.started) {
			ctx.max_y = y1;
		}
		if(x1 < ctx.min_x || !ctx.started) {
			ctx.min_x = x1;
		}
		if(y1 < ctx.min_y || !ctx.started) {
			ctx.min_y = y1;
		}
		ctx.started = true;
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],1,x1,y1,0,0);
		ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(0 , Int);
		ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(0 , Int);
	}
	ctx.num_vertices++;
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_rline_to = function(ctx,dx,dy) {
	ctx.x += dx;
	ctx.y += dy;
	var x = ctx.x | 0;
	var y = ctx.y | 0;
	if(ctx.bounds) {
		if(x > ctx.max_x || !ctx.started) {
			ctx.max_x = x;
		}
		if(y > ctx.max_y || !ctx.started) {
			ctx.max_y = y;
		}
		if(x < ctx.min_x || !ctx.started) {
			ctx.min_x = x;
		}
		if(y < ctx.min_y || !ctx.started) {
			ctx.min_y = y;
		}
		ctx.started = true;
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],2,x,y,0,0);
		ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(0 , Int);
		ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(0 , Int);
	}
	ctx.num_vertices++;
};
kha_graphics2_truetype_StbTruetype.stbtt__csctx_rccurve_to = function(ctx,dx1,dy1,dx2,dy2,dx3,dy3) {
	var cx1 = ctx.x + dx1;
	var cy1 = ctx.y + dy1;
	var cx2 = cx1 + dx2;
	var cy2 = cy1 + dy2;
	ctx.x = cx2 + dx3;
	ctx.y = cy2 + dy3;
	var x = ctx.x | 0;
	var y = ctx.y | 0;
	var cx = cx1 | 0;
	var cy = cy1 | 0;
	var cx11 = cx2 | 0;
	var cy11 = cy2 | 0;
	if(ctx.bounds) {
		if(x > ctx.max_x || !ctx.started) {
			ctx.max_x = x;
		}
		if(y > ctx.max_y || !ctx.started) {
			ctx.max_y = y;
		}
		if(x < ctx.min_x || !ctx.started) {
			ctx.min_x = x;
		}
		if(y < ctx.min_y || !ctx.started) {
			ctx.min_y = y;
		}
		ctx.started = true;
		if(cx > ctx.max_x || !ctx.started) {
			ctx.max_x = cx;
		}
		if(cy > ctx.max_y || !ctx.started) {
			ctx.max_y = cy;
		}
		if(cx < ctx.min_x || !ctx.started) {
			ctx.min_x = cx;
		}
		if(cy < ctx.min_y || !ctx.started) {
			ctx.min_y = cy;
		}
		ctx.started = true;
		if(cx11 > ctx.max_x || !ctx.started) {
			ctx.max_x = cx11;
		}
		if(cy11 > ctx.max_y || !ctx.started) {
			ctx.max_y = cy11;
		}
		if(cx11 < ctx.min_x || !ctx.started) {
			ctx.min_x = cx11;
		}
		if(cy11 < ctx.min_y || !ctx.started) {
			ctx.min_y = cy11;
		}
		ctx.started = true;
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt_setvertex(ctx.pvertices[ctx.num_vertices],4,x,y,cx,cy);
		ctx.pvertices[ctx.num_vertices].cx1 = js_Boot.__cast(cx11 , Int);
		ctx.pvertices[ctx.num_vertices].cy1 = js_Boot.__cast(cy11 , Int);
	}
	ctx.num_vertices++;
};
kha_graphics2_truetype_StbTruetype.stbtt__get_subr = function(idx,n) {
	if(0 > idx.data.get_length()) {
		throw new js__$Boot_HaxeError("Error");
	}
	idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
	var v = 0;
	var _g = 0;
	while(_g < 2) {
		++_g;
		var v1;
		if(idx.cursor >= idx.data.get_length()) {
			v1 = 0;
		} else {
			var pos = idx.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v1 = idx.data.readU8(pos);
		}
		v = v << 8 | v1;
	}
	var count = v;
	var bias = 107;
	if(count >= 33900) {
		bias = 32768;
	} else if(count >= 1240) {
		bias = 1131;
	}
	n += bias;
	if(n < 0 || n >= count) {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
		return r;
	}
	if(0 > idx.data.get_length()) {
		throw new js__$Boot_HaxeError("Error");
	}
	idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
	var v2 = 0;
	var _g1 = 0;
	while(_g1 < 2) {
		++_g1;
		var v3;
		if(idx.cursor >= idx.data.get_length()) {
			v3 = 0;
		} else {
			var pos1 = idx.cursor++;
			if(pos1 == null) {
				pos1 = 0;
			}
			v3 = idx.data.readU8(pos1);
		}
		v2 = v2 << 8 | v3;
	}
	var count1 = v2;
	var offsize;
	if(idx.cursor >= idx.data.get_length()) {
		offsize = 0;
	} else {
		var pos2 = idx.cursor++;
		if(pos2 == null) {
			pos2 = 0;
		}
		offsize = idx.data.readU8(pos2);
	}
	if(!(n >= 0 && n < count1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var o = idx.cursor + n * offsize;
	if(!(!(o > idx.data.get_length() || o < 0))) {
		throw new js__$Boot_HaxeError("Error");
	}
	idx.cursor = o > idx.data.get_length() || o < 0 ? idx.data.get_length() : o;
	var v4 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var _g2 = 0;
	var _g11 = offsize;
	while(_g2 < _g11) {
		++_g2;
		var v5;
		if(idx.cursor >= idx.data.get_length()) {
			v5 = 0;
		} else {
			var pos3 = idx.cursor++;
			if(pos3 == null) {
				pos3 = 0;
			}
			v5 = idx.data.readU8(pos3);
		}
		v4 = v4 << 8 | v5;
	}
	var start = v4;
	var v6 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var _g3 = 0;
	var _g12 = offsize;
	while(_g3 < _g12) {
		++_g3;
		var v7;
		if(idx.cursor >= idx.data.get_length()) {
			v7 = 0;
		} else {
			var pos4 = idx.cursor++;
			if(pos4 == null) {
				pos4 = 0;
			}
			v7 = idx.data.readU8(pos4);
		}
		v6 = v6 << 8 | v7;
	}
	var o1 = 2 + (count1 + 1) * offsize + start;
	var s = v6 - start;
	var r1 = new kha_graphics2_truetype_Stbtt_$_$buf();
	r1.data = null;
	r1.cursor = 0;
	if(o1 < 0 || s < 0 || o1 > idx.data.get_length() || s > idx.data.get_length() - o1) {
		return r1;
	} else {
		r1.data = idx.data.sub(o1,s);
		return r1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__cid_get_glyph_subrs = function(info,glyph_index) {
	var fdselect = info.fdselect;
	var nranges;
	var start;
	var end;
	var v;
	var fmt;
	var fdselector = -1;
	if(0 > fdselect.data.get_length()) {
		throw new js__$Boot_HaxeError("Error");
	}
	fdselect.cursor = 0 > fdselect.data.get_length() ? fdselect.data.get_length() : 0;
	if(fdselect.cursor >= fdselect.data.get_length()) {
		fmt = 0;
	} else {
		var pos = fdselect.cursor++;
		if(pos == null) {
			pos = 0;
		}
		fmt = fdselect.data.readU8(pos);
	}
	if(fmt == 0) {
		var o = fdselect.cursor + glyph_index;
		if(!(!(o > fdselect.data.get_length() || o < 0))) {
			throw new js__$Boot_HaxeError("Error");
		}
		fdselect.cursor = o > fdselect.data.get_length() || o < 0 ? fdselect.data.get_length() : o;
		if(fdselect.cursor >= fdselect.data.get_length()) {
			fdselector = 0;
		} else {
			var pos1 = fdselect.cursor++;
			if(pos1 == null) {
				pos1 = 0;
			}
			fdselector = fdselect.data.readU8(pos1);
		}
	} else if(fmt == 3) {
		var v1 = 0;
		var _g = 0;
		while(_g < 2) {
			++_g;
			var v2;
			if(fdselect.cursor >= fdselect.data.get_length()) {
				v2 = 0;
			} else {
				var pos2 = fdselect.cursor++;
				if(pos2 == null) {
					pos2 = 0;
				}
				v2 = fdselect.data.readU8(pos2);
			}
			v1 = v1 << 8 | v2;
		}
		nranges = v1;
		var v3 = 0;
		var _g1 = 0;
		while(_g1 < 2) {
			++_g1;
			var v4;
			if(fdselect.cursor >= fdselect.data.get_length()) {
				v4 = 0;
			} else {
				var pos3 = fdselect.cursor++;
				if(pos3 == null) {
					pos3 = 0;
				}
				v4 = fdselect.data.readU8(pos3);
			}
			v3 = v3 << 8 | v4;
		}
		start = v3;
		var _g2 = 0;
		while(_g2 < nranges) {
			++_g2;
			if(fdselect.cursor >= fdselect.data.get_length()) {
				v = 0;
			} else {
				var pos4 = fdselect.cursor++;
				if(pos4 == null) {
					pos4 = 0;
				}
				v = fdselect.data.readU8(pos4);
			}
			var v5 = 0;
			var _g3 = 0;
			while(_g3 < 2) {
				++_g3;
				var v6;
				if(fdselect.cursor >= fdselect.data.get_length()) {
					v6 = 0;
				} else {
					var pos5 = fdselect.cursor++;
					if(pos5 == null) {
						pos5 = 0;
					}
					v6 = fdselect.data.readU8(pos5);
				}
				v5 = v5 << 8 | v6;
			}
			end = v5;
			if(glyph_index >= start && glyph_index < end) {
				fdselector = v;
				break;
			}
			start = end;
		}
	}
	if(fdselector == -1) {
		var r = new kha_graphics2_truetype_Stbtt_$_$buf();
		r.data = null;
		r.cursor = 0;
	}
	var cff = info.cff;
	var b = info.fontdicts;
	if(0 > b.data.get_length()) {
		throw new js__$Boot_HaxeError("Error");
	}
	b.cursor = 0 > b.data.get_length() ? b.data.get_length() : 0;
	var v7 = 0;
	var _g4 = 0;
	while(_g4 < 2) {
		++_g4;
		var v8;
		if(b.cursor >= b.data.get_length()) {
			v8 = 0;
		} else {
			var pos6 = b.cursor++;
			if(pos6 == null) {
				pos6 = 0;
			}
			v8 = b.data.readU8(pos6);
		}
		v7 = v7 << 8 | v8;
	}
	var count = v7;
	var offsize;
	if(b.cursor >= b.data.get_length()) {
		offsize = 0;
	} else {
		var pos7 = b.cursor++;
		if(pos7 == null) {
			pos7 = 0;
		}
		offsize = b.data.readU8(pos7);
	}
	if(!(fdselector >= 0 && fdselector < count)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var o1 = b.cursor + fdselector * offsize;
	if(!(!(o1 > b.data.get_length() || o1 < 0))) {
		throw new js__$Boot_HaxeError("Error");
	}
	b.cursor = o1 > b.data.get_length() || o1 < 0 ? b.data.get_length() : o1;
	var v9 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var _g5 = 0;
	var _g11 = offsize;
	while(_g5 < _g11) {
		++_g5;
		var v10;
		if(b.cursor >= b.data.get_length()) {
			v10 = 0;
		} else {
			var pos8 = b.cursor++;
			if(pos8 == null) {
				pos8 = 0;
			}
			v10 = b.data.readU8(pos8);
		}
		v9 = v9 << 8 | v10;
	}
	var start1 = v9;
	var v11 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var _g6 = 0;
	var _g12 = offsize;
	while(_g6 < _g12) {
		++_g6;
		var v12;
		if(b.cursor >= b.data.get_length()) {
			v12 = 0;
		} else {
			var pos9 = b.cursor++;
			if(pos9 == null) {
				pos9 = 0;
			}
			v12 = b.data.readU8(pos9);
		}
		v11 = v11 << 8 | v12;
	}
	var o2 = 2 + (count + 1) * offsize + start1;
	var s = v11 - start1;
	var r1 = new kha_graphics2_truetype_Stbtt_$_$buf();
	r1.data = null;
	r1.cursor = 0;
	var fontdict;
	if(o2 < 0 || s < 0 || o2 > b.data.get_length() || s > b.data.get_length() - o2) {
		fontdict = r1;
	} else {
		r1.data = b.data.sub(o2,s);
		fontdict = r1;
	}
	var subrsoff = [0];
	var private_loc = [0,0];
	var i = 0;
	if(0 > fontdict.data.get_length()) {
		throw new js__$Boot_HaxeError("Error");
	}
	fontdict.cursor = 0 > fontdict.data.get_length() ? fontdict.data.get_length() : 0;
	var ret = null;
	while(fontdict.cursor < fontdict.data.get_length()) {
		var start2 = fontdict.cursor;
		var op;
		while(true) {
			var tmp;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				tmp = 0;
			} else {
				var pos10 = fontdict.cursor;
				if(pos10 == null) {
					pos10 = 0;
				}
				tmp = fontdict.data.readU8(pos10);
			}
			if(!(tmp >= 28)) {
				break;
			}
			var v13;
			var b0;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				b0 = 0;
			} else {
				var pos11 = fontdict.cursor;
				if(pos11 == null) {
					pos11 = 0;
				}
				b0 = fontdict.data.readU8(pos11);
			}
			if(b0 < 28) {
				throw new js__$Boot_HaxeError("Error");
			}
			if(b0 == 30) {
				var o3 = fontdict.cursor + 1;
				if(!(!(o3 > fontdict.data.get_length() || o3 < 0))) {
					throw new js__$Boot_HaxeError("Error");
				}
				fontdict.cursor = o3 > fontdict.data.get_length() || o3 < 0 ? fontdict.data.get_length() : o3;
				while(fontdict.cursor < fontdict.data.get_length()) {
					if(fontdict.cursor >= fontdict.data.get_length()) {
						v13 = 0;
					} else {
						var pos12 = fontdict.cursor++;
						if(pos12 == null) {
							pos12 = 0;
						}
						v13 = fontdict.data.readU8(pos12);
					}
					if((v13 & 15) == 15 || v13 >> 4 == 15) {
						break;
					}
				}
			} else {
				var b01;
				if(fontdict.cursor >= fontdict.data.get_length()) {
					b01 = 0;
				} else {
					var pos13 = fontdict.cursor++;
					if(pos13 == null) {
						pos13 = 0;
					}
					b01 = fontdict.data.readU8(pos13);
				}
				if(!(b01 >= 32 && b01 <= 246)) {
					if(b01 >= 247 && b01 <= 250) {
						if(fontdict.cursor < fontdict.data.get_length()) {
							var pos14 = fontdict.cursor++;
							if(pos14 == null) {
								pos14 = 0;
							}
						}
					} else if(b01 >= 251 && b01 <= 254) {
						if(fontdict.cursor < fontdict.data.get_length()) {
							var pos15 = fontdict.cursor++;
							if(pos15 == null) {
								pos15 = 0;
							}
						}
					} else if(b01 == 28) {
						var _g7 = 0;
						while(_g7 < 2) {
							++_g7;
							if(fontdict.cursor < fontdict.data.get_length()) {
								var pos16 = fontdict.cursor++;
								if(pos16 == null) {
									pos16 = 0;
								}
							}
						}
					} else if(b01 == 29) {
						var _g8 = 0;
						while(_g8 < 4) {
							++_g8;
							if(fontdict.cursor < fontdict.data.get_length()) {
								var pos17 = fontdict.cursor++;
								if(pos17 == null) {
									pos17 = 0;
								}
							}
						}
					} else {
						throw new js__$Boot_HaxeError("Error");
					}
				}
			}
		}
		var end1 = fontdict.cursor;
		if(fontdict.cursor >= fontdict.data.get_length()) {
			op = 0;
		} else {
			var pos18 = fontdict.cursor++;
			if(pos18 == null) {
				pos18 = 0;
			}
			op = fontdict.data.readU8(pos18);
		}
		if(op == 12) {
			var op1;
			if(fontdict.cursor >= fontdict.data.get_length()) {
				op1 = 0;
			} else {
				var pos19 = fontdict.cursor++;
				if(pos19 == null) {
					pos19 = 0;
				}
				op1 = fontdict.data.readU8(pos19);
			}
			op = op1 | 256;
		}
		if(op == 18) {
			var s1 = end1 - start2;
			var r2 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r2.data = null;
			r2.cursor = 0;
			if(start2 < 0 || s1 < 0 || start2 > fontdict.data.get_length() || s1 > fontdict.data.get_length() - start2) {
				ret = r2;
			} else {
				r2.data = fontdict.data.sub(start2,s1);
				ret = r2;
			}
			break;
		}
	}
	var operands;
	if(ret != null) {
		operands = ret;
	} else {
		var r3 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r3.data = null;
		r3.cursor = 0;
		if(0 > fontdict.data.get_length() || 0 > fontdict.data.get_length()) {
			operands = r3;
		} else {
			r3.data = fontdict.data.sub(0,0);
			operands = r3;
		}
	}
	while(i < 2 && operands.cursor < operands.data.get_length()) {
		var b02;
		if(operands.cursor >= operands.data.get_length()) {
			b02 = 0;
		} else {
			var pos20 = operands.cursor++;
			if(pos20 == null) {
				pos20 = 0;
			}
			b02 = operands.data.readU8(pos20);
		}
		var tmp1;
		if(b02 >= 32 && b02 <= 246) {
			tmp1 = b02 - 139;
		} else if(b02 >= 247 && b02 <= 250) {
			var tmp2;
			if(operands.cursor >= operands.data.get_length()) {
				tmp2 = 0;
			} else {
				var pos21 = operands.cursor++;
				if(pos21 == null) {
					pos21 = 0;
				}
				tmp2 = operands.data.readU8(pos21);
			}
			tmp1 = (b02 - 247) * 256 + tmp2 + 108;
		} else if(b02 >= 251 && b02 <= 254) {
			var tmp3;
			if(operands.cursor >= operands.data.get_length()) {
				tmp3 = 0;
			} else {
				var pos22 = operands.cursor++;
				if(pos22 == null) {
					pos22 = 0;
				}
				tmp3 = operands.data.readU8(pos22);
			}
			tmp1 = -(b02 - 251) * 256 - tmp3 - 108;
		} else if(b02 == 28) {
			var v14 = 0;
			var _g9 = 0;
			while(_g9 < 2) {
				++_g9;
				var v15;
				if(operands.cursor >= operands.data.get_length()) {
					v15 = 0;
				} else {
					var pos23 = operands.cursor++;
					if(pos23 == null) {
						pos23 = 0;
					}
					v15 = operands.data.readU8(pos23);
				}
				v14 = v14 << 8 | v15;
			}
			tmp1 = v14;
		} else if(b02 == 29) {
			var v16 = 0;
			var _g10 = 0;
			while(_g10 < 4) {
				++_g10;
				var v17;
				if(operands.cursor >= operands.data.get_length()) {
					v17 = 0;
				} else {
					var pos24 = operands.cursor++;
					if(pos24 == null) {
						pos24 = 0;
					}
					v17 = operands.data.readU8(pos24);
				}
				v16 = v16 << 8 | v17;
			}
			tmp1 = v16;
		} else {
			throw new js__$Boot_HaxeError("Error");
		}
		private_loc[i] = tmp1;
		++i;
	}
	if(private_loc[1] == 0 || private_loc[0] == 0) {
		var r4 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r4.data = null;
		r4.cursor = 0;
		return r4;
	} else {
		var o4 = private_loc[1];
		var s2 = private_loc[0];
		var r5 = new kha_graphics2_truetype_Stbtt_$_$buf();
		r5.data = null;
		r5.cursor = 0;
		var pdict;
		if(o4 < 0 || s2 < 0 || o4 > cff.data.get_length() || s2 > cff.data.get_length() - o4) {
			pdict = r5;
		} else {
			r5.data = cff.data.sub(o4,s2);
			pdict = r5;
		}
		var i1 = 0;
		if(0 > pdict.data.get_length()) {
			throw new js__$Boot_HaxeError("Error");
		}
		pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
		var ret1 = null;
		while(pdict.cursor < pdict.data.get_length()) {
			var start3 = pdict.cursor;
			var op2;
			while(true) {
				var tmp4;
				if(pdict.cursor >= pdict.data.get_length()) {
					tmp4 = 0;
				} else {
					var pos25 = pdict.cursor;
					if(pos25 == null) {
						pos25 = 0;
					}
					tmp4 = pdict.data.readU8(pos25);
				}
				if(!(tmp4 >= 28)) {
					break;
				}
				var v18;
				var b03;
				if(pdict.cursor >= pdict.data.get_length()) {
					b03 = 0;
				} else {
					var pos26 = pdict.cursor;
					if(pos26 == null) {
						pos26 = 0;
					}
					b03 = pdict.data.readU8(pos26);
				}
				if(b03 < 28) {
					throw new js__$Boot_HaxeError("Error");
				}
				if(b03 == 30) {
					var o5 = pdict.cursor + 1;
					if(!(!(o5 > pdict.data.get_length() || o5 < 0))) {
						throw new js__$Boot_HaxeError("Error");
					}
					pdict.cursor = o5 > pdict.data.get_length() || o5 < 0 ? pdict.data.get_length() : o5;
					while(pdict.cursor < pdict.data.get_length()) {
						if(pdict.cursor >= pdict.data.get_length()) {
							v18 = 0;
						} else {
							var pos27 = pdict.cursor++;
							if(pos27 == null) {
								pos27 = 0;
							}
							v18 = pdict.data.readU8(pos27);
						}
						if((v18 & 15) == 15 || v18 >> 4 == 15) {
							break;
						}
					}
				} else {
					var b04;
					if(pdict.cursor >= pdict.data.get_length()) {
						b04 = 0;
					} else {
						var pos28 = pdict.cursor++;
						if(pos28 == null) {
							pos28 = 0;
						}
						b04 = pdict.data.readU8(pos28);
					}
					if(!(b04 >= 32 && b04 <= 246)) {
						if(b04 >= 247 && b04 <= 250) {
							if(pdict.cursor < pdict.data.get_length()) {
								var pos29 = pdict.cursor++;
								if(pos29 == null) {
									pos29 = 0;
								}
							}
						} else if(b04 >= 251 && b04 <= 254) {
							if(pdict.cursor < pdict.data.get_length()) {
								var pos30 = pdict.cursor++;
								if(pos30 == null) {
									pos30 = 0;
								}
							}
						} else if(b04 == 28) {
							var _g13 = 0;
							while(_g13 < 2) {
								++_g13;
								if(pdict.cursor < pdict.data.get_length()) {
									var pos31 = pdict.cursor++;
									if(pos31 == null) {
										pos31 = 0;
									}
								}
							}
						} else if(b04 == 29) {
							var _g14 = 0;
							while(_g14 < 4) {
								++_g14;
								if(pdict.cursor < pdict.data.get_length()) {
									var pos32 = pdict.cursor++;
									if(pos32 == null) {
										pos32 = 0;
									}
								}
							}
						} else {
							throw new js__$Boot_HaxeError("Error");
						}
					}
				}
			}
			var end2 = pdict.cursor;
			if(pdict.cursor >= pdict.data.get_length()) {
				op2 = 0;
			} else {
				var pos33 = pdict.cursor++;
				if(pos33 == null) {
					pos33 = 0;
				}
				op2 = pdict.data.readU8(pos33);
			}
			if(op2 == 12) {
				var op3;
				if(pdict.cursor >= pdict.data.get_length()) {
					op3 = 0;
				} else {
					var pos34 = pdict.cursor++;
					if(pos34 == null) {
						pos34 = 0;
					}
					op3 = pdict.data.readU8(pos34);
				}
				op2 = op3 | 256;
			}
			if(op2 == 19) {
				var s3 = end2 - start3;
				var r6 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r6.data = null;
				r6.cursor = 0;
				if(start3 < 0 || s3 < 0 || start3 > pdict.data.get_length() || s3 > pdict.data.get_length() - start3) {
					ret1 = r6;
				} else {
					r6.data = pdict.data.sub(start3,s3);
					ret1 = r6;
				}
				break;
			}
		}
		var operands1;
		if(ret1 != null) {
			operands1 = ret1;
		} else {
			var r7 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r7.data = null;
			r7.cursor = 0;
			if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
				operands1 = r7;
			} else {
				r7.data = pdict.data.sub(0,0);
				operands1 = r7;
			}
		}
		while(i1 < 1 && operands1.cursor < operands1.data.get_length()) {
			var b05;
			if(operands1.cursor >= operands1.data.get_length()) {
				b05 = 0;
			} else {
				var pos35 = operands1.cursor++;
				if(pos35 == null) {
					pos35 = 0;
				}
				b05 = operands1.data.readU8(pos35);
			}
			var tmp5;
			if(b05 >= 32 && b05 <= 246) {
				tmp5 = b05 - 139;
			} else if(b05 >= 247 && b05 <= 250) {
				var tmp6;
				if(operands1.cursor >= operands1.data.get_length()) {
					tmp6 = 0;
				} else {
					var pos36 = operands1.cursor++;
					if(pos36 == null) {
						pos36 = 0;
					}
					tmp6 = operands1.data.readU8(pos36);
				}
				tmp5 = (b05 - 247) * 256 + tmp6 + 108;
			} else if(b05 >= 251 && b05 <= 254) {
				var tmp7;
				if(operands1.cursor >= operands1.data.get_length()) {
					tmp7 = 0;
				} else {
					var pos37 = operands1.cursor++;
					if(pos37 == null) {
						pos37 = 0;
					}
					tmp7 = operands1.data.readU8(pos37);
				}
				tmp5 = -(b05 - 251) * 256 - tmp7 - 108;
			} else if(b05 == 28) {
				var v19 = 0;
				var _g15 = 0;
				while(_g15 < 2) {
					++_g15;
					var v20;
					if(operands1.cursor >= operands1.data.get_length()) {
						v20 = 0;
					} else {
						var pos38 = operands1.cursor++;
						if(pos38 == null) {
							pos38 = 0;
						}
						v20 = operands1.data.readU8(pos38);
					}
					v19 = v19 << 8 | v20;
				}
				tmp5 = v19;
			} else if(b05 == 29) {
				var v21 = 0;
				var _g16 = 0;
				while(_g16 < 4) {
					++_g16;
					var v22;
					if(operands1.cursor >= operands1.data.get_length()) {
						v22 = 0;
					} else {
						var pos39 = operands1.cursor++;
						if(pos39 == null) {
							pos39 = 0;
						}
						v22 = operands1.data.readU8(pos39);
					}
					v21 = v21 << 8 | v22;
				}
				tmp5 = v21;
			} else {
				throw new js__$Boot_HaxeError("Error");
			}
			subrsoff[i1] = tmp5;
			++i1;
		}
		if(subrsoff[0] == 0) {
			var r8 = new kha_graphics2_truetype_Stbtt_$_$buf();
			r8.data = null;
			r8.cursor = 0;
			return r8;
		} else {
			var o6 = private_loc[1] + subrsoff[0];
			if(!(!(o6 > cff.data.get_length() || o6 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			cff.cursor = o6 > cff.data.get_length() || o6 < 0 ? cff.data.get_length() : o6;
			var start4 = cff.cursor;
			var v23 = 0;
			var _g17 = 0;
			while(_g17 < 2) {
				++_g17;
				var v24;
				if(cff.cursor >= cff.data.get_length()) {
					v24 = 0;
				} else {
					var pos40 = cff.cursor++;
					if(pos40 == null) {
						pos40 = 0;
					}
					v24 = cff.data.readU8(pos40);
				}
				v23 = v23 << 8 | v24;
			}
			var count1 = v23;
			if(count1 > 0) {
				var offsize1;
				if(cff.cursor >= cff.data.get_length()) {
					offsize1 = 0;
				} else {
					var pos41 = cff.cursor++;
					if(pos41 == null) {
						pos41 = 0;
					}
					offsize1 = cff.data.readU8(pos41);
				}
				if(!(offsize1 >= 1 && offsize1 <= 4)) {
					throw new js__$Boot_HaxeError("Error");
				}
				var o7 = cff.cursor + offsize1 * count1;
				if(!(!(o7 > cff.data.get_length() || o7 < 0))) {
					throw new js__$Boot_HaxeError("Error");
				}
				cff.cursor = o7 > cff.data.get_length() || o7 < 0 ? cff.data.get_length() : o7;
				var v25 = 0;
				if(!(offsize1 >= 1 && offsize1 <= 4)) {
					throw new js__$Boot_HaxeError("Error");
				}
				var _g18 = 0;
				var _g19 = offsize1;
				while(_g18 < _g19) {
					++_g18;
					var v26;
					if(cff.cursor >= cff.data.get_length()) {
						v26 = 0;
					} else {
						var pos42 = cff.cursor++;
						if(pos42 == null) {
							pos42 = 0;
						}
						v26 = cff.data.readU8(pos42);
					}
					v25 = v25 << 8 | v26;
				}
				var o8 = cff.cursor + (v25 - 1);
				if(!(!(o8 > cff.data.get_length() || o8 < 0))) {
					throw new js__$Boot_HaxeError("Error");
				}
				cff.cursor = o8 > cff.data.get_length() || o8 < 0 ? cff.data.get_length() : o8;
				var s4 = cff.cursor - start4;
				var r9 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r9.data = null;
				r9.cursor = 0;
				if(start4 < 0 || s4 < 0 || start4 > cff.data.get_length() || s4 > cff.data.get_length() - start4) {
					return r9;
				} else {
					r9.data = cff.data.sub(start4,s4);
					return r9;
				}
			} else {
				return cff;
			}
		}
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__CSERR = function(s) {
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__run_charstring = function(info,glyph_index,c) {
	var in_header = true;
	var maskbits = 0;
	var subr_stack_height = 0;
	var sp = 0;
	var v;
	var i;
	var b0;
	var has_subrs = false;
	var clear_stack;
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	var _g1 = [];
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	_g1.push(new kha_graphics2_truetype_Stbtt_$_$buf());
	var subrs = info.subrs;
	var b;
	var f;
	var b1 = info.charstrings;
	if(0 > b1.data.get_length()) {
		throw new js__$Boot_HaxeError("Error");
	}
	b1.cursor = 0 > b1.data.get_length() ? b1.data.get_length() : 0;
	var v1 = 0;
	var _g2 = 0;
	while(_g2 < 2) {
		++_g2;
		var v2;
		if(b1.cursor >= b1.data.get_length()) {
			v2 = 0;
		} else {
			var pos = b1.cursor++;
			if(pos == null) {
				pos = 0;
			}
			v2 = b1.data.readU8(pos);
		}
		v1 = v1 << 8 | v2;
	}
	var count = v1;
	var offsize;
	if(b1.cursor >= b1.data.get_length()) {
		offsize = 0;
	} else {
		var pos1 = b1.cursor++;
		if(pos1 == null) {
			pos1 = 0;
		}
		offsize = b1.data.readU8(pos1);
	}
	if(!(glyph_index >= 0 && glyph_index < count)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(!(offsize >= 1 && offsize <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var o = b1.cursor + glyph_index * offsize;
	if(!(!(o > b1.data.get_length() || o < 0))) {
		throw new js__$Boot_HaxeError("Error");
	}
	b1.cursor = o > b1.data.get_length() || o < 0 ? b1.data.get_length() : o;
	var v3 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var _g3 = 0;
	var _g11 = offsize;
	while(_g3 < _g11) {
		++_g3;
		var v4;
		if(b1.cursor >= b1.data.get_length()) {
			v4 = 0;
		} else {
			var pos2 = b1.cursor++;
			if(pos2 == null) {
				pos2 = 0;
			}
			v4 = b1.data.readU8(pos2);
		}
		v3 = v3 << 8 | v4;
	}
	var start = v3;
	var v5 = 0;
	if(!(offsize >= 1 && offsize <= 4)) {
		throw new js__$Boot_HaxeError("Error");
	}
	var _g4 = 0;
	var _g12 = offsize;
	while(_g4 < _g12) {
		++_g4;
		var v6;
		if(b1.cursor >= b1.data.get_length()) {
			v6 = 0;
		} else {
			var pos3 = b1.cursor++;
			if(pos3 == null) {
				pos3 = 0;
			}
			v6 = b1.data.readU8(pos3);
		}
		v5 = v5 << 8 | v6;
	}
	var o1 = 2 + (count + 1) * offsize + start;
	var s = v5 - start;
	var r = new kha_graphics2_truetype_Stbtt_$_$buf();
	r.data = null;
	r.cursor = 0;
	if(o1 < 0 || s < 0 || o1 > b1.data.get_length() || s > b1.data.get_length() - o1) {
		b = r;
	} else {
		r.data = b1.data.sub(o1,s);
		b = r;
	}
	while(b.cursor < b.data.get_length()) {
		i = 0;
		clear_stack = true;
		if(b.cursor >= b.data.get_length()) {
			b0 = 0;
		} else {
			var pos4 = b.cursor++;
			if(pos4 == null) {
				pos4 = 0;
			}
			b0 = b.data.readU8(pos4);
		}
		switch(b0) {
		case 1:case 3:case 18:case 23:
			maskbits += sp / 2 | 0;
			break;
		case 4:
			in_header = false;
			if(sp < 1) {
				return false;
			}
			if(c.first_x != c.x || c.first_y != c.y) {
				var x = c.first_x | 0;
				var y = c.first_y | 0;
				if(c.bounds) {
					if(x > c.max_x || !c.started) {
						c.max_x = x;
					}
					if(y > c.max_y || !c.started) {
						c.max_y = y;
					}
					if(x < c.min_x || !c.started) {
						c.min_x = x;
					}
					if(y < c.min_y || !c.started) {
						c.min_y = y;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x,y,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			c.first_x = c.x = c.x;
			c.first_y = c.y = c.y + _g[sp - 1];
			var x1 = c.x | 0;
			var y1 = c.y | 0;
			if(c.bounds) {
				if(x1 > c.max_x || !c.started) {
					c.max_x = x1;
				}
				if(y1 > c.max_y || !c.started) {
					c.max_y = y1;
				}
				if(x1 < c.min_x || !c.started) {
					c.min_x = x1;
				}
				if(y1 < c.min_y || !c.started) {
					c.min_y = y1;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],1,x1,y1,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 5:
			if(sp < 2) {
				return false;
			}
			while(i + 1 < sp) {
				c.x += _g[i];
				c.y += _g[i + 1];
				var x2 = c.x | 0;
				var y2 = c.y | 0;
				if(c.bounds) {
					if(x2 > c.max_x || !c.started) {
						c.max_x = x2;
					}
					if(y2 > c.max_y || !c.started) {
						c.max_y = y2;
					}
					if(x2 < c.min_x || !c.started) {
						c.min_x = x2;
					}
					if(y2 < c.min_y || !c.started) {
						c.min_y = y2;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x2,y2,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				i += 2;
			}
			break;
		case 6:
			if(sp < 1) {
				return false;
			}
			while(i < sp) {
				c.x += _g[i];
				c.y += 0;
				var x3 = c.x | 0;
				var y3 = c.y | 0;
				if(c.bounds) {
					if(x3 > c.max_x || !c.started) {
						c.max_x = x3;
					}
					if(y3 > c.max_y || !c.started) {
						c.max_y = y3;
					}
					if(x3 < c.min_x || !c.started) {
						c.min_x = x3;
					}
					if(y3 < c.min_y || !c.started) {
						c.min_y = y3;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x3,y3,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
				if(i >= sp) {
					break;
				}
				c.x += 0;
				c.y += _g[i];
				var x4 = c.x | 0;
				var y4 = c.y | 0;
				if(c.bounds) {
					if(x4 > c.max_x || !c.started) {
						c.max_x = x4;
					}
					if(y4 > c.max_y || !c.started) {
						c.max_y = y4;
					}
					if(x4 < c.min_x || !c.started) {
						c.min_x = x4;
					}
					if(y4 < c.min_y || !c.started) {
						c.min_y = y4;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x4,y4,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
			}
			break;
		case 7:
			if(sp < 1) {
				return false;
			}
			while(i < sp) {
				c.x += 0;
				c.y += _g[i];
				var x5 = c.x | 0;
				var y5 = c.y | 0;
				if(c.bounds) {
					if(x5 > c.max_x || !c.started) {
						c.max_x = x5;
					}
					if(y5 > c.max_y || !c.started) {
						c.max_y = y5;
					}
					if(x5 < c.min_x || !c.started) {
						c.min_x = x5;
					}
					if(y5 < c.min_y || !c.started) {
						c.min_y = y5;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x5,y5,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
				if(i >= sp) {
					break;
				}
				c.x += _g[i];
				c.y += 0;
				var x6 = c.x | 0;
				var y6 = c.y | 0;
				if(c.bounds) {
					if(x6 > c.max_x || !c.started) {
						c.max_x = x6;
					}
					if(y6 > c.max_y || !c.started) {
						c.max_y = y6;
					}
					if(x6 < c.min_x || !c.started) {
						c.min_x = x6;
					}
					if(y6 < c.min_y || !c.started) {
						c.min_y = y6;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x6,y6,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				++i;
			}
			break;
		case 8:
			if(sp < 6) {
				return false;
			}
			while(i + 5 < sp) {
				var cx1 = c.x + _g[i];
				var cy1 = c.y + _g[i + 1];
				var cx2 = cx1 + _g[i + 2];
				var cy2 = cy1 + _g[i + 3];
				c.x = cx2 + _g[i + 4];
				c.y = cy2 + _g[i + 5];
				var x7 = c.x | 0;
				var y7 = c.y | 0;
				var cx = cx1 | 0;
				var cy = cy1 | 0;
				var cx11 = cx2 | 0;
				var cy11 = cy2 | 0;
				if(c.bounds) {
					if(x7 > c.max_x || !c.started) {
						c.max_x = x7;
					}
					if(y7 > c.max_y || !c.started) {
						c.max_y = y7;
					}
					if(x7 < c.min_x || !c.started) {
						c.min_x = x7;
					}
					if(y7 < c.min_y || !c.started) {
						c.min_y = y7;
					}
					c.started = true;
					if(cx > c.max_x || !c.started) {
						c.max_x = cx;
					}
					if(cy > c.max_y || !c.started) {
						c.max_y = cy;
					}
					if(cx < c.min_x || !c.started) {
						c.min_x = cx;
					}
					if(cy < c.min_y || !c.started) {
						c.min_y = cy;
					}
					c.started = true;
					if(cx11 > c.max_x || !c.started) {
						c.max_x = cx11;
					}
					if(cy11 > c.max_y || !c.started) {
						c.max_y = cy11;
					}
					if(cx11 < c.min_x || !c.started) {
						c.min_x = cx11;
					}
					if(cy11 < c.min_y || !c.started) {
						c.min_y = cy11;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x7,y7,cx,cy);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx11 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy11 , Int);
				}
				c.num_vertices++;
				i += 6;
			}
			break;
		case 11:
			if(subr_stack_height <= 0) {
				return false;
			}
			b = _g1[--subr_stack_height];
			clear_stack = false;
			break;
		case 12:
			var dx1;
			var dx2;
			var dx3;
			var dx4;
			var dx5;
			var dx6;
			var dy1;
			var dy2;
			var dy3;
			var dy4;
			var dy5;
			var dy6;
			var dx;
			var dy;
			var b11;
			if(b.cursor >= b.data.get_length()) {
				b11 = 0;
			} else {
				var pos5 = b.cursor++;
				if(pos5 == null) {
					pos5 = 0;
				}
				b11 = b.data.readU8(pos5);
			}
			switch(b11) {
			case 34:
				if(sp < 7) {
					return false;
				}
				dx1 = _g[0];
				dx2 = _g[1];
				dy2 = _g[2];
				dx3 = _g[3];
				dx4 = _g[4];
				dx5 = _g[5];
				dx6 = _g[6];
				var cx12 = c.x + dx1;
				var cy12 = c.y;
				var cx21 = cx12 + dx2;
				var cy21 = cy12 + dy2;
				c.x = cx21 + dx3;
				c.y = cy21;
				var x8 = c.x | 0;
				var y8 = c.y | 0;
				var cx3 = cx12 | 0;
				var cy3 = cy12 | 0;
				var cx13 = cx21 | 0;
				var cy13 = cy21 | 0;
				if(c.bounds) {
					if(x8 > c.max_x || !c.started) {
						c.max_x = x8;
					}
					if(y8 > c.max_y || !c.started) {
						c.max_y = y8;
					}
					if(x8 < c.min_x || !c.started) {
						c.min_x = x8;
					}
					if(y8 < c.min_y || !c.started) {
						c.min_y = y8;
					}
					c.started = true;
					if(cx3 > c.max_x || !c.started) {
						c.max_x = cx3;
					}
					if(cy3 > c.max_y || !c.started) {
						c.max_y = cy3;
					}
					if(cx3 < c.min_x || !c.started) {
						c.min_x = cx3;
					}
					if(cy3 < c.min_y || !c.started) {
						c.min_y = cy3;
					}
					c.started = true;
					if(cx13 > c.max_x || !c.started) {
						c.max_x = cx13;
					}
					if(cy13 > c.max_y || !c.started) {
						c.max_y = cy13;
					}
					if(cx13 < c.min_x || !c.started) {
						c.min_x = cx13;
					}
					if(cy13 < c.min_y || !c.started) {
						c.min_y = cy13;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x8,y8,cx3,cy3);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx13 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy13 , Int);
				}
				c.num_vertices++;
				var cx14 = c.x + dx4;
				var cy14 = c.y;
				var cx22 = cx14 + dx5;
				var cy22 = cy14 + -dy2;
				c.x = cx22 + dx6;
				c.y = cy22;
				var x9 = c.x | 0;
				var y9 = c.y | 0;
				var cx4 = cx14 | 0;
				var cy4 = cy14 | 0;
				var cx15 = cx22 | 0;
				var cy15 = cy22 | 0;
				if(c.bounds) {
					if(x9 > c.max_x || !c.started) {
						c.max_x = x9;
					}
					if(y9 > c.max_y || !c.started) {
						c.max_y = y9;
					}
					if(x9 < c.min_x || !c.started) {
						c.min_x = x9;
					}
					if(y9 < c.min_y || !c.started) {
						c.min_y = y9;
					}
					c.started = true;
					if(cx4 > c.max_x || !c.started) {
						c.max_x = cx4;
					}
					if(cy4 > c.max_y || !c.started) {
						c.max_y = cy4;
					}
					if(cx4 < c.min_x || !c.started) {
						c.min_x = cx4;
					}
					if(cy4 < c.min_y || !c.started) {
						c.min_y = cy4;
					}
					c.started = true;
					if(cx15 > c.max_x || !c.started) {
						c.max_x = cx15;
					}
					if(cy15 > c.max_y || !c.started) {
						c.max_y = cy15;
					}
					if(cx15 < c.min_x || !c.started) {
						c.min_x = cx15;
					}
					if(cy15 < c.min_y || !c.started) {
						c.min_y = cy15;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x9,y9,cx4,cy4);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx15 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy15 , Int);
				}
				c.num_vertices++;
				break;
			case 35:
				if(sp < 13) {
					return false;
				}
				dx1 = _g[0];
				dy1 = _g[1];
				dx2 = _g[2];
				dy2 = _g[3];
				dx3 = _g[4];
				dy3 = _g[5];
				dx4 = _g[6];
				dy4 = _g[7];
				dx5 = _g[8];
				dy5 = _g[9];
				dx6 = _g[10];
				dy6 = _g[11];
				var cx16 = c.x + dx1;
				var cy16 = c.y + dy1;
				var cx23 = cx16 + dx2;
				var cy23 = cy16 + dy2;
				c.x = cx23 + dx3;
				c.y = cy23 + dy3;
				var x10 = c.x | 0;
				var y10 = c.y | 0;
				var cx5 = cx16 | 0;
				var cy5 = cy16 | 0;
				var cx17 = cx23 | 0;
				var cy17 = cy23 | 0;
				if(c.bounds) {
					if(x10 > c.max_x || !c.started) {
						c.max_x = x10;
					}
					if(y10 > c.max_y || !c.started) {
						c.max_y = y10;
					}
					if(x10 < c.min_x || !c.started) {
						c.min_x = x10;
					}
					if(y10 < c.min_y || !c.started) {
						c.min_y = y10;
					}
					c.started = true;
					if(cx5 > c.max_x || !c.started) {
						c.max_x = cx5;
					}
					if(cy5 > c.max_y || !c.started) {
						c.max_y = cy5;
					}
					if(cx5 < c.min_x || !c.started) {
						c.min_x = cx5;
					}
					if(cy5 < c.min_y || !c.started) {
						c.min_y = cy5;
					}
					c.started = true;
					if(cx17 > c.max_x || !c.started) {
						c.max_x = cx17;
					}
					if(cy17 > c.max_y || !c.started) {
						c.max_y = cy17;
					}
					if(cx17 < c.min_x || !c.started) {
						c.min_x = cx17;
					}
					if(cy17 < c.min_y || !c.started) {
						c.min_y = cy17;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x10,y10,cx5,cy5);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx17 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy17 , Int);
				}
				c.num_vertices++;
				var cx18 = c.x + dx4;
				var cy18 = c.y + dy4;
				var cx24 = cx18 + dx5;
				var cy24 = cy18 + dy5;
				c.x = cx24 + dx6;
				c.y = cy24 + dy6;
				var x11 = c.x | 0;
				var y11 = c.y | 0;
				var cx6 = cx18 | 0;
				var cy6 = cy18 | 0;
				var cx19 = cx24 | 0;
				var cy19 = cy24 | 0;
				if(c.bounds) {
					if(x11 > c.max_x || !c.started) {
						c.max_x = x11;
					}
					if(y11 > c.max_y || !c.started) {
						c.max_y = y11;
					}
					if(x11 < c.min_x || !c.started) {
						c.min_x = x11;
					}
					if(y11 < c.min_y || !c.started) {
						c.min_y = y11;
					}
					c.started = true;
					if(cx6 > c.max_x || !c.started) {
						c.max_x = cx6;
					}
					if(cy6 > c.max_y || !c.started) {
						c.max_y = cy6;
					}
					if(cx6 < c.min_x || !c.started) {
						c.min_x = cx6;
					}
					if(cy6 < c.min_y || !c.started) {
						c.min_y = cy6;
					}
					c.started = true;
					if(cx19 > c.max_x || !c.started) {
						c.max_x = cx19;
					}
					if(cy19 > c.max_y || !c.started) {
						c.max_y = cy19;
					}
					if(cx19 < c.min_x || !c.started) {
						c.min_x = cx19;
					}
					if(cy19 < c.min_y || !c.started) {
						c.min_y = cy19;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x11,y11,cx6,cy6);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx19 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy19 , Int);
				}
				c.num_vertices++;
				break;
			case 36:
				if(sp < 9) {
					return false;
				}
				dx1 = _g[0];
				dy1 = _g[1];
				dx2 = _g[2];
				dy2 = _g[3];
				dx3 = _g[4];
				dx4 = _g[5];
				dx5 = _g[6];
				dy5 = _g[7];
				dx6 = _g[8];
				var cx110 = c.x + dx1;
				var cy110 = c.y + dy1;
				var cx25 = cx110 + dx2;
				var cy25 = cy110 + dy2;
				c.x = cx25 + dx3;
				c.y = cy25;
				var x12 = c.x | 0;
				var y12 = c.y | 0;
				var cx7 = cx110 | 0;
				var cy7 = cy110 | 0;
				var cx111 = cx25 | 0;
				var cy111 = cy25 | 0;
				if(c.bounds) {
					if(x12 > c.max_x || !c.started) {
						c.max_x = x12;
					}
					if(y12 > c.max_y || !c.started) {
						c.max_y = y12;
					}
					if(x12 < c.min_x || !c.started) {
						c.min_x = x12;
					}
					if(y12 < c.min_y || !c.started) {
						c.min_y = y12;
					}
					c.started = true;
					if(cx7 > c.max_x || !c.started) {
						c.max_x = cx7;
					}
					if(cy7 > c.max_y || !c.started) {
						c.max_y = cy7;
					}
					if(cx7 < c.min_x || !c.started) {
						c.min_x = cx7;
					}
					if(cy7 < c.min_y || !c.started) {
						c.min_y = cy7;
					}
					c.started = true;
					if(cx111 > c.max_x || !c.started) {
						c.max_x = cx111;
					}
					if(cy111 > c.max_y || !c.started) {
						c.max_y = cy111;
					}
					if(cx111 < c.min_x || !c.started) {
						c.min_x = cx111;
					}
					if(cy111 < c.min_y || !c.started) {
						c.min_y = cy111;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x12,y12,cx7,cy7);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx111 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy111 , Int);
				}
				c.num_vertices++;
				var cx112 = c.x + dx4;
				var cy112 = c.y;
				var cx26 = cx112 + dx5;
				var cy26 = cy112 + dy5;
				c.x = cx26 + dx6;
				c.y = cy26 + -(dy1 + dy2 + dy5);
				var x13 = c.x | 0;
				var y13 = c.y | 0;
				var cx8 = cx112 | 0;
				var cy8 = cy112 | 0;
				var cx113 = cx26 | 0;
				var cy113 = cy26 | 0;
				if(c.bounds) {
					if(x13 > c.max_x || !c.started) {
						c.max_x = x13;
					}
					if(y13 > c.max_y || !c.started) {
						c.max_y = y13;
					}
					if(x13 < c.min_x || !c.started) {
						c.min_x = x13;
					}
					if(y13 < c.min_y || !c.started) {
						c.min_y = y13;
					}
					c.started = true;
					if(cx8 > c.max_x || !c.started) {
						c.max_x = cx8;
					}
					if(cy8 > c.max_y || !c.started) {
						c.max_y = cy8;
					}
					if(cx8 < c.min_x || !c.started) {
						c.min_x = cx8;
					}
					if(cy8 < c.min_y || !c.started) {
						c.min_y = cy8;
					}
					c.started = true;
					if(cx113 > c.max_x || !c.started) {
						c.max_x = cx113;
					}
					if(cy113 > c.max_y || !c.started) {
						c.max_y = cy113;
					}
					if(cx113 < c.min_x || !c.started) {
						c.min_x = cx113;
					}
					if(cy113 < c.min_y || !c.started) {
						c.min_y = cy113;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x13,y13,cx8,cy8);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx113 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy113 , Int);
				}
				c.num_vertices++;
				break;
			case 37:
				if(sp < 11) {
					return false;
				}
				dx1 = _g[0];
				dy1 = _g[1];
				dx2 = _g[2];
				dy2 = _g[3];
				dx3 = _g[4];
				dy3 = _g[5];
				dx4 = _g[6];
				dy4 = _g[7];
				dx5 = _g[8];
				dy5 = _g[9];
				dy6 = _g[10];
				dx6 = dy6;
				dx = dx1 + dx2 + dx3 + dx4 + dx5;
				dy = dy1 + dy2 + dy3 + dy4 + dy5;
				if(Math.abs(dx) > Math.abs(dy)) {
					dy6 = -dy;
				} else {
					dx6 = -dx;
				}
				var cx114 = c.x + dx1;
				var cy114 = c.y + dy1;
				var cx27 = cx114 + dx2;
				var cy27 = cy114 + dy2;
				c.x = cx27 + dx3;
				c.y = cy27 + dy3;
				var x14 = c.x | 0;
				var y14 = c.y | 0;
				var cx9 = cx114 | 0;
				var cy9 = cy114 | 0;
				var cx115 = cx27 | 0;
				var cy115 = cy27 | 0;
				if(c.bounds) {
					if(x14 > c.max_x || !c.started) {
						c.max_x = x14;
					}
					if(y14 > c.max_y || !c.started) {
						c.max_y = y14;
					}
					if(x14 < c.min_x || !c.started) {
						c.min_x = x14;
					}
					if(y14 < c.min_y || !c.started) {
						c.min_y = y14;
					}
					c.started = true;
					if(cx9 > c.max_x || !c.started) {
						c.max_x = cx9;
					}
					if(cy9 > c.max_y || !c.started) {
						c.max_y = cy9;
					}
					if(cx9 < c.min_x || !c.started) {
						c.min_x = cx9;
					}
					if(cy9 < c.min_y || !c.started) {
						c.min_y = cy9;
					}
					c.started = true;
					if(cx115 > c.max_x || !c.started) {
						c.max_x = cx115;
					}
					if(cy115 > c.max_y || !c.started) {
						c.max_y = cy115;
					}
					if(cx115 < c.min_x || !c.started) {
						c.min_x = cx115;
					}
					if(cy115 < c.min_y || !c.started) {
						c.min_y = cy115;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x14,y14,cx9,cy9);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx115 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy115 , Int);
				}
				c.num_vertices++;
				var cx116 = c.x + dx4;
				var cy116 = c.y + dy4;
				var cx28 = cx116 + dx5;
				var cy28 = cy116 + dy5;
				c.x = cx28 + dx6;
				c.y = cy28 + dy6;
				var x15 = c.x | 0;
				var y15 = c.y | 0;
				var cx10 = cx116 | 0;
				var cy10 = cy116 | 0;
				var cx117 = cx28 | 0;
				var cy117 = cy28 | 0;
				if(c.bounds) {
					if(x15 > c.max_x || !c.started) {
						c.max_x = x15;
					}
					if(y15 > c.max_y || !c.started) {
						c.max_y = y15;
					}
					if(x15 < c.min_x || !c.started) {
						c.min_x = x15;
					}
					if(y15 < c.min_y || !c.started) {
						c.min_y = y15;
					}
					c.started = true;
					if(cx10 > c.max_x || !c.started) {
						c.max_x = cx10;
					}
					if(cy10 > c.max_y || !c.started) {
						c.max_y = cy10;
					}
					if(cx10 < c.min_x || !c.started) {
						c.min_x = cx10;
					}
					if(cy10 < c.min_y || !c.started) {
						c.min_y = cy10;
					}
					c.started = true;
					if(cx117 > c.max_x || !c.started) {
						c.max_x = cx117;
					}
					if(cy117 > c.max_y || !c.started) {
						c.max_y = cy117;
					}
					if(cx117 < c.min_x || !c.started) {
						c.min_x = cx117;
					}
					if(cy117 < c.min_y || !c.started) {
						c.min_y = cy117;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x15,y15,cx10,cy10);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx117 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy117 , Int);
				}
				c.num_vertices++;
				break;
			default:
				return false;
			}
			break;
		case 14:
			if(c.first_x != c.x || c.first_y != c.y) {
				var x16 = c.first_x | 0;
				var y16 = c.first_y | 0;
				if(c.bounds) {
					if(x16 > c.max_x || !c.started) {
						c.max_x = x16;
					}
					if(y16 > c.max_y || !c.started) {
						c.max_y = y16;
					}
					if(x16 < c.min_x || !c.started) {
						c.min_x = x16;
					}
					if(y16 < c.min_y || !c.started) {
						c.min_y = y16;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x16,y16,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			return true;
		case 19:case 20:
			if(in_header) {
				maskbits += sp / 2 | 0;
			}
			in_header = false;
			var o2 = b.cursor + ((maskbits + 7) / 8 | 0);
			if(!(!(o2 > b.data.get_length() || o2 < 0))) {
				throw new js__$Boot_HaxeError("Error");
			}
			b.cursor = o2 > b.data.get_length() || o2 < 0 ? b.data.get_length() : o2;
			break;
		case 21:
			in_header = false;
			if(sp < 2) {
				return false;
			}
			if(c.first_x != c.x || c.first_y != c.y) {
				var x17 = c.first_x | 0;
				var y17 = c.first_y | 0;
				if(c.bounds) {
					if(x17 > c.max_x || !c.started) {
						c.max_x = x17;
					}
					if(y17 > c.max_y || !c.started) {
						c.max_y = y17;
					}
					if(x17 < c.min_x || !c.started) {
						c.min_x = x17;
					}
					if(y17 < c.min_y || !c.started) {
						c.min_y = y17;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x17,y17,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			c.first_x = c.x = c.x + _g[sp - 2];
			c.first_y = c.y = c.y + _g[sp - 1];
			var x18 = c.x | 0;
			var y18 = c.y | 0;
			if(c.bounds) {
				if(x18 > c.max_x || !c.started) {
					c.max_x = x18;
				}
				if(y18 > c.max_y || !c.started) {
					c.max_y = y18;
				}
				if(x18 < c.min_x || !c.started) {
					c.min_x = x18;
				}
				if(y18 < c.min_y || !c.started) {
					c.min_y = y18;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],1,x18,y18,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 22:
			in_header = false;
			if(sp < 1) {
				return false;
			}
			if(c.first_x != c.x || c.first_y != c.y) {
				var x19 = c.first_x | 0;
				var y19 = c.first_y | 0;
				if(c.bounds) {
					if(x19 > c.max_x || !c.started) {
						c.max_x = x19;
					}
					if(y19 > c.max_y || !c.started) {
						c.max_y = y19;
					}
					if(x19 < c.min_x || !c.started) {
						c.min_x = x19;
					}
					if(y19 < c.min_y || !c.started) {
						c.min_y = y19;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x19,y19,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
			}
			c.first_x = c.x = c.x + _g[sp - 1];
			c.first_y = c.y = c.y;
			var x20 = c.x | 0;
			var y20 = c.y | 0;
			if(c.bounds) {
				if(x20 > c.max_x || !c.started) {
					c.max_x = x20;
				}
				if(y20 > c.max_y || !c.started) {
					c.max_y = y20;
				}
				if(x20 < c.min_x || !c.started) {
					c.min_x = x20;
				}
				if(y20 < c.min_y || !c.started) {
					c.min_y = y20;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],1,x20,y20,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 24:
			if(sp < 8) {
				return false;
			}
			while(i + 5 < sp - 2) {
				var cx118 = c.x + _g[i];
				var cy118 = c.y + _g[i + 1];
				var cx29 = cx118 + _g[i + 2];
				var cy29 = cy118 + _g[i + 3];
				c.x = cx29 + _g[i + 4];
				c.y = cy29 + _g[i + 5];
				var x21 = c.x | 0;
				var y21 = c.y | 0;
				var cx20 = cx118 | 0;
				var cy20 = cy118 | 0;
				var cx119 = cx29 | 0;
				var cy119 = cy29 | 0;
				if(c.bounds) {
					if(x21 > c.max_x || !c.started) {
						c.max_x = x21;
					}
					if(y21 > c.max_y || !c.started) {
						c.max_y = y21;
					}
					if(x21 < c.min_x || !c.started) {
						c.min_x = x21;
					}
					if(y21 < c.min_y || !c.started) {
						c.min_y = y21;
					}
					c.started = true;
					if(cx20 > c.max_x || !c.started) {
						c.max_x = cx20;
					}
					if(cy20 > c.max_y || !c.started) {
						c.max_y = cy20;
					}
					if(cx20 < c.min_x || !c.started) {
						c.min_x = cx20;
					}
					if(cy20 < c.min_y || !c.started) {
						c.min_y = cy20;
					}
					c.started = true;
					if(cx119 > c.max_x || !c.started) {
						c.max_x = cx119;
					}
					if(cy119 > c.max_y || !c.started) {
						c.max_y = cy119;
					}
					if(cx119 < c.min_x || !c.started) {
						c.min_x = cx119;
					}
					if(cy119 < c.min_y || !c.started) {
						c.min_y = cy119;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x21,y21,cx20,cy20);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx119 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy119 , Int);
				}
				c.num_vertices++;
				i += 6;
			}
			if(i + 1 >= sp) {
				return false;
			}
			c.x += _g[i];
			c.y += _g[i + 1];
			var x22 = c.x | 0;
			var y22 = c.y | 0;
			if(c.bounds) {
				if(x22 > c.max_x || !c.started) {
					c.max_x = x22;
				}
				if(y22 > c.max_y || !c.started) {
					c.max_y = y22;
				}
				if(x22 < c.min_x || !c.started) {
					c.min_x = x22;
				}
				if(y22 < c.min_y || !c.started) {
					c.min_y = y22;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x22,y22,0,0);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
			}
			c.num_vertices++;
			break;
		case 25:
			if(sp < 8) {
				return false;
			}
			while(i + 1 < sp - 6) {
				c.x += _g[i];
				c.y += _g[i + 1];
				var x23 = c.x | 0;
				var y23 = c.y | 0;
				if(c.bounds) {
					if(x23 > c.max_x || !c.started) {
						c.max_x = x23;
					}
					if(y23 > c.max_y || !c.started) {
						c.max_y = y23;
					}
					if(x23 < c.min_x || !c.started) {
						c.min_x = x23;
					}
					if(y23 < c.min_y || !c.started) {
						c.min_y = y23;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],2,x23,y23,0,0);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(0 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(0 , Int);
				}
				c.num_vertices++;
				i += 2;
			}
			if(i + 5 >= sp) {
				return false;
			}
			var cx120 = c.x + _g[i];
			var cy120 = c.y + _g[i + 1];
			var cx210 = cx120 + _g[i + 2];
			var cy210 = cy120 + _g[i + 3];
			c.x = cx210 + _g[i + 4];
			c.y = cy210 + _g[i + 5];
			var x24 = c.x | 0;
			var y24 = c.y | 0;
			var cx30 = cx120 | 0;
			var cy30 = cy120 | 0;
			var cx121 = cx210 | 0;
			var cy121 = cy210 | 0;
			if(c.bounds) {
				if(x24 > c.max_x || !c.started) {
					c.max_x = x24;
				}
				if(y24 > c.max_y || !c.started) {
					c.max_y = y24;
				}
				if(x24 < c.min_x || !c.started) {
					c.min_x = x24;
				}
				if(y24 < c.min_y || !c.started) {
					c.min_y = y24;
				}
				c.started = true;
				if(cx30 > c.max_x || !c.started) {
					c.max_x = cx30;
				}
				if(cy30 > c.max_y || !c.started) {
					c.max_y = cy30;
				}
				if(cx30 < c.min_x || !c.started) {
					c.min_x = cx30;
				}
				if(cy30 < c.min_y || !c.started) {
					c.min_y = cy30;
				}
				c.started = true;
				if(cx121 > c.max_x || !c.started) {
					c.max_x = cx121;
				}
				if(cy121 > c.max_y || !c.started) {
					c.max_y = cy121;
				}
				if(cx121 < c.min_x || !c.started) {
					c.min_x = cx121;
				}
				if(cy121 < c.min_y || !c.started) {
					c.min_y = cy121;
				}
				c.started = true;
			} else {
				kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x24,y24,cx30,cy30);
				c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx121 , Int);
				c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy121 , Int);
			}
			c.num_vertices++;
			break;
		case 26:case 27:
			if(sp < 4) {
				return false;
			}
			f = 0.0;
			if((sp & 1) != 0) {
				f = _g[0];
				i = 1;
			}
			while(i + 3 < sp) {
				if(b0 == 27) {
					var cx122 = c.x + _g[i];
					var cy122 = c.y + f;
					var cx211 = cx122 + _g[i + 1];
					var cy211 = cy122 + _g[i + 2];
					c.x = cx211 + _g[i + 3];
					c.y = cy211;
					var x25 = c.x | 0;
					var y25 = c.y | 0;
					var cx31 = cx122 | 0;
					var cy31 = cy122 | 0;
					var cx123 = cx211 | 0;
					var cy123 = cy211 | 0;
					if(c.bounds) {
						if(x25 > c.max_x || !c.started) {
							c.max_x = x25;
						}
						if(y25 > c.max_y || !c.started) {
							c.max_y = y25;
						}
						if(x25 < c.min_x || !c.started) {
							c.min_x = x25;
						}
						if(y25 < c.min_y || !c.started) {
							c.min_y = y25;
						}
						c.started = true;
						if(cx31 > c.max_x || !c.started) {
							c.max_x = cx31;
						}
						if(cy31 > c.max_y || !c.started) {
							c.max_y = cy31;
						}
						if(cx31 < c.min_x || !c.started) {
							c.min_x = cx31;
						}
						if(cy31 < c.min_y || !c.started) {
							c.min_y = cy31;
						}
						c.started = true;
						if(cx123 > c.max_x || !c.started) {
							c.max_x = cx123;
						}
						if(cy123 > c.max_y || !c.started) {
							c.max_y = cy123;
						}
						if(cx123 < c.min_x || !c.started) {
							c.min_x = cx123;
						}
						if(cy123 < c.min_y || !c.started) {
							c.min_y = cy123;
						}
						c.started = true;
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x25,y25,cx31,cy31);
						c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx123 , Int);
						c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy123 , Int);
					}
					c.num_vertices++;
				} else {
					var cx124 = c.x + f;
					var cy124 = c.y + _g[i];
					var cx212 = cx124 + _g[i + 1];
					var cy212 = cy124 + _g[i + 2];
					c.x = cx212;
					c.y = cy212 + _g[i + 3];
					var x26 = c.x | 0;
					var y26 = c.y | 0;
					var cx32 = cx124 | 0;
					var cy32 = cy124 | 0;
					var cx125 = cx212 | 0;
					var cy125 = cy212 | 0;
					if(c.bounds) {
						if(x26 > c.max_x || !c.started) {
							c.max_x = x26;
						}
						if(y26 > c.max_y || !c.started) {
							c.max_y = y26;
						}
						if(x26 < c.min_x || !c.started) {
							c.min_x = x26;
						}
						if(y26 < c.min_y || !c.started) {
							c.min_y = y26;
						}
						c.started = true;
						if(cx32 > c.max_x || !c.started) {
							c.max_x = cx32;
						}
						if(cy32 > c.max_y || !c.started) {
							c.max_y = cy32;
						}
						if(cx32 < c.min_x || !c.started) {
							c.min_x = cx32;
						}
						if(cy32 < c.min_y || !c.started) {
							c.min_y = cy32;
						}
						c.started = true;
						if(cx125 > c.max_x || !c.started) {
							c.max_x = cx125;
						}
						if(cy125 > c.max_y || !c.started) {
							c.max_y = cy125;
						}
						if(cx125 < c.min_x || !c.started) {
							c.min_x = cx125;
						}
						if(cy125 < c.min_y || !c.started) {
							c.min_y = cy125;
						}
						c.started = true;
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x26,y26,cx32,cy32);
						c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx125 , Int);
						c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy125 , Int);
					}
					c.num_vertices++;
				}
				f = 0.0;
				i += 4;
			}
			break;
		case 10:case 29:
			if(b0 == 10) {
				if(!has_subrs) {
					if(info.fdselect.data.get_length() != 0) {
						var fdselect = info.fdselect;
						var nranges;
						var start1;
						var end;
						var v7;
						var fmt;
						var fdselector = -1;
						if(0 > fdselect.data.get_length()) {
							throw new js__$Boot_HaxeError("Error");
						}
						fdselect.cursor = 0 > fdselect.data.get_length() ? fdselect.data.get_length() : 0;
						if(fdselect.cursor >= fdselect.data.get_length()) {
							fmt = 0;
						} else {
							var pos6 = fdselect.cursor++;
							if(pos6 == null) {
								pos6 = 0;
							}
							fmt = fdselect.data.readU8(pos6);
						}
						if(fmt == 0) {
							var o3 = fdselect.cursor + glyph_index;
							if(!(!(o3 > fdselect.data.get_length() || o3 < 0))) {
								throw new js__$Boot_HaxeError("Error");
							}
							fdselect.cursor = o3 > fdselect.data.get_length() || o3 < 0 ? fdselect.data.get_length() : o3;
							if(fdselect.cursor >= fdselect.data.get_length()) {
								fdselector = 0;
							} else {
								var pos7 = fdselect.cursor++;
								if(pos7 == null) {
									pos7 = 0;
								}
								fdselector = fdselect.data.readU8(pos7);
							}
						} else if(fmt == 3) {
							var v8 = 0;
							var _g5 = 0;
							while(_g5 < 2) {
								++_g5;
								var v9;
								if(fdselect.cursor >= fdselect.data.get_length()) {
									v9 = 0;
								} else {
									var pos8 = fdselect.cursor++;
									if(pos8 == null) {
										pos8 = 0;
									}
									v9 = fdselect.data.readU8(pos8);
								}
								v8 = v8 << 8 | v9;
							}
							nranges = v8;
							var v10 = 0;
							var _g6 = 0;
							while(_g6 < 2) {
								++_g6;
								var v11;
								if(fdselect.cursor >= fdselect.data.get_length()) {
									v11 = 0;
								} else {
									var pos9 = fdselect.cursor++;
									if(pos9 == null) {
										pos9 = 0;
									}
									v11 = fdselect.data.readU8(pos9);
								}
								v10 = v10 << 8 | v11;
							}
							start1 = v10;
							var _g7 = 0;
							while(_g7 < nranges) {
								++_g7;
								if(fdselect.cursor >= fdselect.data.get_length()) {
									v7 = 0;
								} else {
									var pos10 = fdselect.cursor++;
									if(pos10 == null) {
										pos10 = 0;
									}
									v7 = fdselect.data.readU8(pos10);
								}
								var v12 = 0;
								var _g8 = 0;
								while(_g8 < 2) {
									++_g8;
									var v13;
									if(fdselect.cursor >= fdselect.data.get_length()) {
										v13 = 0;
									} else {
										var pos11 = fdselect.cursor++;
										if(pos11 == null) {
											pos11 = 0;
										}
										v13 = fdselect.data.readU8(pos11);
									}
									v12 = v12 << 8 | v13;
								}
								end = v12;
								if(glyph_index >= start1 && glyph_index < end) {
									fdselector = v7;
									break;
								}
								start1 = end;
							}
						}
						if(fdselector == -1) {
							var r1 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r1.data = null;
							r1.cursor = 0;
						}
						var cff = info.cff;
						var b2 = info.fontdicts;
						if(0 > b2.data.get_length()) {
							throw new js__$Boot_HaxeError("Error");
						}
						b2.cursor = 0 > b2.data.get_length() ? b2.data.get_length() : 0;
						var v14 = 0;
						var _g9 = 0;
						while(_g9 < 2) {
							++_g9;
							var v15;
							if(b2.cursor >= b2.data.get_length()) {
								v15 = 0;
							} else {
								var pos12 = b2.cursor++;
								if(pos12 == null) {
									pos12 = 0;
								}
								v15 = b2.data.readU8(pos12);
							}
							v14 = v14 << 8 | v15;
						}
						var count1 = v14;
						var offsize1;
						if(b2.cursor >= b2.data.get_length()) {
							offsize1 = 0;
						} else {
							var pos13 = b2.cursor++;
							if(pos13 == null) {
								pos13 = 0;
							}
							offsize1 = b2.data.readU8(pos13);
						}
						if(!(fdselector >= 0 && fdselector < count1)) {
							throw new js__$Boot_HaxeError("Error");
						}
						if(!(offsize1 >= 1 && offsize1 <= 4)) {
							throw new js__$Boot_HaxeError("Error");
						}
						var o4 = b2.cursor + fdselector * offsize1;
						if(!(!(o4 > b2.data.get_length() || o4 < 0))) {
							throw new js__$Boot_HaxeError("Error");
						}
						b2.cursor = o4 > b2.data.get_length() || o4 < 0 ? b2.data.get_length() : o4;
						var v16 = 0;
						if(!(offsize1 >= 1 && offsize1 <= 4)) {
							throw new js__$Boot_HaxeError("Error");
						}
						var _g10 = 0;
						var _g13 = offsize1;
						while(_g10 < _g13) {
							++_g10;
							var v17;
							if(b2.cursor >= b2.data.get_length()) {
								v17 = 0;
							} else {
								var pos14 = b2.cursor++;
								if(pos14 == null) {
									pos14 = 0;
								}
								v17 = b2.data.readU8(pos14);
							}
							v16 = v16 << 8 | v17;
						}
						var start2 = v16;
						var v18 = 0;
						if(!(offsize1 >= 1 && offsize1 <= 4)) {
							throw new js__$Boot_HaxeError("Error");
						}
						var _g14 = 0;
						var _g15 = offsize1;
						while(_g14 < _g15) {
							++_g14;
							var v19;
							if(b2.cursor >= b2.data.get_length()) {
								v19 = 0;
							} else {
								var pos15 = b2.cursor++;
								if(pos15 == null) {
									pos15 = 0;
								}
								v19 = b2.data.readU8(pos15);
							}
							v18 = v18 << 8 | v19;
						}
						var o5 = 2 + (count1 + 1) * offsize1 + start2;
						var s1 = v18 - start2;
						var r2 = new kha_graphics2_truetype_Stbtt_$_$buf();
						r2.data = null;
						r2.cursor = 0;
						var fontdict;
						if(o5 < 0 || s1 < 0 || o5 > b2.data.get_length() || s1 > b2.data.get_length() - o5) {
							fontdict = r2;
						} else {
							r2.data = b2.data.sub(o5,s1);
							fontdict = r2;
						}
						var subrsoff = [0];
						var private_loc = [0,0];
						var i1 = 0;
						if(0 > fontdict.data.get_length()) {
							throw new js__$Boot_HaxeError("Error");
						}
						fontdict.cursor = 0 > fontdict.data.get_length() ? fontdict.data.get_length() : 0;
						var ret = null;
						while(fontdict.cursor < fontdict.data.get_length()) {
							var start3 = fontdict.cursor;
							var op;
							while(true) {
								var subrs1;
								if(fontdict.cursor >= fontdict.data.get_length()) {
									subrs1 = 0;
								} else {
									var pos16 = fontdict.cursor;
									if(pos16 == null) {
										pos16 = 0;
									}
									subrs1 = fontdict.data.readU8(pos16);
								}
								if(!(subrs1 >= 28)) {
									break;
								}
								var v20;
								var b01;
								if(fontdict.cursor >= fontdict.data.get_length()) {
									b01 = 0;
								} else {
									var pos17 = fontdict.cursor;
									if(pos17 == null) {
										pos17 = 0;
									}
									b01 = fontdict.data.readU8(pos17);
								}
								if(b01 < 28) {
									throw new js__$Boot_HaxeError("Error");
								}
								if(b01 == 30) {
									var o6 = fontdict.cursor + 1;
									if(!(!(o6 > fontdict.data.get_length() || o6 < 0))) {
										throw new js__$Boot_HaxeError("Error");
									}
									fontdict.cursor = o6 > fontdict.data.get_length() || o6 < 0 ? fontdict.data.get_length() : o6;
									while(fontdict.cursor < fontdict.data.get_length()) {
										if(fontdict.cursor >= fontdict.data.get_length()) {
											v20 = 0;
										} else {
											var pos18 = fontdict.cursor++;
											if(pos18 == null) {
												pos18 = 0;
											}
											v20 = fontdict.data.readU8(pos18);
										}
										if((v20 & 15) == 15 || v20 >> 4 == 15) {
											break;
										}
									}
								} else {
									var b02;
									if(fontdict.cursor >= fontdict.data.get_length()) {
										b02 = 0;
									} else {
										var pos19 = fontdict.cursor++;
										if(pos19 == null) {
											pos19 = 0;
										}
										b02 = fontdict.data.readU8(pos19);
									}
									if(!(b02 >= 32 && b02 <= 246)) {
										if(b02 >= 247 && b02 <= 250) {
											if(fontdict.cursor < fontdict.data.get_length()) {
												var pos20 = fontdict.cursor++;
												if(pos20 == null) {
													pos20 = 0;
												}
											}
										} else if(b02 >= 251 && b02 <= 254) {
											if(fontdict.cursor < fontdict.data.get_length()) {
												var pos21 = fontdict.cursor++;
												if(pos21 == null) {
													pos21 = 0;
												}
											}
										} else if(b02 == 28) {
											var _g16 = 0;
											while(_g16 < 2) {
												++_g16;
												if(fontdict.cursor < fontdict.data.get_length()) {
													var pos22 = fontdict.cursor++;
													if(pos22 == null) {
														pos22 = 0;
													}
												}
											}
										} else if(b02 == 29) {
											var _g17 = 0;
											while(_g17 < 4) {
												++_g17;
												if(fontdict.cursor < fontdict.data.get_length()) {
													var pos23 = fontdict.cursor++;
													if(pos23 == null) {
														pos23 = 0;
													}
												}
											}
										} else {
											throw new js__$Boot_HaxeError("Error");
										}
									}
								}
							}
							var end1 = fontdict.cursor;
							if(fontdict.cursor >= fontdict.data.get_length()) {
								op = 0;
							} else {
								var pos24 = fontdict.cursor++;
								if(pos24 == null) {
									pos24 = 0;
								}
								op = fontdict.data.readU8(pos24);
							}
							if(op == 12) {
								var op1;
								if(fontdict.cursor >= fontdict.data.get_length()) {
									op1 = 0;
								} else {
									var pos25 = fontdict.cursor++;
									if(pos25 == null) {
										pos25 = 0;
									}
									op1 = fontdict.data.readU8(pos25);
								}
								op = op1 | 256;
							}
							if(op == 18) {
								var s2 = end1 - start3;
								var r3 = new kha_graphics2_truetype_Stbtt_$_$buf();
								r3.data = null;
								r3.cursor = 0;
								if(start3 < 0 || s2 < 0 || start3 > fontdict.data.get_length() || s2 > fontdict.data.get_length() - start3) {
									ret = r3;
								} else {
									r3.data = fontdict.data.sub(start3,s2);
									ret = r3;
								}
								break;
							}
						}
						var operands;
						if(ret != null) {
							operands = ret;
						} else {
							var r4 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r4.data = null;
							r4.cursor = 0;
							if(0 > fontdict.data.get_length() || 0 > fontdict.data.get_length()) {
								operands = r4;
							} else {
								r4.data = fontdict.data.sub(0,0);
								operands = r4;
							}
						}
						while(i1 < 2 && operands.cursor < operands.data.get_length()) {
							var b03;
							if(operands.cursor >= operands.data.get_length()) {
								b03 = 0;
							} else {
								var pos26 = operands.cursor++;
								if(pos26 == null) {
									pos26 = 0;
								}
								b03 = operands.data.readU8(pos26);
							}
							var subrs2;
							if(b03 >= 32 && b03 <= 246) {
								subrs2 = b03 - 139;
							} else if(b03 >= 247 && b03 <= 250) {
								var subrs3;
								if(operands.cursor >= operands.data.get_length()) {
									subrs3 = 0;
								} else {
									var pos27 = operands.cursor++;
									if(pos27 == null) {
										pos27 = 0;
									}
									subrs3 = operands.data.readU8(pos27);
								}
								subrs2 = (b03 - 247) * 256 + subrs3 + 108;
							} else if(b03 >= 251 && b03 <= 254) {
								var subrs4;
								if(operands.cursor >= operands.data.get_length()) {
									subrs4 = 0;
								} else {
									var pos28 = operands.cursor++;
									if(pos28 == null) {
										pos28 = 0;
									}
									subrs4 = operands.data.readU8(pos28);
								}
								subrs2 = -(b03 - 251) * 256 - subrs4 - 108;
							} else if(b03 == 28) {
								var v21 = 0;
								var _g18 = 0;
								while(_g18 < 2) {
									++_g18;
									var v22;
									if(operands.cursor >= operands.data.get_length()) {
										v22 = 0;
									} else {
										var pos29 = operands.cursor++;
										if(pos29 == null) {
											pos29 = 0;
										}
										v22 = operands.data.readU8(pos29);
									}
									v21 = v21 << 8 | v22;
								}
								subrs2 = v21;
							} else if(b03 == 29) {
								var v23 = 0;
								var _g19 = 0;
								while(_g19 < 4) {
									++_g19;
									var v24;
									if(operands.cursor >= operands.data.get_length()) {
										v24 = 0;
									} else {
										var pos30 = operands.cursor++;
										if(pos30 == null) {
											pos30 = 0;
										}
										v24 = operands.data.readU8(pos30);
									}
									v23 = v23 << 8 | v24;
								}
								subrs2 = v23;
							} else {
								throw new js__$Boot_HaxeError("Error");
							}
							private_loc[i1] = subrs2;
							++i1;
						}
						if(private_loc[1] == 0 || private_loc[0] == 0) {
							var r5 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r5.data = null;
							r5.cursor = 0;
							subrs = r5;
						} else {
							var o7 = private_loc[1];
							var s3 = private_loc[0];
							var r6 = new kha_graphics2_truetype_Stbtt_$_$buf();
							r6.data = null;
							r6.cursor = 0;
							var pdict;
							if(o7 < 0 || s3 < 0 || o7 > cff.data.get_length() || s3 > cff.data.get_length() - o7) {
								pdict = r6;
							} else {
								r6.data = cff.data.sub(o7,s3);
								pdict = r6;
							}
							var i2 = 0;
							if(0 > pdict.data.get_length()) {
								throw new js__$Boot_HaxeError("Error");
							}
							pdict.cursor = 0 > pdict.data.get_length() ? pdict.data.get_length() : 0;
							var ret1 = null;
							while(pdict.cursor < pdict.data.get_length()) {
								var start4 = pdict.cursor;
								var op2;
								while(true) {
									var subrs5;
									if(pdict.cursor >= pdict.data.get_length()) {
										subrs5 = 0;
									} else {
										var pos31 = pdict.cursor;
										if(pos31 == null) {
											pos31 = 0;
										}
										subrs5 = pdict.data.readU8(pos31);
									}
									if(!(subrs5 >= 28)) {
										break;
									}
									var v25;
									var b04;
									if(pdict.cursor >= pdict.data.get_length()) {
										b04 = 0;
									} else {
										var pos32 = pdict.cursor;
										if(pos32 == null) {
											pos32 = 0;
										}
										b04 = pdict.data.readU8(pos32);
									}
									if(b04 < 28) {
										throw new js__$Boot_HaxeError("Error");
									}
									if(b04 == 30) {
										var o8 = pdict.cursor + 1;
										if(!(!(o8 > pdict.data.get_length() || o8 < 0))) {
											throw new js__$Boot_HaxeError("Error");
										}
										pdict.cursor = o8 > pdict.data.get_length() || o8 < 0 ? pdict.data.get_length() : o8;
										while(pdict.cursor < pdict.data.get_length()) {
											if(pdict.cursor >= pdict.data.get_length()) {
												v25 = 0;
											} else {
												var pos33 = pdict.cursor++;
												if(pos33 == null) {
													pos33 = 0;
												}
												v25 = pdict.data.readU8(pos33);
											}
											if((v25 & 15) == 15 || v25 >> 4 == 15) {
												break;
											}
										}
									} else {
										var b05;
										if(pdict.cursor >= pdict.data.get_length()) {
											b05 = 0;
										} else {
											var pos34 = pdict.cursor++;
											if(pos34 == null) {
												pos34 = 0;
											}
											b05 = pdict.data.readU8(pos34);
										}
										if(!(b05 >= 32 && b05 <= 246)) {
											if(b05 >= 247 && b05 <= 250) {
												if(pdict.cursor < pdict.data.get_length()) {
													var pos35 = pdict.cursor++;
													if(pos35 == null) {
														pos35 = 0;
													}
												}
											} else if(b05 >= 251 && b05 <= 254) {
												if(pdict.cursor < pdict.data.get_length()) {
													var pos36 = pdict.cursor++;
													if(pos36 == null) {
														pos36 = 0;
													}
												}
											} else if(b05 == 28) {
												var _g20 = 0;
												while(_g20 < 2) {
													++_g20;
													if(pdict.cursor < pdict.data.get_length()) {
														var pos37 = pdict.cursor++;
														if(pos37 == null) {
															pos37 = 0;
														}
													}
												}
											} else if(b05 == 29) {
												var _g21 = 0;
												while(_g21 < 4) {
													++_g21;
													if(pdict.cursor < pdict.data.get_length()) {
														var pos38 = pdict.cursor++;
														if(pos38 == null) {
															pos38 = 0;
														}
													}
												}
											} else {
												throw new js__$Boot_HaxeError("Error");
											}
										}
									}
								}
								var end2 = pdict.cursor;
								if(pdict.cursor >= pdict.data.get_length()) {
									op2 = 0;
								} else {
									var pos39 = pdict.cursor++;
									if(pos39 == null) {
										pos39 = 0;
									}
									op2 = pdict.data.readU8(pos39);
								}
								if(op2 == 12) {
									var op3;
									if(pdict.cursor >= pdict.data.get_length()) {
										op3 = 0;
									} else {
										var pos40 = pdict.cursor++;
										if(pos40 == null) {
											pos40 = 0;
										}
										op3 = pdict.data.readU8(pos40);
									}
									op2 = op3 | 256;
								}
								if(op2 == 19) {
									var s4 = end2 - start4;
									var r7 = new kha_graphics2_truetype_Stbtt_$_$buf();
									r7.data = null;
									r7.cursor = 0;
									if(start4 < 0 || s4 < 0 || start4 > pdict.data.get_length() || s4 > pdict.data.get_length() - start4) {
										ret1 = r7;
									} else {
										r7.data = pdict.data.sub(start4,s4);
										ret1 = r7;
									}
									break;
								}
							}
							var operands1;
							if(ret1 != null) {
								operands1 = ret1;
							} else {
								var r8 = new kha_graphics2_truetype_Stbtt_$_$buf();
								r8.data = null;
								r8.cursor = 0;
								if(0 > pdict.data.get_length() || 0 > pdict.data.get_length()) {
									operands1 = r8;
								} else {
									r8.data = pdict.data.sub(0,0);
									operands1 = r8;
								}
							}
							while(i2 < 1 && operands1.cursor < operands1.data.get_length()) {
								var b06;
								if(operands1.cursor >= operands1.data.get_length()) {
									b06 = 0;
								} else {
									var pos41 = operands1.cursor++;
									if(pos41 == null) {
										pos41 = 0;
									}
									b06 = operands1.data.readU8(pos41);
								}
								var subrs6;
								if(b06 >= 32 && b06 <= 246) {
									subrs6 = b06 - 139;
								} else if(b06 >= 247 && b06 <= 250) {
									var subrs7;
									if(operands1.cursor >= operands1.data.get_length()) {
										subrs7 = 0;
									} else {
										var pos42 = operands1.cursor++;
										if(pos42 == null) {
											pos42 = 0;
										}
										subrs7 = operands1.data.readU8(pos42);
									}
									subrs6 = (b06 - 247) * 256 + subrs7 + 108;
								} else if(b06 >= 251 && b06 <= 254) {
									var subrs8;
									if(operands1.cursor >= operands1.data.get_length()) {
										subrs8 = 0;
									} else {
										var pos43 = operands1.cursor++;
										if(pos43 == null) {
											pos43 = 0;
										}
										subrs8 = operands1.data.readU8(pos43);
									}
									subrs6 = -(b06 - 251) * 256 - subrs8 - 108;
								} else if(b06 == 28) {
									var v26 = 0;
									var _g22 = 0;
									while(_g22 < 2) {
										++_g22;
										var v27;
										if(operands1.cursor >= operands1.data.get_length()) {
											v27 = 0;
										} else {
											var pos44 = operands1.cursor++;
											if(pos44 == null) {
												pos44 = 0;
											}
											v27 = operands1.data.readU8(pos44);
										}
										v26 = v26 << 8 | v27;
									}
									subrs6 = v26;
								} else if(b06 == 29) {
									var v28 = 0;
									var _g23 = 0;
									while(_g23 < 4) {
										++_g23;
										var v29;
										if(operands1.cursor >= operands1.data.get_length()) {
											v29 = 0;
										} else {
											var pos45 = operands1.cursor++;
											if(pos45 == null) {
												pos45 = 0;
											}
											v29 = operands1.data.readU8(pos45);
										}
										v28 = v28 << 8 | v29;
									}
									subrs6 = v28;
								} else {
									throw new js__$Boot_HaxeError("Error");
								}
								subrsoff[i2] = subrs6;
								++i2;
							}
							if(subrsoff[0] == 0) {
								var r9 = new kha_graphics2_truetype_Stbtt_$_$buf();
								r9.data = null;
								r9.cursor = 0;
								subrs = r9;
							} else {
								var o9 = private_loc[1] + subrsoff[0];
								if(!(!(o9 > cff.data.get_length() || o9 < 0))) {
									throw new js__$Boot_HaxeError("Error");
								}
								cff.cursor = o9 > cff.data.get_length() || o9 < 0 ? cff.data.get_length() : o9;
								var start5 = cff.cursor;
								var v30 = 0;
								var _g24 = 0;
								while(_g24 < 2) {
									++_g24;
									var v31;
									if(cff.cursor >= cff.data.get_length()) {
										v31 = 0;
									} else {
										var pos46 = cff.cursor++;
										if(pos46 == null) {
											pos46 = 0;
										}
										v31 = cff.data.readU8(pos46);
									}
									v30 = v30 << 8 | v31;
								}
								var count2 = v30;
								if(count2 > 0) {
									var offsize2;
									if(cff.cursor >= cff.data.get_length()) {
										offsize2 = 0;
									} else {
										var pos47 = cff.cursor++;
										if(pos47 == null) {
											pos47 = 0;
										}
										offsize2 = cff.data.readU8(pos47);
									}
									if(!(offsize2 >= 1 && offsize2 <= 4)) {
										throw new js__$Boot_HaxeError("Error");
									}
									var o10 = cff.cursor + offsize2 * count2;
									if(!(!(o10 > cff.data.get_length() || o10 < 0))) {
										throw new js__$Boot_HaxeError("Error");
									}
									cff.cursor = o10 > cff.data.get_length() || o10 < 0 ? cff.data.get_length() : o10;
									var v32 = 0;
									if(!(offsize2 >= 1 && offsize2 <= 4)) {
										throw new js__$Boot_HaxeError("Error");
									}
									var _g25 = 0;
									var _g110 = offsize2;
									while(_g25 < _g110) {
										++_g25;
										var v33;
										if(cff.cursor >= cff.data.get_length()) {
											v33 = 0;
										} else {
											var pos48 = cff.cursor++;
											if(pos48 == null) {
												pos48 = 0;
											}
											v33 = cff.data.readU8(pos48);
										}
										v32 = v32 << 8 | v33;
									}
									var o11 = cff.cursor + (v32 - 1);
									if(!(!(o11 > cff.data.get_length() || o11 < 0))) {
										throw new js__$Boot_HaxeError("Error");
									}
									cff.cursor = o11 > cff.data.get_length() || o11 < 0 ? cff.data.get_length() : o11;
									var s5 = cff.cursor - start5;
									var r10 = new kha_graphics2_truetype_Stbtt_$_$buf();
									r10.data = null;
									r10.cursor = 0;
									if(start5 < 0 || s5 < 0 || start5 > cff.data.get_length() || s5 > cff.data.get_length() - start5) {
										subrs = r10;
									} else {
										r10.data = cff.data.sub(start5,s5);
										subrs = r10;
									}
								} else {
									subrs = cff;
								}
							}
						}
					}
					has_subrs = true;
				}
			}
			if(sp < 1) {
				return false;
			}
			v = _g[--sp] | 0;
			if(subr_stack_height >= 10) {
				return false;
			}
			_g1[subr_stack_height++] = b;
			var idx = b0 == 10 ? subrs : info.gsubrs;
			var n = v;
			if(0 > idx.data.get_length()) {
				throw new js__$Boot_HaxeError("Error");
			}
			idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
			var v34 = 0;
			var _g26 = 0;
			while(_g26 < 2) {
				++_g26;
				var v35;
				if(idx.cursor >= idx.data.get_length()) {
					v35 = 0;
				} else {
					var pos49 = idx.cursor++;
					if(pos49 == null) {
						pos49 = 0;
					}
					v35 = idx.data.readU8(pos49);
				}
				v34 = v34 << 8 | v35;
			}
			var count3 = v34;
			var bias = 107;
			if(count3 >= 33900) {
				bias = 32768;
			} else if(count3 >= 1240) {
				bias = 1131;
			}
			n = v + bias;
			if(n < 0 || n >= count3) {
				var r11 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r11.data = null;
				r11.cursor = 0;
				b = r11;
			} else {
				if(0 > idx.data.get_length()) {
					throw new js__$Boot_HaxeError("Error");
				}
				idx.cursor = 0 > idx.data.get_length() ? idx.data.get_length() : 0;
				var v36 = 0;
				var _g27 = 0;
				while(_g27 < 2) {
					++_g27;
					var v37;
					if(idx.cursor >= idx.data.get_length()) {
						v37 = 0;
					} else {
						var pos50 = idx.cursor++;
						if(pos50 == null) {
							pos50 = 0;
						}
						v37 = idx.data.readU8(pos50);
					}
					v36 = v36 << 8 | v37;
				}
				var count4 = v36;
				var offsize3;
				if(idx.cursor >= idx.data.get_length()) {
					offsize3 = 0;
				} else {
					var pos51 = idx.cursor++;
					if(pos51 == null) {
						pos51 = 0;
					}
					offsize3 = idx.data.readU8(pos51);
				}
				if(!(n >= 0 && n < count4)) {
					throw new js__$Boot_HaxeError("Error");
				}
				if(!(offsize3 >= 1 && offsize3 <= 4)) {
					throw new js__$Boot_HaxeError("Error");
				}
				var o12 = idx.cursor + n * offsize3;
				if(!(!(o12 > idx.data.get_length() || o12 < 0))) {
					throw new js__$Boot_HaxeError("Error");
				}
				idx.cursor = o12 > idx.data.get_length() || o12 < 0 ? idx.data.get_length() : o12;
				var v38 = 0;
				if(!(offsize3 >= 1 && offsize3 <= 4)) {
					throw new js__$Boot_HaxeError("Error");
				}
				var _g28 = 0;
				var _g111 = offsize3;
				while(_g28 < _g111) {
					++_g28;
					var v39;
					if(idx.cursor >= idx.data.get_length()) {
						v39 = 0;
					} else {
						var pos52 = idx.cursor++;
						if(pos52 == null) {
							pos52 = 0;
						}
						v39 = idx.data.readU8(pos52);
					}
					v38 = v38 << 8 | v39;
				}
				var start6 = v38;
				var v40 = 0;
				if(!(offsize3 >= 1 && offsize3 <= 4)) {
					throw new js__$Boot_HaxeError("Error");
				}
				var _g29 = 0;
				var _g112 = offsize3;
				while(_g29 < _g112) {
					++_g29;
					var v41;
					if(idx.cursor >= idx.data.get_length()) {
						v41 = 0;
					} else {
						var pos53 = idx.cursor++;
						if(pos53 == null) {
							pos53 = 0;
						}
						v41 = idx.data.readU8(pos53);
					}
					v40 = v40 << 8 | v41;
				}
				var o13 = 2 + (count4 + 1) * offsize3 + start6;
				var s6 = v40 - start6;
				var r12 = new kha_graphics2_truetype_Stbtt_$_$buf();
				r12.data = null;
				r12.cursor = 0;
				if(o13 < 0 || s6 < 0 || o13 > idx.data.get_length() || s6 > idx.data.get_length() - o13) {
					b = r12;
				} else {
					r12.data = idx.data.sub(o13,s6);
					b = r12;
				}
			}
			if(b.data.get_length() == 0) {
				return false;
			}
			b.cursor = 0;
			clear_stack = false;
			break;
		case 30:
			if(sp < 4) {
				return false;
			}
			while(i + 3 < sp) {
				var cx126 = c.x;
				var cy126 = c.y + _g[i];
				var cx213 = cx126 + _g[i + 1];
				var cy213 = cy126 + _g[i + 2];
				c.x = cx213 + _g[i + 3];
				c.y = cy213 + (sp - i == 5 ? _g[i + 4] : 0);
				var x27 = c.x | 0;
				var y27 = c.y | 0;
				var cx33 = cx126 | 0;
				var cy33 = cy126 | 0;
				var cx127 = cx213 | 0;
				var cy127 = cy213 | 0;
				if(c.bounds) {
					if(x27 > c.max_x || !c.started) {
						c.max_x = x27;
					}
					if(y27 > c.max_y || !c.started) {
						c.max_y = y27;
					}
					if(x27 < c.min_x || !c.started) {
						c.min_x = x27;
					}
					if(y27 < c.min_y || !c.started) {
						c.min_y = y27;
					}
					c.started = true;
					if(cx33 > c.max_x || !c.started) {
						c.max_x = cx33;
					}
					if(cy33 > c.max_y || !c.started) {
						c.max_y = cy33;
					}
					if(cx33 < c.min_x || !c.started) {
						c.min_x = cx33;
					}
					if(cy33 < c.min_y || !c.started) {
						c.min_y = cy33;
					}
					c.started = true;
					if(cx127 > c.max_x || !c.started) {
						c.max_x = cx127;
					}
					if(cy127 > c.max_y || !c.started) {
						c.max_y = cy127;
					}
					if(cx127 < c.min_x || !c.started) {
						c.min_x = cx127;
					}
					if(cy127 < c.min_y || !c.started) {
						c.min_y = cy127;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x27,y27,cx33,cy33);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx127 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy127 , Int);
				}
				c.num_vertices++;
				i += 4;
				if(i + 3 >= sp) {
					break;
				}
				var cx128 = c.x + _g[i];
				var cy128 = c.y;
				var cx214 = cx128 + _g[i + 1];
				var cy214 = cy128 + _g[i + 2];
				c.x = cx214 + (sp - i == 5 ? _g[i + 4] : 0);
				c.y = cy214 + _g[i + 3];
				var x28 = c.x | 0;
				var y28 = c.y | 0;
				var cx34 = cx128 | 0;
				var cy34 = cy128 | 0;
				var cx129 = cx214 | 0;
				var cy129 = cy214 | 0;
				if(c.bounds) {
					if(x28 > c.max_x || !c.started) {
						c.max_x = x28;
					}
					if(y28 > c.max_y || !c.started) {
						c.max_y = y28;
					}
					if(x28 < c.min_x || !c.started) {
						c.min_x = x28;
					}
					if(y28 < c.min_y || !c.started) {
						c.min_y = y28;
					}
					c.started = true;
					if(cx34 > c.max_x || !c.started) {
						c.max_x = cx34;
					}
					if(cy34 > c.max_y || !c.started) {
						c.max_y = cy34;
					}
					if(cx34 < c.min_x || !c.started) {
						c.min_x = cx34;
					}
					if(cy34 < c.min_y || !c.started) {
						c.min_y = cy34;
					}
					c.started = true;
					if(cx129 > c.max_x || !c.started) {
						c.max_x = cx129;
					}
					if(cy129 > c.max_y || !c.started) {
						c.max_y = cy129;
					}
					if(cx129 < c.min_x || !c.started) {
						c.min_x = cx129;
					}
					if(cy129 < c.min_y || !c.started) {
						c.min_y = cy129;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x28,y28,cx34,cy34);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx129 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy129 , Int);
				}
				c.num_vertices++;
				i += 4;
			}
			break;
		case 31:
			if(sp < 4) {
				return false;
			}
			while(i + 3 < sp) {
				var cx130 = c.x + _g[i];
				var cy130 = c.y;
				var cx215 = cx130 + _g[i + 1];
				var cy215 = cy130 + _g[i + 2];
				c.x = cx215 + (sp - i == 5 ? _g[i + 4] : 0);
				c.y = cy215 + _g[i + 3];
				var x29 = c.x | 0;
				var y29 = c.y | 0;
				var cx35 = cx130 | 0;
				var cy35 = cy130 | 0;
				var cx131 = cx215 | 0;
				var cy131 = cy215 | 0;
				if(c.bounds) {
					if(x29 > c.max_x || !c.started) {
						c.max_x = x29;
					}
					if(y29 > c.max_y || !c.started) {
						c.max_y = y29;
					}
					if(x29 < c.min_x || !c.started) {
						c.min_x = x29;
					}
					if(y29 < c.min_y || !c.started) {
						c.min_y = y29;
					}
					c.started = true;
					if(cx35 > c.max_x || !c.started) {
						c.max_x = cx35;
					}
					if(cy35 > c.max_y || !c.started) {
						c.max_y = cy35;
					}
					if(cx35 < c.min_x || !c.started) {
						c.min_x = cx35;
					}
					if(cy35 < c.min_y || !c.started) {
						c.min_y = cy35;
					}
					c.started = true;
					if(cx131 > c.max_x || !c.started) {
						c.max_x = cx131;
					}
					if(cy131 > c.max_y || !c.started) {
						c.max_y = cy131;
					}
					if(cx131 < c.min_x || !c.started) {
						c.min_x = cx131;
					}
					if(cy131 < c.min_y || !c.started) {
						c.min_y = cy131;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x29,y29,cx35,cy35);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx131 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy131 , Int);
				}
				c.num_vertices++;
				i += 4;
				if(i + 3 >= sp) {
					break;
				}
				var cx132 = c.x;
				var cy132 = c.y + _g[i];
				var cx216 = cx132 + _g[i + 1];
				var cy216 = cy132 + _g[i + 2];
				c.x = cx216 + _g[i + 3];
				c.y = cy216 + (sp - i == 5 ? _g[i + 4] : 0);
				var x30 = c.x | 0;
				var y30 = c.y | 0;
				var cx36 = cx132 | 0;
				var cy36 = cy132 | 0;
				var cx133 = cx216 | 0;
				var cy133 = cy216 | 0;
				if(c.bounds) {
					if(x30 > c.max_x || !c.started) {
						c.max_x = x30;
					}
					if(y30 > c.max_y || !c.started) {
						c.max_y = y30;
					}
					if(x30 < c.min_x || !c.started) {
						c.min_x = x30;
					}
					if(y30 < c.min_y || !c.started) {
						c.min_y = y30;
					}
					c.started = true;
					if(cx36 > c.max_x || !c.started) {
						c.max_x = cx36;
					}
					if(cy36 > c.max_y || !c.started) {
						c.max_y = cy36;
					}
					if(cx36 < c.min_x || !c.started) {
						c.min_x = cx36;
					}
					if(cy36 < c.min_y || !c.started) {
						c.min_y = cy36;
					}
					c.started = true;
					if(cx133 > c.max_x || !c.started) {
						c.max_x = cx133;
					}
					if(cy133 > c.max_y || !c.started) {
						c.max_y = cy133;
					}
					if(cx133 < c.min_x || !c.started) {
						c.min_x = cx133;
					}
					if(cy133 < c.min_y || !c.started) {
						c.min_y = cy133;
					}
					c.started = true;
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt_setvertex(c.pvertices[c.num_vertices],4,x30,y30,cx36,cy36);
					c.pvertices[c.num_vertices].cx1 = js_Boot.__cast(cx133 , Int);
					c.pvertices[c.num_vertices].cy1 = js_Boot.__cast(cy133 , Int);
				}
				c.num_vertices++;
				i += 4;
			}
			break;
		default:
			if(b0 != 255 && b0 != 28 && (b0 < 32 || b0 > 254)) {
				return false;
			}
			if(b0 == 255) {
				var v42 = 0;
				var _g30 = 0;
				while(_g30 < 4) {
					++_g30;
					var v43;
					if(b.cursor >= b.data.get_length()) {
						v43 = 0;
					} else {
						var pos54 = b.cursor++;
						if(pos54 == null) {
							pos54 = 0;
						}
						v43 = b.data.readU8(pos54);
					}
					v42 = v42 << 8 | v43;
				}
				f = v42 / 65536;
			} else {
				var o14 = b.cursor + (-1);
				if(!(!(o14 > b.data.get_length() || o14 < 0))) {
					throw new js__$Boot_HaxeError("Error");
				}
				b.cursor = o14 > b.data.get_length() || o14 < 0 ? b.data.get_length() : o14;
				var b07;
				if(b.cursor >= b.data.get_length()) {
					b07 = 0;
				} else {
					var pos55 = b.cursor++;
					if(pos55 == null) {
						pos55 = 0;
					}
					b07 = b.data.readU8(pos55);
				}
				if(b07 >= 32 && b07 <= 246) {
					f = b07 - 139;
				} else if(b07 >= 247 && b07 <= 250) {
					var f1;
					if(b.cursor >= b.data.get_length()) {
						f1 = 0;
					} else {
						var pos56 = b.cursor++;
						if(pos56 == null) {
							pos56 = 0;
						}
						f1 = b.data.readU8(pos56);
					}
					f = (b07 - 247) * 256 + f1 + 108;
				} else if(b07 >= 251 && b07 <= 254) {
					var f2;
					if(b.cursor >= b.data.get_length()) {
						f2 = 0;
					} else {
						var pos57 = b.cursor++;
						if(pos57 == null) {
							pos57 = 0;
						}
						f2 = b.data.readU8(pos57);
					}
					f = -(b07 - 251) * 256 - f2 - 108;
				} else if(b07 == 28) {
					var v44 = 0;
					var _g31 = 0;
					while(_g31 < 2) {
						++_g31;
						var v45;
						if(b.cursor >= b.data.get_length()) {
							v45 = 0;
						} else {
							var pos58 = b.cursor++;
							if(pos58 == null) {
								pos58 = 0;
							}
							v45 = b.data.readU8(pos58);
						}
						v44 = v44 << 8 | v45;
					}
					f = v44;
				} else if(b07 == 29) {
					var v46 = 0;
					var _g32 = 0;
					while(_g32 < 4) {
						++_g32;
						var v47;
						if(b.cursor >= b.data.get_length()) {
							v47 = 0;
						} else {
							var pos59 = b.cursor++;
							if(pos59 == null) {
								pos59 = 0;
							}
							v47 = b.data.readU8(pos59);
						}
						v46 = v46 << 8 | v47;
					}
					f = v46;
				} else {
					throw new js__$Boot_HaxeError("Error");
				}
			}
			if(sp >= 48) {
				return false;
			}
			_g[sp++] = f;
			clear_stack = false;
		}
		if(clear_stack) {
			sp = 0;
		}
	}
	return false;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeT2 = function(info,glyph_index) {
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = true;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	var tmp1 = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp1.bounds = false;
	tmp1.started = false;
	tmp1.first_x = 0;
	tmp1.first_y = 0;
	tmp1.x = 0;
	tmp1.y = 0;
	tmp1.min_x = 0;
	tmp1.min_y = 0;
	tmp1.max_x = 0;
	tmp1.max_y = 0;
	tmp1.pvertices = null;
	tmp1.num_vertices = 0;
	if(kha_graphics2_truetype_StbTruetype.stbtt__run_charstring(info,glyph_index,tmp)) {
		tmp1.pvertices = new Array(tmp.num_vertices);
		var _g = 0;
		var _g1 = tmp.num_vertices;
		while(_g < _g1) tmp1.pvertices[_g++] = new kha_graphics2_truetype_Stbtt_$vertex();
		if(kha_graphics2_truetype_StbTruetype.stbtt__run_charstring(info,glyph_index,tmp1)) {
			if(tmp1.num_vertices != tmp.num_vertices) {
				throw new js__$Boot_HaxeError("Error");
			}
			return tmp1.pvertices;
		}
	}
	return null;
};
kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphInfoT2 = function(info,glyph_index,rect) {
	var tmp = new kha_graphics2_truetype_Stbtt_$_$csctx();
	tmp.bounds = true;
	tmp.started = false;
	tmp.first_x = 0;
	tmp.first_y = 0;
	tmp.x = 0;
	tmp.y = 0;
	tmp.min_x = 0;
	tmp.min_y = 0;
	tmp.max_x = 0;
	tmp.max_y = 0;
	tmp.pvertices = null;
	tmp.num_vertices = 0;
	var r = kha_graphics2_truetype_StbTruetype.stbtt__run_charstring(info,glyph_index,tmp);
	if(rect != null) {
		rect.x0 = r ? tmp.min_x : 0;
		rect.y0 = r ? tmp.min_y : 0;
		rect.x1 = r ? tmp.max_x : 0;
		rect.y1 = r ? tmp.max_y : 0;
	}
	if(r) {
		return tmp.num_vertices;
	} else {
		return 0;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape = function(info,glyph_index) {
	if(info.cff.data == null || info.cff.data.get_length() == 0) {
		return kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeTT(info,glyph_index);
	} else {
		return kha_graphics2_truetype_StbTruetype.stbtt__GetGlyphShapeT2(info,glyph_index);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics = function(info,glyph_index) {
	var p = info.data;
	var pos = info.hhea + 34;
	if(pos == null) {
		pos = 0;
	}
	var numOfLongHorMetrics = p.readU8(pos + 1) | p.readU8(pos) << 8;
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$glyph_$h_$metrics();
	if(glyph_index < numOfLongHorMetrics) {
		var p1 = info.data;
		var pos1 = info.hmtx + 4 * glyph_index;
		if(pos1 == null) {
			pos1 = 0;
		}
		var n = p1.readU8(pos1 + 1) | p1.readU8(pos1) << 8;
		metrics.advanceWidth = (n & 32768) != 0 ? n - 65536 : n;
		var p2 = info.data;
		var pos2 = info.hmtx + 4 * glyph_index + 2;
		if(pos2 == null) {
			pos2 = 0;
		}
		var n1 = p2.readU8(pos2 + 1) | p2.readU8(pos2) << 8;
		metrics.leftSideBearing = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	} else {
		var p3 = info.data;
		var pos3 = info.hmtx + 4 * (numOfLongHorMetrics - 1);
		if(pos3 == null) {
			pos3 = 0;
		}
		var n2 = p3.readU8(pos3 + 1) | p3.readU8(pos3) << 8;
		metrics.advanceWidth = (n2 & 32768) != 0 ? n2 - 65536 : n2;
		var p4 = info.data;
		var pos4 = info.hmtx + 4 * numOfLongHorMetrics + 2 * (glyph_index - numOfLongHorMetrics);
		if(pos4 == null) {
			pos4 = 0;
		}
		var n3 = p4.readU8(pos4 + 1) | p4.readU8(pos4) << 8;
		metrics.leftSideBearing = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	}
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance = function(info,glyph1,glyph2) {
	var kern = info.kern;
	var data = info.data;
	var straw;
	var m;
	if(info.kern == 0) {
		return 0;
	}
	var pos = kern + 2;
	if(pos == null) {
		pos = 0;
	}
	if((data.readU8(pos + 1) | data.readU8(pos) << 8) < 1) {
		return 0;
	}
	var pos1 = kern + 8;
	if(pos1 == null) {
		pos1 = 0;
	}
	if((data.readU8(pos1 + 1) | data.readU8(pos1) << 8) != 1) {
		return 0;
	}
	var l = 0;
	var pos2 = kern + 10;
	if(pos2 == null) {
		pos2 = 0;
	}
	var r = (data.readU8(pos2 + 1) | data.readU8(pos2) << 8) - 1;
	var needle = glyph1 << 16 | glyph2;
	while(l <= r) {
		m = l + r >> 1;
		var pos3 = kern + 18 + m * 6;
		if(pos3 == null) {
			pos3 = 0;
		}
		var pos4 = pos3;
		if(pos4 == null) {
			pos4 = 0;
		}
		straw = data.readU8(pos4 + 3) | data.readU8(pos4 + 2) << 8 | data.readU8(pos4 + 1) << 16 | data.readU8(pos4) << 24;
		if(needle < straw) {
			r = m - 1;
		} else if(needle > straw) {
			l = m + 1;
		} else {
			var pos5 = kern + 22 + m * 6;
			if(pos5 == null) {
				pos5 = 0;
			}
			var n = data.readU8(pos5 + 1) | data.readU8(pos5) << 8;
			if((n & 32768) != 0) {
				return n - 65536;
			} else {
				return n;
			}
		}
	}
	return 0;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointKernAdvance = function(info,ch1,ch2) {
	if(info.kern == 0) {
		return 0;
	}
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphKernAdvance(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch1),kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,ch2));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointHMetrics = function(info,codepoint) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(info,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontVMetrics = function(info) {
	var metrics = new kha_graphics2_truetype_Stbtt_$temp_$font_$v_$metrics();
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos + 1) | p.readU8(pos) << 8;
	metrics.ascent = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	if(pos1 == null) {
		pos1 = 0;
	}
	var n1 = p1.readU8(pos1 + 1) | p1.readU8(pos1) << 8;
	metrics.descent = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = info.hhea + 8;
	if(pos2 == null) {
		pos2 = 0;
	}
	var n2 = p2.readU8(pos2 + 1) | p2.readU8(pos2) << 8;
	metrics.lineGap = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	return metrics;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetFontBoundingBox = function(info) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	var p = info.data;
	var pos = info.head + 36;
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos + 1) | p.readU8(pos) << 8;
	rect.x0 = (n & 32768) != 0 ? n - 65536 : n;
	var p1 = info.data;
	var pos1 = info.head + 38;
	if(pos1 == null) {
		pos1 = 0;
	}
	var n1 = p1.readU8(pos1 + 1) | p1.readU8(pos1) << 8;
	rect.y0 = (n1 & 32768) != 0 ? n1 - 65536 : n1;
	var p2 = info.data;
	var pos2 = info.head + 40;
	if(pos2 == null) {
		pos2 = 0;
	}
	var n2 = p2.readU8(pos2 + 1) | p2.readU8(pos2) << 8;
	rect.x1 = (n2 & 32768) != 0 ? n2 - 65536 : n2;
	var p3 = info.data;
	var pos3 = info.head + 42;
	if(pos3 == null) {
		pos3 = 0;
	}
	var n3 = p3.readU8(pos3 + 1) | p3.readU8(pos3) << 8;
	rect.y1 = (n3 & 32768) != 0 ? n3 - 65536 : n3;
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight = function(info,height) {
	var p = info.data;
	var pos = info.hhea + 4;
	if(pos == null) {
		pos = 0;
	}
	var n = p.readU8(pos + 1) | p.readU8(pos) << 8;
	var p1 = info.data;
	var pos1 = info.hhea + 6;
	if(pos1 == null) {
		pos1 = 0;
	}
	var n1 = p1.readU8(pos1 + 1) | p1.readU8(pos1) << 8;
	return height / (((n & 32768) != 0 ? n - 65536 : n) - ((n1 & 32768) != 0 ? n1 - 65536 : n1));
};
kha_graphics2_truetype_StbTruetype.stbtt_ScaleForMappingEmToPixels = function(info,pixels) {
	var p = info.data;
	var pos = info.head + 18;
	if(pos == null) {
		pos = 0;
	}
	return pixels / (p.readU8(pos + 1) | p.readU8(pos) << 8);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel = function(font,glyph,scale_x,scale_y,shift_x,shift_y) {
	var rect = new kha_graphics2_truetype_Stbtt_$temp_$rect();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBox(font,glyph,rect)) {
		rect.x0 = 0;
		rect.y0 = 0;
		rect.x1 = 0;
		rect.y1 = 0;
	} else {
		var y0 = rect.y0;
		rect.x0 = Math.floor(rect.x0 * scale_x + shift_x);
		rect.y0 = Math.floor(-rect.y1 * scale_y + shift_y);
		rect.x1 = Math.ceil(rect.x1 * scale_x + shift_x);
		rect.y1 = Math.ceil(-y0 * scale_y + shift_y);
	}
	return rect;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox = function(font,glyph,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,glyph,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel = function(font,codepoint,scale_x,scale_y,shift_x,shift_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(font,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(font,codepoint),scale_x,scale_y,shift_x,shift_y);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBox = function(font,codepoint,scale_x,scale_y) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapBoxSubpixel(font,codepoint,scale_x,scale_y,0.0,0.0);
};
kha_graphics2_truetype_StbTruetype.stbtt__new_active = function(e,eIndex,off_x,start_point) {
	var z = new kha_graphics2_truetype_Stbtt_$_$active_$edge();
	var dxdy = (e[eIndex].x1 - e[eIndex].x0) / (e[eIndex].y1 - e[eIndex].y0);
	if(z == null) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(z == null) {
		return z;
	}
	z.fdx = dxdy;
	z.fdy = dxdy != 0.0 ? 1.0 / dxdy : 0.0;
	z.fx = e[eIndex].x0 + dxdy * (start_point - e[eIndex].y0);
	z.fx -= off_x;
	z.direction = e[eIndex].invert ? 1.0 : -1.0;
	z.sy = e[eIndex].y0;
	z.ey = e[eIndex].y1;
	z.next = null;
	return z;
};
kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge = function(scanline,scanlineIndex,x,e,x0,y0,x1,y1) {
	if(y0 == y1) {
		return;
	}
	if(!(y0 < y1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(!(e.sy <= e.ey)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(y0 > e.ey) {
		return;
	}
	if(y1 < e.sy) {
		return;
	}
	if(y0 < e.sy) {
		x0 += (x1 - x0) * (e.sy - y0) / (y1 - y0);
		y0 = e.sy;
	}
	if(y1 > e.ey) {
		x1 += (x1 - x0) * (e.ey - y1) / (y1 - y0);
		y1 = e.ey;
	}
	if(x0 == x) {
		if(!(x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 == x + 1) {
		if(!(x1 >= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 <= x) {
		if(!(x1 <= x)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(x0 >= x + 1) {
		if(!(x1 >= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
	} else if(!(x1 >= x && x1 <= x + 1)) {
		throw new js__$Boot_HaxeError("Error");
	}
	if(x0 <= x && x1 <= x) {
		var _g = scanlineIndex + x;
		scanline[_g] = scanline[_g] + e.direction * (y1 - y0);
	} else if(!(x0 >= x + 1 && x1 >= x + 1)) {
		if(!(x0 >= x && x0 <= x + 1 && x1 >= x && x1 <= x + 1)) {
			throw new js__$Boot_HaxeError("Error");
		}
		var _g1 = scanlineIndex + x;
		scanline[_g1] = scanline[_g1] + e.direction * (y1 - y0) * (1 - (x0 - x + (x1 - x)) / 2);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new = function(scanline,scanline_fill,scanline_fillIndex,len,e,y_top) {
	var y_bottom = y_top + 1;
	while(e != null) {
		if(!(e.ey >= y_top)) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(e.fdx == 0) {
			var x0 = e.fx;
			if(x0 < len) {
				if(x0 >= 0) {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x0 | 0,e,x0,y_top,x0,y_bottom);
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,x0 + 1 | 0,e,x0,y_top,x0,y_bottom);
				} else {
					kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline_fill,scanline_fillIndex - 1,0,e,x0,y_top,x0,y_bottom);
				}
			}
		} else {
			var x01 = e.fx;
			var dx = e.fdx;
			var xb = x01 + dx;
			var x_top;
			var x_bottom;
			var sy0;
			var sy1;
			var dy = e.fdy;
			if(!(e.sy <= y_bottom && e.ey >= y_top)) {
				throw new js__$Boot_HaxeError("Error");
			}
			if(e.sy > y_top) {
				x_top = x01 + dx * (e.sy - y_top);
				sy0 = e.sy;
			} else {
				x_top = x01;
				sy0 = y_top;
			}
			if(e.ey < y_bottom) {
				x_bottom = x01 + dx * (e.ey - y_top);
				sy1 = e.ey;
			} else {
				x_bottom = xb;
				sy1 = y_bottom;
			}
			if(x_top >= 0 && x_bottom >= 0 && x_top < len && x_bottom < len) {
				if((x_top | 0) == (x_bottom | 0)) {
					var x = x_top | 0;
					var height = sy1 - sy0;
					if(!(x >= 0 && x < len)) {
						throw new js__$Boot_HaxeError("Error");
					}
					scanline[x] = scanline[x] + e.direction * (1 - (x_top - x + (x_bottom - x)) / 2) * height;
					var _g = scanline_fillIndex + x;
					scanline_fill[_g] = scanline_fill[_g] + e.direction * height;
				} else {
					if(x_top > x_bottom) {
						sy0 = y_bottom - (sy0 - y_top);
						sy1 = y_bottom - (sy1 - y_top);
						var t = sy0;
						sy0 = sy1;
						sy1 = t;
						t = x_bottom;
						x_bottom = x_top;
						x_top = t;
						dx = -dx;
						dy = -dy;
						t = x01;
						x01 = xb;
						xb = t;
					}
					var x1 = x_top | 0;
					var x2 = x_bottom | 0;
					var y_crossing = (x1 + 1 - x01) * dy + y_top;
					var sign = e.direction;
					var area = sign * (y_crossing - sy0);
					scanline[x1] = scanline[x1] + area * (1 - (x_top - x1 + (x1 + 1 - x1)) / 2);
					var step = sign * dy;
					var _g1 = x1 + 1;
					while(_g1 < x2) {
						var x3 = _g1++;
						scanline[x3] = scanline[x3] + (area + step / 2);
						area += step;
					}
					y_crossing += dy * (x2 - (x1 + 1));
					if(!(Math.abs(area) <= 1.01)) {
						throw new js__$Boot_HaxeError("Error");
					}
					scanline[x2] = scanline[x2] + (area + sign * (1 - (x2 - x2 + (x_bottom - x2)) / 2) * (sy1 - y_crossing));
					var _g2 = scanline_fillIndex + x2;
					scanline_fill[_g2] = scanline_fill[_g2] + sign * (sy1 - sy0);
				}
			} else {
				var _g3 = 0;
				while(_g3 < len) {
					var x4 = _g3++;
					var x11 = x4;
					var x21 = x4 + 1;
					var x31 = xb;
					var y1 = (x4 - x01) / dx + y_top;
					var y2 = (x4 + 1 - x01) / dx + y_top;
					if(x01 < x11 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x11,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x11,y1,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y_bottom);
					} else if(x31 < x11 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x11,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x11,y1,x31,y_bottom);
					} else if(x01 < x11 && x31 > x11) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x11,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x11,y1,x31,y_bottom);
					} else if(x31 < x11 && x01 > x11) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x11,y1);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x11,y1,x31,y_bottom);
					} else if(x01 < x21 && x31 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y_bottom);
					} else if(x31 < x21 && x01 > x21) {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x21,y2);
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x21,y2,x31,y_bottom);
					} else {
						kha_graphics2_truetype_StbTruetype.stbtt__handle_clipped_edge(scanline,0,x4,e,x01,y_top,x31,y_bottom);
					}
				}
			}
		}
		e = e.next;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges = function(result,e,n,vsubsample,off_x,off_y) {
	var active = null;
	var j = 0;
	var scanline;
	var scanline2Index = 0;
	var eIndex = 0;
	if(result.w > 64) {
		scanline = new Array(result.w * 2 + 1);
	} else {
		scanline = new Array(129);
	}
	var scanline2 = scanline;
	scanline2Index = result.w;
	var y = off_y;
	e[n].y0 = off_y + result.h + 1;
	while(j < result.h) {
		var scan_y_top = y + 0.0;
		var scan_y_bottom = y + 1.0;
		var step_value = active;
		var step_parent = null;
		var _g = 0;
		var _g1 = result.w;
		while(_g < _g1) scanline[_g++] = 0;
		var _g2 = 0;
		var _g3 = result.w + 1;
		while(_g2 < _g3) scanline2[scanline2Index + _g2++] = 0;
		while(step_value != null) {
			var z = step_value;
			if(z.ey <= scan_y_top) {
				if(step_parent == null) {
					active = z.next;
					step_value = z.next;
				} else {
					step_parent.next = z.next;
					step_value = z.next;
				}
				if(z.direction == 0) {
					throw new js__$Boot_HaxeError("Error");
				}
				z.direction = 0;
			} else {
				step_parent = step_value;
				step_value = step_value.next;
			}
		}
		while(e[eIndex].y0 <= scan_y_bottom) {
			if(e[eIndex].y0 != e[eIndex].y1) {
				var z1 = kha_graphics2_truetype_StbTruetype.stbtt__new_active(e,eIndex,off_x,scan_y_top);
				if(!(z1.ey >= scan_y_top)) {
					throw new js__$Boot_HaxeError("Error");
				}
				if(z1 != null) {
					if(j == 0 && off_y != 0) {
						if(z1.ey < scan_y_top) {
							z1.ey = scan_y_top;
						}
					}
					if(!(z1.ey >= scan_y_top)) {
						throw new js__$Boot_HaxeError("Error");
					}
				}
				z1.next = active;
				active = z1;
			}
			++eIndex;
		}
		if(active != null) {
			kha_graphics2_truetype_StbTruetype.stbtt__fill_active_edges_new(scanline,scanline2,scanline2Index + 1,result.w,active,scan_y_top);
		}
		var sum = 0;
		var _g4 = 0;
		var _g5 = result.w;
		while(_g4 < _g5) {
			var i = _g4++;
			sum += scanline2[scanline2Index + i];
			var k = scanline[i] + sum;
			k = Math.abs(k) * 255.0 + 0.5;
			var m = k | 0;
			if(m > 255) {
				m = 255;
			}
			result.pixels.writeU8(result.pixels_offset + j * result.stride + i,m);
		}
		step_parent = null;
		step_value = active;
		while(step_value != null) {
			var z2 = step_value;
			z2.fx += z2.fdx;
			step_parent = step_value;
			step_value = step_value.next;
		}
		++y;
		++j;
	}
};
kha_graphics2_truetype_StbTruetype.STBTT__COMPARE = function(a,b) {
	return a.y0 < b.y0;
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort = function(p,n) {
	var j;
	var _g = 1;
	while(_g < n) {
		var i = _g++;
		var t = p[i];
		j = i;
		while(j > 0) {
			if(!kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(t,p[j - 1])) {
				break;
			}
			p[j] = p[j - 1];
			--j;
		}
		if(i != j) {
			p[j] = t;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort = function(p,pIndex,n) {
	while(n > 12) {
		var t;
		var c;
		var m = n >> 1;
		var c12 = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + m],p[pIndex + n - 1]);
		if(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + m]) != c12) {
			c = kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + n - 1]);
			var z = c == c12 ? 0 : n - 1;
			t = p[pIndex + z];
			p[pIndex + z] = p[pIndex + m];
			p[pIndex + m] = t;
		}
		t = p[pIndex];
		p[pIndex] = p[pIndex + m];
		p[pIndex + m] = t;
		var i = 1;
		var j = n - 1;
		while(true) {
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex + i],p[pIndex])) ++i;
			while(kha_graphics2_truetype_StbTruetype.STBTT__COMPARE(p[pIndex],p[pIndex + j])) --j;
			if(i >= j) {
				break;
			}
			t = p[pIndex + i];
			p[pIndex + i] = p[pIndex + j];
			p[pIndex + j] = t;
			++i;
			--j;
		}
		if(j < n - i) {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex,j);
			pIndex += i;
			n -= i;
		} else {
			kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,pIndex + i,n - i);
			n = j;
		}
	}
};
kha_graphics2_truetype_StbTruetype.stbtt__sort_edges = function(p,n) {
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_quicksort(p,0,n);
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges_ins_sort(p,n);
};
kha_graphics2_truetype_StbTruetype.stbtt__rasterize = function(result,pts,wcount,windings,scale_x,scale_y,shift_x,shift_y,off_x,off_y,invert) {
	var y_scale_inv = invert ? -scale_y : scale_y;
	var j;
	var n = 0;
	var _g = 0;
	while(_g < windings) n += wcount[_g++];
	var e = new Array(n + 1);
	if(e == null) {
		return;
	} else {
		var _g2 = 0;
		var _g3 = e.length;
		while(_g2 < _g3) e[_g2++] = new kha_graphics2_truetype_Stbtt_$_$edge();
	}
	n = 0;
	var m = 0;
	var _g21 = 0;
	while(_g21 < windings) {
		var i = _g21++;
		var pIndex = m;
		m += wcount[i];
		j = wcount[i] - 1;
		var _g22 = 0;
		var _g31 = wcount[i];
		while(_g22 < _g31) {
			var k = _g22++;
			var a = k;
			var b = j;
			if(pts[pIndex + j].y == pts[pIndex + k].y) {
				j = k;
				continue;
			}
			e[n].invert = false;
			if(invert ? pts[pIndex + j].y > pts[pIndex + k].y : pts[pIndex + j].y < pts[pIndex + k].y) {
				e[n].invert = true;
				a = j;
				b = k;
			}
			e[n].x0 = pts[pIndex + a].x * scale_x + shift_x;
			e[n].y0 = pts[pIndex + a].y * y_scale_inv + shift_y;
			e[n].x1 = pts[pIndex + b].x * scale_x + shift_x;
			e[n].y1 = pts[pIndex + b].y * y_scale_inv + shift_y;
			++n;
			j = k;
		}
	}
	kha_graphics2_truetype_StbTruetype.stbtt__sort_edges(e,n);
	kha_graphics2_truetype_StbTruetype.stbtt__rasterize_sorted_edges(result,e,n,1,off_x,off_y);
};
kha_graphics2_truetype_StbTruetype.stbtt__add_point = function(points,n,x,y) {
	if(points == null) {
		return;
	}
	points[n].x = x;
	points[n].y = y;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve = function(points,num_points,x0,y0,x1,y1,x2,y2,objspace_flatness_squared,n) {
	var mx = (x0 + 2 * x1 + x2) / 4;
	var my = (y0 + 2 * y1 + y2) / 4;
	var dx = (x0 + x2) / 2 - mx;
	var dy = (y0 + y2) / 2 - my;
	if(n > 16) {
		return 1;
	}
	if(dx * dx + dy * dy > objspace_flatness_squared) {
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,x0,y0,(x0 + x1) / 2.0,(y0 + y1) / 2.0,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points,mx,my,(x1 + x2) / 2.0,(y1 + y2) / 2.0,x2,y2,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x2,y2);
		num_points.value += 1;
	}
	return 1;
};
kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic = function(points,num_points,x0,y0,x1,y1,x2,y2,x3,y3,objspace_flatness_squared,n) {
	var dx0 = x1 - x0;
	var dy0 = y1 - y0;
	var dx1 = x2 - x1;
	var dy1 = y2 - y1;
	var dx2 = x3 - x2;
	var dy2 = y3 - y2;
	var dx = x3 - x0;
	var dy = y3 - y0;
	var longlen = Math.sqrt(dx0 * dx0 + dy0 * dy0) + Math.sqrt(dx1 * dx1 + dy1 * dy1) + Math.sqrt(dx2 * dx2 + dy2 * dy2);
	var shortlen = Math.sqrt(dx * dx + dy * dy);
	if(n > 16) {
		return;
	}
	if(longlen * longlen - shortlen * shortlen > objspace_flatness_squared) {
		var x01 = (x0 + x1) / 2;
		var y01 = (y0 + y1) / 2;
		var x12 = (x1 + x2) / 2;
		var y12 = (y1 + y2) / 2;
		var x23 = (x2 + x3) / 2;
		var y23 = (y2 + y3) / 2;
		var xa = (x01 + x12) / 2;
		var ya = (y01 + y12) / 2;
		var xb = (x12 + x23) / 2;
		var yb = (y12 + y23) / 2;
		var mx = (xa + xb) / 2;
		var my = (ya + yb) / 2;
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic(points,num_points,x0,y0,x01,y01,xa,ya,mx,my,objspace_flatness_squared,n + 1);
		kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic(points,num_points,mx,my,xb,yb,x23,y23,x3,y3,objspace_flatness_squared,n + 1);
	} else {
		kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points.value,x3,y3);
		num_points.value += 1;
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves = function(vertices,num_verts,objspace_flatness,contour_lengths,num_contours) {
	var points = null;
	var num_points = 0;
	var objspace_flatness_squared = objspace_flatness * objspace_flatness;
	var n = 0;
	var start = 0;
	var _g = 0;
	while(_g < num_verts) if(vertices[_g++].type == 1) {
		++n;
	}
	num_contours.value = n;
	if(n == 0) {
		return null;
	}
	contour_lengths.value = new Array(n);
	if(contour_lengths.value == null) {
		num_contours.value = 0;
		return null;
	}
	var _g2 = 0;
	while(_g2 < 2) {
		var x = 0;
		var y = 0;
		if(_g2++ == 1) {
			points = new Array(num_points);
			if(points == null) {
				contour_lengths.value = null;
				num_contours.value = 0;
				return null;
			} else {
				var _g21 = 0;
				var _g3 = points.length;
				while(_g21 < _g3) points[_g21++] = new kha_graphics2_truetype_Stbtt_$_$point();
			}
		}
		num_points = 0;
		n = -1;
		var _g22 = 0;
		while(_g22 < num_verts) {
			var i = _g22++;
			switch(vertices[i].type) {
			case 1:
				if(n >= 0) {
					contour_lengths.value[n] = num_points - start;
				}
				++n;
				start = num_points;
				x = vertices[i].x;
				y = vertices[i].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 2:
				x = vertices[i].x;
				y = vertices[i].y;
				kha_graphics2_truetype_StbTruetype.stbtt__add_point(points,num_points++,x,y);
				break;
			case 3:
				var num_points_reference = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_curve(points,num_points_reference,x,y,vertices[i].cx,vertices[i].cy,vertices[i].x,vertices[i].y,objspace_flatness_squared,0);
				num_points = num_points_reference.value;
				x = vertices[i].x;
				y = vertices[i].y;
				break;
			case 4:
				var num_points_reference1 = { value : num_points};
				kha_graphics2_truetype_StbTruetype.stbtt__tesselate_cubic(points,num_points_reference1,x,y,vertices[i].cx,vertices[i].cy,vertices[i].cx1,vertices[i].cy1,vertices[i].x,vertices[i].y,objspace_flatness_squared,0);
				num_points = num_points_reference1.value;
				x = vertices[i].x;
				y = vertices[i].y;
				break;
			}
		}
		contour_lengths.value[n] = num_points - start;
	}
	return points;
};
kha_graphics2_truetype_StbTruetype.stbtt_Rasterize = function(result,flatness_in_pixels,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert) {
	var winding_count = 0;
	var winding_lengths = null;
	var winding_count_reference = { value : 0};
	var winding_lengths_reference = new kha_graphics2_truetype_VectorOfIntPointer();
	var windings = kha_graphics2_truetype_StbTruetype.stbtt_FlattenCurves(vertices,num_verts,flatness_in_pixels / (scale_x > scale_y ? scale_y : scale_x),winding_lengths_reference,winding_count_reference);
	winding_count = winding_count_reference.value;
	winding_lengths = winding_lengths_reference.value;
	if(windings != null) {
		kha_graphics2_truetype_StbTruetype.stbtt__rasterize(result,windings,winding_lengths,winding_count,scale_x,scale_y,shift_x,shift_y,x_off,y_off,invert);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,glyph,region) {
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices.length;
	if(scale_x == 0) {
		scale_x = scale_y;
	}
	if(scale_y == 0) {
		if(scale_x == 0) {
			return null;
		}
		scale_y = scale_x;
	}
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	var ix0 = rect.x0;
	var iy0 = rect.y0;
	gbm.w = rect.x1 - ix0;
	gbm.h = rect.y1 - iy0;
	gbm.pixels = null;
	region.width = gbm.w;
	region.height = gbm.h;
	region.xoff = ix0;
	region.yoff = iy0;
	if(gbm.w != 0 && gbm.h != 0) {
		gbm.pixels = kha_internal_BytesBlob.alloc(gbm.w * gbm.h);
		if(gbm.pixels != null) {
			gbm.stride = gbm.w;
			kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
		}
	}
	return gbm.pixels;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmap = function(info,scale_x,scale_y,glyph,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,glyph,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,glyph) {
	var ix0 = 0;
	var iy0 = 0;
	var vertices = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphShape(info,glyph);
	var num_verts = vertices == null ? 0 : vertices.length;
	var gbm = new kha_graphics2_truetype_Stbtt_$_$bitmap();
	var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBoxSubpixel(info,glyph,scale_x,scale_y,shift_x,shift_y);
	ix0 = rect.x0;
	iy0 = rect.y0;
	gbm.pixels = output;
	gbm.pixels_offset = output_offset;
	gbm.w = out_w;
	gbm.h = out_h;
	gbm.stride = out_stride;
	if(gbm.w != 0 && gbm.h != 0) {
		kha_graphics2_truetype_StbTruetype.stbtt_Rasterize(gbm,0.35,vertices,num_verts,scale_x,scale_y,shift_x,shift_y,ix0,iy0,true);
	}
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,glyph) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,glyph);
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel = function(info,scale_x,scale_y,shift_x,shift_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapSubpixel(info,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint),region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,shift_x,shift_y,kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(info,codepoint));
};
kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmap = function(info,scale_x,scale_y,codepoint,region) {
	return kha_graphics2_truetype_StbTruetype.stbtt_GetCodepointBitmapSubpixel(info,scale_x,scale_y,0.0,0.0,codepoint,region);
};
kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmap = function(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,codepoint) {
	kha_graphics2_truetype_StbTruetype.stbtt_MakeCodepointBitmapSubpixel(info,output,output_offset,out_w,out_h,out_stride,scale_x,scale_y,0.0,0.0,codepoint);
};
kha_graphics2_truetype_StbTruetype.stbtt_BakeFontBitmap = function(data,offset,pixel_height,pixels,pw,ph,chars,chardata) {
	var f = new kha_graphics2_truetype_Stbtt_$fontinfo();
	if(!kha_graphics2_truetype_StbTruetype.stbtt_InitFont(f,data,offset)) {
		return -1;
	}
	var y = 1;
	var x = 1;
	var bottom_y = 1;
	var scale = kha_graphics2_truetype_StbTruetype.stbtt_ScaleForPixelHeight(f,pixel_height);
	var i = 0;
	var _g = 0;
	while(_g < chars.length) {
		var g = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,chars[_g++]);
		var advance = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphHMetrics(f,g).advanceWidth;
		var rect = kha_graphics2_truetype_StbTruetype.stbtt_GetGlyphBitmapBox(f,g,scale,scale);
		var x0 = rect.x0;
		var y0 = rect.y0;
		var gw = rect.x1 - x0;
		var gh = rect.y1 - y0;
		if(x + gw + 1 >= pw) {
			y = bottom_y;
			x = 1;
		}
		if(y + gh + 1 >= ph) {
			return -i;
		}
		if(x + gw >= pw) {
			throw new js__$Boot_HaxeError("Error");
		}
		if(y + gh >= ph) {
			throw new js__$Boot_HaxeError("Error");
		}
		chardata[i].x0 = x;
		chardata[i].y0 = y;
		chardata[i].x1 = x + gw;
		chardata[i].y1 = y + gh;
		chardata[i].xadvance = scale * advance;
		chardata[i].xoff = x0;
		chardata[i].yoff = y0;
		x = x + gw + 1;
		if(y + gh + 1 > bottom_y) {
			bottom_y = y + gh + 1;
		}
		++i;
	}
	var _g1 = 0;
	var _g2 = pw * ph;
	while(_g1 < _g2) pixels.writeU8(_g1++,0);
	i = 0;
	var ch;
	var _g3 = 0;
	while(_g3 < chars.length) {
		var g1 = kha_graphics2_truetype_StbTruetype.stbtt_FindGlyphIndex(f,chars[_g3++]);
		ch = chardata[i];
		kha_graphics2_truetype_StbTruetype.stbtt_MakeGlyphBitmap(f,pixels,ch.x0 + ch.y0 * pw,ch.x1 - ch.x0,ch.y1 - ch.y0,pw,scale,scale,g1);
		++i;
	}
	return bottom_y;
};
kha_graphics2_truetype_StbTruetype.stbtt_GetBakedQuad = function(chardata,pw,ph,char_index,xpos,ypos,q,opengl_fillrule) {
	var d3d_bias = opengl_fillrule ? 0 : -0.5;
	var ipw = 1.0 / pw;
	var iph = 1.0 / ph;
	var b = chardata[char_index];
	var round_x = Math.floor(xpos.value + b.xoff + 0.5);
	var round_y = Math.floor(ypos.value + b.yoff + 0.5);
	q.x0 = round_x + d3d_bias;
	q.y0 = round_y + d3d_bias;
	q.x1 = round_x + b.x1 - b.x0 + d3d_bias;
	q.y1 = round_y + b.y1 - b.y0 + d3d_bias;
	q.s0 = b.x0 * ipw;
	q.t0 = b.y0 * iph;
	q.s1 = b.x1 * ipw;
	q.t1 = b.y1 * iph;
	xpos.value += b.xadvance;
};
var kha_graphics4_ConstantLocation = function() { };
$hxClasses["kha.graphics4.ConstantLocation"] = kha_graphics4_ConstantLocation;
kha_graphics4_ConstantLocation.__name__ = "kha.graphics4.ConstantLocation";
kha_graphics4_ConstantLocation.__isInterface__ = true;
var kha_graphics4_CubeMap = function(size,format,renderTarget,depthStencilFormat) {
	this.isDepthAttachment = false;
	this.depthTexture = null;
	this.texture = null;
	this.frameBuffer = null;
	this.myWidth = size;
	this.myHeight = size;
	this.format = format;
	this.renderTarget = renderTarget;
	this.depthStencilFormat = depthStencilFormat;
	if(renderTarget) {
		this.createTexture();
	}
};
$hxClasses["kha.graphics4.CubeMap"] = kha_graphics4_CubeMap;
kha_graphics4_CubeMap.__name__ = "kha.graphics4.CubeMap";
kha_graphics4_CubeMap.__interfaces__ = [kha_Resource,kha_Canvas];
kha_graphics4_CubeMap.createRenderTarget = function(size,format,depthStencil,contextId) {
	if(contextId == null) {
		contextId = 0;
	}
	if(format == null) {
		format = 0;
	}
	if(depthStencil == null) {
		depthStencil = 0;
	}
	return new kha_graphics4_CubeMap(size,format,true,depthStencil);
};
kha_graphics4_CubeMap.prototype = {
	myWidth: null
	,myHeight: null
	,format: null
	,renderTarget: null
	,depthStencilFormat: null
	,graphics4: null
	,frameBuffer: null
	,texture: null
	,depthTexture: null
	,isDepthAttachment: null
	,createTexture: function() {
		if(kha_SystemImpl.gl == null) {
			return;
		}
		this.texture = kha_SystemImpl.gl.createTexture();
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
		kha_SystemImpl.gl.texParameteri(34067,10240,9729);
		kha_SystemImpl.gl.texParameteri(34067,10241,9729);
		kha_SystemImpl.gl.texParameteri(34067,10242,33071);
		kha_SystemImpl.gl.texParameteri(34067,10243,33071);
		if(this.renderTarget) {
			this.frameBuffer = kha_SystemImpl.gl.createFramebuffer();
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			switch(this.format) {
			case 0:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				break;
			case 2:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34836 : 6408,this.myWidth,this.myHeight,0,6408,5126,null);
				break;
			case 3:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
				break;
			case 4:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 34842 : 6408,this.myWidth,this.myHeight,0,6408,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			case 5:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33326 : 6406,this.myWidth,this.myHeight,0,6406,5126,null);
				break;
			case 6:
				kha_SystemImpl.gl.texImage2D(34069,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34070,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34071,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34072,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34073,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				kha_SystemImpl.gl.texImage2D(34074,0,kha_SystemImpl.gl2 ? 33325 : 6406,this.myWidth,this.myHeight,0,6406,kha_SystemImpl.halfFloat.HALF_FLOAT_OES,null);
				break;
			default:
				kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
				kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
			}
			if(this.format == 3) {
				kha_SystemImpl.gl.texParameteri(34067,10240,9728);
				kha_SystemImpl.gl.texParameteri(34067,10241,9728);
				this.isDepthAttachment = true;
				if(!kha_SystemImpl.gl2) {
					var colortex = kha_SystemImpl.gl.createTexture();
					kha_SystemImpl.gl.bindTexture(34067,colortex);
					kha_SystemImpl.gl.texImage2D(34069,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34069,colortex,0);
					kha_SystemImpl.gl.texImage2D(34070,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34070,colortex,0);
					kha_SystemImpl.gl.texImage2D(34071,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34071,colortex,0);
					kha_SystemImpl.gl.texImage2D(34072,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34072,colortex,0);
					kha_SystemImpl.gl.texImage2D(34073,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34073,colortex,0);
					kha_SystemImpl.gl.texImage2D(34074,0,6408,this.myWidth,this.myHeight,0,6408,5121,null);
					kha_SystemImpl.gl.framebufferTexture2D(36160,36064,34074,colortex,0);
					kha_SystemImpl.gl.bindTexture(34067,this.texture);
				}
			}
			this.initDepthStencilBuffer(this.depthStencilFormat);
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
		}
		kha_SystemImpl.gl.bindTexture(34067,null);
	}
	,initDepthStencilBuffer: function(depthStencilFormat) {
		switch(depthStencilFormat) {
		case 0:
			break;
		case 1:case 5:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			if(depthStencilFormat == 1) {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33190 : 6402,this.myWidth,this.myHeight,0,6402,5125,null);
			} else {
				kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 33189 : 6402,this.myWidth,this.myHeight,0,6402,5123,null);
			}
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,36096,34067,this.depthTexture,0);
			break;
		case 2:case 3:case 4:
			this.depthTexture = kha_SystemImpl.gl.createTexture();
			kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
			kha_SystemImpl.gl.texImage2D(34067,0,kha_SystemImpl.gl2 ? 35056 : 34041,this.myWidth,this.myHeight,0,34041,kha_SystemImpl.depthTexture.UNSIGNED_INT_24_8_WEBGL,null);
			kha_SystemImpl.gl.texParameteri(34067,10240,9728);
			kha_SystemImpl.gl.texParameteri(34067,10241,9728);
			kha_SystemImpl.gl.texParameteri(34067,10242,33071);
			kha_SystemImpl.gl.texParameteri(34067,10243,33071);
			kha_SystemImpl.gl.bindFramebuffer(36160,this.frameBuffer);
			kha_SystemImpl.gl.framebufferTexture2D(36160,33306,34067,this.depthTexture,0);
			break;
		}
	}
	,set: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(34067,this.texture);
	}
	,setDepth: function(stage) {
		kha_SystemImpl.gl.activeTexture(33984 + stage);
		kha_SystemImpl.gl.bindTexture(34067,this.depthTexture);
	}
	,unload: function() {
	}
	,lock: function(level) {
		if(level == null) {
			level = 0;
		}
		return null;
	}
	,unlock: function() {
	}
	,width: null
	,get_width: function() {
		return this.myWidth;
	}
	,height: null
	,get_height: function() {
		return this.myHeight;
	}
	,g1: null
	,get_g1: function() {
		return null;
	}
	,g2: null
	,get_g2: function() {
		return null;
	}
	,g4: null
	,get_g4: function() {
		if(this.graphics4 == null) {
			this.graphics4 = new kha_js_graphics4_Graphics(this);
		}
		return this.graphics4;
	}
	,__class__: kha_graphics4_CubeMap
	,__properties__: {get_g4:"get_g4",get_g2:"get_g2",get_g1:"get_g1",get_height:"get_height",get_width:"get_width"}
};
var kha_graphics4_FragmentShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) this.sources.push(sources[_g++].toString());
	this.type = 35632;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.FragmentShader"] = kha_graphics4_FragmentShader;
kha_graphics4_FragmentShader.__name__ = "kha.graphics4.FragmentShader";
kha_graphics4_FragmentShader.fromSource = function(source) {
	var shader = new kha_graphics4_FragmentShader([],["runtime-string"]);
	shader.sources.push(source);
	return shader;
};
kha_graphics4_FragmentShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteShader(this.shader);
		this.shader = null;
		this.sources = null;
	}
	,__class__: kha_graphics4_FragmentShader
};
var kha_graphics4_GeometryShader = function(sources) {
};
$hxClasses["kha.graphics4.GeometryShader"] = kha_graphics4_GeometryShader;
kha_graphics4_GeometryShader.__name__ = "kha.graphics4.GeometryShader";
kha_graphics4_GeometryShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_GeometryShader
};
var kha_graphics4_Graphics = function() { };
$hxClasses["kha.graphics4.Graphics"] = kha_graphics4_Graphics;
kha_graphics4_Graphics.__name__ = "kha.graphics4.Graphics";
kha_graphics4_Graphics.__isInterface__ = true;
kha_graphics4_Graphics.prototype = {
	begin: null
	,beginFace: null
	,beginEye: null
	,end: null
	,vsynced: null
	,refreshRate: null
	,clear: null
	,viewport: null
	,scissor: null
	,disableScissor: null
	,setVertexBuffer: null
	,setVertexBuffers: null
	,setIndexBuffer: null
	,setTexture: null
	,setTextureDepth: null
	,setTextureArray: null
	,setVideoTexture: null
	,setImageTexture: null
	,setTextureParameters: null
	,setTexture3DParameters: null
	,setTextureCompareMode: null
	,setCubeMapCompareMode: null
	,setCubeMap: null
	,setCubeMapDepth: null
	,maxBoundTextures: null
	,setStencilReferenceValue: null
	,instancedRenderingAvailable: null
	,setPipeline: null
	,setBool: null
	,setInt: null
	,setInt2: null
	,setInt3: null
	,setInt4: null
	,setInts: null
	,setFloat: null
	,setFloat2: null
	,setFloat3: null
	,setFloat4: null
	,setFloats: null
	,setVector2: null
	,setVector3: null
	,setVector4: null
	,setMatrix: null
	,setMatrix3: null
	,drawIndexedVertices: null
	,drawIndexedVerticesInstanced: null
	,flush: null
	,__class__: kha_graphics4_Graphics
};
var kha_graphics4_InternalPipeline = function(pipeline,projectionLocation,textureLocation) {
	this.pipeline = pipeline;
	this.projectionLocation = projectionLocation;
	this.textureLocation = textureLocation;
};
$hxClasses["kha.graphics4.InternalPipeline"] = kha_graphics4_InternalPipeline;
kha_graphics4_InternalPipeline.__name__ = "kha.graphics4.InternalPipeline";
kha_graphics4_InternalPipeline.prototype = {
	pipeline: null
	,projectionLocation: null
	,textureLocation: null
	,__class__: kha_graphics4_InternalPipeline
};
var kha_graphics4_PipelineCache = function() { };
$hxClasses["kha.graphics4.PipelineCache"] = kha_graphics4_PipelineCache;
kha_graphics4_PipelineCache.__name__ = "kha.graphics4.PipelineCache";
kha_graphics4_PipelineCache.__isInterface__ = true;
kha_graphics4_PipelineCache.prototype = {
	get: null
	,__class__: kha_graphics4_PipelineCache
};
var kha_graphics4_SimplePipelineCache = function(pipeline,texture) {
	var projectionLocation = null;
	try {
		projectionLocation = pipeline.getConstantLocation("projectionMatrix");
	} catch( x ) {
		haxe_CallStack.lastException = x;
		haxe_Log.trace(((x) instanceof js__$Boot_HaxeError) ? x.val : x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 57, className : "kha.graphics4.SimplePipelineCache", methodName : "new"});
	}
	var textureLocation = null;
	if(texture) {
		try {
			textureLocation = pipeline.getTextureUnit("tex");
		} catch( x1 ) {
			haxe_CallStack.lastException = x1;
			haxe_Log.trace(((x1) instanceof js__$Boot_HaxeError) ? x1.val : x1,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 66, className : "kha.graphics4.SimplePipelineCache", methodName : "new"});
		}
	}
	this.pipeline = new kha_graphics4_InternalPipeline(pipeline,projectionLocation,textureLocation);
};
$hxClasses["kha.graphics4.SimplePipelineCache"] = kha_graphics4_SimplePipelineCache;
kha_graphics4_SimplePipelineCache.__name__ = "kha.graphics4.SimplePipelineCache";
kha_graphics4_SimplePipelineCache.__interfaces__ = [kha_graphics4_PipelineCache];
kha_graphics4_SimplePipelineCache.prototype = {
	pipeline: null
	,get: function(colorFormats,depthStencilFormat) {
		return this.pipeline;
	}
	,__class__: kha_graphics4_SimplePipelineCache
};
var kha_graphics4_PerFramebufferPipelineCache = function(pipeline,texture) {
	this.pipelines = [];
	pipeline.compile();
	var projectionLocation = null;
	try {
		projectionLocation = pipeline.getConstantLocation("projectionMatrix");
	} catch( x ) {
		haxe_CallStack.lastException = x;
		haxe_Log.trace(((x) instanceof js__$Boot_HaxeError) ? x.val : x,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 89, className : "kha.graphics4.PerFramebufferPipelineCache", methodName : "new"});
	}
	var textureLocation = null;
	if(texture) {
		try {
			textureLocation = pipeline.getTextureUnit("tex");
		} catch( x1 ) {
			haxe_CallStack.lastException = x1;
			haxe_Log.trace(((x1) instanceof js__$Boot_HaxeError) ? x1.val : x1,{ fileName : "kha/graphics4/Graphics2.hx", lineNumber : 98, className : "kha.graphics4.PerFramebufferPipelineCache", methodName : "new"});
		}
	}
	this.pipelines.push(new kha_graphics4_InternalPipeline(pipeline,projectionLocation,textureLocation));
};
$hxClasses["kha.graphics4.PerFramebufferPipelineCache"] = kha_graphics4_PerFramebufferPipelineCache;
kha_graphics4_PerFramebufferPipelineCache.__name__ = "kha.graphics4.PerFramebufferPipelineCache";
kha_graphics4_PerFramebufferPipelineCache.__interfaces__ = [kha_graphics4_PipelineCache];
kha_graphics4_PerFramebufferPipelineCache.prototype = {
	pipelines: null
	,get: function(colorFormats,depthStencilFormat) {
		return this.pipelines[this.hash(colorFormats,depthStencilFormat)];
	}
	,hash: function(colorFormats,depthStencilFormat) {
		return 0;
	}
	,__class__: kha_graphics4_PerFramebufferPipelineCache
};
var kha_graphics4_ImageShaderPainter = function(g4) {
	this.myPipeline = null;
	this.bilinearMipmaps = false;
	this.bilinear = false;
	this.g = g4;
	kha_graphics4_ImageShaderPainter.bufferStart = 0;
	kha_graphics4_ImageShaderPainter.bufferIndex = 0;
	kha_graphics4_ImageShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ImageShaderPainter.standardImagePipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ImageShaderPainter"] = kha_graphics4_ImageShaderPainter;
kha_graphics4_ImageShaderPainter.__name__ = "kha.graphics4.ImageShaderPainter";
kha_graphics4_ImageShaderPainter.initShaders = function() {
	if(kha_graphics4_ImageShaderPainter.structure == null) {
		kha_graphics4_ImageShaderPainter.structure = kha_graphics4_Graphics2.createImageVertexStructure();
	}
	if(kha_graphics4_ImageShaderPainter.standardImagePipeline == null) {
		kha_graphics4_ImageShaderPainter.standardImagePipeline = new kha_graphics4_PerFramebufferPipelineCache(kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_ImageShaderPainter.structure),true);
	}
};
kha_graphics4_ImageShaderPainter.prototype = {
	projectionMatrix: null
	,bilinear: null
	,bilinearMipmaps: null
	,g: null
	,myPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ImageShaderPainter.standardImagePipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ImageShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ImageShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(6000,kha_graphics4_ImageShaderPainter.structure,1);
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ImageShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(9000,0);
			var indices = kha_graphics4_ImageShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1500) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ImageShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColor: function(r,g,b,a) {
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function(end) {
		if(kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart == 0) {
			return;
		}
		kha_graphics4_ImageShaderPainter.rectVertexBuffer.unlock((kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ImageShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ImageShaderPainter.indexBuffer);
		this.g.setTexture(pipeline.textureLocation,kha_graphics4_ImageShaderPainter.lastTexture);
		this.g.setTextureParameters(pipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,this.bilinearMipmaps ? 2 : 0);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(kha_graphics4_ImageShaderPainter.bufferStart * 2 * 3,(kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 2 * 3);
		this.g.setTexture(pipeline.textureLocation,null);
		if(end || (kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1) * 4 >= 1500) {
			kha_graphics4_ImageShaderPainter.bufferStart = 0;
			kha_graphics4_ImageShaderPainter.bufferIndex = 0;
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock(0);
		} else {
			kha_graphics4_ImageShaderPainter.bufferStart = kha_graphics4_ImageShaderPainter.bufferIndex;
			kha_graphics4_ImageShaderPainter.rectVertices = kha_graphics4_ImageShaderPainter.rectVertexBuffer.lock(kha_graphics4_ImageShaderPainter.bufferStart * 4);
		}
	}
	,setBilinearFilter: function(bilinear) {
		this.drawBuffer(false);
		kha_graphics4_ImageShaderPainter.lastTexture = null;
		this.bilinear = bilinear;
	}
	,setBilinearMipmapFilter: function(bilinear) {
		this.drawBuffer(false);
		kha_graphics4_ImageShaderPainter.lastTexture = null;
		this.bilinearMipmaps = bilinear;
	}
	,drawImage: function(img,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && img != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer(false);
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var right = img.get_width() / img.get_realWidth();
		var bottom = img.get_height() / img.get_realHeight();
		var baseIndex1 = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 3] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 12] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 13] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 22] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 31] = bottom;
		var baseIndex2 = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = img;
	}
	,drawImage2: function(img,sx,sy,sw,sh,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty,opacity,color) {
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && img != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer(false);
		}
		var left = sx / img.get_realWidth();
		var top = sy / img.get_realHeight();
		var right = (sx + sw) / img.get_realWidth();
		var bottom = (sy + sh) / img.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex1 = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = a;
		var baseIndex2 = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = bottomleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = bottomlefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = topleftx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = toplefty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = toprightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = toprighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = bottomrightx;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = bottomrighty;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = img;
	}
	,drawImageScale: function(img,sx,sy,sw,sh,left,top,right,bottom,opacity,color) {
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && img != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.drawBuffer(false);
		}
		var left1 = sx / img.get_realWidth();
		var top1 = sy / img.get_realHeight();
		var right1 = (sx + sw) / img.get_realWidth();
		var bottom1 = (sy + sh) / img.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right1;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom1;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var baseIndex1 = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = opacity;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = opacity;
		var baseIndex2 = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = img;
	}
	,end: function() {
		if(kha_graphics4_ImageShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		kha_graphics4_ImageShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_ImageShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_ColoredShaderPainter = function(g4) {
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
	kha_graphics4_ColoredShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_ColoredShaderPainter.standardColorPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.ColoredShaderPainter"] = kha_graphics4_ColoredShaderPainter;
kha_graphics4_ColoredShaderPainter.__name__ = "kha.graphics4.ColoredShaderPainter";
kha_graphics4_ColoredShaderPainter.initShaders = function() {
	if(kha_graphics4_ColoredShaderPainter.structure == null) {
		kha_graphics4_ColoredShaderPainter.structure = kha_graphics4_Graphics2.createColoredVertexStructure();
	}
	if(kha_graphics4_ColoredShaderPainter.standardColorPipeline == null) {
		kha_graphics4_ColoredShaderPainter.standardColorPipeline = new kha_graphics4_PerFramebufferPipelineCache(kha_graphics4_Graphics2.createColoredPipeline(kha_graphics4_ColoredShaderPainter.structure),false);
	}
};
kha_graphics4_ColoredShaderPainter.prototype = {
	projectionMatrix: null
	,g: null
	,myPipeline: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_ColoredShaderPainter.standardColorPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_ColoredShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_ColoredShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_ColoredShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_ColoredShaderPainter.indexBuffer.unlock();
			kha_graphics4_ColoredShaderPainter.triangleVertexBuffer = new kha_graphics4_VertexBuffer(3000,kha_graphics4_ColoredShaderPainter.structure,1);
			kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer = new kha_graphics4_IndexBuffer(3000,0);
			var triIndices = kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.lock();
			var _g1 = 0;
			while(_g1 < 1000) {
				var i1 = _g1++;
				triIndices[i1 * 3] = i1 * 3;
				triIndices[i1 * 3 + 1] = i1 * 3 + 1;
				triIndices[i1 * 3 + 2] = i1 * 3 + 2;
			}
			kha_graphics4_ColoredShaderPainter.triangleIndexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 7] = topleftx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 8] = toplefty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 14] = toprightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 15] = toprighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 16] = -5.0;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 21] = bottomrightx;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 22] = bottomrighty;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 23] = -5.0;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.bufferIndex * 7 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 20] = a;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 24] = r;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 25] = g;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 26] = b;
		kha_graphics4_ColoredShaderPainter.rectVertices[baseIndex + 27] = a;
	}
	,setTriVertices: function(x1,y1,x2,y2,x3,y3) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex] = x1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 1] = y1;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 2] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 7] = x2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 8] = y2;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 9] = -5.0;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 14] = x3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 15] = y3;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 16] = -5.0;
	}
	,setTriColors: function(opacity,color) {
		var baseIndex = kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 7 * 3;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		var r = a * (((color & 16711680) >>> 16) * 0.00392156862745098);
		var g = a * (((color & 65280) >>> 8) * 0.00392156862745098);
		var b = a * ((color & 255) * 0.00392156862745098);
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 3] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 4] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 5] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 6] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 10] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 11] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 12] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 13] = a;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 17] = r;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 18] = g;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 19] = b;
		kha_graphics4_ColoredShaderPainter.triangleVertices[baseIndex + 20] = a;
	}
	,drawBuffer: function(trisDone) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex == 0) {
			return;
		}
		if(!trisDone) {
			if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
				this.drawTriBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.rectVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.bufferIndex * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.indexBuffer);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.bufferIndex * 2 * 3);
		kha_graphics4_ColoredShaderPainter.bufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.rectVertices = kha_graphics4_ColoredShaderPainter.rectVertexBuffer.lock();
	}
	,drawTriBuffer: function(rectsDone) {
		if(!rectsDone) {
			if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
				this.drawBuffer(true);
			}
		}
		kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.unlock(kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_ColoredShaderPainter.triangleVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_ColoredShaderPainter.triangleIndexBuffer);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.drawIndexedVertices(0,kha_graphics4_ColoredShaderPainter.triangleBufferIndex * 3);
		kha_graphics4_ColoredShaderPainter.triangleBufferIndex = 0;
		kha_graphics4_ColoredShaderPainter.triangleVertices = kha_graphics4_ColoredShaderPainter.triangleVertexBuffer.lock();
	}
	,fillRect: function(opacity,color,bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex + 1 >= 1000) {
			this.drawBuffer(false);
		}
		this.setRectColors(opacity,color);
		this.setRectVertices(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty);
		++kha_graphics4_ColoredShaderPainter.bufferIndex;
	}
	,fillTriangle: function(opacity,color,x1,y1,x2,y2,x3,y3) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(true);
		}
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex + 1 >= 1000) {
			this.drawTriBuffer(false);
		}
		this.setTriColors(opacity,color);
		this.setTriVertices(x1,y1,x2,y2,x3,y3);
		++kha_graphics4_ColoredShaderPainter.triangleBufferIndex;
	}
	,endTris: function(rectsDone) {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(rectsDone);
		}
	}
	,endRects: function(trisDone) {
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(trisDone);
		}
	}
	,end: function() {
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			this.drawBuffer(false);
		}
	}
	,__class__: kha_graphics4_ColoredShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_TextShaderPainter = function(g4) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.bilinear = false;
	this.myPipeline = null;
	this.g = g4;
	kha_graphics4_TextShaderPainter.bufferIndex = 0;
	kha_graphics4_TextShaderPainter.initShaders();
	this.myPipeline = kha_graphics4_TextShaderPainter.standardTextPipeline;
	this.initBuffers();
};
$hxClasses["kha.graphics4.TextShaderPainter"] = kha_graphics4_TextShaderPainter;
kha_graphics4_TextShaderPainter.__name__ = "kha.graphics4.TextShaderPainter";
kha_graphics4_TextShaderPainter.initShaders = function() {
	if(kha_graphics4_TextShaderPainter.structure == null) {
		kha_graphics4_TextShaderPainter.structure = kha_graphics4_Graphics2.createTextVertexStructure();
	}
	if(kha_graphics4_TextShaderPainter.standardTextPipeline == null) {
		kha_graphics4_TextShaderPainter.standardTextPipeline = new kha_graphics4_PerFramebufferPipelineCache(kha_graphics4_Graphics2.createTextPipeline(kha_graphics4_TextShaderPainter.structure),true);
	}
};
kha_graphics4_TextShaderPainter.findIndex = function(charCode) {
	var blocks = kha_KravurImage.charBlocks;
	var offset = 0;
	var _g = 0;
	var _g1 = blocks.length / 2 | 0;
	while(_g < _g1) {
		var i = _g++;
		var start = blocks[i * 2];
		var end = blocks[i * 2 + 1];
		if(charCode >= start && charCode <= end) {
			return offset + charCode - start;
		}
		offset += end - start + 1;
	}
	return 0;
};
kha_graphics4_TextShaderPainter.prototype = {
	projectionMatrix: null
	,font: null
	,g: null
	,myPipeline: null
	,fontSize: null
	,bilinear: null
	,get_pipeline: function() {
		return this.myPipeline;
	}
	,set_pipeline: function(pipe) {
		this.myPipeline = pipe != null ? pipe : kha_graphics4_TextShaderPainter.standardTextPipeline;
		return this.myPipeline;
	}
	,setProjection: function(projectionMatrix) {
		this.projectionMatrix = projectionMatrix;
	}
	,initBuffers: function() {
		if(kha_graphics4_TextShaderPainter.rectVertexBuffer == null) {
			kha_graphics4_TextShaderPainter.rectVertexBuffer = new kha_graphics4_VertexBuffer(4000,kha_graphics4_TextShaderPainter.structure,1);
			kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
			kha_graphics4_TextShaderPainter.indexBuffer = new kha_graphics4_IndexBuffer(6000,0);
			var indices = kha_graphics4_TextShaderPainter.indexBuffer.lock();
			var _g = 0;
			while(_g < 1000) {
				var i = _g++;
				indices[i * 3 * 2] = i * 4;
				indices[i * 3 * 2 + 1] = i * 4 + 1;
				indices[i * 3 * 2 + 2] = i * 4 + 2;
				indices[i * 3 * 2 + 3] = i * 4;
				indices[i * 3 * 2 + 4] = i * 4 + 2;
				indices[i * 3 * 2 + 5] = i * 4 + 3;
			}
			kha_graphics4_TextShaderPainter.indexBuffer.unlock();
		}
	}
	,setRectVertices: function(bottomleftx,bottomlefty,topleftx,toplefty,toprightx,toprighty,bottomrightx,bottomrighty) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex] = bottomleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 1] = bottomlefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 2] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 9] = topleftx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 10] = toplefty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 11] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 18] = toprightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 19] = toprighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 20] = -5.0;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 27] = bottomrightx;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 28] = bottomrighty;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 29] = -5.0;
	}
	,setRectTexCoords: function(left,top,right,bottom) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 31] = bottom;
	}
	,setRectColors: function(opacity,color) {
		var baseIndex = kha_graphics4_TextShaderPainter.bufferIndex * 9 * 4;
		var a = opacity * ((color >>> 24) * 0.00392156862745098);
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 5] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 6] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 7] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 14] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 15] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 16] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 23] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 24] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 25] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 32] = ((color & 16711680) >>> 16) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 33] = ((color & 65280) >>> 8) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 34] = (color & 255) * 0.00392156862745098;
		kha_graphics4_TextShaderPainter.rectVertices[baseIndex + 35] = a;
	}
	,drawBuffer: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex == 0) {
			return;
		}
		kha_graphics4_TextShaderPainter.rectVertexBuffer.unlock(kha_graphics4_TextShaderPainter.bufferIndex * 4);
		var pipeline = this.myPipeline.get(null,3);
		this.g.setPipeline(pipeline.pipeline);
		this.g.setVertexBuffer(kha_graphics4_TextShaderPainter.rectVertexBuffer);
		this.g.setIndexBuffer(kha_graphics4_TextShaderPainter.indexBuffer);
		this.g.setMatrix(pipeline.projectionLocation,this.projectionMatrix);
		this.g.setTexture(pipeline.textureLocation,kha_graphics4_TextShaderPainter.lastTexture);
		this.g.setTextureParameters(pipeline.textureLocation,2,2,this.bilinear ? 1 : 0,this.bilinear ? 1 : 0,0);
		this.g.drawIndexedVertices(0,kha_graphics4_TextShaderPainter.bufferIndex * 2 * 3);
		this.g.setTexture(pipeline.textureLocation,null);
		kha_graphics4_TextShaderPainter.bufferIndex = 0;
		kha_graphics4_TextShaderPainter.rectVertices = kha_graphics4_TextShaderPainter.rectVertexBuffer.lock();
	}
	,setBilinearFilter: function(bilinear) {
		this.end();
		this.bilinear = bilinear;
	}
	,setFont: function(font) {
		this.font = js_Boot.__cast(font , kha_Kravur);
	}
	,bakedQuadCache: null
	,drawString: function(text,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var charCode = text.charCodeAt(_g++);
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(charCode),xpos,y);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var x1 = q.x0;
				var y1 = q.y1;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var value_x = x1;
				var value_y = y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x2 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y2 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var x3 = x2;
				var y3 = y2;
				if(y2 == null) {
					y3 = 0;
				}
				if(x2 == null) {
					x3 = 0;
				}
				var x4 = q.x0;
				var y4 = q.y0;
				if(y4 == null) {
					y4 = 0;
				}
				if(x4 == null) {
					x4 = 0;
				}
				var value_x1 = x4;
				var value_y1 = y4;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x5 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y5 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var x6 = x5;
				var y6 = y5;
				if(y5 == null) {
					y6 = 0;
				}
				if(x5 == null) {
					x6 = 0;
				}
				var x7 = q.x1;
				var y7 = q.y0;
				if(y7 == null) {
					y7 = 0;
				}
				if(x7 == null) {
					x7 = 0;
				}
				var value_x2 = x7;
				var value_y2 = y7;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x8 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y8 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var x9 = x8;
				var y9 = y8;
				if(y8 == null) {
					y9 = 0;
				}
				if(x8 == null) {
					x9 = 0;
				}
				var x10 = q.x1;
				var y10 = q.y1;
				if(y10 == null) {
					y10 = 0;
				}
				if(x10 == null) {
					x10 = 0;
				}
				var value_x3 = x10;
				var value_y3 = y10;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x11 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y11 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var x12 = x11;
				var y12 = y11;
				if(y11 == null) {
					y12 = 0;
				}
				if(x11 == null) {
					x12 = 0;
				}
				this.setRectVertices(x3,y3,x6,y6,x9,y9,x12,y12);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,drawCharacters: function(text,start,length,opacity,color,x,y,transformation) {
		var font = this.font._get(this.fontSize);
		var tex = font.getTexture();
		if(kha_graphics4_TextShaderPainter.lastTexture != null && tex != kha_graphics4_TextShaderPainter.lastTexture) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = tex;
		var xpos = x;
		var _g = start;
		var _g1 = start + length;
		while(_g < _g1) {
			var q = font.getBakedQuad(this.bakedQuadCache,kha_graphics4_TextShaderPainter.findIndex(text[_g++]),xpos,y);
			if(q != null) {
				if(kha_graphics4_TextShaderPainter.bufferIndex + 1 >= 1000) {
					this.drawBuffer();
				}
				this.setRectColors(opacity,color);
				this.setRectTexCoords(q.s0 * tex.get_width() / tex.get_realWidth(),q.t0 * tex.get_height() / tex.get_realHeight(),q.s1 * tex.get_width() / tex.get_realWidth(),q.t1 * tex.get_height() / tex.get_realHeight());
				var x1 = q.x0;
				var y1 = q.y1;
				if(y1 == null) {
					y1 = 0;
				}
				if(x1 == null) {
					x1 = 0;
				}
				var value_x = x1;
				var value_y = y1;
				var w = transformation._02 * value_x + transformation._12 * value_y + transformation._22;
				var x2 = (transformation._00 * value_x + transformation._10 * value_y + transformation._20) / w;
				var y2 = (transformation._01 * value_x + transformation._11 * value_y + transformation._21) / w;
				var x3 = x2;
				var y3 = y2;
				if(y2 == null) {
					y3 = 0;
				}
				if(x2 == null) {
					x3 = 0;
				}
				var x4 = q.x0;
				var y4 = q.y0;
				if(y4 == null) {
					y4 = 0;
				}
				if(x4 == null) {
					x4 = 0;
				}
				var value_x1 = x4;
				var value_y1 = y4;
				var w1 = transformation._02 * value_x1 + transformation._12 * value_y1 + transformation._22;
				var x5 = (transformation._00 * value_x1 + transformation._10 * value_y1 + transformation._20) / w1;
				var y5 = (transformation._01 * value_x1 + transformation._11 * value_y1 + transformation._21) / w1;
				var x6 = x5;
				var y6 = y5;
				if(y5 == null) {
					y6 = 0;
				}
				if(x5 == null) {
					x6 = 0;
				}
				var x7 = q.x1;
				var y7 = q.y0;
				if(y7 == null) {
					y7 = 0;
				}
				if(x7 == null) {
					x7 = 0;
				}
				var value_x2 = x7;
				var value_y2 = y7;
				var w2 = transformation._02 * value_x2 + transformation._12 * value_y2 + transformation._22;
				var x8 = (transformation._00 * value_x2 + transformation._10 * value_y2 + transformation._20) / w2;
				var y8 = (transformation._01 * value_x2 + transformation._11 * value_y2 + transformation._21) / w2;
				var x9 = x8;
				var y9 = y8;
				if(y8 == null) {
					y9 = 0;
				}
				if(x8 == null) {
					x9 = 0;
				}
				var x10 = q.x1;
				var y10 = q.y1;
				if(y10 == null) {
					y10 = 0;
				}
				if(x10 == null) {
					x10 = 0;
				}
				var value_x3 = x10;
				var value_y3 = y10;
				var w3 = transformation._02 * value_x3 + transformation._12 * value_y3 + transformation._22;
				var x11 = (transformation._00 * value_x3 + transformation._10 * value_y3 + transformation._20) / w3;
				var y11 = (transformation._01 * value_x3 + transformation._11 * value_y3 + transformation._21) / w3;
				var x12 = x11;
				var y12 = y11;
				if(y11 == null) {
					y12 = 0;
				}
				if(x11 == null) {
					x12 = 0;
				}
				this.setRectVertices(x3,y3,x6,y6,x9,y9,x12,y12);
				xpos += q.xadvance;
				++kha_graphics4_TextShaderPainter.bufferIndex;
			}
		}
	}
	,end: function() {
		if(kha_graphics4_TextShaderPainter.bufferIndex > 0) {
			this.drawBuffer();
		}
		kha_graphics4_TextShaderPainter.lastTexture = null;
	}
	,__class__: kha_graphics4_TextShaderPainter
	,__properties__: {set_pipeline:"set_pipeline",get_pipeline:"get_pipeline"}
};
var kha_graphics4_Graphics2 = function(canvas) {
	this.scissorH = -1;
	this.scissorW = -1;
	this.scissorY = -1;
	this.scissorX = -1;
	this.scissorEnabled = false;
	this.lastPipeline = null;
	this.pipelineCache = new haxe_ds_ObjectMap();
	this.myMipmapScaleQuality = 0;
	this.myImageScaleQuality = 0;
	kha_graphics2_Graphics.call(this);
	this.set_color(-1);
	this.canvas = canvas;
	this.g = canvas.get_g4();
	this.imagePainter = new kha_graphics4_ImageShaderPainter(this.g);
	this.coloredPainter = new kha_graphics4_ColoredShaderPainter(this.g);
	this.textPainter = new kha_graphics4_TextShaderPainter(this.g);
	this.textPainter.fontSize = this.get_fontSize();
	this.projectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.setProjection();
	if(kha_graphics4_Graphics2.videoPipeline == null) {
		kha_graphics4_Graphics2.videoPipeline = kha_graphics4_Graphics2.createImagePipeline(kha_graphics4_Graphics2.createImageVertexStructure());
		kha_graphics4_Graphics2.videoPipeline.fragmentShader = kha_Shaders.painter_video_frag;
		kha_graphics4_Graphics2.videoPipeline.vertexShader = kha_Shaders.painter_video_vert;
		kha_graphics4_Graphics2.videoPipeline.compile();
	}
};
$hxClasses["kha.graphics4.Graphics2"] = kha_graphics4_Graphics2;
kha_graphics4_Graphics2.__name__ = "kha.graphics4.Graphics2";
kha_graphics4_Graphics2.upperPowerOfTwo = function(v) {
	--v;
	v |= v >>> 1;
	v |= v >>> 2;
	v |= v >>> 4;
	v |= v >>> 8;
	v |= v >>> 16;
	return ++v;
};
kha_graphics4_Graphics2.createImageVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createImagePipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_image_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_image_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createColoredVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createColoredPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_colored_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_colored_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 1;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 1;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.createTextVertexStructure = function() {
	var structure = new kha_graphics4_VertexStructure();
	structure.add("vertexPosition",2);
	structure.add("texPosition",1);
	structure.add("vertexColor",3);
	return structure;
};
kha_graphics4_Graphics2.createTextPipeline = function(structure) {
	var shaderPipeline = new kha_graphics4_PipelineState();
	shaderPipeline.fragmentShader = kha_Shaders.painter_text_frag;
	shaderPipeline.vertexShader = kha_Shaders.painter_text_vert;
	shaderPipeline.inputLayout = [structure];
	shaderPipeline.blendSource = 3;
	shaderPipeline.blendDestination = 5;
	shaderPipeline.alphaBlendSource = 3;
	shaderPipeline.alphaBlendDestination = 5;
	return shaderPipeline;
};
kha_graphics4_Graphics2.__super__ = kha_graphics2_Graphics;
kha_graphics4_Graphics2.prototype = $extend(kha_graphics2_Graphics.prototype,{
	myColor: null
	,myFont: null
	,projectionMatrix: null
	,imagePainter: null
	,coloredPainter: null
	,textPainter: null
	,canvas: null
	,g: null
	,setProjection: function() {
		var width = this.canvas.get_width();
		var height = this.canvas.get_height();
		if(((this.canvas) instanceof kha_Framebuffer)) {
			var _this = this.projectionMatrix;
			_this._00 = 2 / width;
			_this._10 = 0;
			_this._20 = 0;
			_this._30 = -width / width;
			_this._01 = 0;
			_this._11 = 2.0 / (0 - height);
			_this._21 = 0;
			_this._31 = -height / (0 - height);
			_this._02 = 0;
			_this._12 = 0;
			_this._22 = -0.002000200020002;
			_this._32 = -1.0002000200020003;
			_this._03 = 0;
			_this._13 = 0;
			_this._23 = 0;
			_this._33 = 1;
		} else {
			if(!kha_Image.get_nonPow2Supported()) {
				width = kha_graphics4_Graphics2.upperPowerOfTwo(width);
				height = kha_graphics4_Graphics2.upperPowerOfTwo(height);
			}
			if(kha_Image.renderTargetsInvertedY()) {
				var _this1 = this.projectionMatrix;
				_this1._00 = 2 / width;
				_this1._10 = 0;
				_this1._20 = 0;
				_this1._30 = -width / width;
				_this1._01 = 0;
				_this1._11 = 2.0 / height;
				_this1._21 = 0;
				_this1._31 = -height / height;
				_this1._02 = 0;
				_this1._12 = 0;
				_this1._22 = -0.002000200020002;
				_this1._32 = -1.0002000200020003;
				_this1._03 = 0;
				_this1._13 = 0;
				_this1._23 = 0;
				_this1._33 = 1;
			} else {
				var _this2 = this.projectionMatrix;
				_this2._00 = 2 / width;
				_this2._10 = 0;
				_this2._20 = 0;
				_this2._30 = -width / width;
				_this2._01 = 0;
				_this2._11 = 2.0 / (0 - height);
				_this2._21 = 0;
				_this2._31 = -height / (0 - height);
				_this2._02 = 0;
				_this2._12 = 0;
				_this2._22 = -0.002000200020002;
				_this2._32 = -1.0002000200020003;
				_this2._03 = 0;
				_this2._13 = 0;
				_this2._23 = 0;
				_this2._33 = 1;
			}
		}
		this.imagePainter.setProjection(this.projectionMatrix);
		this.coloredPainter.setProjection(this.projectionMatrix);
		this.textPainter.setProjection(this.projectionMatrix);
	}
	,drawImage: function(img,x,y) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var xw = x + img.get_width();
		var yh = y + img.get_height();
		var _this1 = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = yh;
		if(yh == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x2 = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y2 = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		var x3 = x2;
		var y3 = y2;
		if(y2 == null) {
			y3 = 0;
		}
		if(x2 == null) {
			x3 = 0;
		}
		var _this2 = this.transformations[this.transformationIndex];
		var x4 = x;
		var y4 = y;
		if(y == null) {
			y4 = 0;
		}
		if(x == null) {
			x4 = 0;
		}
		var value_x1 = x4;
		var value_y1 = y4;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x5 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y5 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		var x6 = x5;
		var y6 = y5;
		if(y5 == null) {
			y6 = 0;
		}
		if(x5 == null) {
			x6 = 0;
		}
		var _this3 = this.transformations[this.transformationIndex];
		var x7 = xw;
		var y7 = y;
		if(y == null) {
			y7 = 0;
		}
		if(xw == null) {
			x7 = 0;
		}
		var value_x2 = x7;
		var value_y2 = y7;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x8 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y8 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		var x9 = x8;
		var y9 = y8;
		if(y8 == null) {
			y9 = 0;
		}
		if(x8 == null) {
			x9 = 0;
		}
		var _this4 = this.transformations[this.transformationIndex];
		var x10 = xw;
		var y10 = yh;
		if(yh == null) {
			y10 = 0;
		}
		if(xw == null) {
			x10 = 0;
		}
		var value_x3 = x10;
		var value_y3 = y10;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x11 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y11 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		var x12 = x11;
		var y12 = y11;
		if(y11 == null) {
			y12 = 0;
		}
		if(x11 == null) {
			x12 = 0;
		}
		var opacity = this.get_opacity();
		var color = this.get_color();
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && img != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.imagePainter.drawBuffer(false);
		}
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 35] = a;
		var right = img.get_width() / img.get_realWidth();
		var bottom = img.get_height() / img.get_realHeight();
		var baseIndex1 = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 3] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 12] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 13] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 22] = 0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 31] = bottom;
		var baseIndex2 = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = x3;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = y3;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = x6;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = y6;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = x9;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = y9;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = x12;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = y12;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = img;
	}
	,drawScaledSubImage: function(img,sx,sy,sw,sh,dx,dy,dw,dh) {
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.end();
		var _this1 = this.transformations[this.transformationIndex];
		var x = dx;
		var y = dy + dh;
		if(y == null) {
			y = 0;
		}
		if(dx == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this1._02 * value_x + _this1._12 * value_y + _this1._22;
		var x1 = (_this1._00 * value_x + _this1._10 * value_y + _this1._20) / w;
		var y1 = (_this1._01 * value_x + _this1._11 * value_y + _this1._21) / w;
		var x2 = x1;
		var y2 = y1;
		if(y1 == null) {
			y2 = 0;
		}
		if(x1 == null) {
			x2 = 0;
		}
		var _this2 = this.transformations[this.transformationIndex];
		var x3 = dx;
		var y3 = dy;
		if(dy == null) {
			y3 = 0;
		}
		if(dx == null) {
			x3 = 0;
		}
		var value_x1 = x3;
		var value_y1 = y3;
		var w1 = _this2._02 * value_x1 + _this2._12 * value_y1 + _this2._22;
		var x4 = (_this2._00 * value_x1 + _this2._10 * value_y1 + _this2._20) / w1;
		var y4 = (_this2._01 * value_x1 + _this2._11 * value_y1 + _this2._21) / w1;
		var x5 = x4;
		var y5 = y4;
		if(y4 == null) {
			y5 = 0;
		}
		if(x4 == null) {
			x5 = 0;
		}
		var _this3 = this.transformations[this.transformationIndex];
		var x6 = dx + dw;
		var y6 = dy;
		if(dy == null) {
			y6 = 0;
		}
		if(x6 == null) {
			x6 = 0;
		}
		var value_x2 = x6;
		var value_y2 = y6;
		var w2 = _this3._02 * value_x2 + _this3._12 * value_y2 + _this3._22;
		var x7 = (_this3._00 * value_x2 + _this3._10 * value_y2 + _this3._20) / w2;
		var y7 = (_this3._01 * value_x2 + _this3._11 * value_y2 + _this3._21) / w2;
		var x8 = x7;
		var y8 = y7;
		if(y7 == null) {
			y8 = 0;
		}
		if(x7 == null) {
			x8 = 0;
		}
		var _this4 = this.transformations[this.transformationIndex];
		var x9 = dx + dw;
		var y9 = dy + dh;
		if(y9 == null) {
			y9 = 0;
		}
		if(x9 == null) {
			x9 = 0;
		}
		var value_x3 = x9;
		var value_y3 = y9;
		var w3 = _this4._02 * value_x3 + _this4._12 * value_y3 + _this4._22;
		var x10 = (_this4._00 * value_x3 + _this4._10 * value_y3 + _this4._20) / w3;
		var y10 = (_this4._01 * value_x3 + _this4._11 * value_y3 + _this4._21) / w3;
		var x11 = x10;
		var y11 = y10;
		if(y10 == null) {
			y11 = 0;
		}
		if(x10 == null) {
			x11 = 0;
		}
		var opacity = this.get_opacity();
		var color = this.get_color();
		if(kha_graphics4_ImageShaderPainter.bufferStart + kha_graphics4_ImageShaderPainter.bufferIndex + 1 >= 1500 || kha_graphics4_ImageShaderPainter.lastTexture != null && img != kha_graphics4_ImageShaderPainter.lastTexture) {
			this.imagePainter.drawBuffer(false);
		}
		var left = sx / img.get_realWidth();
		var top = sy / img.get_realHeight();
		var right = (sx + sw) / img.get_realWidth();
		var bottom = (sy + sh) / img.get_realHeight();
		var baseIndex = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 3] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 4] = bottom;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 12] = left;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 13] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 21] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 22] = top;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 30] = right;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex + 31] = bottom;
		var r = ((color & 16711680) >>> 16) * 0.00392156862745098;
		var g = ((color & 65280) >>> 8) * 0.00392156862745098;
		var b = (color & 255) * 0.00392156862745098;
		var a = (color >>> 24) * 0.00392156862745098 * opacity;
		var baseIndex1 = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 5] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 6] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 7] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 8] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 14] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 15] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 16] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 17] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 23] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 24] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 25] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 26] = a;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 32] = r;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 33] = g;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 34] = b;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex1 + 35] = a;
		var baseIndex2 = (kha_graphics4_ImageShaderPainter.bufferIndex - kha_graphics4_ImageShaderPainter.bufferStart) * 9 * 4;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2] = x2;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 1] = y2;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 2] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 9] = x5;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 10] = y5;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 11] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 18] = x8;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 19] = y8;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 20] = -5.0;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 27] = x11;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 28] = y11;
		kha_graphics4_ImageShaderPainter.rectVertices[baseIndex2 + 29] = -5.0;
		++kha_graphics4_ImageShaderPainter.bufferIndex;
		kha_graphics4_ImageShaderPainter.lastTexture = img;
	}
	,get_color: function() {
		return this.myColor;
	}
	,set_color: function(color) {
		return this.myColor = color;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x - strength / 2;
		var y1 = y + strength / 2;
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x2 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y2 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x3 = x2;
		var y3 = y2;
		if(y2 == null) {
			y3 = 0;
		}
		if(x2 == null) {
			x3 = 0;
		}
		var p1_x = x3;
		var p1_y = y3;
		var _this1 = this.transformations[this.transformationIndex];
		var x4 = x - strength / 2;
		var y4 = y - strength / 2;
		if(y4 == null) {
			y4 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var value_x1 = x4;
		var value_y1 = y4;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x5 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y5 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var x6 = x5;
		var y6 = y5;
		if(y5 == null) {
			y6 = 0;
		}
		if(x5 == null) {
			x6 = 0;
		}
		var p2_x = x6;
		var p2_y = y6;
		var _this2 = this.transformations[this.transformationIndex];
		var x7 = x + width + strength / 2;
		var y7 = y - strength / 2;
		if(y7 == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		var value_x2 = x7;
		var value_y2 = y7;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x8 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y8 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var x9 = x8;
		var y9 = y8;
		if(y8 == null) {
			y9 = 0;
		}
		if(x8 == null) {
			x9 = 0;
		}
		var p3_x = x9;
		var p3_y = y9;
		var _this3 = this.transformations[this.transformationIndex];
		var x10 = x + width + strength / 2;
		var y10 = y + strength / 2;
		if(y10 == null) {
			y10 = 0;
		}
		if(x10 == null) {
			x10 = 0;
		}
		var value_x3 = x10;
		var value_y3 = y10;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x11 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y11 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		var x12 = x11;
		var y12 = y11;
		if(y11 == null) {
			y12 = 0;
		}
		if(x11 == null) {
			x12 = 0;
		}
		var p4_x = x12;
		var p4_y = y12;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this4 = this.transformations[this.transformationIndex];
		var x13 = x - strength / 2;
		var y13 = y + height - strength / 2;
		if(y13 == null) {
			y13 = 0;
		}
		if(x13 == null) {
			x13 = 0;
		}
		var value_x4 = x13;
		var value_y4 = y13;
		var w4 = _this4._02 * value_x4 + _this4._12 * value_y4 + _this4._22;
		var x14 = (_this4._00 * value_x4 + _this4._10 * value_y4 + _this4._20) / w4;
		var y14 = (_this4._01 * value_x4 + _this4._11 * value_y4 + _this4._21) / w4;
		var x15 = x14;
		var y15 = y14;
		if(y14 == null) {
			y15 = 0;
		}
		if(x14 == null) {
			x15 = 0;
		}
		p1_x = x15;
		p1_y = y15;
		var _this5 = this.transformations[this.transformationIndex];
		var x16 = x - strength / 2;
		var y16 = y + strength / 2;
		if(y16 == null) {
			y16 = 0;
		}
		if(x16 == null) {
			x16 = 0;
		}
		var value_x5 = x16;
		var value_y5 = y16;
		var w5 = _this5._02 * value_x5 + _this5._12 * value_y5 + _this5._22;
		var x17 = (_this5._00 * value_x5 + _this5._10 * value_y5 + _this5._20) / w5;
		var y17 = (_this5._01 * value_x5 + _this5._11 * value_y5 + _this5._21) / w5;
		var x18 = x17;
		var y18 = y17;
		if(y17 == null) {
			y18 = 0;
		}
		if(x17 == null) {
			x18 = 0;
		}
		p2_x = x18;
		p2_y = y18;
		var _this6 = this.transformations[this.transformationIndex];
		var x19 = x + strength / 2;
		var y19 = y + strength / 2;
		if(y19 == null) {
			y19 = 0;
		}
		if(x19 == null) {
			x19 = 0;
		}
		var value_x6 = x19;
		var value_y6 = y19;
		var w6 = _this6._02 * value_x6 + _this6._12 * value_y6 + _this6._22;
		var x20 = (_this6._00 * value_x6 + _this6._10 * value_y6 + _this6._20) / w6;
		var y20 = (_this6._01 * value_x6 + _this6._11 * value_y6 + _this6._21) / w6;
		var x21 = x20;
		var y21 = y20;
		if(y20 == null) {
			y21 = 0;
		}
		if(x20 == null) {
			x21 = 0;
		}
		p3_x = x21;
		p3_y = y21;
		var _this7 = this.transformations[this.transformationIndex];
		var x22 = x + strength / 2;
		var y22 = y + height - strength / 2;
		if(y22 == null) {
			y22 = 0;
		}
		if(x22 == null) {
			x22 = 0;
		}
		var value_x7 = x22;
		var value_y7 = y22;
		var w7 = _this7._02 * value_x7 + _this7._12 * value_y7 + _this7._22;
		var x23 = (_this7._00 * value_x7 + _this7._10 * value_y7 + _this7._20) / w7;
		var y23 = (_this7._01 * value_x7 + _this7._11 * value_y7 + _this7._21) / w7;
		var x24 = x23;
		var y24 = y23;
		if(y23 == null) {
			y24 = 0;
		}
		if(x23 == null) {
			x24 = 0;
		}
		p4_x = x24;
		p4_y = y24;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this8 = this.transformations[this.transformationIndex];
		var x25 = x - strength / 2;
		var y25 = y + height + strength / 2;
		if(y25 == null) {
			y25 = 0;
		}
		if(x25 == null) {
			x25 = 0;
		}
		var value_x8 = x25;
		var value_y8 = y25;
		var w8 = _this8._02 * value_x8 + _this8._12 * value_y8 + _this8._22;
		var x26 = (_this8._00 * value_x8 + _this8._10 * value_y8 + _this8._20) / w8;
		var y26 = (_this8._01 * value_x8 + _this8._11 * value_y8 + _this8._21) / w8;
		var x27 = x26;
		var y27 = y26;
		if(y26 == null) {
			y27 = 0;
		}
		if(x26 == null) {
			x27 = 0;
		}
		p1_x = x27;
		p1_y = y27;
		var _this9 = this.transformations[this.transformationIndex];
		var x28 = x - strength / 2;
		var y28 = y + height - strength / 2;
		if(y28 == null) {
			y28 = 0;
		}
		if(x28 == null) {
			x28 = 0;
		}
		var value_x9 = x28;
		var value_y9 = y28;
		var w9 = _this9._02 * value_x9 + _this9._12 * value_y9 + _this9._22;
		var x29 = (_this9._00 * value_x9 + _this9._10 * value_y9 + _this9._20) / w9;
		var y29 = (_this9._01 * value_x9 + _this9._11 * value_y9 + _this9._21) / w9;
		var x30 = x29;
		var y30 = y29;
		if(y29 == null) {
			y30 = 0;
		}
		if(x29 == null) {
			x30 = 0;
		}
		p2_x = x30;
		p2_y = y30;
		var _this10 = this.transformations[this.transformationIndex];
		var x31 = x + width + strength / 2;
		var y31 = y + height - strength / 2;
		if(y31 == null) {
			y31 = 0;
		}
		if(x31 == null) {
			x31 = 0;
		}
		var value_x10 = x31;
		var value_y10 = y31;
		var w10 = _this10._02 * value_x10 + _this10._12 * value_y10 + _this10._22;
		var x32 = (_this10._00 * value_x10 + _this10._10 * value_y10 + _this10._20) / w10;
		var y32 = (_this10._01 * value_x10 + _this10._11 * value_y10 + _this10._21) / w10;
		var x33 = x32;
		var y33 = y32;
		if(y32 == null) {
			y33 = 0;
		}
		if(x32 == null) {
			x33 = 0;
		}
		p3_x = x33;
		p3_y = y33;
		var _this11 = this.transformations[this.transformationIndex];
		var x34 = x + width + strength / 2;
		var y34 = y + height + strength / 2;
		if(y34 == null) {
			y34 = 0;
		}
		if(x34 == null) {
			x34 = 0;
		}
		var value_x11 = x34;
		var value_y11 = y34;
		var w11 = _this11._02 * value_x11 + _this11._12 * value_y11 + _this11._22;
		var x35 = (_this11._00 * value_x11 + _this11._10 * value_y11 + _this11._20) / w11;
		var y35 = (_this11._01 * value_x11 + _this11._11 * value_y11 + _this11._21) / w11;
		var x36 = x35;
		var y36 = y35;
		if(y35 == null) {
			y36 = 0;
		}
		if(x35 == null) {
			x36 = 0;
		}
		p4_x = x36;
		p4_y = y36;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
		var _this12 = this.transformations[this.transformationIndex];
		var x37 = x + width - strength / 2;
		var y37 = y + height - strength / 2;
		if(y37 == null) {
			y37 = 0;
		}
		if(x37 == null) {
			x37 = 0;
		}
		var value_x12 = x37;
		var value_y12 = y37;
		var w12 = _this12._02 * value_x12 + _this12._12 * value_y12 + _this12._22;
		var x38 = (_this12._00 * value_x12 + _this12._10 * value_y12 + _this12._20) / w12;
		var y38 = (_this12._01 * value_x12 + _this12._11 * value_y12 + _this12._21) / w12;
		var x39 = x38;
		var y39 = y38;
		if(y38 == null) {
			y39 = 0;
		}
		if(x38 == null) {
			x39 = 0;
		}
		p1_x = x39;
		p1_y = y39;
		var _this13 = this.transformations[this.transformationIndex];
		var x40 = x + width - strength / 2;
		var y40 = y + strength / 2;
		if(y40 == null) {
			y40 = 0;
		}
		if(x40 == null) {
			x40 = 0;
		}
		var value_x13 = x40;
		var value_y13 = y40;
		var w13 = _this13._02 * value_x13 + _this13._12 * value_y13 + _this13._22;
		var x41 = (_this13._00 * value_x13 + _this13._10 * value_y13 + _this13._20) / w13;
		var y41 = (_this13._01 * value_x13 + _this13._11 * value_y13 + _this13._21) / w13;
		var x42 = x41;
		var y42 = y41;
		if(y41 == null) {
			y42 = 0;
		}
		if(x41 == null) {
			x42 = 0;
		}
		p2_x = x42;
		p2_y = y42;
		var _this14 = this.transformations[this.transformationIndex];
		var x43 = x + width + strength / 2;
		var y43 = y + strength / 2;
		if(y43 == null) {
			y43 = 0;
		}
		if(x43 == null) {
			x43 = 0;
		}
		var value_x14 = x43;
		var value_y14 = y43;
		var w14 = _this14._02 * value_x14 + _this14._12 * value_y14 + _this14._22;
		var x44 = (_this14._00 * value_x14 + _this14._10 * value_y14 + _this14._20) / w14;
		var y44 = (_this14._01 * value_x14 + _this14._11 * value_y14 + _this14._21) / w14;
		var x45 = x44;
		var y45 = y44;
		if(y44 == null) {
			y45 = 0;
		}
		if(x44 == null) {
			x45 = 0;
		}
		p3_x = x45;
		p3_y = y45;
		var _this15 = this.transformations[this.transformationIndex];
		var x46 = x + width + strength / 2;
		var y46 = y + height - strength / 2;
		if(y46 == null) {
			y46 = 0;
		}
		if(x46 == null) {
			x46 = 0;
		}
		var value_x15 = x46;
		var value_y15 = y46;
		var w15 = _this15._02 * value_x15 + _this15._12 * value_y15 + _this15._22;
		var x47 = (_this15._00 * value_x15 + _this15._10 * value_y15 + _this15._20) / w15;
		var y47 = (_this15._01 * value_x15 + _this15._11 * value_y15 + _this15._21) / w15;
		var x48 = x47;
		var y48 = y47;
		if(y47 == null) {
			y48 = 0;
		}
		if(x47 == null) {
			x48 = 0;
		}
		p4_x = x48;
		p4_y = y48;
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y,p4_x,p4_y);
	}
	,fillRect: function(x,y,width,height) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x1 = x;
		var y1 = y + height;
		if(y1 == null) {
			y1 = 0;
		}
		if(x == null) {
			x1 = 0;
		}
		var value_x = x1;
		var value_y = y1;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x2 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y2 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x3 = x2;
		var y3 = y2;
		if(y2 == null) {
			y3 = 0;
		}
		if(x2 == null) {
			x3 = 0;
		}
		var _this1 = this.transformations[this.transformationIndex];
		var x4 = x;
		var y4 = y;
		if(y == null) {
			y4 = 0;
		}
		if(x == null) {
			x4 = 0;
		}
		var value_x1 = x4;
		var value_y1 = y4;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x5 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y5 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var x6 = x5;
		var y6 = y5;
		if(y5 == null) {
			y6 = 0;
		}
		if(x5 == null) {
			x6 = 0;
		}
		var _this2 = this.transformations[this.transformationIndex];
		var x7 = x + width;
		var y7 = y;
		if(y == null) {
			y7 = 0;
		}
		if(x7 == null) {
			x7 = 0;
		}
		var value_x2 = x7;
		var value_y2 = y7;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x8 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y8 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var x9 = x8;
		var y9 = y8;
		if(y8 == null) {
			y9 = 0;
		}
		if(x8 == null) {
			x9 = 0;
		}
		var _this3 = this.transformations[this.transformationIndex];
		var x10 = x + width;
		var y10 = y + height;
		if(y10 == null) {
			y10 = 0;
		}
		if(x10 == null) {
			x10 = 0;
		}
		var value_x3 = x10;
		var value_y3 = y10;
		var w3 = _this3._02 * value_x3 + _this3._12 * value_y3 + _this3._22;
		var x11 = (_this3._00 * value_x3 + _this3._10 * value_y3 + _this3._20) / w3;
		var y11 = (_this3._01 * value_x3 + _this3._11 * value_y3 + _this3._21) / w3;
		var x12 = x11;
		var y12 = y11;
		if(y11 == null) {
			y12 = 0;
		}
		if(x11 == null) {
			x12 = 0;
		}
		this.coloredPainter.fillRect(this.get_opacity(),this.get_color(),x3,y3,x6,y6,x9,y9,x12,y12);
	}
	,drawString: function(text,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawString(text,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,drawCharacters: function(text,start,length,x,y) {
		this.imagePainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
		this.textPainter.drawCharacters(text,start,length,this.get_opacity(),this.get_color(),x,y,this.transformations[this.transformationIndex]);
	}
	,get_font: function() {
		return this.myFont;
	}
	,set_font: function(font) {
		this.textPainter.setFont(font);
		return this.myFont = font;
	}
	,set_fontSize: function(value) {
		return kha_graphics2_Graphics.prototype.set_fontSize.call(this,this.textPainter.fontSize = value);
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.imagePainter.end();
		this.textPainter.end();
		var vec_x = 0;
		var vec_y = 0;
		if(y2 == y1) {
			vec_x = 0;
			vec_y = -1;
		} else {
			var y = -(x2 - x1) / (y2 - y1);
			if(y == null) {
				y = 0;
			}
			vec_x = 1;
			vec_y = y;
		}
		var currentLength = Math.sqrt(vec_x * vec_x + vec_y * vec_y);
		if(currentLength != 0) {
			var mul = strength / currentLength;
			vec_x *= mul;
			vec_y *= mul;
		}
		var x = x1 + 0.5 * vec_x;
		var y3 = y1 + 0.5 * vec_y;
		if(y3 == null) {
			y3 = 0;
		}
		if(x == null) {
			x = 0;
		}
		var p1_x = x;
		var p1_y = y3;
		var x3 = x2 + 0.5 * vec_x;
		var y4 = y2 + 0.5 * vec_y;
		if(y4 == null) {
			y4 = 0;
		}
		if(x3 == null) {
			x3 = 0;
		}
		var p2_x = x3;
		var p2_y = y4;
		var x4 = p1_x - vec_x;
		var y5 = p1_y - vec_y;
		if(y5 == null) {
			y5 = 0;
		}
		if(x4 == null) {
			x4 = 0;
		}
		var p3_x = x4;
		var p3_y = y5;
		var x5 = p2_x - vec_x;
		var y6 = p2_y - vec_y;
		if(y6 == null) {
			y6 = 0;
		}
		if(x5 == null) {
			x5 = 0;
		}
		var p4_x = x5;
		var p4_y = y6;
		var _this = this.transformations[this.transformationIndex];
		var w = _this._02 * p1_x + _this._12 * p1_y + _this._22;
		var x6 = (_this._00 * p1_x + _this._10 * p1_y + _this._20) / w;
		var y7 = (_this._01 * p1_x + _this._11 * p1_y + _this._21) / w;
		var x7 = x6;
		var y8 = y7;
		if(y7 == null) {
			y8 = 0;
		}
		if(x6 == null) {
			x7 = 0;
		}
		p1_x = x7;
		p1_y = y8;
		var _this1 = this.transformations[this.transformationIndex];
		var w1 = _this1._02 * p2_x + _this1._12 * p2_y + _this1._22;
		var x8 = (_this1._00 * p2_x + _this1._10 * p2_y + _this1._20) / w1;
		var y9 = (_this1._01 * p2_x + _this1._11 * p2_y + _this1._21) / w1;
		var x9 = x8;
		var y10 = y9;
		if(y9 == null) {
			y10 = 0;
		}
		if(x8 == null) {
			x9 = 0;
		}
		p2_x = x9;
		p2_y = y10;
		var _this2 = this.transformations[this.transformationIndex];
		var w2 = _this2._02 * p3_x + _this2._12 * p3_y + _this2._22;
		var x10 = (_this2._00 * p3_x + _this2._10 * p3_y + _this2._20) / w2;
		var y11 = (_this2._01 * p3_x + _this2._11 * p3_y + _this2._21) / w2;
		var x11 = x10;
		var y12 = y11;
		if(y11 == null) {
			y12 = 0;
		}
		if(x10 == null) {
			x11 = 0;
		}
		p3_x = x11;
		p3_y = y12;
		var _this3 = this.transformations[this.transformationIndex];
		var w3 = _this3._02 * p4_x + _this3._12 * p4_y + _this3._22;
		var x12 = (_this3._00 * p4_x + _this3._10 * p4_y + _this3._20) / w3;
		var y13 = (_this3._01 * p4_x + _this3._11 * p4_y + _this3._21) / w3;
		var x13 = x12;
		var y14 = y13;
		if(y13 == null) {
			y14 = 0;
		}
		if(x12 == null) {
			x13 = 0;
		}
		p4_x = x13;
		p4_y = y14;
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p1_x,p1_y,p2_x,p2_y,p3_x,p3_y);
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),p3_x,p3_y,p2_x,p2_y,p4_x,p4_y);
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.transformations[this.transformationIndex];
		var x = x1;
		var y = y1;
		if(y1 == null) {
			y = 0;
		}
		if(x1 == null) {
			x = 0;
		}
		var value_x = x;
		var value_y = y;
		var w = _this._02 * value_x + _this._12 * value_y + _this._22;
		var x4 = (_this._00 * value_x + _this._10 * value_y + _this._20) / w;
		var y4 = (_this._01 * value_x + _this._11 * value_y + _this._21) / w;
		var x5 = x4;
		var y5 = y4;
		if(y4 == null) {
			y5 = 0;
		}
		if(x4 == null) {
			x5 = 0;
		}
		var _this1 = this.transformations[this.transformationIndex];
		var x6 = x2;
		var y6 = y2;
		if(y2 == null) {
			y6 = 0;
		}
		if(x2 == null) {
			x6 = 0;
		}
		var value_x1 = x6;
		var value_y1 = y6;
		var w1 = _this1._02 * value_x1 + _this1._12 * value_y1 + _this1._22;
		var x7 = (_this1._00 * value_x1 + _this1._10 * value_y1 + _this1._20) / w1;
		var y7 = (_this1._01 * value_x1 + _this1._11 * value_y1 + _this1._21) / w1;
		var x8 = x7;
		var y8 = y7;
		if(y7 == null) {
			y8 = 0;
		}
		if(x7 == null) {
			x8 = 0;
		}
		var _this2 = this.transformations[this.transformationIndex];
		var x9 = x3;
		var y9 = y3;
		if(y3 == null) {
			y9 = 0;
		}
		if(x3 == null) {
			x9 = 0;
		}
		var value_x2 = x9;
		var value_y2 = y9;
		var w2 = _this2._02 * value_x2 + _this2._12 * value_y2 + _this2._22;
		var x10 = (_this2._00 * value_x2 + _this2._10 * value_y2 + _this2._20) / w2;
		var y10 = (_this2._01 * value_x2 + _this2._11 * value_y2 + _this2._21) / w2;
		var x11 = x10;
		var y11 = y10;
		if(y10 == null) {
			y11 = 0;
		}
		if(x10 == null) {
			x11 = 0;
		}
		this.coloredPainter.fillTriangle(this.get_opacity(),this.get_color(),x5,y5,x8,y8,x11,y11);
	}
	,myImageScaleQuality: null
	,get_imageScaleQuality: function() {
		return this.myImageScaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		if(value == this.myImageScaleQuality) {
			return value;
		}
		this.imagePainter.setBilinearFilter(value == 1);
		this.textPainter.setBilinearFilter(value == 1);
		return this.myImageScaleQuality = value;
	}
	,myMipmapScaleQuality: null
	,get_mipmapScaleQuality: function() {
		return this.myMipmapScaleQuality;
	}
	,set_mipmapScaleQuality: function(value) {
		this.imagePainter.setBilinearMipmapFilter(value == 1);
		return this.myMipmapScaleQuality = value;
	}
	,pipelineCache: null
	,lastPipeline: null
	,setPipeline: function(pipeline) {
		if(pipeline == this.lastPipeline) {
			return;
		}
		this.lastPipeline = pipeline;
		this.flush();
		if(pipeline == null) {
			this.imagePainter.set_pipeline(null);
			this.coloredPainter.set_pipeline(null);
			this.textPainter.set_pipeline(null);
		} else {
			var cache = this.pipelineCache.h[pipeline.__id__];
			if(cache == null) {
				cache = new kha_graphics4_SimplePipelineCache(pipeline,true);
				this.pipelineCache.set(pipeline,cache);
			}
			this.imagePainter.set_pipeline(cache);
			this.coloredPainter.set_pipeline(cache);
			this.textPainter.set_pipeline(cache);
		}
	}
	,scissorEnabled: null
	,scissorX: null
	,scissorY: null
	,scissorW: null
	,scissorH: null
	,scissor: function(x,y,width,height) {
		this.scissorEnabled = true;
		this.scissorX = x;
		this.scissorY = y;
		this.scissorW = width;
		this.scissorH = height;
		this.flush();
		this.g.scissor(x,y,width,height);
	}
	,disableScissor: function() {
		this.scissorEnabled = false;
		this.flush();
		this.g.disableScissor();
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(kha_graphics4_Graphics2.current == null) {
			kha_graphics4_Graphics2.current = this;
		} else {
			throw new js__$Boot_HaxeError("End before you begin");
		}
		this.g.begin();
		if(clear) {
			this.clear(clearColor);
		}
		this.setProjection();
	}
	,clear: function(color) {
		this.flush();
		this.g.clear(color == null ? -16777216 : color);
	}
	,flush: function() {
		this.imagePainter.end();
		this.textPainter.end();
		var _this = this.coloredPainter;
		if(kha_graphics4_ColoredShaderPainter.triangleBufferIndex > 0) {
			_this.drawTriBuffer(false);
		}
		if(kha_graphics4_ColoredShaderPainter.bufferIndex > 0) {
			_this.drawBuffer(false);
		}
	}
	,end: function() {
		this.flush();
		this.g.end();
		if(kha_graphics4_Graphics2.current == this) {
			kha_graphics4_Graphics2.current = null;
		} else {
			throw new js__$Boot_HaxeError("Begin before you end");
		}
	}
	,drawVideoInternal: function(video,x,y,width,height) {
	}
	,drawVideo: function(video,x,y,width,height) {
		this.setPipeline(kha_graphics4_Graphics2.videoPipeline);
		this.drawVideoInternal(video,x,y,width,height);
		this.setPipeline(null);
	}
	,__class__: kha_graphics4_Graphics2
});
var kha_graphics4_IndexBuffer = function(indexCount,usage,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	this.lockEnd = 0;
	this.lockStart = 0;
	this.usage = usage;
	this.mySize = indexCount;
	this.buffer = kha_SystemImpl.gl.createBuffer();
	this._data = new Uint32Array(indexCount);
};
$hxClasses["kha.graphics4.IndexBuffer"] = kha_graphics4_IndexBuffer;
kha_graphics4_IndexBuffer.__name__ = "kha.graphics4.IndexBuffer";
kha_graphics4_IndexBuffer.prototype = {
	buffer: null
	,_data: null
	,mySize: null
	,usage: null
	,lockStart: null
	,lockEnd: null
	,'delete': function() {
		this._data = null;
		kha_SystemImpl.gl.deleteBuffer(this.buffer);
	}
	,lock: function(start,count) {
		this.lockStart = start != null ? start : 0;
		this.lockEnd = count != null ? start + count : this.mySize;
		return this._data.subarray(this.lockStart,this.lockEnd);
	}
	,unlock: function(count) {
		if(count != null) {
			this.lockEnd = this.lockStart + count;
		}
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
		var data = this._data.subarray(this.lockStart,this.lockEnd);
		var glData = kha_SystemImpl.elementIndexUint == null ? new Uint16Array(data) : data;
		kha_SystemImpl.gl.bufferData(34963,glData,this.usage == 1 ? 35048 : 35044);
	}
	,set: function() {
		kha_SystemImpl.gl.bindBuffer(34963,this.buffer);
	}
	,count: function() {
		return this.mySize;
	}
	,__class__: kha_graphics4_IndexBuffer
};
var kha_graphics4_PipelineStateBase = function() {
	this.inputLayout = null;
	this.vertexShader = null;
	this.fragmentShader = null;
	this.geometryShader = null;
	this.tessellationControlShader = null;
	this.tessellationEvaluationShader = null;
	this.cullMode = 2;
	this.depthWrite = false;
	this.depthMode = 0;
	this.stencilMode = 0;
	this.stencilBothPass = 0;
	this.stencilDepthFail = 0;
	this.stencilFail = 0;
	this.stencilReferenceValue = kha_graphics4_StencilValue.Static(0);
	this.stencilReadMask = 255;
	this.stencilWriteMask = 255;
	this.blendSource = 1;
	this.blendDestination = 2;
	this.blendOperation = 0;
	this.alphaBlendSource = 1;
	this.alphaBlendDestination = 2;
	this.alphaBlendOperation = 0;
	this.colorWriteMasksRed = [];
	this.colorWriteMasksGreen = [];
	this.colorWriteMasksBlue = [];
	this.colorWriteMasksAlpha = [];
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksRed.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksGreen.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksBlue.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorWriteMasksAlpha.push(true);
	this.colorAttachmentCount = 1;
	this.colorAttachments = [];
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.colorAttachments.push(0);
	this.depthStencilAttachment = 0;
	this.conservativeRasterization = false;
};
$hxClasses["kha.graphics4.PipelineStateBase"] = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineStateBase.__name__ = "kha.graphics4.PipelineStateBase";
kha_graphics4_PipelineStateBase.prototype = {
	inputLayout: null
	,vertexShader: null
	,fragmentShader: null
	,geometryShader: null
	,tessellationControlShader: null
	,tessellationEvaluationShader: null
	,cullMode: null
	,depthWrite: null
	,depthMode: null
	,stencilMode: null
	,stencilBothPass: null
	,stencilDepthFail: null
	,stencilFail: null
	,stencilReferenceValue: null
	,stencilReadMask: null
	,stencilWriteMask: null
	,blendSource: null
	,blendDestination: null
	,blendOperation: null
	,alphaBlendSource: null
	,alphaBlendDestination: null
	,alphaBlendOperation: null
	,colorWriteMasksRed: null
	,colorWriteMasksGreen: null
	,colorWriteMasksBlue: null
	,colorWriteMasksAlpha: null
	,colorAttachmentCount: null
	,colorAttachments: null
	,depthStencilAttachment: null
	,set_colorWriteMask: function(value) {
		var value1 = this.colorWriteMasksAlpha[0] = value;
		var value2 = this.colorWriteMasksGreen[0] = value1;
		var value3 = this.colorWriteMasksBlue[0] = value2;
		return this.colorWriteMasksRed[0] = value3;
	}
	,get_colorWriteMaskRed: function() {
		return this.colorWriteMasksRed[0];
	}
	,set_colorWriteMaskRed: function(value) {
		return this.colorWriteMasksRed[0] = value;
	}
	,get_colorWriteMaskGreen: function() {
		return this.colorWriteMasksGreen[0];
	}
	,set_colorWriteMaskGreen: function(value) {
		return this.colorWriteMasksGreen[0] = value;
	}
	,get_colorWriteMaskBlue: function() {
		return this.colorWriteMasksBlue[0];
	}
	,set_colorWriteMaskBlue: function(value) {
		return this.colorWriteMasksBlue[0] = value;
	}
	,get_colorWriteMaskAlpha: function() {
		return this.colorWriteMasksAlpha[0];
	}
	,set_colorWriteMaskAlpha: function(value) {
		return this.colorWriteMasksAlpha[0] = value;
	}
	,conservativeRasterization: null
	,__class__: kha_graphics4_PipelineStateBase
	,__properties__: {set_colorWriteMaskAlpha:"set_colorWriteMaskAlpha",get_colorWriteMaskAlpha:"get_colorWriteMaskAlpha",set_colorWriteMaskBlue:"set_colorWriteMaskBlue",get_colorWriteMaskBlue:"get_colorWriteMaskBlue",set_colorWriteMaskGreen:"set_colorWriteMaskGreen",get_colorWriteMaskGreen:"get_colorWriteMaskGreen",set_colorWriteMaskRed:"set_colorWriteMaskRed",get_colorWriteMaskRed:"get_colorWriteMaskRed",set_colorWriteMask:"set_colorWriteMask"}
};
var kha_graphics4_PipelineState = function() {
	this.program = null;
	kha_graphics4_PipelineStateBase.call(this);
	this.textures = [];
	this.textureValues = [];
};
$hxClasses["kha.graphics4.PipelineState"] = kha_graphics4_PipelineState;
kha_graphics4_PipelineState.__name__ = "kha.graphics4.PipelineState";
kha_graphics4_PipelineState.__super__ = kha_graphics4_PipelineStateBase;
kha_graphics4_PipelineState.prototype = $extend(kha_graphics4_PipelineStateBase.prototype,{
	program: null
	,textures: null
	,textureValues: null
	,'delete': function() {
		if(this.program != null) {
			kha_SystemImpl.gl.deleteProgram(this.program);
		}
	}
	,compile: function() {
		if(this.program != null) {
			kha_SystemImpl.gl.deleteProgram(this.program);
		}
		this.program = kha_SystemImpl.gl.createProgram();
		this.compileShader(this.vertexShader);
		this.compileShader(this.fragmentShader);
		kha_SystemImpl.gl.attachShader(this.program,this.vertexShader.shader);
		kha_SystemImpl.gl.attachShader(this.program,this.fragmentShader.shader);
		var index = 0;
		var _g = 0;
		var _g1 = this.inputLayout;
		while(_g < _g1.length) {
			var _g2 = 0;
			var _g11 = _g1[_g++].elements;
			while(_g2 < _g11.length) {
				var element = _g11[_g2];
				++_g2;
				kha_SystemImpl.gl.bindAttribLocation(this.program,index,element.name);
				if(element.data == 4) {
					index += 4;
				} else {
					++index;
				}
			}
		}
		kha_SystemImpl.gl.linkProgram(this.program);
		if(!kha_SystemImpl.gl.getProgramParameter(this.program,35714)) {
			throw new js__$Boot_HaxeError("Could not link the shader program:\n" + kha_SystemImpl.gl.getProgramInfoLog(this.program));
		}
	}
	,set: function() {
		kha_SystemImpl.gl.useProgram(this.program);
		var _g = 0;
		var _g1 = this.textureValues.length;
		while(_g < _g1) {
			var index = _g++;
			kha_SystemImpl.gl.uniform1i(this.textureValues[index],index);
		}
		kha_SystemImpl.gl.colorMask(this.colorWriteMasksRed[0],this.colorWriteMasksGreen[0],this.colorWriteMasksBlue[0],this.colorWriteMasksAlpha[0]);
	}
	,compileShader: function(shader) {
		if(shader.shader != null) {
			return;
		}
		var s = kha_SystemImpl.gl.createShader(shader.type);
		var highpSupported = kha_SystemImpl.gl.getShaderPrecisionFormat(35632,36338).precision != 0;
		var files = shader.files;
		var _g = 0;
		var _g1 = files.length;
		while(_g < _g1) {
			var i = _g++;
			if(kha_SystemImpl.gl2) {
				if(files[i].indexOf("-webgl2") >= 0 || files[i].indexOf("runtime-string") >= 0) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			} else {
				if(!highpSupported && (files[i].indexOf("-relaxed") >= 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
				if(highpSupported && (files[i].indexOf("-relaxed") < 0 || files[i].indexOf("runtime-string") >= 0)) {
					kha_SystemImpl.gl.shaderSource(s,shader.sources[i]);
					break;
				}
			}
		}
		kha_SystemImpl.gl.compileShader(s);
		if(!kha_SystemImpl.gl.getShaderParameter(s,35713)) {
			throw new js__$Boot_HaxeError("Could not compile shader:\n" + kha_SystemImpl.gl.getShaderInfoLog(s));
		}
		shader.shader = s;
	}
	,getConstantLocation: function(name) {
		var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
		if(location == null) {
			haxe_Log.trace("Warning: Uniform " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 92, className : "kha.graphics4.PipelineState", methodName : "getConstantLocation"});
		}
		var type = 5126;
		var count = kha_SystemImpl.gl.getProgramParameter(this.program,35718);
		var _g = 0;
		while(_g < count) {
			var info = kha_SystemImpl.gl.getActiveUniform(this.program,_g++);
			if(info.name == name || info.name == name + "[0]") {
				type = info.type;
				break;
			}
		}
		return new kha_js_graphics4_ConstantLocation(location,type);
	}
	,getTextureUnit: function(name) {
		var index = this.findTexture(name);
		if(index < 0) {
			var location = kha_SystemImpl.gl.getUniformLocation(this.program,name);
			if(location == null) {
				haxe_Log.trace("Warning: Sampler " + name + " not found.",{ fileName : "kha/graphics4/PipelineState.hx", lineNumber : 111, className : "kha.graphics4.PipelineState", methodName : "getTextureUnit"});
			}
			index = this.textures.length;
			this.textureValues.push(location);
			this.textures.push(name);
		}
		return new kha_js_graphics4_TextureUnit(index);
	}
	,findTexture: function(name) {
		var _g = 0;
		var _g1 = this.textures.length;
		while(_g < _g1) {
			var index = _g++;
			if(this.textures[index] == name) {
				return index;
			}
		}
		return -1;
	}
	,__class__: kha_graphics4_PipelineState
});
var kha_graphics4_StencilValue = $hxEnums["kha.graphics4.StencilValue"] = { __ename__ : true, __constructs__ : ["Dynamic","Static"]
	,Dynamic: {_hx_index:0,__enum__:"kha.graphics4.StencilValue",toString:$estr}
	,Static: ($_=function(value) { return {_hx_index:1,value:value,__enum__:"kha.graphics4.StencilValue",toString:$estr}; },$_.__params__ = ["value"],$_)
};
kha_graphics4_StencilValue.__empty_constructs__ = [kha_graphics4_StencilValue.Dynamic];
var kha_graphics4_TessellationControlShader = function(sources,files) {
};
$hxClasses["kha.graphics4.TessellationControlShader"] = kha_graphics4_TessellationControlShader;
kha_graphics4_TessellationControlShader.__name__ = "kha.graphics4.TessellationControlShader";
kha_graphics4_TessellationControlShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_TessellationControlShader
};
var kha_graphics4_TessellationEvaluationShader = function(sources,files) {
};
$hxClasses["kha.graphics4.TessellationEvaluationShader"] = kha_graphics4_TessellationEvaluationShader;
kha_graphics4_TessellationEvaluationShader.__name__ = "kha.graphics4.TessellationEvaluationShader";
kha_graphics4_TessellationEvaluationShader.prototype = {
	'delete': function() {
	}
	,__class__: kha_graphics4_TessellationEvaluationShader
};
var kha_graphics4_TextureUnit = function() { };
$hxClasses["kha.graphics4.TextureUnit"] = kha_graphics4_TextureUnit;
kha_graphics4_TextureUnit.__name__ = "kha.graphics4.TextureUnit";
kha_graphics4_TextureUnit.__isInterface__ = true;
var kha_graphics4_VertexBuffer = function(vertexCount,structure,usage,instanceDataStepRate,canRead) {
	if(canRead == null) {
		canRead = false;
	}
	if(instanceDataStepRate == null) {
		instanceDataStepRate = 0;
	}
	this.lockEnd = 0;
	this.lockStart = 0;
	this.instanceDataStepRate = instanceDataStepRate;
	this.mySize = vertexCount;
	this.myStride = 0;
	var _g = 0;
	var _g1 = structure.elements;
	while(_g < _g1.length) switch(_g1[_g++].data) {
	case 0:
		this.myStride += 4;
		break;
	case 1:
		this.myStride += 8;
		break;
	case 2:
		this.myStride += 12;
		break;
	case 3:
		this.myStride += 16;
		break;
	case 4:
		this.myStride += 64;
		break;
	case 5:
		this.myStride += 4;
		break;
	case 6:
		this.myStride += 8;
		break;
	}
	this.buffer = kha_SystemImpl.gl.createBuffer();
	this._data = new Float32Array(vertexCount * this.myStride / 4 | 0);
	this.sizes = [];
	this.offsets = [];
	this.types = [];
	this.sizes[structure.elements.length - 1] = 0;
	this.offsets[structure.elements.length - 1] = 0;
	this.types[structure.elements.length - 1] = 0;
	var offset = 0;
	var index = 0;
	var _g2 = 0;
	var _g3 = structure.elements;
	while(_g2 < _g3.length) {
		var element = _g3[_g2];
		++_g2;
		var size;
		var type;
		switch(element.data) {
		case 0:
			size = 1;
			type = 5126;
			break;
		case 1:
			size = 2;
			type = 5126;
			break;
		case 2:
			size = 3;
			type = 5126;
			break;
		case 3:
			size = 4;
			type = 5126;
			break;
		case 4:
			size = 16;
			type = 5126;
			break;
		case 5:
			size = 2;
			type = 5122;
			break;
		case 6:
			size = 4;
			type = 5122;
			break;
		}
		this.sizes[index] = size;
		this.offsets[index] = offset;
		this.types[index] = type;
		switch(element.data) {
		case 0:
			offset += 4;
			break;
		case 1:
			offset += 8;
			break;
		case 2:
			offset += 12;
			break;
		case 3:
			offset += 16;
			break;
		case 4:
			offset += 64;
			break;
		case 5:
			offset += 4;
			break;
		case 6:
			offset += 8;
			break;
		}
		++index;
	}
	kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
	kha_SystemImpl.gl.bufferData(34962,this._data.subarray(0 * this.stride(),this.mySize * this.stride()),usage == 1 ? 35048 : 35044);
};
$hxClasses["kha.graphics4.VertexBuffer"] = kha_graphics4_VertexBuffer;
kha_graphics4_VertexBuffer.__name__ = "kha.graphics4.VertexBuffer";
kha_graphics4_VertexBuffer.prototype = {
	buffer: null
	,_data: null
	,mySize: null
	,myStride: null
	,sizes: null
	,offsets: null
	,types: null
	,instanceDataStepRate: null
	,lockStart: null
	,lockEnd: null
	,'delete': function() {
		this._data = null;
		kha_SystemImpl.gl.deleteBuffer(this.buffer);
	}
	,lock: function(start,count) {
		this.lockStart = start != null ? start : 0;
		this.lockEnd = count != null ? start + count : this.mySize;
		return this._data.subarray(this.lockStart * this.stride(),this.lockEnd * this.stride());
	}
	,lockInt16: function(start,count) {
		var this1 = new Int16Array(this.lock(start,count).buffer);
		return this1;
	}
	,unlock: function(count) {
		if(count != null) {
			this.lockEnd = this.lockStart + count;
		}
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		kha_SystemImpl.gl.bufferSubData(34962,this.lockStart * this.stride(),this._data.subarray(this.lockStart * this.stride(),this.lockEnd * this.stride()));
	}
	,stride: function() {
		return this.myStride;
	}
	,count: function() {
		return this.mySize;
	}
	,set: function(offset) {
		var ext = kha_SystemImpl.gl2 ? true : kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		kha_SystemImpl.gl.bindBuffer(34962,this.buffer);
		var attributesOffset = 0;
		var _g = 0;
		var _g1 = this.sizes.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.sizes[i] > 4) {
				var size = this.sizes[i];
				var addonOffset = 0;
				while(size > 0) {
					kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
					kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,4,5126,false,this.myStride,this.offsets[i] + addonOffset);
					if(ext) {
						if(kha_SystemImpl.gl2) {
							kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
						} else {
							ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
						}
					}
					size -= 4;
					addonOffset += 16;
					++attributesOffset;
				}
			} else {
				var normalized = this.types[i] == 5126 ? false : true;
				kha_SystemImpl.gl.enableVertexAttribArray(offset + attributesOffset);
				kha_SystemImpl.gl.vertexAttribPointer(offset + attributesOffset,this.sizes[i],this.types[i],normalized,this.myStride,this.offsets[i]);
				if(ext) {
					if(kha_SystemImpl.gl2) {
						kha_SystemImpl.gl.vertexAttribDivisor(offset + attributesOffset,this.instanceDataStepRate);
					} else {
						ext.vertexAttribDivisorANGLE(offset + attributesOffset,this.instanceDataStepRate);
					}
				}
				++attributesOffset;
			}
		}
		return attributesOffset;
	}
	,__class__: kha_graphics4_VertexBuffer
};
var kha_graphics4_VertexElement = function(name,data) {
	this.name = name;
	this.data = data;
};
$hxClasses["kha.graphics4.VertexElement"] = kha_graphics4_VertexElement;
kha_graphics4_VertexElement.__name__ = "kha.graphics4.VertexElement";
kha_graphics4_VertexElement.prototype = {
	name: null
	,data: null
	,__class__: kha_graphics4_VertexElement
};
var kha_graphics4_VertexShader = function(sources,files) {
	this.sources = [];
	var _g = 0;
	while(_g < sources.length) this.sources.push(sources[_g++].toString());
	this.type = 35633;
	this.shader = null;
	this.files = files;
};
$hxClasses["kha.graphics4.VertexShader"] = kha_graphics4_VertexShader;
kha_graphics4_VertexShader.__name__ = "kha.graphics4.VertexShader";
kha_graphics4_VertexShader.fromSource = function(source) {
	var shader = new kha_graphics4_VertexShader([],["runtime-string"]);
	shader.sources.push(source);
	return shader;
};
kha_graphics4_VertexShader.prototype = {
	sources: null
	,type: null
	,shader: null
	,files: null
	,'delete': function() {
		kha_SystemImpl.gl.deleteShader(this.shader);
		this.shader = null;
		this.sources = null;
	}
	,__class__: kha_graphics4_VertexShader
};
var kha_graphics4_VertexStructure = function() {
	this.elements = [];
	this.instanced = false;
};
$hxClasses["kha.graphics4.VertexStructure"] = kha_graphics4_VertexStructure;
kha_graphics4_VertexStructure.__name__ = "kha.graphics4.VertexStructure";
kha_graphics4_VertexStructure.prototype = {
	elements: null
	,instanced: null
	,add: function(name,data) {
		this.elements.push(new kha_graphics4_VertexElement(name,data));
	}
	,size: function() {
		return this.elements.length;
	}
	,byteSize: function() {
		var byteSize = 0;
		var _g = 0;
		var _g1 = this.elements.length;
		while(_g < _g1) byteSize += this.dataByteSize(this.elements[_g++].data);
		return byteSize;
	}
	,dataByteSize: function(data) {
		switch(data) {
		case 0:
			return 4;
		case 1:
			return 8;
		case 2:
			return 12;
		case 3:
			return 16;
		case 4:
			return 64;
		case 5:
			return 4;
		case 6:
			return 8;
		}
	}
	,get: function(index) {
		return this.elements[index];
	}
	,__class__: kha_graphics4_VertexStructure
};
var kha_input_Gamepad = $hx_exports["kha"]["input"]["Gamepad"] = function(index,id) {
	if(id == null) {
		id = "unknown";
	}
	if(index == null) {
		index = 0;
	}
	this.index = index;
	this.axisListeners = [];
	this.buttonListeners = [];
	kha_input_Gamepad.instances[index] = this;
};
$hxClasses["kha.input.Gamepad"] = kha_input_Gamepad;
kha_input_Gamepad.__name__ = "kha.input.Gamepad";
kha_input_Gamepad.get = function(index) {
	if(index == null) {
		index = 0;
	}
	if(index >= kha_input_Gamepad.instances.length) {
		return null;
	}
	return kha_input_Gamepad.instances[index];
};
kha_input_Gamepad.notifyOnConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		kha_input_Gamepad.connectListeners.push(connectListener);
	}
	if(disconnectListener != null) {
		kha_input_Gamepad.disconnectListeners.push(disconnectListener);
	}
};
kha_input_Gamepad.removeConnect = function(connectListener,disconnectListener) {
	if(connectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.connectListeners,connectListener);
	}
	if(disconnectListener != null) {
		HxOverrides.remove(kha_input_Gamepad.disconnectListeners,disconnectListener);
	}
};
kha_input_Gamepad.sendConnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = true;
	var _g = 0;
	var _g1 = kha_input_Gamepad.connectListeners;
	while(_g < _g1.length) _g1[_g++](index);
};
kha_input_Gamepad.sendDisconnectEvent = function(index) {
	kha_input_Gamepad.instances[index].connected = false;
	var _g = 0;
	var _g1 = kha_input_Gamepad.disconnectListeners;
	while(_g < _g1.length) _g1[_g++](index);
};
kha_input_Gamepad.prototype = {
	index: null
	,notify: function(axisListener,buttonListener) {
		if(axisListener != null) {
			this.axisListeners.push(axisListener);
		}
		if(buttonListener != null) {
			this.buttonListeners.push(buttonListener);
		}
	}
	,remove: function(axisListener,buttonListener) {
		if(axisListener != null) {
			HxOverrides.remove(this.axisListeners,axisListener);
		}
		if(buttonListener != null) {
			HxOverrides.remove(this.buttonListeners,buttonListener);
		}
	}
	,axisListeners: null
	,buttonListeners: null
	,id: null
	,vendor: null
	,connected: null
	,get_id: function() {
		return kha_SystemImpl.getGamepadId(this.index);
	}
	,get_vendor: function() {
		return kha_SystemImpl.getGamepadVendor(this.index);
	}
	,sendAxisEvent: function(axis,value) {
		var _g = 0;
		var _g1 = this.axisListeners;
		while(_g < _g1.length) _g1[_g++](axis,value);
	}
	,sendButtonEvent: function(button,value) {
		var _g = 0;
		var _g1 = this.buttonListeners;
		while(_g < _g1.length) _g1[_g++](button,value);
	}
	,__class__: kha_input_Gamepad
	,__properties__: {get_vendor:"get_vendor",get_id:"get_id"}
};
var kha_input_BlockInterventions = $hxEnums["kha.input.BlockInterventions"] = { __ename__ : true, __constructs__ : ["Default","Full","None","Custom"]
	,Default: {_hx_index:0,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Full: {_hx_index:1,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,None: {_hx_index:2,__enum__:"kha.input.BlockInterventions",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:3,func:func,__enum__:"kha.input.BlockInterventions",toString:$estr}; },$_.__params__ = ["func"],$_)
};
kha_input_BlockInterventions.__empty_constructs__ = [kha_input_BlockInterventions.Default,kha_input_BlockInterventions.Full,kha_input_BlockInterventions.None];
var kha_netsync_Controller = function() {
	this.__id = kha_netsync_ControllerBuilder.nextId++;
	this._inputBuffer = new haxe_io_Bytes(new ArrayBuffer(1));
};
$hxClasses["kha.netsync.Controller"] = kha_netsync_Controller;
kha_netsync_Controller.__name__ = "kha.netsync.Controller";
kha_netsync_Controller.prototype = {
	__id: null
	,_inputBufferIndex: null
	,_inputBuffer: null
	,_id: function() {
		return this.__id;
	}
	,_receive: function(bytes) {
	}
	,__class__: kha_netsync_Controller
};
var kha_input_Keyboard = $hx_exports["kha"]["input"]["Keyboard"] = function() {
	kha_netsync_Controller.call(this);
	this.downListeners = [];
	this.upListeners = [];
	this.pressListeners = [];
	kha_input_Keyboard.instance = this;
};
$hxClasses["kha.input.Keyboard"] = kha_input_Keyboard;
kha_input_Keyboard.__name__ = "kha.input.Keyboard";
kha_input_Keyboard.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getKeyboard(num);
};
kha_input_Keyboard.disableSystemInterventions = function(behavior) {
	kha_input_Keyboard.keyBehavior = behavior;
};
kha_input_Keyboard.__super__ = kha_netsync_Controller;
kha_input_Keyboard.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			this.downListeners.push(downListener);
		}
		if(upListener != null) {
			this.upListeners.push(upListener);
		}
		if(pressListener != null) {
			this.pressListeners.push(pressListener);
		}
	}
	,remove: function(downListener,upListener,pressListener) {
		if(downListener != null) {
			HxOverrides.remove(this.downListeners,downListener);
		}
		if(upListener != null) {
			HxOverrides.remove(this.upListeners,upListener);
		}
		if(pressListener != null) {
			HxOverrides.remove(this.pressListeners,pressListener);
		}
	}
	,show: function() {
	}
	,hide: function() {
	}
	,downListeners: null
	,upListeners: null
	,pressListeners: null
	,sendDownEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,0);
			bytes.b[4] = code;
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.downListeners;
		while(_g < _g1.length) _g1[_g++](code);
	}
	,sendUpEvent: function(code) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,1);
			bytes.b[4] = code;
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.upListeners;
		while(_g < _g1.length) _g1[_g++](code);
	}
	,sendPressEvent: function(char) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
			bytes.setInt32(0,2);
			bytes.b[4] = HxOverrides.cca(char,0);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		var _g = 0;
		var _g1 = this.pressListeners;
		while(_g < _g1.length) _g1[_g++](char);
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			this.sendDownEvent(bytes.b[4]);
			return;
		}
		if(funcindex == 1) {
			this.sendUpEvent(bytes.b[4]);
			return;
		}
		if(funcindex == 2) {
			var code = bytes.b[4];
			this.sendPressEvent(String.fromCodePoint(code));
			return;
		}
	}
	,__class__: kha_input_Keyboard
});
var kha_input_MouseEventBlockBehavior = $hxEnums["kha.input.MouseEventBlockBehavior"] = { __ename__ : true, __constructs__ : ["Full","None","Custom"]
	,Full: {_hx_index:0,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}
	,None: {_hx_index:1,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"kha.input.MouseEventBlockBehavior",toString:$estr}; },$_.__params__ = ["func"],$_)
};
kha_input_MouseEventBlockBehavior.__empty_constructs__ = [kha_input_MouseEventBlockBehavior.Full,kha_input_MouseEventBlockBehavior.None];
var kha_input_MouseCursor = $hxEnums["kha.input.MouseCursor"] = { __ename__ : true, __constructs__ : ["Default","Pointer","Text","EastWestResize","NorthSouthResize","NorthEastResize","SouthEastResize","NorthWestResize","SouthWestResize","Grab","Grabbing","NotAllowed","Wait","Crosshair"]
	,Default: {_hx_index:0,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Pointer: {_hx_index:1,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Text: {_hx_index:2,__enum__:"kha.input.MouseCursor",toString:$estr}
	,EastWestResize: {_hx_index:3,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NorthSouthResize: {_hx_index:4,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NorthEastResize: {_hx_index:5,__enum__:"kha.input.MouseCursor",toString:$estr}
	,SouthEastResize: {_hx_index:6,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NorthWestResize: {_hx_index:7,__enum__:"kha.input.MouseCursor",toString:$estr}
	,SouthWestResize: {_hx_index:8,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Grab: {_hx_index:9,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Grabbing: {_hx_index:10,__enum__:"kha.input.MouseCursor",toString:$estr}
	,NotAllowed: {_hx_index:11,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Wait: {_hx_index:12,__enum__:"kha.input.MouseCursor",toString:$estr}
	,Crosshair: {_hx_index:13,__enum__:"kha.input.MouseCursor",toString:$estr}
};
kha_input_MouseCursor.__empty_constructs__ = [kha_input_MouseCursor.Default,kha_input_MouseCursor.Pointer,kha_input_MouseCursor.Text,kha_input_MouseCursor.EastWestResize,kha_input_MouseCursor.NorthSouthResize,kha_input_MouseCursor.NorthEastResize,kha_input_MouseCursor.SouthEastResize,kha_input_MouseCursor.NorthWestResize,kha_input_MouseCursor.SouthWestResize,kha_input_MouseCursor.Grab,kha_input_MouseCursor.Grabbing,kha_input_MouseCursor.NotAllowed,kha_input_MouseCursor.Wait,kha_input_MouseCursor.Crosshair];
var kha_input_Mouse = $hx_exports["kha"]["input"]["Mouse"] = function() {
	kha_netsync_Controller.call(this);
	kha_input_Mouse.instance = this;
};
$hxClasses["kha.input.Mouse"] = kha_input_Mouse;
kha_input_Mouse.__name__ = "kha.input.Mouse";
kha_input_Mouse.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getMouse(num);
};
kha_input_Mouse.setWheelEventBlockBehavior = function(behavior) {
	kha_input_Mouse.wheelEventBlockBehavior = behavior;
};
kha_input_Mouse.__super__ = kha_netsync_Controller;
kha_input_Mouse.prototype = $extend(kha_netsync_Controller.prototype,{
	notify: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,remove: function(downListener,upListener,moveListener,wheelListener,leaveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener,wheelListener,leaveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners == null) {
				this.windowWheelListeners = [];
			}
			while(this.windowWheelListeners.length <= windowId) this.windowWheelListeners.push([]);
			this.windowWheelListeners[windowId].push(wheelListener);
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners == null) {
				this.windowLeaveListeners = [];
			}
			while(this.windowLeaveListeners.length <= windowId) this.windowLeaveListeners.push([]);
			this.windowLeaveListeners[windowId].push(leaveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener,wheelListener,leaveListener) {
		if(downListener != null) {
			if(this.windowDownListeners != null) {
				if(windowId < this.windowDownListeners.length) {
					HxOverrides.remove(this.windowDownListeners[windowId],downListener);
				} else {
					haxe_Log.trace("no downListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 147, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no downListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 151, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(upListener != null) {
			if(this.windowUpListeners != null) {
				if(windowId < this.windowUpListeners.length) {
					HxOverrides.remove(this.windowUpListeners[windowId],upListener);
				} else {
					haxe_Log.trace("no upListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 161, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no upListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 165, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(moveListener != null) {
			if(this.windowMoveListeners != null) {
				if(windowId < this.windowMoveListeners.length) {
					HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
				} else {
					haxe_Log.trace("no moveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 175, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no moveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 179, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(wheelListener != null) {
			if(this.windowWheelListeners != null) {
				if(windowId < this.windowWheelListeners.length) {
					HxOverrides.remove(this.windowWheelListeners[windowId],wheelListener);
				} else {
					haxe_Log.trace("no wheelListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 189, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no wheelListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 193, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
		if(leaveListener != null) {
			if(this.windowLeaveListeners != null) {
				if(windowId < this.windowLeaveListeners.length) {
					HxOverrides.remove(this.windowLeaveListeners[windowId],leaveListener);
				} else {
					haxe_Log.trace("no leaveListeners for window \"" + windowId + "\" are registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 203, className : "kha.input.Mouse", methodName : "removeWindowed"});
				}
			} else {
				haxe_Log.trace("no leaveListeners were ever registered",{ fileName : "kha/input/Mouse.hx", lineNumber : 207, className : "kha.input.Mouse", methodName : "removeWindowed"});
			}
		}
	}
	,lock: function() {
	}
	,unlock: function() {
	}
	,canLock: function() {
		return false;
	}
	,isLocked: function() {
		return false;
	}
	,notifyOnLockChange: function(change,error) {
	}
	,removeFromLockChange: function(change,error) {
	}
	,hideSystemCursor: function() {
	}
	,showSystemCursor: function() {
	}
	,setSystemCursor: function(cursor) {
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,windowWheelListeners: null
	,windowLeaveListeners: null
	,sendLeaveEvent: function(windowId) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(8));
			bytes.setInt32(0,0);
			bytes.setInt32(4,windowId);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowLeaveListeners != null) {
			var _g = 0;
			var _g1 = this.windowLeaveListeners[windowId];
			while(_g < _g1.length) _g1[_g++]();
		}
	}
	,sendDownEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,1);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) _g1[_g++](button,x,y);
		}
	}
	,sendUpEvent: function(windowId,button,x,y) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(20));
			bytes.setInt32(0,2);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,button);
			bytes.setInt32(12,x);
			bytes.setInt32(16,y);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) _g1[_g++](button,x,y);
		}
	}
	,sendMoveEvent: function(windowId,x,y,movementX,movementY) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(24));
			bytes.setInt32(0,3);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,x);
			bytes.setInt32(12,y);
			bytes.setInt32(16,movementX);
			bytes.setInt32(20,movementY);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) _g1[_g++](x,y,movementX,movementY);
		}
	}
	,sendWheelEvent: function(windowId,delta) {
		if(kha_netsync_Session.the() != null) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer(12));
			bytes.setInt32(0,4);
			bytes.setInt32(4,windowId);
			bytes.setInt32(8,delta);
			kha_netsync_Session.the().sendControllerUpdate(this._id(),bytes);
		}
		if(this.windowWheelListeners != null) {
			var _g = 0;
			var _g1 = this.windowWheelListeners[windowId];
			while(_g < _g1.length) _g1[_g++](delta);
		}
	}
	,_receive: function(bytes) {
		var funcindex = bytes.getInt32(0);
		if(funcindex == 0) {
			this.sendLeaveEvent(bytes.getInt32(4));
			return;
		}
		if(funcindex == 1) {
			this.sendDownEvent(bytes.getInt32(4),bytes.getInt32(8),bytes.getInt32(12),bytes.getInt32(16));
			return;
		}
		if(funcindex == 2) {
			this.sendUpEvent(bytes.getInt32(4),bytes.getInt32(8),bytes.getInt32(12),bytes.getInt32(16));
			return;
		}
		if(funcindex == 3) {
			this.sendMoveEvent(bytes.getInt32(4),bytes.getInt32(8),bytes.getInt32(12),bytes.getInt32(16),bytes.getInt32(20));
			return;
		}
		if(funcindex == 4) {
			this.sendWheelEvent(bytes.getInt32(4),bytes.getInt32(8));
			return;
		}
	}
	,__class__: kha_input_Mouse
});
var kha_input_MouseImpl = function() {
	kha_input_Mouse.call(this);
};
$hxClasses["kha.input.MouseImpl"] = kha_input_MouseImpl;
kha_input_MouseImpl.__name__ = "kha.input.MouseImpl";
kha_input_MouseImpl.__super__ = kha_input_Mouse;
kha_input_MouseImpl.prototype = $extend(kha_input_Mouse.prototype,{
	lock: function() {
		kha_SystemImpl.lockMouse();
	}
	,unlock: function() {
		kha_SystemImpl.unlockMouse();
	}
	,canLock: function() {
		return kha_SystemImpl.canLockMouse();
	}
	,isLocked: function() {
		return kha_SystemImpl.isMouseLocked();
	}
	,notifyOnLockChange: function(func,error) {
		kha_SystemImpl.notifyOfMouseLockChange(func,error);
	}
	,removeFromLockChange: function(func,error) {
		kha_SystemImpl.removeFromMouseLockChange(func,error);
	}
	,hideSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "none";
	}
	,showSystemCursor: function() {
		kha_SystemImpl.khanvas.style.cursor = "default";
	}
	,setSystemCursor: function(cursor) {
		var tmp;
		switch(cursor._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "text";
			break;
		case 3:
			tmp = "ew-resize";
			break;
		case 4:
			tmp = "ns-resize";
			break;
		case 5:
			tmp = "ne-resize";
			break;
		case 6:
			tmp = "se-resize";
			break;
		case 7:
			tmp = "nw-resize";
			break;
		case 8:
			tmp = "sw-resize";
			break;
		case 9:
			tmp = "grab";
			break;
		case 10:
			tmp = "grabbing";
			break;
		case 11:
			tmp = "not-allowed";
			break;
		case 12:
			tmp = "wait";
			break;
		case 13:
			tmp = "crosshair";
			break;
		}
		kha_SystemImpl.khanvas.style.cursor = tmp;
	}
	,_receive: function(bytes) {
		bytes.getInt32(0);
	}
	,__class__: kha_input_MouseImpl
});
var kha_input_Pen = function() {
	kha_input_Pen.instance = this;
};
$hxClasses["kha.input.Pen"] = kha_input_Pen;
kha_input_Pen.__name__ = "kha.input.Pen";
kha_input_Pen.get = function(num) {
	if(num == null) {
		num = 0;
	}
	return kha_SystemImpl.getPen(num);
};
kha_input_Pen.prototype = {
	notify: function(downListener,upListener,moveListener) {
		this.notifyWindowed(0,downListener,upListener,moveListener);
	}
	,remove: function(downListener,upListener,moveListener) {
		this.removeWindowed(0,downListener,upListener,moveListener);
	}
	,notifyWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null) {
			if(this.windowDownListeners == null) {
				this.windowDownListeners = [];
			}
			while(this.windowDownListeners.length <= windowId) this.windowDownListeners.push([]);
			this.windowDownListeners[windowId].push(downListener);
		}
		if(upListener != null) {
			if(this.windowUpListeners == null) {
				this.windowUpListeners = [];
			}
			while(this.windowUpListeners.length <= windowId) this.windowUpListeners.push([]);
			this.windowUpListeners[windowId].push(upListener);
		}
		if(moveListener != null) {
			if(this.windowMoveListeners == null) {
				this.windowMoveListeners = [];
			}
			while(this.windowMoveListeners.length <= windowId) this.windowMoveListeners.push([]);
			this.windowMoveListeners[windowId].push(moveListener);
		}
	}
	,removeWindowed: function(windowId,downListener,upListener,moveListener) {
		if(downListener != null && this.windowDownListeners != null) {
			if(windowId < this.windowDownListeners.length) {
				HxOverrides.remove(this.windowDownListeners[windowId],downListener);
			}
		}
		if(upListener != null && this.windowUpListeners != null) {
			if(windowId < this.windowUpListeners.length) {
				HxOverrides.remove(this.windowUpListeners[windowId],upListener);
			}
		}
		if(moveListener != null && this.windowMoveListeners != null) {
			if(windowId < this.windowMoveListeners.length) {
				HxOverrides.remove(this.windowMoveListeners[windowId],moveListener);
			}
		}
	}
	,windowDownListeners: null
	,windowUpListeners: null
	,windowMoveListeners: null
	,sendDownEvent: function(windowId,x,y,pressure) {
		if(this.windowDownListeners != null) {
			var _g = 0;
			var _g1 = this.windowDownListeners[windowId];
			while(_g < _g1.length) _g1[_g++](x,y,pressure);
		}
	}
	,sendUpEvent: function(windowId,x,y,pressure) {
		if(this.windowUpListeners != null) {
			var _g = 0;
			var _g1 = this.windowUpListeners[windowId];
			while(_g < _g1.length) _g1[_g++](x,y,pressure);
		}
	}
	,sendMoveEvent: function(windowId,x,y,pressure) {
		if(this.windowMoveListeners != null) {
			var _g = 0;
			var _g1 = this.windowMoveListeners[windowId];
			while(_g < _g1.length) _g1[_g++](x,y,pressure);
		}
	}
	,__class__: kha_input_Pen
};
var kha_input_Sensor = function() {
	this.listeners = [];
};
$hxClasses["kha.input.Sensor"] = kha_input_Sensor;
kha_input_Sensor.__name__ = "kha.input.Sensor";
kha_input_Sensor.get = function(type) {
	switch(type) {
	case 0:
		return kha_input_Sensor.accelerometer;
	case 1:
		return kha_input_Sensor.gyroscope;
	}
};
kha_input_Sensor._changed = function(type,x,y,z) {
	var _g = 0;
	var _g1 = kha_input_Sensor.get(type == 0 ? 0 : 1).listeners;
	while(_g < _g1.length) _g1[_g++](x,y,z);
};
kha_input_Sensor.prototype = {
	listeners: null
	,notify: function(listener) {
		if(!kha_input_Sensor.isInited) {
			kha_SystemImpl.initSensor();
			kha_input_Sensor.isInited = true;
		}
		this.listeners.push(listener);
	}
	,__class__: kha_input_Sensor
};
var kha_input_TouchDownEventBlockBehavior = $hxEnums["kha.input.TouchDownEventBlockBehavior"] = { __ename__ : true, __constructs__ : ["Full","None","Custom"]
	,Full: {_hx_index:0,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}
	,None: {_hx_index:1,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}
	,Custom: ($_=function(func) { return {_hx_index:2,func:func,__enum__:"kha.input.TouchDownEventBlockBehavior",toString:$estr}; },$_.__params__ = ["func"],$_)
};
kha_input_TouchDownEventBlockBehavior.__empty_constructs__ = [kha_input_TouchDownEventBlockBehavior.Full,kha_input_TouchDownEventBlockBehavior.None];
var kha_input_Surface = $hx_exports["kha"]["input"]["Surface"] = function() {
	this.touchStartListeners = [];
	this.touchEndListeners = [];
	this.moveListeners = [];
	kha_input_Surface.instance = this;
};
$hxClasses["kha.input.Surface"] = kha_input_Surface;
kha_input_Surface.__name__ = "kha.input.Surface";
kha_input_Surface.get = function(num) {
	if(num == null) {
		num = 0;
	}
	if(num != 0) {
		return null;
	}
	return kha_input_Surface.instance;
};
kha_input_Surface.setTouchDownEventBlockBehavior = function(behavior) {
	kha_input_Surface.touchDownEventBlockBehavior = behavior;
};
kha_input_Surface.prototype = {
	notify: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			this.touchStartListeners.push(touchStartListener);
		}
		if(touchEndListener != null) {
			this.touchEndListeners.push(touchEndListener);
		}
		if(moveListener != null) {
			this.moveListeners.push(moveListener);
		}
	}
	,remove: function(touchStartListener,touchEndListener,moveListener) {
		if(touchStartListener != null) {
			HxOverrides.remove(this.touchStartListeners,touchStartListener);
		}
		if(touchEndListener != null) {
			HxOverrides.remove(this.touchEndListeners,touchEndListener);
		}
		if(moveListener != null) {
			HxOverrides.remove(this.moveListeners,moveListener);
		}
	}
	,touchStartListeners: null
	,touchEndListeners: null
	,moveListeners: null
	,sendTouchStartEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchStartListeners;
		while(_g < _g1.length) _g1[_g++](index,x,y);
	}
	,sendTouchEndEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.touchEndListeners;
		while(_g < _g1.length) _g1[_g++](index,x,y);
	}
	,sendMoveEvent: function(index,x,y) {
		var _g = 0;
		var _g1 = this.moveListeners;
		while(_g < _g1.length) _g1[_g++](index,x,y);
	}
	,__class__: kha_input_Surface
};
var kha_internal_BytesBlob = function(bytes) {
	this.bytes = bytes;
};
$hxClasses["kha.internal.BytesBlob"] = kha_internal_BytesBlob;
kha_internal_BytesBlob.__name__ = "kha.internal.BytesBlob";
kha_internal_BytesBlob.__interfaces__ = [kha_Resource];
kha_internal_BytesBlob.fromBytes = function(bytes) {
	return new kha_internal_BytesBlob(bytes);
};
kha_internal_BytesBlob.alloc = function(size) {
	return new kha_internal_BytesBlob(new haxe_io_Bytes(new ArrayBuffer(size)));
};
kha_internal_BytesBlob.readF32 = function(i) {
	var sign = (i & -2147483648) == 0 ? 1 : -1;
	var exp = i >> 23 & 255;
	var man = i & 8388607;
	switch(exp) {
	case 0:
		return 0.0;
	case 255:
		if(man != 0) {
			return NaN;
		} else if(sign > 0) {
			return Infinity;
		} else {
			return -Infinity;
		}
		break;
	default:
		return sign * ((man + 8388608) / 8388608.0) * Math.pow(2,exp - 127);
	}
};
kha_internal_BytesBlob.bit = function(value,position) {
	if((value >>> position & 1) == 1) {
		return true;
	} else {
		return false;
	}
};
kha_internal_BytesBlob.toText = function(chars,length) {
	var value = "";
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		value += String.fromCodePoint(chars[i]);
	}
	return value;
};
kha_internal_BytesBlob.prototype = {
	bytes: null
	,sub: function(start,length) {
		return new kha_internal_BytesBlob(this.bytes.sub(start,length));
	}
	,length: null
	,get_length: function() {
		return this.bytes.length;
	}
	,writeU8: function(position,value) {
		this.bytes.b[position] = value;
	}
	,readU8: function(position) {
		return this.bytes.b[position++];
	}
	,readS8: function(position) {
		var byte = this.bytes.b[position];
		++position;
		var sign = (byte & 128) == 0 ? 1 : -1;
		byte &= 127;
		return sign * byte;
	}
	,readU16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return first * 256 + second;
	}
	,readU16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		return second * 256 + first;
	}
	,readU32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
	}
	,readU32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		position += 4;
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readS16BE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		position += 2;
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		if(sign == -1) {
			return -32767 + first * 256 + second;
		} else {
			return first * 256 + second;
		}
	}
	,readS16LE: function(position) {
		var first = this.bytes.b[position];
		var second = this.bytes.b[position + 1];
		var sign = (second & 128) == 0 ? 1 : -1;
		second &= 127;
		position += 2;
		if(sign == -1) {
			return -32767 + second * 256 + first;
		} else {
			return second * 256 + first;
		}
	}
	,readS32LE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (first & 128) == 0 ? 1 : -1;
		first &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		} else {
			return fourth + third * 256 + second * 256 * 256 + first * 256 * 256 * 256;
		}
	}
	,readS32BE: function(position) {
		var fourth = this.bytes.b[position];
		var third = this.bytes.b[position + 1];
		var second = this.bytes.b[position + 2];
		var first = this.bytes.b[position + 3];
		var sign = (fourth & 128) == 0 ? 1 : -1;
		fourth &= 127;
		position += 4;
		if(sign == -1) {
			return -2147483647 + first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
		}
		return first + second * 256 + third * 256 * 256 + fourth * 256 * 256 * 256;
	}
	,readF32LE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32LE(position));
	}
	,readF32BE: function(position) {
		return kha_internal_BytesBlob.readF32(this.readS32BE(position));
	}
	,toString: function() {
		return this.bytes.toString();
	}
	,readUtf8String: function() {
		return this.bytes.toString();
	}
	,toBytes: function() {
		return this.bytes;
	}
	,unload: function() {
		this.bytes = null;
	}
	,__class__: kha_internal_BytesBlob
	,__properties__: {get_length:"get_length"}
};
var kha_internal_HdrFormat = function() {
};
$hxClasses["kha.internal.HdrFormat"] = kha_internal_HdrFormat;
kha_internal_HdrFormat.__name__ = "kha.internal.HdrFormat";
kha_internal_HdrFormat.readBuf = function(buf) {
	var bytesRead = 0;
	while(true) {
		buf[bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < buf.length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readBufOffset = function(buf,offset,length) {
	var bytesRead = 0;
	while(true) {
		buf[offset + bytesRead++] = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength && bytesRead < length)) {
			break;
		}
	}
	return bytesRead;
};
kha_internal_HdrFormat.readPixelsRaw = function(buffer,data,offset,numpixels) {
	var numExpected = 4 * numpixels;
	var numRead = kha_internal_HdrFormat.readBufOffset(data,offset,numExpected);
	if(numRead < numExpected) {
		haxe_Log.trace("Error reading raw pixels: got " + numRead + " bytes, expected " + numExpected,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 43, className : "kha.internal.HdrFormat", methodName : "readPixelsRaw"});
		return;
	}
};
kha_internal_HdrFormat.readPixelsRawRLE = function(buffer,data,offset,scanline_width,num_scanlines) {
	var rgbe = new Uint8Array(4);
	var scanline_buffer = null;
	var ptr;
	var ptr_end;
	var count;
	var buf = new Uint8Array(2);
	while(num_scanlines > 0) {
		if(kha_internal_HdrFormat.readBuf(rgbe) < rgbe.length) {
			haxe_Log.trace("Error reading bytes: expected " + rgbe.length,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 59, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(rgbe[0] != 2 || rgbe[1] != 2 || (rgbe[2] & 128) != 0) {
			data[offset++] = rgbe[0];
			data[offset++] = rgbe[1];
			data[offset++] = rgbe[2];
			data[offset++] = rgbe[3];
			kha_internal_HdrFormat.readPixelsRaw(buffer,data,offset,scanline_width * num_scanlines - 1);
			return;
		}
		if(((rgbe[2] & 255) << 8 | rgbe[3] & 255) != scanline_width) {
			haxe_Log.trace("Wrong scanline width " + ((rgbe[2] & 255) << 8 | rgbe[3] & 255) + ", expected " + scanline_width,{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 74, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
			return;
		}
		if(scanline_buffer == null) {
			scanline_buffer = new Uint8Array(4 * scanline_width);
		}
		ptr = 0;
		var _g = 0;
		while(_g < 4) {
			ptr_end = (_g++ + 1) * scanline_width;
			while(ptr < ptr_end) {
				if(kha_internal_HdrFormat.readBuf(buf) < buf.length) {
					haxe_Log.trace("Error reading 2-byte buffer",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 88, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
					return;
				}
				if((buf[0] & 255) > 128) {
					count = (buf[0] & 255) - 128;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 95, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					while(count-- > 0) scanline_buffer[ptr++] = buf[1];
				} else {
					count = buf[0] & 255;
					if(count == 0 || count > ptr_end - ptr) {
						haxe_Log.trace("Bad scanline data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 106, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
						return;
					}
					scanline_buffer[ptr++] = buf[1];
					if(--count > 0) {
						if(kha_internal_HdrFormat.readBufOffset(scanline_buffer,ptr,count) < count) {
							haxe_Log.trace("Error reading non-run data",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 112, className : "kha.internal.HdrFormat", methodName : "readPixelsRawRLE"});
							return;
						}
						ptr += count;
					}
				}
			}
		}
		var _g1 = 0;
		while(_g1 < scanline_width) {
			var i = _g1++;
			data[offset] = scanline_buffer[i];
			data[offset + 1] = scanline_buffer[i + scanline_width];
			data[offset + 2] = scanline_buffer[i + 2 * scanline_width];
			data[offset + 3] = scanline_buffer[i + 3 * scanline_width];
			offset += 4;
		}
		--num_scanlines;
	}
};
kha_internal_HdrFormat.readLine = function() {
	var buf = "";
	while(true) {
		var b = kha_internal_HdrFormat.buffer[kha_internal_HdrFormat.fileOffset];
		if(b == 10) {
			++kha_internal_HdrFormat.fileOffset;
			break;
		}
		buf += String.fromCodePoint(b);
		if(!(++kha_internal_HdrFormat.fileOffset < kha_internal_HdrFormat.bufferLength)) {
			break;
		}
	}
	return buf;
};
kha_internal_HdrFormat.parse = function(bytes) {
	kha_internal_HdrFormat.buffer = haxe_io__$UInt8Array_UInt8Array_$Impl_$.fromBytes(bytes);
	kha_internal_HdrFormat.bufferLength = kha_internal_HdrFormat.buffer.length;
	kha_internal_HdrFormat.fileOffset = 0;
	var width = 0;
	var height = 0;
	var rle = false;
	var _g = 0;
	while(_g < 20) {
		++_g;
		var line = kha_internal_HdrFormat.readLine();
		if(kha_internal_HdrFormat.formatPattern.match(line)) {
			rle = true;
		} else if(kha_internal_HdrFormat.exposurePattern.match(line)) {
			parseFloat(kha_internal_HdrFormat.exposurePattern.matched(1));
		} else if(kha_internal_HdrFormat.widthHeightPattern.match(line)) {
			height = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(1));
			width = Std.parseInt(kha_internal_HdrFormat.widthHeightPattern.matched(2));
			break;
		}
	}
	if(!rle) {
		haxe_Log.trace("File is not run length encoded!",{ fileName : "kha/internal/HdrFormat.hx", lineNumber : 175, className : "kha.internal.HdrFormat", methodName : "parse"});
		return null;
	}
	var data = new Uint8Array(width * height * 4);
	kha_internal_HdrFormat.readPixelsRawRLE(kha_internal_HdrFormat.buffer,data,0,width,height);
	var floatData = new Float32Array(width * height * 4);
	var offset = 0;
	while(offset < data.length) {
		var r = data[offset] / 255;
		var g = data[offset + 1] / 255;
		var b = data[offset + 2] / 255;
		var f = Math.pow(2.0,data[offset + 3] - 128.0);
		r *= f;
		g *= f;
		b *= f;
		floatData[offset] = r;
		floatData[offset + 1] = g;
		floatData[offset + 2] = b;
		floatData[offset + 3] = 1.0;
		offset += 4;
	}
	return { width : width, height : height, data : floatData};
};
kha_internal_HdrFormat.prototype = {
	__class__: kha_internal_HdrFormat
};
var kha_js_AEAudioChannel = function(element,looping) {
	this.stopped = false;
	this.element = element;
	this.looping = looping;
};
$hxClasses["kha.js.AEAudioChannel"] = kha_js_AEAudioChannel;
kha_js_AEAudioChannel.__name__ = "kha.js.AEAudioChannel";
kha_js_AEAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_AEAudioChannel.prototype = {
	element: null
	,stopped: null
	,looping: null
	,play: function() {
		this.stopped = false;
		this.element.play();
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 26, className : "kha.js.AEAudioChannel", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
			this.stopped = true;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/AEAudioChannel.hx", lineNumber : 37, className : "kha.js.AEAudioChannel", methodName : "stop"});
		}
	}
	,length: null
	,get_length: function() {
		if(isFinite(this.element.duration)) {
			return this.element.duration;
		} else {
			return Infinity;
		}
	}
	,get_position: function() {
		return this.element.currentTime;
	}
	,set_position: function(value) {
		return this.element.currentTime = value;
	}
	,get_volume: function() {
		return this.element.volume;
	}
	,set_volume: function(value) {
		return this.element.volume = value;
	}
	,finished: null
	,get_finished: function() {
		if(!this.stopped) {
			if(!this.looping) {
				return this.get_position() >= this.get_length();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,__class__: kha_js_AEAudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_js_AudioElementAudio = function() { };
$hxClasses["kha.js.AudioElementAudio"] = kha_js_AudioElementAudio;
kha_js_AudioElementAudio.__name__ = "kha.js.AudioElementAudio";
kha_js_AudioElementAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_AudioElementAudio.stream(sound,loop);
};
kha_js_AudioElementAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	sound.element.loop = loop;
	var channel = new kha_js_AEAudioChannel(sound.element,loop);
	channel.play();
	return channel;
};
var kha_js_CanvasGraphics = function(canvas) {
	this.bakedQuadCache = new kha_AlignedQuad();
	this.clipping = false;
	kha_graphics2_Graphics.call(this);
	this.canvas = canvas;
	kha_js_CanvasGraphics.instance = this;
	this.myColor = kha__$Color_Color_$Impl_$.fromBytes(0,0,0);
};
$hxClasses["kha.js.CanvasGraphics"] = kha_js_CanvasGraphics;
kha_js_CanvasGraphics.__name__ = "kha.js.CanvasGraphics";
kha_js_CanvasGraphics.stringWidth = function(font,text) {
	if(kha_js_CanvasGraphics.instance == null) {
		return 5 * text.length;
	} else {
		kha_js_CanvasGraphics.instance.set_font(font);
		return kha_js_CanvasGraphics.instance.canvas.measureText(text).width;
	}
};
kha_js_CanvasGraphics.__super__ = kha_graphics2_Graphics;
kha_js_CanvasGraphics.prototype = $extend(kha_graphics2_Graphics.prototype,{
	canvas: null
	,webfont: null
	,myColor: null
	,scaleQuality: null
	,clipping: null
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		if(clear) {
			this.clear(clearColor);
		}
	}
	,clear: function(color) {
		if(color == null) {
			color = 0;
		}
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		if((color >>> 24) * 0.00392156862745098 == 0) {
			this.canvas.clearRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		} else {
			this.canvas.fillRect(0,0,this.canvas.canvas.width,this.canvas.canvas.height);
		}
		this.set_color(this.myColor);
	}
	,end: function() {
	}
	,drawImage: function(img,x,y) {
		this.canvas.globalAlpha = this.get_opacity();
		this.canvas.drawImage((js_Boot.__cast(img , kha_CanvasImage)).image,x,y);
		this.canvas.globalAlpha = 1;
	}
	,drawScaledSubImage: function(image,sx,sy,sw,sh,dx,dy,dw,dh) {
		this.canvas.globalAlpha = this.get_opacity();
		try {
			if(dw < 0 || dh < 0) {
				this.canvas.save();
				this.canvas.translate(dx,dy);
				var x = 0.0;
				var y = 0.0;
				if(dw < 0) {
					this.canvas.scale(-1,1);
					x = -dw;
				}
				if(dh < 0) {
					this.canvas.scale(1,-1);
					y = -dh;
				}
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,x,y,dw,dh);
				this.canvas.restore();
			} else {
				this.canvas.drawImage((js_Boot.__cast(image , kha_CanvasImage)).image,sx,sy,sw,sh,dx,dy,dw,dh);
			}
		} catch( ex ) {
			haxe_CallStack.lastException = ex;
		}
		this.canvas.globalAlpha = 1;
	}
	,set_color: function(color) {
		this.myColor = color;
		this.canvas.strokeStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		this.canvas.fillStyle = "rgba(" + ((color & 16711680) >>> 16) + "," + ((color & 65280) >>> 8) + "," + (color & 255) + "," + (color >>> 24) * 0.00392156862745098 + ")";
		return color;
	}
	,get_color: function() {
		return this.myColor;
	}
	,get_imageScaleQuality: function() {
		return this.scaleQuality;
	}
	,set_imageScaleQuality: function(value) {
		if(value == 0) {
			this.canvas.mozImageSmoothingEnabled = false;
			this.canvas.webkitImageSmoothingEnabled = false;
			this.canvas.msImageSmoothingEnabled = false;
			this.canvas.imageSmoothingEnabled = false;
		} else {
			this.canvas.mozImageSmoothingEnabled = true;
			this.canvas.webkitImageSmoothingEnabled = true;
			this.canvas.msImageSmoothingEnabled = true;
			this.canvas.imageSmoothingEnabled = true;
		}
		return this.scaleQuality = value;
	}
	,drawRect: function(x,y,width,height,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.rect(x,y,width,height);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillRect: function(x,y,width,height) {
		this.canvas.globalAlpha = this.get_opacity() * ((this.myColor >>> 24) * 0.00392156862745098);
		this.canvas.fillRect(x,y,width,height);
		this.canvas.globalAlpha = this.get_opacity();
	}
	,drawArc: function(cx,cy,radius,sAngle,eAngle,strength,ccw) {
		if(ccw == null) {
			ccw = false;
		}
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,drawCircle: function(cx,cy,radius,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		var eAngle = 2 * Math.PI;
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,0,eAngle,false);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,_drawArc: function(cx,cy,radius,sAngle,eAngle,strength,ccw) {
		this.canvas.beginPath();
		var oldStrength = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.stroke();
		this.canvas.lineWidth = oldStrength;
	}
	,fillArc: function(cx,cy,radius,sAngle,eAngle,ccw) {
		if(ccw == null) {
			ccw = false;
		}
		this.canvas.beginPath();
		this.canvas.arc(cx,cy,radius,sAngle,eAngle,ccw);
		this.canvas.fill();
	}
	,fillCircle: function(cx,cy,radius) {
		this.canvas.beginPath();
		this.canvas.arc(cx,cy,radius,0,2 * Math.PI,false);
		this.canvas.fill();
	}
	,bakedQuadCache: null
	,drawString: function(text,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var _g = 0;
			var _g1 = text.length;
			while(_g < _g1) {
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(this.bakedQuadCache,kha_graphics2_Graphics.fontGlyphs.indexOf(HxOverrides.cca(text,_g++)),xpos,y);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,drawCharacters: function(text,start,length,x,y) {
		var image = this.webfont.getImage(this.get_fontSize(),this.myColor);
		if(image.width > 0) {
			var xpos = x;
			var _g = start;
			var _g1 = start + length;
			while(_g < _g1) {
				var q = this.webfont.kravur._get(this.get_fontSize()).getBakedQuad(this.bakedQuadCache,kha_graphics2_Graphics.fontGlyphs.indexOf(text[_g++]),xpos,y);
				if(q != null) {
					if(q.s1 - q.s0 > 0 && q.t1 - q.t0 > 0 && q.x1 - q.x0 > 0 && q.y1 - q.y0 > 0) {
						this.canvas.drawImage(image,q.s0 * image.width,q.t0 * image.height,(q.s1 - q.s0) * image.width,(q.t1 - q.t0) * image.height,q.x0,q.y0,q.x1 - q.x0,q.y1 - q.y0);
					}
					xpos += q.xadvance;
				}
			}
		}
	}
	,set_font: function(font) {
		this.webfont = js_Boot.__cast(font , kha_js_Font);
		return this.webfont;
	}
	,get_font: function() {
		return this.webfont;
	}
	,drawLine: function(x1,y1,x2,y2,strength) {
		if(strength == null) {
			strength = 1.0;
		}
		this.canvas.beginPath();
		var oldWith = this.canvas.lineWidth;
		this.canvas.lineWidth = Math.round(strength);
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.moveTo(0,0);
		this.canvas.stroke();
		this.canvas.lineWidth = oldWith;
	}
	,fillTriangle: function(x1,y1,x2,y2,x3,y3) {
		this.canvas.beginPath();
		this.canvas.moveTo(x1,y1);
		this.canvas.lineTo(x2,y2);
		this.canvas.lineTo(x3,y3);
		this.canvas.closePath();
		this.canvas.fill();
	}
	,scissor: function(x,y,width,height) {
		if(!this.clipping) {
			this.canvas.save();
			this.clipping = true;
		}
		this.canvas.beginPath();
		this.canvas.rect(x,y,width,height);
		this.canvas.clip();
	}
	,disableScissor: function() {
		if(this.clipping) {
			this.canvas.restore();
			this.clipping = false;
		}
	}
	,drawVideo: function(video,x,y,width,height) {
		this.canvas.drawImage((js_Boot.__cast(video , kha_js_Video)).element,x,y,width,height);
	}
	,setTransformation: function(transformation) {
		this.canvas.setTransform(transformation._00,transformation._01,transformation._10,transformation._11,transformation._20,transformation._21);
	}
	,__class__: kha_js_CanvasGraphics
});
var kha_js_Font = function(blob) {
	this.images = new haxe_ds_IntMap();
	this.kravur = new kha_js_Font.Kravur(blob);
};
$hxClasses["kha.js.Font"] = kha_js_Font;
kha_js_Font.__name__ = "kha.js.Font";
kha_js_Font.__interfaces__ = [kha_Resource];
kha_js_Font.fromBytes = function(bytes) {
	return new kha_js_Font(kha_internal_BytesBlob.fromBytes(bytes));
};
kha_js_Font.prototype = {
	kravur: null
	,images: null
	,height: function(fontSize) {
		return this.kravur._get(fontSize).getHeight();
	}
	,width: function(fontSize,str) {
		return this.kravur._get(fontSize).stringWidth(str);
	}
	,widthOfCharacters: function(fontSize,characters,start,length) {
		return this.kravur._get(fontSize).charactersWidth(characters,start,length);
	}
	,baseline: function(fontSize) {
		return this.kravur._get(fontSize).getBaselinePosition();
	}
	,getImage: function(fontSize,color) {
		var imageIndex = fontSize * 10000 + kha_graphics2_Graphics.fontGlyphs.length;
		if(!this.images.h.hasOwnProperty(imageIndex)) {
			this.images.h[imageIndex] = new haxe_ds_IntMap();
		}
		if(!this.images.h[imageIndex].h.hasOwnProperty(color)) {
			var kravur = this.kravur._get(fontSize);
			var canvas = window.document.createElement("canvas");
			canvas.width = kravur.width;
			canvas.height = kravur.height;
			var ctx = canvas.getContext("2d");
			ctx.fillStyle = "black";
			ctx.fillRect(0,0,kravur.width,kravur.height);
			var imageData = ctx.getImageData(0,0,kravur.width,kravur.height);
			var bytes = (js_Boot.__cast(kravur.getTexture() , kha_CanvasImage)).bytes;
			var _g = 0;
			var _g1 = bytes.length;
			while(_g < _g1) {
				var i = _g++;
				imageData.data[i * 4] = (color & 16711680) >>> 16;
				imageData.data[i * 4 + 1] = (color & 65280) >>> 8;
				imageData.data[i * 4 + 2] = color & 255;
				imageData.data[i * 4 + 3] = bytes.b[i];
			}
			ctx.putImageData(imageData,0,0);
			var img = window.document.createElement("img");
			img.src = canvas.toDataURL("image/png");
			this.images.h[imageIndex].h[color] = img;
			return img;
		}
		return this.images.h[imageIndex].h[color];
	}
	,unload: function() {
		this.kravur = null;
		this.images = null;
	}
	,__class__: kha_js_Font
};
var kha_js_MobileWebAudio = function() { };
$hxClasses["kha.js.MobileWebAudio"] = kha_js_MobileWebAudio;
kha_js_MobileWebAudio.__name__ = "kha.js.MobileWebAudio";
kha_js_MobileWebAudio._init = function() {
	try {
		kha_js_MobileWebAudio._context = new AudioContext();
		return;
	} catch( e ) {
		haxe_CallStack.lastException = e;
	}
	try {
		this._context = new webkitAudioContext();
		return;
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
	}
};
kha_js_MobileWebAudio.play = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	var channel = new kha_js_MobileWebAudioChannel(sound,loop);
	channel.play();
	return channel;
};
kha_js_MobileWebAudio.stream = function(sound,loop) {
	if(loop == null) {
		loop = false;
	}
	return kha_js_MobileWebAudio.play(sound,loop);
};
var kha_js_MobileWebAudioChannel = function(sound,loop) {
	this.stopped = false;
	this.paused = false;
	this.buffer = sound._buffer;
	this.loop = loop;
	this.createSource();
};
$hxClasses["kha.js.MobileWebAudioChannel"] = kha_js_MobileWebAudioChannel;
kha_js_MobileWebAudioChannel.__name__ = "kha.js.MobileWebAudioChannel";
kha_js_MobileWebAudioChannel.__interfaces__ = [kha_audio1_AudioChannel];
kha_js_MobileWebAudioChannel.prototype = {
	buffer: null
	,loop: null
	,source: null
	,gain: null
	,startTime: null
	,pauseTime: null
	,paused: null
	,stopped: null
	,createSource: function() {
		var _gthis = this;
		this.source = kha_js_MobileWebAudio._context.createBufferSource();
		this.source.loop = this.loop;
		this.source.buffer = this.buffer;
		this.source.onended = function() {
			_gthis.stopped = true;
		};
		this.gain = kha_js_MobileWebAudio._context.createGain();
		this.source.connect(this.gain);
		this.gain.connect(kha_js_MobileWebAudio._context.destination);
	}
	,play: function() {
		if(this.paused || this.stopped) {
			this.createSource();
		}
		this.stopped = false;
		if(this.paused) {
			this.paused = false;
			this.startTime = kha_js_MobileWebAudio._context.currentTime - this.pauseTime;
			this.source.start(0,this.pauseTime);
		} else {
			this.startTime = kha_js_MobileWebAudio._context.currentTime;
			this.source.start();
		}
	}
	,pause: function() {
		var wasStopped = this.paused || this.stopped;
		this.pauseTime = kha_js_MobileWebAudio._context.currentTime - this.startTime;
		this.paused = true;
		if(wasStopped) {
			return;
		}
		this.source.stop();
	}
	,stop: function() {
		var wasStopped = this.paused || this.stopped;
		this.paused = false;
		this.stopped = true;
		if(wasStopped) {
			return;
		}
		this.source.stop();
	}
	,length: null
	,get_length: function() {
		return this.source.buffer.duration;
	}
	,get_position: function() {
		if(this.stopped) {
			return this.get_length();
		}
		if(this.paused) {
			return this.pauseTime;
		} else {
			return kha_js_MobileWebAudio._context.currentTime - this.startTime;
		}
	}
	,set_position: function(value) {
		return value;
	}
	,get_volume: function() {
		return this.gain.gain.value;
	}
	,set_volume: function(value) {
		return this.gain.gain.value = value;
	}
	,finished: null
	,get_finished: function() {
		return this.stopped;
	}
	,__class__: kha_js_MobileWebAudioChannel
	,__properties__: {get_finished:"get_finished",set_volume:"set_volume",get_volume:"get_volume",set_position:"set_position",get_position:"get_position",get_length:"get_length"}
};
var kha_js_MobileWebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		kha_js_MobileWebAudio._context.decodeAudioData(_gthis.compressedData.b.bufferValue,function(buffer) {
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis._buffer = buffer;
			done(_gthis);
		},function() {
			failed({ url : filename, error : "Audio format not supported"});
		});
	};
	request.send(null);
};
$hxClasses["kha.js.MobileWebAudioSound"] = kha_js_MobileWebAudioSound;
kha_js_MobileWebAudioSound.__name__ = "kha.js.MobileWebAudioSound";
kha_js_MobileWebAudioSound.__super__ = kha_Sound;
kha_js_MobileWebAudioSound.prototype = $extend(kha_Sound.prototype,{
	_buffer: null
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_MobileWebAudioSound
});
var kha_js_Sound = function(filenames,done,failed) {
	kha_Sound.call(this);
	this.done = done;
	this.failed = failed;
	kha_js_Sound.loading.push(this);
	this.element = window.document.createElement("audio");
	this.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(this.element.canPlayType("audio/ogg") != "" && StringTools.endsWith(filename,".ogg")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			this.filenames.push(filename);
		}
		if(this.element.canPlayType("audio/wav") != "" && StringTools.endsWith(filename,".wav")) {
			this.filenames.push(filename);
		}
	}
	this.element.addEventListener("error",$bind(this,this.errorListener),false);
	this.element.addEventListener("canplay",$bind(this,this.canPlayThroughListener),false);
	this.element.src = this.filenames[0];
	this.element.preload = "auto";
	this.element.load();
};
$hxClasses["kha.js.Sound"] = kha_js_Sound;
kha_js_Sound.__name__ = "kha.js.Sound";
kha_js_Sound.__super__ = kha_Sound;
kha_js_Sound.prototype = $extend(kha_Sound.prototype,{
	filenames: null
	,done: null
	,failed: null
	,element: null
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		this.failed({ url : this.element.src});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		this.done(this);
		HxOverrides.remove(kha_js_Sound.loading,this);
	}
	,uncompress: function(done) {
		done();
	}
	,__class__: kha_js_Sound
});
var kha_js_Video = function() {
	kha_Video.call(this);
};
$hxClasses["kha.js.Video"] = kha_js_Video;
kha_js_Video.__name__ = "kha.js.Video";
kha_js_Video.fromElement = function(element) {
	var video = new kha_js_Video();
	video.element = element;
	if(kha_SystemImpl.gl != null) {
		video.texture = kha_Image.fromVideo(video);
	}
	return video;
};
kha_js_Video.fromFile = function(filenames,done) {
	var video = new kha_js_Video();
	video.done = done;
	video.element = window.document.createElement("video");
	video.filenames = [];
	var _g = 0;
	while(_g < filenames.length) {
		var filename = filenames[_g];
		++_g;
		if(video.element.canPlayType("video/webm") != "" && StringTools.endsWith(filename,".webm")) {
			video.filenames.push(filename);
		}
		if(video.element.canPlayType("video/mp4") != "" && StringTools.endsWith(filename,".mp4")) {
			video.filenames.push(filename);
		}
	}
	video.element.addEventListener("error",$bind(video,video.errorListener),false);
	video.element.addEventListener("canplaythrough",$bind(video,video.canPlayThroughListener),false);
	video.element.preload = "auto";
	video.element.src = video.filenames[0];
};
kha_js_Video.__super__ = kha_Video;
kha_js_Video.prototype = $extend(kha_Video.prototype,{
	filenames: null
	,element: null
	,done: null
	,texture: null
	,width: function() {
		return this.element.videoWidth;
	}
	,height: function() {
		return this.element.videoHeight;
	}
	,play: function(loop) {
		if(loop == null) {
			loop = false;
		}
		try {
			this.element.loop = loop;
			this.element.play();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/Video.hx", lineNumber : 64, className : "kha.js.Video", methodName : "play"});
		}
	}
	,pause: function() {
		try {
			this.element.pause();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/Video.hx", lineNumber : 73, className : "kha.js.Video", methodName : "pause"});
		}
	}
	,stop: function() {
		try {
			this.element.pause();
			this.element.currentTime = 0;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace(((e) instanceof js__$Boot_HaxeError) ? e.val : e,{ fileName : "kha/js/Video.hx", lineNumber : 83, className : "kha.js.Video", methodName : "stop"});
		}
	}
	,getCurrentPos: function() {
		return Math.ceil(this.element.currentTime * 1000);
	}
	,get_position: function() {
		return Math.ceil(this.element.currentTime * 1000);
	}
	,set_position: function(value) {
		this.element.currentTime = value / 1000;
		return value;
	}
	,getLength: function() {
		if(isFinite(this.element.duration)) {
			return Math.floor(this.element.duration * 1000);
		} else {
			return -1;
		}
	}
	,errorListener: function(eventInfo) {
		if(this.element.error.code == 4) {
			var _g = 0;
			var _g1 = this.filenames.length - 1;
			while(_g < _g1) {
				var i = _g++;
				if(this.element.src == this.filenames[i]) {
					this.element.src = this.filenames[i + 1];
					return;
				}
			}
		}
		haxe_Log.trace("Error loading " + this.element.src,{ fileName : "kha/js/Video.hx", lineNumber : 120, className : "kha.js.Video", methodName : "errorListener"});
		this.finishAsset();
	}
	,canPlayThroughListener: function(eventInfo) {
		this.finishAsset();
	}
	,finishAsset: function() {
		this.element.removeEventListener("error",$bind(this,this.errorListener),false);
		this.element.removeEventListener("canplaythrough",$bind(this,this.canPlayThroughListener),false);
		if(kha_SystemImpl.gl != null) {
			this.texture = kha_Image.fromVideo(this);
		}
		this.done(this);
	}
	,__class__: kha_js_Video
});
var kha_js_WebAudioSound = function(filename,done,failed) {
	var _gthis = this;
	kha_Sound.call(this);
	var request = new XMLHttpRequest();
	request.open("GET",filename,true);
	request.responseType = "arraybuffer";
	request.onerror = function() {
		failed({ url : filename});
	};
	request.onload = function() {
		_gthis.compressedData = haxe_io_Bytes.ofData(request.response);
		_gthis.uncompressedData = null;
		done(_gthis);
	};
	request.send(null);
};
$hxClasses["kha.js.WebAudioSound"] = kha_js_WebAudioSound;
kha_js_WebAudioSound.__name__ = "kha.js.WebAudioSound";
kha_js_WebAudioSound.__super__ = kha_Sound;
kha_js_WebAudioSound.prototype = $extend(kha_Sound.prototype,{
	superUncompress: function(done) {
		kha_Sound.prototype.uncompress.call(this,done);
	}
	,uncompress: function(done) {
		var _gthis = this;
		kha_audio2_Audio._context.decodeAudioData(this.compressedData.b.bufferValue,function(buffer) {
			var ch0 = buffer.getChannelData(0);
			var ch1 = buffer.numberOfChannels == 1 ? ch0 : buffer.getChannelData(1);
			var len = ch0.length;
			_gthis.uncompressedData = new Float32Array(len * 2);
			_gthis.length = buffer.duration;
			_gthis.channels = buffer.numberOfChannels;
			_gthis.sampleRate = Math.round(buffer.sampleRate);
			var idx = 0;
			var i = 0;
			var lidx = len * 2;
			var uncompressInner = null;
			uncompressInner = function() {
				var chk_len = idx + 11025;
				var next_chk = chk_len > lidx ? lidx : chk_len;
				while(idx < next_chk) {
					_gthis.uncompressedData[idx] = ch0[i];
					_gthis.uncompressedData[idx + 1] = ch1[i];
					idx += 2;
					i += 1;
				}
				if(idx < lidx) {
					window.setTimeout(uncompressInner,0);
				} else {
					_gthis.compressedData = null;
					done();
				}
			};
			uncompressInner();
		},function() {
			_gthis.superUncompress(done);
		});
	}
	,__class__: kha_js_WebAudioSound
});
var kha_js_graphics4_ConstantLocation = function(value,type) {
	this.value = value;
	this.type = type;
};
$hxClasses["kha.js.graphics4.ConstantLocation"] = kha_js_graphics4_ConstantLocation;
kha_js_graphics4_ConstantLocation.__name__ = "kha.js.graphics4.ConstantLocation";
kha_js_graphics4_ConstantLocation.__interfaces__ = [kha_graphics4_ConstantLocation];
kha_js_graphics4_ConstantLocation.prototype = {
	value: null
	,type: null
	,__class__: kha_js_graphics4_ConstantLocation
};
var kha_js_graphics4_Graphics = function(renderTarget) {
	this.matrix3Cache = new Float32Array(9);
	this.matrixCache = new Float32Array(16);
	this.useVertexAttributes = 0;
	this.isDepthAttachment = false;
	this.isCubeMap = false;
	this.colorMaskAlpha = true;
	this.colorMaskBlue = true;
	this.colorMaskGreen = true;
	this.colorMaskRed = true;
	this.depthMask = false;
	this.depthTest = false;
	this.currentPipeline = null;
	this.renderTarget = renderTarget;
	this.init();
	if(kha_SystemImpl.gl2) {
		this.instancedExtension = true;
	} else {
		this.instancedExtension = kha_SystemImpl.gl.getExtension("ANGLE_instanced_arrays");
		this.blendMinMaxExtension = kha_SystemImpl.gl.getExtension("EXT_blend_minmax");
	}
};
$hxClasses["kha.js.graphics4.Graphics"] = kha_js_graphics4_Graphics;
kha_js_graphics4_Graphics.__name__ = "kha.js.graphics4.Graphics";
kha_js_graphics4_Graphics.__interfaces__ = [kha_graphics4_Graphics];
kha_js_graphics4_Graphics.getBlendFunc = function(factor) {
	switch(factor) {
	case 1:
		return 1;
	case 0:case 2:
		return 0;
	case 3:
		return 770;
	case 4:
		return 772;
	case 5:
		return 771;
	case 6:
		return 773;
	case 7:
		return 768;
	case 8:
		return 774;
	case 9:
		return 769;
	case 10:
		return 775;
	}
};
kha_js_graphics4_Graphics.getBlendOp = function(op) {
	switch(op) {
	case 0:
		return 32774;
	case 1:
		return 32778;
	case 2:
		return 32779;
	case 3:
		return 32775;
	case 4:
		return 32776;
	}
};
kha_js_graphics4_Graphics.prototype = {
	currentPipeline: null
	,depthTest: null
	,depthMask: null
	,colorMaskRed: null
	,colorMaskGreen: null
	,colorMaskBlue: null
	,colorMaskAlpha: null
	,indicesCount: null
	,renderTarget: null
	,renderTargetFrameBuffer: null
	,renderTargetMSAA: null
	,renderTargetTexture: null
	,isCubeMap: null
	,isDepthAttachment: null
	,instancedExtension: null
	,blendMinMaxExtension: null
	,useVertexAttributes: null
	,init: function() {
		if(this.renderTarget == null) {
			return;
		}
		this.isCubeMap = ((this.renderTarget) instanceof kha_graphics4_CubeMap);
		if(this.isCubeMap) {
			var cubeMap = js_Boot.__cast(this.renderTarget , kha_graphics4_CubeMap);
			this.renderTargetFrameBuffer = cubeMap.frameBuffer;
			this.renderTargetTexture = cubeMap.texture;
			this.isDepthAttachment = cubeMap.isDepthAttachment;
		} else {
			var image = js_Boot.__cast(this.renderTarget , kha_WebGLImage);
			this.renderTargetFrameBuffer = image.frameBuffer;
			this.renderTargetMSAA = image.MSAAFrameBuffer;
			this.renderTargetTexture = image.texture;
		}
	}
	,begin: function(additionalRenderTargets) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.bindFramebuffer(36160,null);
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth(),kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
			if(additionalRenderTargets != null) {
				kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL,3553,this.renderTargetTexture,0);
				var _g = 0;
				var _g1 = additionalRenderTargets.length;
				while(_g < _g1) {
					var i = _g++;
					kha_SystemImpl.gl.framebufferTexture2D(36160,kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i + 1,3553,(js_Boot.__cast(additionalRenderTargets[i] , kha_WebGLImage)).texture,0);
				}
				var attachments = [kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL];
				var _g2 = 0;
				var _g3 = additionalRenderTargets.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					attachments.push(kha_SystemImpl.drawBuffers.COLOR_ATTACHMENT0_WEBGL + i1 + 1);
				}
				if(kha_SystemImpl.gl2) {
					kha_SystemImpl.gl.drawBuffers(attachments);
				} else {
					kha_SystemImpl.drawBuffers.drawBuffersWEBGL(attachments);
				}
			}
		}
	}
	,beginFace: function(face) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		kha_SystemImpl.gl.bindFramebuffer(36160,this.renderTargetFrameBuffer);
		kha_SystemImpl.gl.framebufferTexture2D(36160,this.isDepthAttachment ? 36096 : 36064,34069 + face,this.renderTargetTexture,0);
		kha_SystemImpl.gl.viewport(0,0,this.renderTarget.get_width(),this.renderTarget.get_height());
	}
	,beginEye: function(eye) {
		kha_SystemImpl.gl.enable(3042);
		kha_SystemImpl.gl.blendFunc(770,771);
		kha_SystemImpl.gl.bindFramebuffer(36160,null);
		if(eye == 0) {
			kha_SystemImpl.gl.viewport(0,0,kha_System.windowWidth() * 0.5 | 0,kha_System.windowHeight());
		} else {
			kha_SystemImpl.gl.viewport(kha_System.windowWidth() * 0.5 | 0,0,kha_System.windowWidth() * 0.5 | 0,kha_System.windowHeight());
		}
	}
	,end: function() {
		if(this.renderTargetMSAA != null) {
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.READ_FRAMEBUFFER,this.renderTargetFrameBuffer);
			kha_SystemImpl.gl.bindFramebuffer(kha_SystemImpl.gl.DRAW_FRAMEBUFFER,this.renderTargetMSAA);
			kha_SystemImpl.gl.blitFramebuffer(0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),0,0,this.renderTarget.get_width(),this.renderTarget.get_height(),16384,9728);
		}
	}
	,flush: function() {
	}
	,vsynced: function() {
		return true;
	}
	,refreshRate: function() {
		return 60;
	}
	,clear: function(color,depth,stencil) {
		var clearMask = 0;
		if(color != null) {
			clearMask = 16384;
			kha_SystemImpl.gl.colorMask(true,true,true,true);
			kha_SystemImpl.gl.clearColor(((color & 16711680) >>> 16) * 0.00392156862745098,((color & 65280) >>> 8) * 0.00392156862745098,(color & 255) * 0.00392156862745098,(color >>> 24) * 0.00392156862745098);
		}
		if(depth != null) {
			clearMask |= 256;
			kha_SystemImpl.gl.enable(2929);
			kha_SystemImpl.gl.depthMask(true);
			kha_SystemImpl.gl.clearDepth(depth);
		}
		if(stencil != null) {
			clearMask |= 1024;
			kha_SystemImpl.gl.enable(2960);
			kha_SystemImpl.gl.stencilMask(255);
			kha_SystemImpl.gl.clearStencil(stencil);
		}
		kha_SystemImpl.gl.clear(clearMask);
		kha_SystemImpl.gl.colorMask(this.colorMaskRed,this.colorMaskGreen,this.colorMaskBlue,this.colorMaskAlpha);
		if(this.depthTest) {
			kha_SystemImpl.gl.enable(2929);
		} else {
			kha_SystemImpl.gl.disable(2929);
		}
		kha_SystemImpl.gl.depthMask(this.depthMask);
	}
	,viewport: function(x,y,width,height) {
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.viewport(x,kha_System.windowHeight(0) - y - height,width,height);
		} else {
			kha_SystemImpl.gl.viewport(x,y,width,height);
		}
	}
	,scissor: function(x,y,width,height) {
		kha_SystemImpl.gl.enable(3089);
		if(this.renderTarget == null) {
			kha_SystemImpl.gl.scissor(x,kha_System.windowHeight(0) - y - height,width,height);
		} else {
			kha_SystemImpl.gl.scissor(x,y,width,height);
		}
	}
	,disableScissor: function() {
		kha_SystemImpl.gl.disable(3089);
	}
	,setDepthMode: function(write,mode) {
		switch(mode) {
		case 0:
			if(write) {
				kha_SystemImpl.gl.enable(2929);
			} else {
				kha_SystemImpl.gl.disable(2929);
			}
			this.depthTest = write;
			kha_SystemImpl.gl.depthFunc(519);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(512);
			break;
		case 2:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(514);
			break;
		case 3:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(517);
			break;
		case 4:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(513);
			break;
		case 5:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(515);
			break;
		case 6:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(516);
			break;
		case 7:
			kha_SystemImpl.gl.enable(2929);
			this.depthTest = true;
			kha_SystemImpl.gl.depthFunc(518);
			break;
		}
		kha_SystemImpl.gl.depthMask(write);
		this.depthMask = write;
	}
	,setBlendingMode: function(source,destination,operation,alphaSource,alphaDestination,alphaOperation) {
		if(source == 1 && destination == 2) {
			kha_SystemImpl.gl.disable(3042);
		} else {
			kha_SystemImpl.gl.enable(3042);
			kha_SystemImpl.gl.blendFuncSeparate(kha_js_graphics4_Graphics.getBlendFunc(source),kha_js_graphics4_Graphics.getBlendFunc(destination),kha_js_graphics4_Graphics.getBlendFunc(alphaSource),kha_js_graphics4_Graphics.getBlendFunc(alphaDestination));
			kha_SystemImpl.gl.blendEquationSeparate(kha_js_graphics4_Graphics.getBlendOp(operation),kha_js_graphics4_Graphics.getBlendOp(alphaOperation));
		}
	}
	,createVertexBuffer: function(vertexCount,structure,usage,canRead) {
		if(canRead == null) {
			canRead = false;
		}
		return new kha_graphics4_VertexBuffer(vertexCount,structure,usage);
	}
	,setVertexBuffer: function(vertexBuffer) {
		this.useVertexAttributes = (js_Boot.__cast(vertexBuffer , kha_graphics4_VertexBuffer)).set(0);
	}
	,setVertexBuffers: function(vertexBuffers) {
		var offset = 0;
		var _g = 0;
		while(_g < vertexBuffers.length) offset += (js_Boot.__cast(vertexBuffers[_g++] , kha_graphics4_VertexBuffer)).set(offset);
		this.useVertexAttributes = offset;
	}
	,createIndexBuffer: function(indexCount,usage,canRead) {
		if(canRead == null) {
			canRead = false;
		}
		return new kha_graphics4_IndexBuffer(indexCount,usage);
	}
	,setIndexBuffer: function(indexBuffer) {
		this.indicesCount = indexBuffer.count();
		(js_Boot.__cast(indexBuffer , kha_graphics4_IndexBuffer)).set();
	}
	,setTexture: function(stage,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast(texture , kha_WebGLImage)).set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setTextureDepth: function(stage,texture) {
		(js_Boot.__cast(texture , kha_WebGLImage)).setDepth((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
	}
	,setTextureArray: function(unit,texture) {
	}
	,setVideoTexture: function(unit,texture) {
		if(texture == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(unit , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(3553,null);
		} else {
			(js_Boot.__cast((js_Boot.__cast(texture , kha_js_Video)).texture , kha_WebGLImage)).set((js_Boot.__cast(unit , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setImageTexture: function(unit,texture) {
	}
	,setTextureParameters: function(texunit,uAddressing,vAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
		kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(texunit , kha_js_graphics4_TextureUnit)).value);
		switch(uAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10242,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10242,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10242,33071);
			break;
		}
		switch(vAddressing) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10243,10497);
			break;
		case 1:
			kha_SystemImpl.gl.texParameteri(3553,10243,33648);
			break;
		case 2:
			kha_SystemImpl.gl.texParameteri(3553,10243,33071);
			break;
		}
		switch(minificationFilter) {
		case 0:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9728);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9984);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9986);
				break;
			}
			break;
		case 1:case 2:
			switch(mipmapFilter) {
			case 0:
				kha_SystemImpl.gl.texParameteri(3553,10241,9729);
				break;
			case 1:
				kha_SystemImpl.gl.texParameteri(3553,10241,9985);
				break;
			case 2:
				kha_SystemImpl.gl.texParameteri(3553,10241,9987);
				break;
			}
			if(minificationFilter == 2) {
				kha_SystemImpl.gl.texParameteri(3553,kha_SystemImpl.anisotropicFilter.TEXTURE_MAX_ANISOTROPY_EXT,4);
			}
			break;
		}
		switch(magnificationFilter) {
		case 0:
			kha_SystemImpl.gl.texParameteri(3553,10240,9728);
			break;
		case 1:case 2:
			kha_SystemImpl.gl.texParameteri(3553,10240,9729);
			break;
		}
	}
	,setTexture3DParameters: function(texunit,uAddressing,vAddressing,wAddressing,minificationFilter,magnificationFilter,mipmapFilter) {
	}
	,setTextureCompareMode: function(texunit,enabled) {
		if(enabled) {
			kha_SystemImpl.gl.texParameteri(3553,34892,34894);
			kha_SystemImpl.gl.texParameteri(3553,34893,515);
		} else {
			kha_SystemImpl.gl.texParameteri(3553,34892,0);
		}
	}
	,setCubeMapCompareMode: function(texunit,enabled) {
		if(enabled) {
			kha_SystemImpl.gl.texParameteri(34067,34892,34894);
			kha_SystemImpl.gl.texParameteri(34067,34893,515);
		} else {
			kha_SystemImpl.gl.texParameteri(34067,34892,0);
		}
	}
	,setCubeMap: function(stage,cubeMap) {
		if(cubeMap == null) {
			kha_SystemImpl.gl.activeTexture(33984 + (js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
			kha_SystemImpl.gl.bindTexture(34067,null);
		} else {
			cubeMap.set((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
		}
	}
	,setCubeMapDepth: function(stage,cubeMap) {
		cubeMap.setDepth((js_Boot.__cast(stage , kha_js_graphics4_TextureUnit)).value);
	}
	,maxBoundTextures: function() {
		return kha_SystemImpl.gl.getParameter(34930);
	}
	,setCullMode: function(mode) {
		switch(mode) {
		case 0:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1029);
			break;
		case 1:
			kha_SystemImpl.gl.enable(2884);
			kha_SystemImpl.gl.cullFace(1028);
			break;
		case 2:
			kha_SystemImpl.gl.disable(2884);
			break;
		}
	}
	,setPipeline: function(pipe) {
		this.setCullMode(pipe.cullMode);
		this.setDepthMode(pipe.depthWrite,pipe.depthMode);
		this.setStencilParameters(pipe.stencilMode,pipe.stencilBothPass,pipe.stencilDepthFail,pipe.stencilFail,pipe.stencilReferenceValue,pipe.stencilReadMask,pipe.stencilWriteMask);
		this.setBlendingMode(pipe.blendSource,pipe.blendDestination,pipe.blendOperation,pipe.alphaBlendSource,pipe.alphaBlendDestination,pipe.alphaBlendOperation);
		this.currentPipeline = pipe;
		pipe.set();
		this.colorMaskRed = pipe.colorWriteMasksRed[0];
		this.colorMaskGreen = pipe.colorWriteMasksGreen[0];
		this.colorMaskBlue = pipe.colorWriteMasksBlue[0];
		this.colorMaskAlpha = pipe.colorWriteMasksAlpha[0];
	}
	,setStencilReferenceValue: function(value) {
		kha_SystemImpl.gl.stencilFunc(this.convertCompareMode(this.currentPipeline.stencilMode),value,this.currentPipeline.stencilReadMask);
	}
	,setBool: function(location,value) {
		kha_SystemImpl.gl.uniform1i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value ? 1 : 0);
	}
	,setInt: function(location,value) {
		kha_SystemImpl.gl.uniform1i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value);
	}
	,setInt2: function(location,value1,value2) {
		kha_SystemImpl.gl.uniform2i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2);
	}
	,setInt3: function(location,value1,value2,value3) {
		kha_SystemImpl.gl.uniform3i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3);
	}
	,setInt4: function(location,value1,value2,value3,value4) {
		kha_SystemImpl.gl.uniform4i((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3,value4);
	}
	,setInts: function(location,values) {
		var webglLocation = js_Boot.__cast(location , kha_js_graphics4_ConstantLocation);
		switch(webglLocation.type) {
		case 35667:
			kha_SystemImpl.gl.uniform2iv(webglLocation.value,values);
			break;
		case 35668:
			kha_SystemImpl.gl.uniform3iv(webglLocation.value,values);
			break;
		case 35669:
			kha_SystemImpl.gl.uniform4iv(webglLocation.value,values);
			break;
		default:
			kha_SystemImpl.gl.uniform1iv(webglLocation.value,values);
		}
	}
	,setFloat: function(location,value) {
		kha_SystemImpl.gl.uniform1f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value);
	}
	,setFloat2: function(location,value1,value2) {
		kha_SystemImpl.gl.uniform2f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2);
	}
	,setFloat3: function(location,value1,value2,value3) {
		kha_SystemImpl.gl.uniform3f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3);
	}
	,setFloat4: function(location,value1,value2,value3,value4) {
		kha_SystemImpl.gl.uniform4f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value1,value2,value3,value4);
	}
	,setFloats: function(location,values) {
		var webglLocation = js_Boot.__cast(location , kha_js_graphics4_ConstantLocation);
		switch(webglLocation.type) {
		case 35664:
			kha_SystemImpl.gl.uniform2fv(webglLocation.value,values);
			break;
		case 35665:
			kha_SystemImpl.gl.uniform3fv(webglLocation.value,values);
			break;
		case 35666:
			kha_SystemImpl.gl.uniform4fv(webglLocation.value,values);
			break;
		case 35676:
			kha_SystemImpl.gl.uniformMatrix4fv(webglLocation.value,false,values);
			break;
		default:
			kha_SystemImpl.gl.uniform1fv(webglLocation.value,values);
		}
	}
	,setVector2: function(location,value) {
		kha_SystemImpl.gl.uniform2f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y);
	}
	,setVector3: function(location,value) {
		kha_SystemImpl.gl.uniform3f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y,value.z);
	}
	,setVector4: function(location,value) {
		kha_SystemImpl.gl.uniform4f((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,value.x,value.y,value.z,value.w);
	}
	,matrixCache: null
	,setMatrix: function(location,matrix) {
		this.matrixCache[0] = matrix._00;
		this.matrixCache[1] = matrix._01;
		this.matrixCache[2] = matrix._02;
		this.matrixCache[3] = matrix._03;
		this.matrixCache[4] = matrix._10;
		this.matrixCache[5] = matrix._11;
		this.matrixCache[6] = matrix._12;
		this.matrixCache[7] = matrix._13;
		this.matrixCache[8] = matrix._20;
		this.matrixCache[9] = matrix._21;
		this.matrixCache[10] = matrix._22;
		this.matrixCache[11] = matrix._23;
		this.matrixCache[12] = matrix._30;
		this.matrixCache[13] = matrix._31;
		this.matrixCache[14] = matrix._32;
		this.matrixCache[15] = matrix._33;
		kha_SystemImpl.gl.uniformMatrix4fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,this.matrixCache);
	}
	,matrix3Cache: null
	,setMatrix3: function(location,matrix) {
		this.matrix3Cache[0] = matrix._00;
		this.matrix3Cache[1] = matrix._01;
		this.matrix3Cache[2] = matrix._02;
		this.matrix3Cache[3] = matrix._10;
		this.matrix3Cache[4] = matrix._11;
		this.matrix3Cache[5] = matrix._12;
		this.matrix3Cache[6] = matrix._20;
		this.matrix3Cache[7] = matrix._21;
		this.matrix3Cache[8] = matrix._22;
		kha_SystemImpl.gl.uniformMatrix3fv((js_Boot.__cast(location , kha_js_graphics4_ConstantLocation)).value,false,this.matrix3Cache);
	}
	,drawIndexedVertices: function(start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
		kha_SystemImpl.gl.drawElements(4,count == -1 ? this.indicesCount : count,type,start * (type == 5123 ? 2 : 4));
		var _g = 0;
		var _g1 = this.useVertexAttributes;
		while(_g < _g1) kha_SystemImpl.gl.disableVertexAttribArray(_g++);
	}
	,convertStencilAction: function(action) {
		switch(action) {
		case 0:
			return 7680;
		case 1:
			return 0;
		case 2:
			return 7681;
		case 3:
			return 7682;
		case 4:
			return 34055;
		case 5:
			return 7683;
		case 6:
			return 34056;
		case 7:
			return 5386;
		}
	}
	,convertCompareMode: function(compareMode) {
		switch(compareMode) {
		case 0:
			return 519;
		case 1:
			return 512;
		case 2:
			return 514;
		case 3:
			return 517;
		case 4:
			return 513;
		case 5:
			return 515;
		case 6:
			return 516;
		case 7:
			return 518;
		}
	}
	,setStencilParameters: function(compareMode,bothPass,depthFail,stencilFail,referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(compareMode == 0 && bothPass == 0 && depthFail == 0 && stencilFail == 0) {
			kha_SystemImpl.gl.disable(2960);
		} else {
			kha_SystemImpl.gl.enable(2960);
			var stencilFunc = this.convertCompareMode(compareMode);
			kha_SystemImpl.gl.stencilMask(writeMask);
			kha_SystemImpl.gl.stencilOp(this.convertStencilAction(stencilFail),this.convertStencilAction(depthFail),this.convertStencilAction(bothPass));
			switch(referenceValue._hx_index) {
			case 0:
				kha_SystemImpl.gl.stencilFunc(stencilFunc,0,readMask);
				break;
			case 1:
				kha_SystemImpl.gl.stencilFunc(stencilFunc,referenceValue.value,readMask);
				break;
			}
		}
	}
	,drawIndexedVerticesInstanced: function(instanceCount,start,count) {
		if(count == null) {
			count = -1;
		}
		if(start == null) {
			start = 0;
		}
		if(this.instancedRenderingAvailable()) {
			var type = kha_SystemImpl.elementIndexUint == null ? 5123 : 5125;
			var typeSize = kha_SystemImpl.elementIndexUint == null ? 2 : 4;
			if(kha_SystemImpl.gl2) {
				kha_SystemImpl.gl.drawElementsInstanced(4,count == -1 ? this.indicesCount : count,type,start * typeSize,instanceCount);
			} else {
				this.instancedExtension.drawElementsInstancedANGLE(4,count == -1 ? this.indicesCount : count,type,start * typeSize,instanceCount);
			}
		}
	}
	,instancedRenderingAvailable: function() {
		return this.instancedExtension;
	}
	,__class__: kha_js_graphics4_Graphics
};
var kha_js_graphics4_Graphics2 = function(canvas) {
	kha_graphics4_Graphics2.call(this,canvas);
};
$hxClasses["kha.js.graphics4.Graphics2"] = kha_js_graphics4_Graphics2;
kha_js_graphics4_Graphics2.__name__ = "kha.js.graphics4.Graphics2";
kha_js_graphics4_Graphics2.__super__ = kha_graphics4_Graphics2;
kha_js_graphics4_Graphics2.prototype = $extend(kha_graphics4_Graphics2.prototype,{
	drawVideoInternal: function(video,x,y,width,height) {
		var v = js_Boot.__cast(video , kha_js_Video);
		this.drawScaledSubImage(v.texture,0,0,v.texture.get_width(),v.texture.get_height(),x,y,width,height);
	}
	,begin: function(clear,clearColor) {
		if(clear == null) {
			clear = true;
		}
		kha_SystemImpl.gl.colorMask(true,true,true,true);
		kha_SystemImpl.gl.disable(2929);
		kha_SystemImpl.gl.depthFunc(519);
		kha_graphics4_Graphics2.prototype.begin.call(this,clear,clearColor);
	}
	,__class__: kha_js_graphics4_Graphics2
});
var kha_js_graphics4_TextureUnit = function(value) {
	this.value = value;
};
$hxClasses["kha.js.graphics4.TextureUnit"] = kha_js_graphics4_TextureUnit;
kha_js_graphics4_TextureUnit.__name__ = "kha.js.graphics4.TextureUnit";
kha_js_graphics4_TextureUnit.__interfaces__ = [kha_graphics4_TextureUnit];
kha_js_graphics4_TextureUnit.prototype = {
	value: null
	,__class__: kha_js_graphics4_TextureUnit
};
var kha_vr_VrInterface = function() {
};
$hxClasses["kha.vr.VrInterface"] = kha_vr_VrInterface;
kha_vr_VrInterface.__name__ = "kha.vr.VrInterface";
kha_vr_VrInterface.prototype = {
	GetSensorState: function() {
		return null;
	}
	,GetPredictedSensorState: function(time) {
		return null;
	}
	,WarpSwapBlack: function() {
	}
	,WarpSwapLoadingIcon: function() {
	}
	,WarpSwap: function(parms) {
	}
	,IsPresenting: function() {
		return false;
	}
	,IsVrEnabled: function() {
		return false;
	}
	,GetTimeInSeconds: function() {
		return 0.0;
	}
	,GetProjectionMatrix: function(eye) {
		return null;
	}
	,GetViewMatrix: function(eye) {
		return null;
	}
	,onVRRequestPresent: function() {
	}
	,onVRExitPresent: function() {
	}
	,onResetPose: function() {
	}
	,__class__: kha_vr_VrInterface
};
var kha_js_vr_VrInterface = function() {
	this.vrHeight = 0;
	this.vrWidth = 0;
	this.height = 0;
	this.width = 0;
	this.rightViewMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.leftViewMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.rightProjectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.leftProjectionMatrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
	this.vrEnabled = false;
	kha_vr_VrInterface.call(this);
};
$hxClasses["kha.js.vr.VrInterface"] = kha_js_vr_VrInterface;
kha_js_vr_VrInterface.__name__ = "kha.js.vr.VrInterface";
kha_js_vr_VrInterface.__super__ = kha_vr_VrInterface;
kha_js_vr_VrInterface.prototype = $extend(kha_vr_VrInterface.prototype,{
	vrEnabled: null
	,vrDisplay: null
	,frameData: null
	,leftProjectionMatrix: null
	,rightProjectionMatrix: null
	,leftViewMatrix: null
	,rightViewMatrix: null
	,width: null
	,height: null
	,vrWidth: null
	,vrHeight: null
	,getVRDisplays: function() {
		var _gthis = this;
		navigator.getVRDisplays().then(function(displays) {
			if(displays.length > 0) {
				_gthis.frameData = new VRFrameData();
				_gthis.vrDisplay = displays[0];
				_gthis.vrDisplay.depthNear = 0.1;
				_gthis.vrDisplay.depthFar = 1024.0;
				var leftEye = _gthis.vrDisplay.getEyeParameters("left");
				var rightEye = _gthis.vrDisplay.getEyeParameters("right");
				_gthis.width = kha_SystemImpl.khanvas.width;
				_gthis.height = kha_SystemImpl.khanvas.height;
				_gthis.vrWidth = Math.max(leftEye.renderWidth,rightEye.renderWidth) * 2 | 0;
				_gthis.vrHeight = Math.max(leftEye.renderHeight,rightEye.renderHeight) | 0;
			} else {
				haxe_Log.trace("There are no VR displays connected.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 60, className : "kha.js.vr.VrInterface", methodName : "getVRDisplays"});
			}
		});
	}
	,onVRRequestPresent: function() {
		var _gthis = this;
		try {
			this.vrDisplay.requestPresent([{ source : kha_SystemImpl.khanvas}]).then(function() {
				_gthis.onResize();
				_gthis.vrDisplay.requestAnimationFrame($bind(_gthis,_gthis.onAnimationFrame));
			});
		} catch( err ) {
			haxe_CallStack.lastException = err;
			var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
			haxe_Log.trace("Failed to requestPresent.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 72, className : "kha.js.vr.VrInterface", methodName : "onVRRequestPresent"});
			haxe_Log.trace(err1,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 73, className : "kha.js.vr.VrInterface", methodName : "onVRRequestPresent"});
		}
	}
	,onVRExitPresent: function() {
		var _gthis = this;
		try {
			this.vrDisplay.exitPresent([{ source : kha_SystemImpl.khanvas}]).then(function() {
				_gthis.onResize();
			});
		} catch( err ) {
			haxe_CallStack.lastException = err;
			var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
			haxe_Log.trace("Failed to exitPresent.",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 83, className : "kha.js.vr.VrInterface", methodName : "onVRExitPresent"});
			haxe_Log.trace(err1,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 84, className : "kha.js.vr.VrInterface", methodName : "onVRExitPresent"});
		}
	}
	,onResetPose: function() {
		try {
			this.vrDisplay.resetPose();
		} catch( err ) {
			haxe_CallStack.lastException = err;
			var err1 = ((err) instanceof js__$Boot_HaxeError) ? err.val : err;
			haxe_Log.trace("Failed to resetPose",{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 92, className : "kha.js.vr.VrInterface", methodName : "onResetPose"});
			haxe_Log.trace(err1,{ fileName : "kha/js/vr/VrInterface.hx", lineNumber : 93, className : "kha.js.vr.VrInterface", methodName : "onResetPose"});
		}
	}
	,onAnimationFrame: function(timestamp) {
		if(this.vrDisplay != null && this.vrDisplay.isPresenting) {
			this.vrDisplay.requestAnimationFrame($bind(this,this.onAnimationFrame));
			this.vrDisplay.getFrameData(this.frameData);
			this.leftProjectionMatrix = this.createMatrixFromArray(this.frameData.leftProjectionMatrix);
			this.leftViewMatrix = this.createMatrixFromArray(this.frameData.leftViewMatrix);
			this.rightProjectionMatrix = this.createMatrixFromArray(this.frameData.rightProjectionMatrix);
			this.rightViewMatrix = this.createMatrixFromArray(this.frameData.rightViewMatrix);
			this.vrDisplay.submitFrame();
		}
	}
	,onResize: function() {
		if(this.vrDisplay != null && this.vrDisplay.isPresenting) {
			kha_SystemImpl.khanvas.width = this.vrWidth;
			kha_SystemImpl.khanvas.height = this.vrHeight;
		} else {
			kha_SystemImpl.khanvas.width = this.width;
			kha_SystemImpl.khanvas.height = this.height;
		}
	}
	,GetSensorState: function() {
		return this.GetPredictedSensorState(0.0);
	}
	,GetPredictedSensorState: function(time) {
		var result = new kha_vr_SensorState();
		result.Predicted = new kha_vr_PoseState();
		result.Recorded = result.Predicted;
		result.Predicted.AngularAcceleration = new kha_math_Vector3();
		result.Predicted.AngularVelocity = new kha_math_Vector3();
		result.Predicted.LinearAcceleration = new kha_math_Vector3();
		result.Predicted.LinearVelocity = new kha_math_Vector3();
		result.Predicted.TimeInSeconds = time;
		result.Predicted.Pose = new kha_vr_Pose();
		result.Predicted.Pose.Orientation = new kha_math_Quaternion();
		result.Predicted.Pose.Position = new kha_math_Vector3();
		var mPose = this.frameData.pose;
		if(mPose != null) {
			result.Predicted.AngularVelocity = this.createVectorFromArray(mPose.angularVelocity);
			result.Predicted.AngularAcceleration = this.createVectorFromArray(mPose.angularAcceleration);
			result.Predicted.LinearVelocity = this.createVectorFromArray(mPose.linearVelocity);
			result.Predicted.LinearAcceleration = this.createVectorFromArray(mPose.linearAcceleration);
			result.Predicted.Pose.Orientation = this.createQuaternion(mPose.orientation);
			result.Predicted.Pose.Position = this.createVectorFromArray(mPose.position);
		}
		return result;
	}
	,WarpSwapBlack: function() {
	}
	,WarpSwapLoadingIcon: function() {
	}
	,WarpSwap: function(parms) {
	}
	,IsPresenting: function() {
		if(this.vrDisplay != null) {
			return this.vrDisplay.isPresenting;
		}
		return false;
	}
	,IsVrEnabled: function() {
		return this.vrEnabled;
	}
	,GetTimeInSeconds: function() {
		return kha_Scheduler.time();
	}
	,GetProjectionMatrix: function(eye) {
		if(eye == 0) {
			return this.leftProjectionMatrix;
		} else {
			return this.rightProjectionMatrix;
		}
	}
	,GetViewMatrix: function(eye) {
		if(eye == 0) {
			return this.leftViewMatrix;
		} else {
			return this.rightViewMatrix;
		}
	}
	,createMatrixFromArray: function(array) {
		var matrix = new kha_math_FastMatrix4(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);
		matrix._00 = array[0];
		matrix._01 = array[1];
		matrix._02 = array[2];
		matrix._03 = array[3];
		matrix._10 = array[4];
		matrix._11 = array[5];
		matrix._12 = array[6];
		matrix._13 = array[7];
		matrix._20 = array[8];
		matrix._21 = array[9];
		matrix._22 = array[10];
		matrix._23 = array[11];
		matrix._30 = array[12];
		matrix._31 = array[13];
		matrix._32 = array[14];
		matrix._33 = array[15];
		return matrix;
	}
	,createVectorFromArray: function(array) {
		var vector = new kha_math_Vector3(0,0,0);
		if(array != null) {
			vector.x = array[0];
			vector.y = array[1];
			vector.z = array[2];
		}
		return vector;
	}
	,createQuaternion: function(array) {
		var quaternion = new kha_math_Quaternion(0,0,0,0);
		if(array != null) {
			quaternion.set_x(array[0]);
			quaternion.set_y(array[1]);
			quaternion.set_z(array[2]);
			quaternion.set_w(array[3]);
		}
		return quaternion;
	}
	,__class__: kha_js_vr_VrInterface
});
var kha_math_FastMatrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.FastMatrix3"] = kha_math_FastMatrix3;
kha_math_FastMatrix3.__name__ = "kha.math.FastMatrix3";
kha_math_FastMatrix3.fromMatrix3 = function(m) {
	return new kha_math_FastMatrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_FastMatrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_FastMatrix3
};
var kha_math_FastMatrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.FastMatrix4"] = kha_math_FastMatrix4;
kha_math_FastMatrix4.__name__ = "kha.math.FastMatrix4";
kha_math_FastMatrix4.fromMatrix4 = function(m) {
	return new kha_math_FastMatrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_FastMatrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	return new kha_math_FastMatrix4(2 / (right - left),0,0,-(right + left) / (right - left),0,2.0 / (top - bottom),0,-(top + bottom) / (top - bottom),0,0,-2 / (zf - zn),-(zf + zn) / (zf - zn),0,0,0,1);
};
kha_math_FastMatrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	return new kha_math_FastMatrix4(uh / aspect,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_FastMatrix4.lookAt = function(eye,at,up) {
	var x = at.x - eye.x;
	var y = at.y - eye.y;
	var z = at.z - eye.z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var x1 = _this_x;
	var y1 = _this_y;
	var z1 = _this_z;
	if(_this_z == null) {
		z1 = 0;
	}
	if(_this_y == null) {
		y1 = 0;
	}
	if(_this_x == null) {
		x1 = 0;
	}
	var zaxis_x = x1;
	var zaxis_y = y1;
	var zaxis_z = z1;
	var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		zaxis_x *= mul;
		zaxis_y *= mul;
		zaxis_z *= mul;
	}
	var _x = zaxis_y * up.z - zaxis_z * up.y;
	var _y = zaxis_z * up.x - zaxis_x * up.z;
	var _z = zaxis_x * up.y - zaxis_y * up.x;
	var x2 = _x;
	var y2 = _y;
	var z2 = _z;
	if(_z == null) {
		z2 = 0;
	}
	if(_y == null) {
		y2 = 0;
	}
	if(_x == null) {
		x2 = 0;
	}
	var _this_x1 = x2;
	var _this_y1 = y2;
	var _this_z1 = z2;
	var x3 = _this_x1;
	var y3 = _this_y1;
	var z3 = _this_z1;
	if(_this_z1 == null) {
		z3 = 0;
	}
	if(_this_y1 == null) {
		y3 = 0;
	}
	if(_this_x1 == null) {
		x3 = 0;
	}
	var xaxis_x = x3;
	var xaxis_y = y3;
	var xaxis_z = z3;
	var currentLength1 = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
	if(currentLength1 != 0) {
		var mul1 = 1 / currentLength1;
		xaxis_x *= mul1;
		xaxis_y *= mul1;
		xaxis_z *= mul1;
	}
	var _x1 = xaxis_y * zaxis_z - xaxis_z * zaxis_y;
	var _y1 = xaxis_z * zaxis_x - xaxis_x * zaxis_z;
	var _z1 = xaxis_x * zaxis_y - xaxis_y * zaxis_x;
	var x4 = _x1;
	var y4 = _y1;
	var z4 = _z1;
	if(_z1 == null) {
		z4 = 0;
	}
	if(_y1 == null) {
		y4 = 0;
	}
	if(_x1 == null) {
		x4 = 0;
	}
	var yaxis_x = x4;
	var yaxis_y = y4;
	var yaxis_z = z4;
	return new kha_math_FastMatrix4(xaxis_x,xaxis_y,xaxis_z,-(xaxis_x * eye.x + xaxis_y * eye.y + xaxis_z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis_x,-zaxis_y,-zaxis_z,zaxis_x * eye.x + zaxis_y * eye.y + zaxis_z * eye.z,0,0,0,1);
};
kha_math_FastMatrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_FastMatrix4
};
var kha_math_FastVector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.FastVector2"] = kha_math_FastVector2;
kha_math_FastVector2.__name__ = "kha.math.FastVector2";
kha_math_FastVector2.fromVector2 = function(v) {
	return new kha_math_FastVector2(v.x,v.y);
};
kha_math_FastVector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector2(" + this.x + ", " + this.y + ")";
	}
	,__class__: kha_math_FastVector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.FastVector3"] = kha_math_FastVector3;
kha_math_FastVector3.__name__ = "kha.math.FastVector3";
kha_math_FastVector3.fromVector3 = function(v) {
	return new kha_math_FastVector3(v.x,v.y,v.z);
};
kha_math_FastVector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector3(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,__class__: kha_math_FastVector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_FastVector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.FastVector4"] = kha_math_FastVector4;
kha_math_FastVector4.__name__ = "kha.math.FastVector4";
kha_math_FastVector4.fromVector4 = function(v) {
	return new kha_math_FastVector4(v.x,v.y,v.z,v.w);
};
kha_math_FastVector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,toString: function() {
		return "FastVector4(" + this.x + ", " + this.y + ", " + this.z + ", " + this.w + ")";
	}
	,__class__: kha_math_FastVector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Matrix3 = function(_00,_10,_20,_01,_11,_21,_02,_12,_22) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
};
$hxClasses["kha.math.Matrix3"] = kha_math_Matrix3;
kha_math_Matrix3.__name__ = "kha.math.Matrix3";
kha_math_Matrix3.fromFastMatrix3 = function(m) {
	return new kha_math_Matrix3(m._00,m._10,m._20,m._01,m._11,m._21,m._02,m._12,m._22);
};
kha_math_Matrix3.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_01: null
	,_11: null
	,_21: null
	,_02: null
	,_12: null
	,_22: null
	,__class__: kha_math_Matrix3
};
var kha_math_Matrix4 = function(_00,_10,_20,_30,_01,_11,_21,_31,_02,_12,_22,_32,_03,_13,_23,_33) {
	this._00 = _00;
	this._10 = _10;
	this._20 = _20;
	this._30 = _30;
	this._01 = _01;
	this._11 = _11;
	this._21 = _21;
	this._31 = _31;
	this._02 = _02;
	this._12 = _12;
	this._22 = _22;
	this._32 = _32;
	this._03 = _03;
	this._13 = _13;
	this._23 = _23;
	this._33 = _33;
};
$hxClasses["kha.math.Matrix4"] = kha_math_Matrix4;
kha_math_Matrix4.__name__ = "kha.math.Matrix4";
kha_math_Matrix4.fromFastMatrix4 = function(m) {
	return new kha_math_Matrix4(m._00,m._10,m._20,m._30,m._01,m._11,m._21,m._31,m._02,m._12,m._22,m._32,m._03,m._13,m._23,m._33);
};
kha_math_Matrix4.orthogonalProjection = function(left,right,bottom,top,zn,zf) {
	return new kha_math_Matrix4(2 / (right - left),0,0,-(right + left) / (right - left),0,2 / (top - bottom),0,-(top + bottom) / (top - bottom),0,0,-2 / (zf - zn),-(zf + zn) / (zf - zn),0,0,0,1);
};
kha_math_Matrix4.perspectiveProjection = function(fovY,aspect,zn,zf) {
	var uh = 1.0 / Math.tan(fovY / 2);
	return new kha_math_Matrix4(uh / aspect,0,0,0,0,uh,0,0,0,0,(zf + zn) / (zn - zf),2 * zf * zn / (zn - zf),0,0,-1,0);
};
kha_math_Matrix4.lookAt = function(eye,at,up) {
	var x = at.x - eye.x;
	var y = at.y - eye.y;
	var z = at.z - eye.z;
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	var _this_x = x;
	var _this_y = y;
	var _this_z = z;
	var x1 = _this_x;
	var y1 = _this_y;
	var z1 = _this_z;
	if(_this_z == null) {
		z1 = 0;
	}
	if(_this_y == null) {
		y1 = 0;
	}
	if(_this_x == null) {
		x1 = 0;
	}
	var zaxis_x = x1;
	var zaxis_y = y1;
	var zaxis_z = z1;
	var currentLength = Math.sqrt(zaxis_x * zaxis_x + zaxis_y * zaxis_y + zaxis_z * zaxis_z);
	if(currentLength != 0) {
		var mul = 1 / currentLength;
		zaxis_x *= mul;
		zaxis_y *= mul;
		zaxis_z *= mul;
	}
	var _x = zaxis_y * up.z - zaxis_z * up.y;
	var _y = zaxis_z * up.x - zaxis_x * up.z;
	var _z = zaxis_x * up.y - zaxis_y * up.x;
	var x2 = _x;
	var y2 = _y;
	var z2 = _z;
	if(_z == null) {
		z2 = 0;
	}
	if(_y == null) {
		y2 = 0;
	}
	if(_x == null) {
		x2 = 0;
	}
	var _this_x1 = x2;
	var _this_y1 = y2;
	var _this_z1 = z2;
	var x3 = _this_x1;
	var y3 = _this_y1;
	var z3 = _this_z1;
	if(_this_z1 == null) {
		z3 = 0;
	}
	if(_this_y1 == null) {
		y3 = 0;
	}
	if(_this_x1 == null) {
		x3 = 0;
	}
	var xaxis_x = x3;
	var xaxis_y = y3;
	var xaxis_z = z3;
	var currentLength1 = Math.sqrt(xaxis_x * xaxis_x + xaxis_y * xaxis_y + xaxis_z * xaxis_z);
	if(currentLength1 != 0) {
		var mul1 = 1 / currentLength1;
		xaxis_x *= mul1;
		xaxis_y *= mul1;
		xaxis_z *= mul1;
	}
	var _x1 = xaxis_y * zaxis_z - xaxis_z * zaxis_y;
	var _y1 = xaxis_z * zaxis_x - xaxis_x * zaxis_z;
	var _z1 = xaxis_x * zaxis_y - xaxis_y * zaxis_x;
	var x4 = _x1;
	var y4 = _y1;
	var z4 = _z1;
	if(_z1 == null) {
		z4 = 0;
	}
	if(_y1 == null) {
		y4 = 0;
	}
	if(_x1 == null) {
		x4 = 0;
	}
	var yaxis_x = x4;
	var yaxis_y = y4;
	var yaxis_z = z4;
	return new kha_math_Matrix4(xaxis_x,xaxis_y,xaxis_z,-(xaxis_x * eye.x + xaxis_y * eye.y + xaxis_z * eye.z),yaxis_x,yaxis_y,yaxis_z,-(yaxis_x * eye.x + yaxis_y * eye.y + yaxis_z * eye.z),-zaxis_x,-zaxis_y,-zaxis_z,zaxis_x * eye.x + zaxis_y * eye.y + zaxis_z * eye.z,0,0,0,1);
};
kha_math_Matrix4.prototype = {
	_00: null
	,_10: null
	,_20: null
	,_30: null
	,_01: null
	,_11: null
	,_21: null
	,_31: null
	,_02: null
	,_12: null
	,_22: null
	,_32: null
	,_03: null
	,_13: null
	,_23: null
	,_33: null
	,__class__: kha_math_Matrix4
};
var kha_math_Quaternion = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.values = [];
	this.values.push(x);
	this.values.push(y);
	this.values.push(z);
	this.values.push(w);
};
$hxClasses["kha.math.Quaternion"] = kha_math_Quaternion;
kha_math_Quaternion.__name__ = "kha.math.Quaternion";
kha_math_Quaternion.fromAxisAngle = function(axis,radians) {
	var q = new kha_math_Quaternion();
	q.set_w(Math.cos(radians / 2.0));
	q.set_x(q.set_y(q.set_z(Math.sin(radians / 2.0))));
	q.set_x(q.get_x() * axis.x);
	q.set_y(q.get_y() * axis.y);
	q.set_z(q.get_z() * axis.z);
	return q;
};
kha_math_Quaternion.prototype = {
	values: null
	,slerp: function(t,q) {
		var dot = this.get_x() * q.get_x() + this.get_y() * q.get_y() + this.get_z() * q.get_z() + this.get_w() * q.get_w();
		if(dot > 0.9995) {
			var _this = new kha_math_Quaternion(this.get_x() - q.get_x(),this.get_y() - q.get_y(),this.get_z() - q.get_z(),this.get_w() - q.get_w());
			var q1 = new kha_math_Quaternion(_this.get_x() * t,_this.get_y() * t,_this.get_z() * t,_this.get_w() * t);
			var result = new kha_math_Quaternion(q.get_x() + q1.get_x(),q.get_y() + q1.get_y(),q.get_z() + q1.get_z(),q.get_w() + q1.get_w());
			var scale = 1.0 / result.get_length();
			result.set_x(result.get_x() * scale);
			result.set_y(result.get_y() * scale);
			result.set_z(result.get_z() * scale);
			result.set_w(result.get_w() * scale);
			return result;
		}
		if(dot < 0) {
			dot = 0;
		}
		if(dot > 1) {
			dot = 1;
		}
		var theta = Math.acos(dot) * t;
		var q2 = new kha_math_Quaternion(this.get_x() * dot,this.get_y() * dot,this.get_z() * dot,this.get_w() * dot);
		var q21 = new kha_math_Quaternion(q.get_x() - q2.get_x(),q.get_y() - q2.get_y(),q.get_z() - q2.get_z(),q.get_w() - q2.get_w());
		var scale1 = 1.0 / q21.get_length();
		q21.set_x(q21.get_x() * scale1);
		q21.set_y(q21.get_y() * scale1);
		q21.set_z(q21.get_z() * scale1);
		q21.set_w(q21.get_w() * scale1);
		var scale2 = Math.cos(theta);
		var _this1 = new kha_math_Quaternion(this.get_x() * scale2,this.get_y() * scale2,this.get_z() * scale2,this.get_w() * scale2);
		var scale3 = Math.sin(theta);
		var q3 = new kha_math_Quaternion(q21.get_x() * scale3,q21.get_y() * scale3,q21.get_z() * scale3,q21.get_w() * scale3);
		var result1 = new kha_math_Quaternion(_this1.get_x() + q3.get_x(),_this1.get_y() + q3.get_y(),_this1.get_z() + q3.get_z(),_this1.get_w() + q3.get_w());
		var scale4 = 1.0 / result1.get_length();
		result1.set_x(result1.get_x() * scale4);
		result1.set_y(result1.get_y() * scale4);
		result1.set_z(result1.get_z() * scale4);
		result1.set_w(result1.get_w() * scale4);
		return result1;
	}
	,rotated: function(b) {
		var q = new kha_math_Quaternion();
		q.set_w(this.get_w() * b.get_w() - this.get_x() * b.get_x() - this.get_y() * b.get_y() - this.get_z() * b.get_z());
		q.set_x(this.get_w() * b.get_x() + this.get_x() * b.get_w() + this.get_y() * b.get_z() - this.get_z() * b.get_y());
		q.set_y(this.get_w() * b.get_y() + this.get_y() * b.get_w() + this.get_z() * b.get_x() - this.get_x() * b.get_z());
		q.set_z(this.get_w() * b.get_z() + this.get_z() * b.get_w() + this.get_x() * b.get_y() - this.get_y() * b.get_x());
		var scale = 1.0 / q.get_length();
		q.set_x(q.get_x() * scale);
		q.set_y(q.get_y() * scale);
		q.set_z(q.get_z() * scale);
		q.set_w(q.get_w() * scale);
		return q;
	}
	,scaled: function(scale) {
		return new kha_math_Quaternion(this.get_x() * scale,this.get_y() * scale,this.get_z() * scale,this.get_w() * scale);
	}
	,scale: function(scale) {
		this.set_x(this.get_x() * scale);
		this.set_y(this.get_y() * scale);
		this.set_z(this.get_z() * scale);
		this.set_w(this.get_w() * scale);
	}
	,matrix: function() {
		var xs = this.get_x() * 2.0;
		var ys = this.get_y() * 2.0;
		var zs = this.get_z() * 2.0;
		var wx = this.get_w() * xs;
		var wy = this.get_w() * ys;
		var wz = this.get_w() * zs;
		var xx = this.get_x() * xs;
		var xy = this.get_x() * ys;
		var xz = this.get_x() * zs;
		var yy = this.get_y() * ys;
		var yz = this.get_y() * zs;
		var zz = this.get_z() * zs;
		return new kha_math_Matrix4(1 - (yy + zz),xy - wz,xz + wy,0,xy + wz,1 - (xx + zz),yz - wx,0,xz - wy,yz + wx,1 - (xx + yy),0,0,0,0,1);
	}
	,get: function(index) {
		return this.values[index];
	}
	,set: function(index,value) {
		this.values[index] = value;
	}
	,get_x: function() {
		return this.values[0];
	}
	,set_x: function(value) {
		return this.values[0] = value;
	}
	,get_y: function() {
		return this.values[1];
	}
	,set_y: function(value) {
		return this.values[1] = value;
	}
	,get_z: function() {
		return this.values[2];
	}
	,set_z: function(value) {
		return this.values[2] = value;
	}
	,get_w: function() {
		return this.values[3];
	}
	,set_w: function(value) {
		return this.values[3] = value;
	}
	,get_length: function() {
		return Math.sqrt(this.get_x() * this.get_x() + this.get_y() * this.get_y() + this.get_z() * this.get_z() + this.get_w() * this.get_w());
	}
	,set_length: function(length) {
		if(this.get_length() == 0) {
			return 0;
		}
		var mul = length / this.get_length();
		var _g = this;
		_g.set_x(_g.get_x() * mul);
		var _g1 = this;
		_g1.set_y(_g1.get_y() * mul);
		var _g2 = this;
		_g2.set_z(_g2.get_z() * mul);
		return length;
	}
	,addVector: function(vec) {
		var result = new kha_math_Quaternion(this.get_x(),this.get_y(),this.get_z(),this.get_w());
		var q1 = new kha_math_Quaternion(0,vec.x,vec.y,vec.z);
		var q = new kha_math_Quaternion();
		q.set_x(q1.get_w() * result.get_x() + q1.get_x() * result.get_w() + q1.get_y() * result.get_z() - q1.get_z() * result.get_y());
		q.set_y(q1.get_w() * result.get_y() - q1.get_x() * result.get_z() + q1.get_y() * result.get_w() + q1.get_z() * result.get_x());
		q.set_z(q1.get_w() * result.get_z() + q1.get_x() * result.get_y() - q1.get_y() * result.get_x() + q1.get_z() * result.get_w());
		q.set_w(q1.get_w() * result.get_w() - q1.get_x() * result.get_x() - q1.get_y() * result.get_y() - q1.get_z() * result.get_z());
		q1 = q;
		result.set_x(result.get_x() + q.get_x() * 0.5);
		result.set_y(result.get_y() + q.get_y() * 0.5);
		result.set_z(result.get_z() + q.get_z() * 0.5);
		result.set_w(result.get_w() + q.get_w() * 0.5);
		return result;
	}
	,add: function(q) {
		return new kha_math_Quaternion(this.get_x() + q.get_x(),this.get_y() + q.get_y(),this.get_z() + q.get_z(),this.get_w() + q.get_w());
	}
	,sub: function(q) {
		return new kha_math_Quaternion(this.get_x() - q.get_x(),this.get_y() - q.get_y(),this.get_z() - q.get_z(),this.get_w() - q.get_w());
	}
	,mult: function(r) {
		var q = new kha_math_Quaternion();
		q.set_x(this.get_w() * r.get_x() + this.get_x() * r.get_w() + this.get_y() * r.get_z() - this.get_z() * r.get_y());
		q.set_y(this.get_w() * r.get_y() - this.get_x() * r.get_z() + this.get_y() * r.get_w() + this.get_z() * r.get_x());
		q.set_z(this.get_w() * r.get_z() + this.get_x() * r.get_y() - this.get_y() * r.get_x() + this.get_z() * r.get_w());
		q.set_w(this.get_w() * r.get_w() - this.get_x() * r.get_x() - this.get_y() * r.get_y() - this.get_z() * r.get_z());
		return q;
	}
	,normalize: function() {
		var scale = 1.0 / this.get_length();
		this.set_x(this.get_x() * scale);
		this.set_y(this.get_y() * scale);
		this.set_z(this.get_z() * scale);
		this.set_w(this.get_w() * scale);
	}
	,dot: function(q) {
		return this.get_x() * q.get_x() + this.get_y() * q.get_y() + this.get_z() * q.get_z() + this.get_w() * q.get_w();
	}
	,getEulerAngles: function(A1,A2,A3,S,D) {
		if(D == null) {
			D = 1;
		}
		if(S == null) {
			S = 1;
		}
		var result = new kha_math_Vector3();
		var Q = [];
		Q[0] = this.get_x();
		Q[1] = this.get_y();
		Q[2] = this.get_z();
		var ww = this.get_w() * this.get_w();
		var Q11 = Q[A1] * Q[A1];
		var Q22 = Q[A2] * Q[A2];
		var Q33 = Q[A3] * Q[A3];
		var psign = -1;
		var PiOver2 = Math.PI / 2.0;
		if((A1 + 1) % 3 == A2 && (A2 + 1) % 3 == A3) {
			psign = 1;
		}
		var s2 = psign * 2.0 * (psign * this.get_w() * Q[A2] + Q[A1] * Q[A3]);
		if(s2 < -0.9999999) {
			result.x = 0;
			result.y = -S * D * PiOver2;
			result.z = S * D * Math.atan2(2 * (psign * Q[A1] * Q[A2] + this.get_w() * Q[A3]),ww + Q22 - Q11 - Q33);
		} else if(s2 > 0.9999999) {
			result.x = 0;
			result.y = S * D * PiOver2;
			result.z = S * D * Math.atan2(2 * (psign * Q[A1] * Q[A2] + this.get_w() * Q[A3]),ww + Q22 - Q11 - Q33);
		} else {
			result.x = -S * D * Math.atan2(-2 * (this.get_w() * Q[A1] - psign * Q[A2] * Q[A3]),ww + Q33 - Q11 - Q22);
			result.y = S * D * Math.asin(s2);
			result.z = S * D * Math.atan2(2 * (this.get_w() * Q[A3] - psign * Q[A1] * Q[A2]),ww + Q11 - Q22 - Q33);
		}
		return result;
	}
	,__class__: kha_math_Quaternion
	,__properties__: {set_length:"set_length",get_length:"get_length",set_w:"set_w",get_w:"get_w",set_z:"set_z",get_z:"get_z",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var kha_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["kha.math.Vector2"] = kha_math_Vector2;
kha_math_Vector2.__name__ = "kha.math.Vector2";
kha_math_Vector2.prototype = {
	x: null
	,y: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		return length;
	}
	,__class__: kha_math_Vector2
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector3 = function(x,y,z) {
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["kha.math.Vector3"] = kha_math_Vector3;
kha_math_Vector3.__name__ = "kha.math.Vector3";
kha_math_Vector3.prototype = {
	x: null
	,y: null
	,z: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		return length;
	}
	,__class__: kha_math_Vector3
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 1;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["kha.math.Vector4"] = kha_math_Vector4;
kha_math_Vector4.__name__ = "kha.math.Vector4";
kha_math_Vector4.prototype = {
	x: null
	,y: null
	,z: null
	,w: null
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
	}
	,set_length: function(length) {
		var currentLength = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
		if(currentLength == 0) {
			return 0;
		}
		var mul = length / currentLength;
		this.x *= mul;
		this.y *= mul;
		this.z *= mul;
		this.w *= mul;
		return length;
	}
	,__class__: kha_math_Vector4
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var kha_netsync_Client = function() { };
$hxClasses["kha.netsync.Client"] = kha_netsync_Client;
kha_netsync_Client.__name__ = "kha.netsync.Client";
kha_netsync_Client.__isInterface__ = true;
kha_netsync_Client.prototype = {
	get_id: null
	,id: null
	,send: null
	,receive: null
	,onClose: null
	,__class__: kha_netsync_Client
	,__properties__: {get_id:"get_id"}
};
var kha_netsync_ControllerBuilder = function() { };
$hxClasses["kha.netsync.ControllerBuilder"] = kha_netsync_ControllerBuilder;
kha_netsync_ControllerBuilder.__name__ = "kha.netsync.ControllerBuilder";
var kha_netsync_Entity = function() { };
$hxClasses["kha.netsync.Entity"] = kha_netsync_Entity;
kha_netsync_Entity.__name__ = "kha.netsync.Entity";
kha_netsync_Entity.__isInterface__ = true;
kha_netsync_Entity.prototype = {
	_id: null
	,_size: null
	,_send: null
	,_receive: null
	,__class__: kha_netsync_Entity
};
var kha_netsync_LocalClient = function(id) {
	this.myId = id;
};
$hxClasses["kha.netsync.LocalClient"] = kha_netsync_LocalClient;
kha_netsync_LocalClient.__name__ = "kha.netsync.LocalClient";
kha_netsync_LocalClient.__interfaces__ = [kha_netsync_Client];
kha_netsync_LocalClient.prototype = {
	myId: null
	,send: function(bytes,mandatory) {
	}
	,receive: function(receiver) {
	}
	,onClose: function(close) {
	}
	,controllers: null
	,get_controllers: function() {
		return null;
	}
	,id: null
	,get_id: function() {
		return this.myId;
	}
	,__class__: kha_netsync_LocalClient
	,__properties__: {get_id:"get_id",get_controllers:"get_controllers"}
};
var kha_netsync_Network = function(url,port,errorCallback,closeCallback) {
	this.open = false;
	var _gthis = this;
	this.socket = new WebSocket("ws://" + url + ":" + port);
	this.socket.onerror = function(error) {
		haxe_Log.trace("Network error.",{ fileName : "kha/netsync/Network.hx", lineNumber : 14, className : "kha.netsync.Network", methodName : "new"});
		errorCallback();
	};
	this.socket.binaryType = "arraybuffer";
	this.socket.onopen = function() {
		_gthis.open = true;
	};
	this.socket.onclose = function(event) {
		haxe_Log.trace("Network connection closed. " + kha_netsync_Network.webSocketCloseReason(event.code) + " (" + event.reason + ").",{ fileName : "kha/netsync/Network.hx", lineNumber : 22, className : "kha.netsync.Network", methodName : "new"});
		closeCallback();
	};
};
$hxClasses["kha.netsync.Network"] = kha_netsync_Network;
kha_netsync_Network.__name__ = "kha.netsync.Network";
kha_netsync_Network.webSocketCloseReason = function(code) {
	switch(code) {
	case 1000:
		return "Normal Closure";
	case 1001:
		return "Going Away";
	case 1002:
		return "Protocol error";
	case 1003:
		return "Unsupported Data";
	case 1005:
		return "No Status Rcvd";
	case 1006:
		return "Abnormal Closure";
	case 1007:
		return "Invalid frame";
	case 1008:
		return "Policy Violation";
	case 1009:
		return "Message Too Big";
	case 1010:
		return "Mandatory Ext.";
	case 1011:
		return "Internal Server Error";
	case 1015:
		return "TLS handshake";
	default:
		return "";
	}
};
kha_netsync_Network.prototype = {
	socket: null
	,open: null
	,send: function(bytes,mandatory) {
		if(this.open) {
			this.socket.send(bytes.b.bufferValue);
		}
	}
	,listen: function(listener) {
		this.socket.onmessage = function(message) {
			var tmp = haxe_io_Bytes.ofData(message.data);
			listener(tmp);
		};
	}
	,__class__: kha_netsync_Network
};
var kha_netsync_State = function(time,data) {
	this.time = time;
	this.data = data;
};
$hxClasses["kha.netsync.State"] = kha_netsync_State;
kha_netsync_State.__name__ = "kha.netsync.State";
kha_netsync_State.prototype = {
	time: null
	,data: null
	,__class__: kha_netsync_State
};
var kha_netsync_Session = function(maxPlayers,address,port) {
	this.ping = 1;
	this.currentPlayers = 0;
	this.controllers = new haxe_ds_IntMap();
	this.entities = new haxe_ds_IntMap();
	kha_netsync_Session.instance = this;
	this.maxPlayers = maxPlayers;
	this.address = address;
	this.port = port;
};
$hxClasses["kha.netsync.Session"] = kha_netsync_Session;
kha_netsync_Session.__name__ = "kha.netsync.Session";
kha_netsync_Session.the = function() {
	return kha_netsync_Session.instance;
};
kha_netsync_Session.prototype = {
	entities: null
	,controllers: null
	,maxPlayers: null
	,currentPlayers: null
	,ping: null
	,address: null
	,port: null
	,startCallback: null
	,refusedCallback: null
	,resetCallback: null
	,localClient: null
	,network: null
	,updateTaskId: null
	,pingTaskId: null
	,me: null
	,get_me: function() {
		return this.localClient;
	}
	,addEntity: function(entity) {
		var this1 = this.entities;
		var key = entity._id();
		this1.h[key] = entity;
	}
	,addController: function(controller) {
		haxe_Log.trace("Adding controller id " + controller._id(),{ fileName : "kha/netsync/Session.hx", lineNumber : 88, className : "kha.netsync.Session", methodName : "addController"});
		controller._inputBufferIndex = 0;
		this.controllers.h[controller._id()] = controller;
	}
	,sendControllerUpdate: function(id,bytes) {
		if(this.controllers.h.hasOwnProperty(id)) {
			if(this.controllers.h[id]._inputBuffer.length < this.controllers.h[id]._inputBufferIndex + 4 + bytes.length) {
				var newBuffer = new haxe_io_Bytes(new ArrayBuffer(this.controllers.h[id]._inputBufferIndex + 4 + bytes.length));
				newBuffer.blit(0,this.controllers.h[id]._inputBuffer,0,this.controllers.h[id]._inputBufferIndex);
				this.controllers.h[id]._inputBuffer = newBuffer;
			}
			this.controllers.h[id]._inputBuffer.setInt32(this.controllers.h[id]._inputBufferIndex,bytes.length);
			this.controllers.h[id]._inputBuffer.blit(this.controllers.h[id]._inputBufferIndex + 4,bytes,0,bytes.length);
			this.controllers.h[id]._inputBufferIndex += 4 + bytes.length;
		}
	}
	,sendPing: function() {
		var bytes = new haxe_io_Bytes(new ArrayBuffer(5));
		bytes.b[0] = 4;
		bytes.setFloat(1,kha_Scheduler.realTime());
		this.sendToServer(bytes);
	}
	,sendPlayerUpdate: function() {
	}
	,receive: function(bytes,client) {
		switch(bytes.b[0]) {
		case 0:
			this.localClient = new kha_netsync_LocalClient(bytes.b[1]);
			kha_Scheduler.resetTime();
			this.startCallback();
			break;
		case 1:
			var time = bytes.getDouble(1);
			var offset = 9;
			var entity = this.entities.iterator();
			while(entity.hasNext()) {
				var entity1 = entity.next();
				entity1._receive(offset,bytes);
				offset += entity1._size();
			}
			kha_Scheduler.warp(time);
			break;
		case 3:
			switch(bytes.b[1]) {
			case 0:
				break;
			case 1:
				this.executeRPC(bytes);
				break;
			}
			break;
		case 4:
			var sendTime = bytes.getFloat(1);
			this.ping = kha_Scheduler.realTime() - sendTime;
			break;
		case 5:
			this.refusedCallback();
			break;
		case 6:
			this.currentPlayers = bytes.getInt32(1);
			break;
		}
	}
	,executeRPC: function(bytes) {
		var args = [];
		var syncId = bytes.getInt32(2);
		var index = 6;
		var classnamelength = bytes.getUInt16(index);
		index += 2;
		var classname = "";
		var _g = 0;
		var _g1 = classnamelength;
		while(_g < _g1) {
			_g++;
			var code = bytes.b[index];
			classname += String.fromCodePoint(code);
			++index;
		}
		var methodnamelength = bytes.getUInt16(index);
		index += 2;
		var methodname = "";
		var _g2 = 0;
		var _g3 = methodnamelength;
		while(_g2 < _g3) {
			_g2++;
			var code1 = bytes.b[index];
			methodname += String.fromCodePoint(code1);
			++index;
		}
		while(index < bytes.length) switch(bytes.b[index++]) {
		case 66:
			var value = bytes.b[index] == 1;
			++index;
			haxe_Log.trace("Bool: " + (value == null ? "null" : "" + value),{ fileName : "kha/netsync/Session.hx", lineNumber : 295, className : "kha.netsync.Session", methodName : "executeRPC"});
			args.push(value);
			break;
		case 70:
			var value1 = bytes.getDouble(index);
			index += 8;
			haxe_Log.trace("Float: " + value1,{ fileName : "kha/netsync/Session.hx", lineNumber : 300, className : "kha.netsync.Session", methodName : "executeRPC"});
			args.push(value1);
			break;
		case 73:
			var value2 = bytes.getInt32(index);
			index += 4;
			haxe_Log.trace("Int: " + value2,{ fileName : "kha/netsync/Session.hx", lineNumber : 305, className : "kha.netsync.Session", methodName : "executeRPC"});
			args.push(value2);
			break;
		case 83:
			var length = bytes.getUInt16(index);
			index += 2;
			var str = "";
			var _g4 = 0;
			var _g5 = length;
			while(_g4 < _g5) {
				_g4++;
				var code2 = bytes.b[index];
				str += String.fromCodePoint(code2);
				++index;
			}
			haxe_Log.trace("String: " + str,{ fileName : "kha/netsync/Session.hx", lineNumber : 315, className : "kha.netsync.Session", methodName : "executeRPC"});
			args.push(str);
			break;
		default:
			haxe_Log.trace("Unknown argument type.",{ fileName : "kha/netsync/Session.hx", lineNumber : 318, className : "kha.netsync.Session", methodName : "executeRPC"});
		}
		if(syncId == -1) {
			Reflect.field($hxClasses[classname],methodname + "_remotely").apply(null,args);
		} else {
			Reflect.field(kha_netsync_SyncBuilder.objects[syncId],methodname + "_remotely").apply(kha_netsync_SyncBuilder.objects[syncId],args);
		}
	}
	,waitForStart: function(callback,refuseCallback,errorCallback,closeCallback,resCallback) {
		var _gthis = this;
		this.startCallback = callback;
		this.refusedCallback = refuseCallback;
		this.resetCallback = resCallback;
		this.network = new kha_netsync_Network(this.address,this.port,errorCallback,function() {
			closeCallback();
			_gthis.reset();
		});
		this.network.listen(function(bytes) {
			_gthis.receive(bytes);
		});
		this.updateTaskId = kha_Scheduler.addFrameTask($bind(this,this.update),0);
		this.ping = 1;
		this.pingTaskId = kha_Scheduler.addTimeTask($bind(this,this.sendPing),0,1);
	}
	,reset: function() {
		kha_Scheduler.removeFrameTask(this.updateTaskId);
		kha_Scheduler.removeTimeTask(this.pingTaskId);
		this.currentPlayers = 0;
		this.ping = 1;
		this.controllers = new haxe_ds_IntMap();
		this.entities = new haxe_ds_IntMap();
		this.resetCallback();
	}
	,update: function() {
		var controller = this.controllers.iterator();
		while(controller.hasNext()) {
			var controller1 = controller.next();
			if(controller1._inputBufferIndex > 0) {
				var bytes = new haxe_io_Bytes(new ArrayBuffer(22 + controller1._inputBufferIndex));
				bytes.b[0] = 2;
				bytes.setInt32(1,controller1._id());
				bytes.setDouble(5,kha_Scheduler.time());
				bytes.setInt32(13,kha_System.windowWidth(0));
				bytes.setInt32(17,kha_System.windowHeight(0));
				bytes.b[21] = 0;
				bytes.blit(22,controller1._inputBuffer,0,controller1._inputBufferIndex);
				this.sendToServer(bytes);
				controller1._inputBufferIndex = 0;
			}
		}
	}
	,sendToServer: function(bytes) {
		this.network.send(bytes,false);
	}
	,__class__: kha_netsync_Session
	,__properties__: {get_me:"get_me"}
};
var kha_netsync_SyncBuilder = function() { };
$hxClasses["kha.netsync.SyncBuilder"] = kha_netsync_SyncBuilder;
kha_netsync_SyncBuilder.__name__ = "kha.netsync.SyncBuilder";
var kha_simd_Float32x4 = function(_0,_1,_2,_3) {
	this._0 = _0;
	this._1 = _1;
	this._2 = _2;
	this._3 = _3;
};
$hxClasses["kha.simd.Float32x4"] = kha_simd_Float32x4;
kha_simd_Float32x4.__name__ = "kha.simd.Float32x4";
kha_simd_Float32x4.create = function() {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.loadAllFast = function(t) {
	return new kha_simd_Float32x4(t,t,t,t);
};
kha_simd_Float32x4.load = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.loadFast = function(a,b,c,d) {
	return new kha_simd_Float32x4(a,b,c,d);
};
kha_simd_Float32x4.get = function(t,index) {
	var value = 0;
	switch(index) {
	case 0:
		value = t._0;
		break;
	case 1:
		value = t._1;
		break;
	case 2:
		value = t._2;
		break;
	case 3:
		value = t._3;
		break;
	}
	return value;
};
kha_simd_Float32x4.getFast = function(t,index) {
	switch(index) {
	case 0:
		return t._0;
	case 1:
		return t._1;
	case 2:
		return t._2;
	case 3:
		return t._3;
	}
	return 0;
};
kha_simd_Float32x4.abs = function(t) {
	return new kha_simd_Float32x4(Math.abs(t._0),Math.abs(t._1),Math.abs(t._2),Math.abs(t._3));
};
kha_simd_Float32x4.add = function(a,b) {
	return new kha_simd_Float32x4(a._0 + b._0,a._1 + b._1,a._2 + b._2,a._3 + b._3);
};
kha_simd_Float32x4.div = function(a,b) {
	return new kha_simd_Float32x4(a._0 / b._0,a._1 / b._1,a._2 / b._2,a._3 / b._3);
};
kha_simd_Float32x4.mul = function(a,b) {
	return new kha_simd_Float32x4(a._0 * b._0,a._1 * b._1,a._2 * b._2,a._3 * b._3);
};
kha_simd_Float32x4.neg = function(t) {
	return new kha_simd_Float32x4(-t._0,-t._1,-t._2,-t._3);
};
kha_simd_Float32x4.reciprocalApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.reciprocalSqrtApproximation = function(t) {
	return new kha_simd_Float32x4(0,0,0,0);
};
kha_simd_Float32x4.sub = function(a,b) {
	return new kha_simd_Float32x4(a._0 - b._0,a._1 - b._1,a._2 - b._2,a._3 - b._3);
};
kha_simd_Float32x4.sqrt = function(t) {
	return new kha_simd_Float32x4(Math.sqrt(t._0),Math.sqrt(t._1),Math.sqrt(t._2),Math.sqrt(t._3));
};
kha_simd_Float32x4.prototype = {
	_0: null
	,_1: null
	,_2: null
	,_3: null
	,__class__: kha_simd_Float32x4
};
var kha_vr_Pose = function() {
	this.Orientation = new kha_math_Quaternion();
	this.Position = new kha_math_Vector3();
};
$hxClasses["kha.vr.Pose"] = kha_vr_Pose;
kha_vr_Pose.__name__ = "kha.vr.Pose";
kha_vr_Pose.prototype = {
	Orientation: null
	,Position: null
	,__class__: kha_vr_Pose
};
var kha_vr_PoseState = function() {
};
$hxClasses["kha.vr.PoseState"] = kha_vr_PoseState;
kha_vr_PoseState.__name__ = "kha.vr.PoseState";
kha_vr_PoseState.prototype = {
	Pose: null
	,AngularVelocity: null
	,LinearVelocity: null
	,AngularAcceleration: null
	,LinearAcceleration: null
	,TimeInSeconds: null
	,__class__: kha_vr_PoseState
};
var kha_vr_SensorState = function() {
};
$hxClasses["kha.vr.SensorState"] = kha_vr_SensorState;
kha_vr_SensorState.__name__ = "kha.vr.SensorState";
kha_vr_SensorState.prototype = {
	Predicted: null
	,Recorded: null
	,Temperature: null
	,Status: null
	,__class__: kha_vr_SensorState
};
var kha_vr_TimeWarpImage = function() {
};
$hxClasses["kha.vr.TimeWarpImage"] = kha_vr_TimeWarpImage;
kha_vr_TimeWarpImage.__name__ = "kha.vr.TimeWarpImage";
kha_vr_TimeWarpImage.prototype = {
	Image: null
	,TexCoordsFromTanAngles: null
	,Pose: null
	,__class__: kha_vr_TimeWarpImage
};
var kha_vr_TimeWarpParms = function() {
};
$hxClasses["kha.vr.TimeWarpParms"] = kha_vr_TimeWarpParms;
kha_vr_TimeWarpParms.__name__ = "kha.vr.TimeWarpParms";
kha_vr_TimeWarpParms.prototype = {
	LeftImage: null
	,RightImage: null
	,LeftOverlay: null
	,RightOverlay: null
	,__class__: kha_vr_TimeWarpParms
};
var localization_LangModule = function(updatePriority) {
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["localization.LangModule"] = localization_LangModule;
localization_LangModule.__name__ = "localization.LangModule";
localization_LangModule.__super__ = banan_module_Module;
localization_LangModule.prototype = $extend(banan_module_Module.prototype,{
	getLang: function() {
		throw new js__$Boot_HaxeError(banan_error_Error.e(118,"LangModule.hx:9","",null));
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("localization.LangModule",[],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: localization_LangModule
});
var msignal_Signal = function(valueClasses) {
	if(valueClasses == null) {
		valueClasses = [];
	}
	this.valueClasses = valueClasses;
	this.slots = msignal_SlotList.NIL;
	this.priorityBased = false;
};
$hxClasses["msignal.Signal"] = msignal_Signal;
msignal_Signal.__name__ = "msignal.Signal";
msignal_Signal.prototype = {
	valueClasses: null
	,numListeners: null
	,slots: null
	,priorityBased: null
	,add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) {
			return null;
		}
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal_SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) {
				this.priorityBased = true;
			}
			if(!this.priorityBased && priority == 0) {
				this.slots = this.slots.prepend(newSlot);
			} else {
				this.slots = this.slots.insertWithPriority(newSlot);
			}
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) {
			return true;
		}
		if(this.slots.find(listener) == null) {
			return true;
		}
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
	,__class__: msignal_Signal
	,__properties__: {get_numListeners:"get_numListeners"}
};
var msignal_Signal0 = function() {
	msignal_Signal.call(this);
};
$hxClasses["msignal.Signal0"] = msignal_Signal0;
msignal_Signal0.__name__ = "msignal.Signal0";
msignal_Signal0.__super__ = msignal_Signal;
msignal_Signal0.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot0(this,listener,once,priority);
	}
	,__class__: msignal_Signal0
});
var msignal_Signal1 = function(type) {
	msignal_Signal.call(this,[type]);
};
$hxClasses["msignal.Signal1"] = msignal_Signal1;
msignal_Signal1.__name__ = "msignal.Signal1";
msignal_Signal1.__super__ = msignal_Signal;
msignal_Signal1.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot1(this,listener,once,priority);
	}
	,__class__: msignal_Signal1
});
var msignal_Signal2 = function(type1,type2) {
	msignal_Signal.call(this,[type1,type2]);
};
$hxClasses["msignal.Signal2"] = msignal_Signal2;
msignal_Signal2.__name__ = "msignal.Signal2";
msignal_Signal2.__super__ = msignal_Signal;
msignal_Signal2.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot2(this,listener,once,priority);
	}
	,__class__: msignal_Signal2
});
var msignal_Slot = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
$hxClasses["msignal.Slot"] = msignal_Slot;
msignal_Slot.__name__ = "msignal.Slot";
msignal_Slot.prototype = {
	listener: null
	,once: null
	,priority: null
	,enabled: null
	,signal: null
	,remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		return this.listener = value;
	}
	,__class__: msignal_Slot
	,__properties__: {set_listener:"set_listener"}
};
var msignal_Slot0 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot0"] = msignal_Slot0;
msignal_Slot0.__name__ = "msignal.Slot0";
msignal_Slot0.__super__ = msignal_Slot;
msignal_Slot0.prototype = $extend(msignal_Slot.prototype,{
	execute: function() {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		this.listener();
	}
	,__class__: msignal_Slot0
});
var msignal_Slot1 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot1"] = msignal_Slot1;
msignal_Slot1.__name__ = "msignal.Slot1";
msignal_Slot1.__super__ = msignal_Slot;
msignal_Slot1.prototype = $extend(msignal_Slot.prototype,{
	param: null
	,execute: function(value1) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param != null) {
			value1 = this.param;
		}
		this.listener(value1);
	}
	,__class__: msignal_Slot1
});
var msignal_Slot2 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot2"] = msignal_Slot2;
msignal_Slot2.__name__ = "msignal.Slot2";
msignal_Slot2.__super__ = msignal_Slot;
msignal_Slot2.prototype = $extend(msignal_Slot.prototype,{
	param1: null
	,param2: null
	,execute: function(value1,value2) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param1 != null) {
			value1 = this.param1;
		}
		if(this.param2 != null) {
			value2 = this.param2;
		}
		this.listener(value1,value2);
	}
	,__class__: msignal_Slot2
});
var msignal_SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		this.nonEmpty = false;
	} else if(head != null) {
		this.head = head;
		this.tail = tail == null ? msignal_SlotList.NIL : tail;
		this.nonEmpty = true;
	}
};
$hxClasses["msignal.SlotList"] = msignal_SlotList;
msignal_SlotList.__name__ = "msignal.SlotList";
msignal_SlotList.prototype = {
	head: null
	,tail: null
	,nonEmpty: null
	,length: null
	,get_length: function() {
		if(!this.nonEmpty) {
			return 0;
		}
		if(this.tail == msignal_SlotList.NIL) {
			return 1;
		}
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal_SlotList(slot,this);
	}
	,append: function(slot) {
		if(slot == null) {
			return this;
		}
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		if(this.tail == msignal_SlotList.NIL) {
			return new msignal_SlotList(slot).prepend(this.head);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		var priority = slot.priority;
		if(priority >= this.head.priority) {
			return this.prepend(slot);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) {
			return this;
		}
		if(Reflect.compareMethods(this.head.listener,listener)) {
			return this.tail;
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,contains: function(listener) {
		if(!this.nonEmpty) {
			return false;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return true;
			}
			p = p.tail;
		}
		return false;
	}
	,find: function(listener) {
		if(!this.nonEmpty) {
			return null;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return p.head;
			}
			p = p.tail;
		}
		return null;
	}
	,__class__: msignal_SlotList
	,__properties__: {get_length:"get_length"}
};
var promhx_base_AsyncBase = function(d) {
	this._resolved = false;
	this._pending = false;
	this._errorPending = false;
	this._fulfilled = false;
	this._update = [];
	this._error = [];
	this._errored = false;
	if(d != null) {
		var next = this;
		var f = function(x) {
			return x;
		};
		d._update.push({ async : next, linkf : function(x1) {
			var tmp = f(x1);
			next.handleResolve(tmp);
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(d,next,f);
	}
};
$hxClasses["promhx.base.AsyncBase"] = promhx_base_AsyncBase;
promhx_base_AsyncBase.__name__ = "promhx.base.AsyncBase";
promhx_base_AsyncBase.link = function(current,next,f) {
	current._update.push({ async : next, linkf : function(x) {
		var tmp = f(x);
		next.handleResolve(tmp);
	}});
	promhx_base_AsyncBase.immediateLinkUpdate(current,next,f);
};
promhx_base_AsyncBase.immediateLinkUpdate = function(current,next,f) {
	if(current._errored && !current._errorPending && current._error.length <= 0) {
		next.handleError(current._errorVal);
	}
	if(current._resolved && !current._pending) {
		next.handleResolve(f(current._val));
	}
};
promhx_base_AsyncBase.linkAll = function(all,next) {
	var cthen = function(arr,current,v) {
		if(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {
			var _g = [];
			var a = $getIterator(all);
			while(a.hasNext()) {
				var a1 = a.next();
				_g.push(a1 == current ? v : a1._val);
			}
			next.handleResolve(_g);
		}
		return;
	};
	var a2 = $getIterator(all);
	while(a2.hasNext()) {
		var a3 = a2.next();
		var a4 = a3._update;
		var f = [cthen];
		var _g1 = [];
		var a21 = $getIterator(all);
		while(a21.hasNext()) {
			var a22 = a21.next();
			if(a22 != a3) {
				_g1.push(a22);
			}
		}
		var tmp = (function(current1,arr1,f1) {
			return function(v1) {
				f1[0](arr1[0],current1[0],v1);
				return;
			};
		})([a3],[_g1],f);
		a4.push({ async : next, linkf : tmp});
	}
	if(promhx_base_AsyncBase.allFulfilled(all)) {
		var _g2 = [];
		var a5 = $getIterator(all);
		while(a5.hasNext()) _g2.push(a5.next()._val);
		next.handleResolve(_g2);
	}
};
promhx_base_AsyncBase.pipeLink = function(current,ret,f) {
	var linked = false;
	var linkf = function(x) {
		if(!linked) {
			linked = true;
			var pipe_ret = f(x);
			pipe_ret._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
			promhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret,function(x1) {
				return x1;
			});
		}
	};
	current._update.push({ async : ret, linkf : linkf});
	if(current._resolved && !current._pending) {
		linkf(current._val);
	}
};
promhx_base_AsyncBase.allResolved = function(as) {
	var a = $getIterator(as);
	while(a.hasNext()) if(!a.next()._resolved) {
		return false;
	}
	return true;
};
promhx_base_AsyncBase.allFulfilled = function(as) {
	var a = $getIterator(as);
	while(a.hasNext()) if(!a.next()._fulfilled) {
		return false;
	}
	return true;
};
promhx_base_AsyncBase.prototype = {
	_val: null
	,_resolved: null
	,_fulfilled: null
	,_pending: null
	,_update: null
	,_error: null
	,_errored: null
	,_errorMap: null
	,_errorVal: null
	,_errorPending: null
	,catchError: function(f) {
		this._error.push(f);
		return this;
	}
	,errorThen: function(f) {
		this._errorMap = f;
		return this;
	}
	,isResolved: function() {
		return this._resolved;
	}
	,isErrored: function() {
		return this._errored;
	}
	,isErrorHandled: function() {
		return this._error.length > 0;
	}
	,isErrorPending: function() {
		return this._errorPending;
	}
	,isFulfilled: function() {
		return this._fulfilled;
	}
	,isPending: function() {
		return this._pending;
	}
	,handleResolve: function(val) {
		this._resolve(val);
	}
	,_resolve: function(val) {
		var _gthis = this;
		if(this._pending) {
			var f = $bind(this,this._resolve);
			var val1 = val;
			var tmp = function() {
				f(val1);
			};
			promhx_base_EventLoop.queue.add(tmp);
			promhx_base_EventLoop.continueOnNextLoop();
		} else {
			this._resolved = true;
			this._pending = true;
			promhx_base_EventLoop.queue.add(function() {
				_gthis._val = val;
				var _g = 0;
				var _g1 = _gthis._update;
				while(_g < _g1.length) _g1[_g++].linkf(val);
				_gthis._fulfilled = true;
				_gthis._pending = false;
			});
			promhx_base_EventLoop.continueOnNextLoop();
		}
	}
	,handleError: function(error) {
		this._handleError(error);
	}
	,_handleError: function(error) {
		var _gthis = this;
		var update_errors = function(e) {
			if(_gthis._error.length > 0) {
				var _g = 0;
				var _g1 = _gthis._error;
				while(_g < _g1.length) _g1[_g++](e);
			} else if(_gthis._update.length > 0) {
				var _g2 = 0;
				var _g11 = _gthis._update;
				while(_g2 < _g11.length) _g11[_g2++].async.handleError(e);
			} else {
				throw js__$Boot_HaxeError.wrap(e);
			}
			_gthis._errorPending = false;
		};
		if(!this._errorPending) {
			this._errorPending = true;
			this._errored = true;
			this._errorVal = error;
			promhx_base_EventLoop.queue.add(function() {
				if(_gthis._errorMap != null) {
					var tmp = _gthis._errorMap(error);
					_gthis._resolve(tmp);
				} else {
					update_errors(error);
				}
			});
			promhx_base_EventLoop.continueOnNextLoop();
		}
	}
	,then: function(f) {
		var ret = new promhx_base_AsyncBase();
		var next = ret;
		var f1 = f;
		this._update.push({ async : next, linkf : function(x) {
			var tmp = f1(x);
			next.handleResolve(tmp);
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,next,f1);
		return ret;
	}
	,unlink: function(to) {
		var _gthis = this;
		promhx_base_EventLoop.queue.add(function() {
			var _this = _gthis._update;
			var _g = [];
			var _g1 = 0;
			while(_g1 < _this.length) {
				var v = _this[_g1];
				++_g1;
				if(v.async != to) {
					_g.push(v);
				}
			}
			_gthis._update = _g;
		});
		promhx_base_EventLoop.continueOnNextLoop();
	}
	,isLinked: function(to) {
		var _g = 0;
		var _g1 = this._update;
		while(_g < _g1.length) if(_g1[_g++].async == to) {
			return true;
		}
		return false;
	}
	,__class__: promhx_base_AsyncBase
};
var promhx_Deferred = $hx_exports["promhx"]["Deferred"] = function() {
	promhx_base_AsyncBase.call(this);
};
$hxClasses["promhx.Deferred"] = promhx_Deferred;
promhx_Deferred.__name__ = "promhx.Deferred";
promhx_Deferred.__super__ = promhx_base_AsyncBase;
promhx_Deferred.prototype = $extend(promhx_base_AsyncBase.prototype,{
	resolve: function(val) {
		this.handleResolve(val);
	}
	,throwError: function(e) {
		this.handleError(e);
	}
	,promise: function() {
		return new promhx_Promise(this);
	}
	,stream: function() {
		return new promhx_Stream(this);
	}
	,publicStream: function() {
		return new promhx_PublicStream(this);
	}
	,__class__: promhx_Deferred
});
var promhx_Promise = $hx_exports["promhx"]["Promise"] = function(d) {
	promhx_base_AsyncBase.call(this,d);
	this._rejected = false;
};
$hxClasses["promhx.Promise"] = promhx_Promise;
promhx_Promise.__name__ = "promhx.Promise";
promhx_Promise.whenAll = function(itb) {
	var ret = new promhx_Promise();
	var all = itb;
	var next = ret;
	var cthen = function(arr,current,v) {
		if(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {
			var _g = [];
			var a = $getIterator(all);
			while(a.hasNext()) {
				var a1 = a.next();
				_g.push(a1 == current ? v : a1._val);
			}
			next.handleResolve(_g);
		}
		return;
	};
	var a2 = $getIterator(all);
	while(a2.hasNext()) {
		var a3 = a2.next();
		var a4 = a3._update;
		var f = [cthen];
		var _g1 = [];
		var a21 = $getIterator(all);
		while(a21.hasNext()) {
			var a22 = a21.next();
			if(a22 != a3) {
				_g1.push(a22);
			}
		}
		var tmp = (function(current1,arr1,f1) {
			return function(v1) {
				f1[0](arr1[0],current1[0],v1);
				return;
			};
		})([a3],[_g1],f);
		a4.push({ async : next, linkf : tmp});
	}
	if(promhx_base_AsyncBase.allFulfilled(all)) {
		var _g2 = [];
		var a5 = $getIterator(all);
		while(a5.hasNext()) _g2.push(a5.next()._val);
		next.handleResolve(_g2);
	}
	return ret;
};
promhx_Promise.promise = function(_val) {
	var ret = new promhx_Promise();
	ret.handleResolve(_val);
	return ret;
};
promhx_Promise.__super__ = promhx_base_AsyncBase;
promhx_Promise.prototype = $extend(promhx_base_AsyncBase.prototype,{
	_rejected: null
	,isRejected: function() {
		return this._rejected;
	}
	,reject: function(e) {
		this._rejected = true;
		this.handleError(e);
	}
	,handleResolve: function(val) {
		var _gthis = this;
		if(this._resolved) {
			throw new js__$Boot_HaxeError(promhx_error_PromiseError.AlreadyResolved("Promise has already been resolved"));
		}
		if(this._pending) {
			throw new js__$Boot_HaxeError("unexpected _pending == true");
		}
		this._resolve(val);
		promhx_base_EventLoop.queue.add(function() {
			_gthis._update.length = 0;
			return;
		});
		promhx_base_EventLoop.continueOnNextLoop();
	}
	,then: function(f) {
		var ret = new promhx_Promise();
		var next = ret;
		var f1 = f;
		this._update.push({ async : next, linkf : function(x) {
			var tmp = f1(x);
			next.handleResolve(tmp);
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,next,f1);
		return ret;
	}
	,unlink: function(to) {
		var _gthis = this;
		promhx_base_EventLoop.queue.add(function() {
			if(!_gthis._fulfilled) {
				_gthis.handleError(promhx_error_PromiseError.DownstreamNotFullfilled("Downstream Promise is not fullfilled"));
			} else {
				var _this = _gthis._update;
				var _g = [];
				var _g1 = 0;
				while(_g1 < _this.length) {
					var v = _this[_g1];
					++_g1;
					if(v.async != to) {
						_g.push(v);
					}
				}
				_gthis._update = _g;
			}
		});
		promhx_base_EventLoop.continueOnNextLoop();
	}
	,handleError: function(error) {
		this._rejected = true;
		this._handleError(error);
	}
	,pipe: function(f) {
		var ret = new promhx_Promise();
		var ret1 = ret;
		var f1 = f;
		var linked = false;
		var linkf = function(x) {
			if(!linked) {
				linked = true;
				var pipe_ret = f1(x);
				pipe_ret._update.push({ async : ret1, linkf : $bind(ret1,ret1.handleResolve)});
				promhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret1,function(x1) {
					return x1;
				});
			}
		};
		this._update.push({ async : ret1, linkf : linkf});
		if(this._resolved && !this._pending) {
			linkf(this._val);
		}
		return ret;
	}
	,errorPipe: function(f) {
		var ret = new promhx_Promise();
		this.catchError(function(e) {
			f(e).then($bind(ret,ret._resolve));
		});
		this.then($bind(ret,ret._resolve));
		return ret;
	}
	,__class__: promhx_Promise
});
var promhx_Stream = $hx_exports["promhx"]["Stream"] = function(d) {
	promhx_base_AsyncBase.call(this,d);
	this._end_deferred = new promhx_Deferred();
	this._end_promise = this._end_deferred.promise();
};
$hxClasses["promhx.Stream"] = promhx_Stream;
promhx_Stream.__name__ = "promhx.Stream";
promhx_Stream.foreach = function(itb) {
	var s = new promhx_Stream();
	var i = $getIterator(itb);
	while(i.hasNext()) s.handleResolve(i.next());
	s.end();
	return s;
};
promhx_Stream.wheneverAll = function(itb) {
	var ret = new promhx_Stream();
	var all = itb;
	var next = ret;
	var cthen = function(arr,current,v) {
		if(arr.length == 0 || promhx_base_AsyncBase.allFulfilled(arr)) {
			var _g = [];
			var a = $getIterator(all);
			while(a.hasNext()) {
				var a1 = a.next();
				_g.push(a1 == current ? v : a1._val);
			}
			next.handleResolve(_g);
		}
		return;
	};
	var a2 = $getIterator(all);
	while(a2.hasNext()) {
		var a3 = a2.next();
		var a4 = a3._update;
		var f = [cthen];
		var _g1 = [];
		var a21 = $getIterator(all);
		while(a21.hasNext()) {
			var a22 = a21.next();
			if(a22 != a3) {
				_g1.push(a22);
			}
		}
		var tmp = (function(current1,arr1,f1) {
			return function(v1) {
				f1[0](arr1[0],current1[0],v1);
				return;
			};
		})([a3],[_g1],f);
		a4.push({ async : next, linkf : tmp});
	}
	if(promhx_base_AsyncBase.allFulfilled(all)) {
		var _g2 = [];
		var a5 = $getIterator(all);
		while(a5.hasNext()) _g2.push(a5.next()._val);
		next.handleResolve(_g2);
	}
	return ret;
};
promhx_Stream.concatAll = function(itb) {
	var ret = new promhx_Stream();
	var i = $getIterator(itb);
	while(i.hasNext()) ret.concat(i.next());
	return ret;
};
promhx_Stream.mergeAll = function(itb) {
	var ret = new promhx_Stream();
	var i = $getIterator(itb);
	while(i.hasNext()) ret.merge(i.next());
	return ret;
};
promhx_Stream.stream = function(_val) {
	var ret = new promhx_Stream();
	ret.handleResolve(_val);
	return ret;
};
promhx_Stream.__super__ = promhx_base_AsyncBase;
promhx_Stream.prototype = $extend(promhx_base_AsyncBase.prototype,{
	deferred: null
	,_pause: null
	,_end: null
	,_end_promise: null
	,_end_deferred: null
	,then: function(f) {
		var ret = new promhx_Stream();
		var next = ret;
		var f1 = f;
		this._update.push({ async : next, linkf : function(x) {
			var tmp = f1(x);
			next.handleResolve(tmp);
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,next,f1);
		this._end_promise.then(function(x1) {
			ret.end();
		});
		return ret;
	}
	,detachStream: function(str) {
		var filtered = [];
		var removed = false;
		var _g = 0;
		var _g1 = this._update;
		while(_g < _g1.length) {
			var u = _g1[_g];
			++_g;
			if(u.async == str) {
				removed = true;
			} else {
				filtered.push(u);
			}
		}
		this._update = filtered;
		return removed;
	}
	,first: function() {
		var s = new promhx_Promise();
		this.then(function(x) {
			if(!s._resolved) {
				s.handleResolve(x);
			}
		});
		return s;
	}
	,handleResolve: function(val) {
		if(!this._end && !this._pause) {
			this._resolve(val);
		}
	}
	,pause: function(set) {
		if(set == null) {
			set = !this._pause;
		}
		this._pause = set;
	}
	,pipe: function(f) {
		var ret = new promhx_Stream();
		var ret1 = ret;
		var f1 = f;
		var linked = false;
		var linkf = function(x) {
			if(!linked) {
				linked = true;
				var pipe_ret = f1(x);
				pipe_ret._update.push({ async : ret1, linkf : $bind(ret1,ret1.handleResolve)});
				promhx_base_AsyncBase.immediateLinkUpdate(pipe_ret,ret1,function(x1) {
					return x1;
				});
			}
		};
		this._update.push({ async : ret1, linkf : linkf});
		if(this._resolved && !this._pending) {
			linkf(this._val);
		}
		this._end_promise.then(function(x2) {
			ret.end();
		});
		return ret;
	}
	,errorPipe: function(f) {
		var ret = new promhx_Stream();
		this.catchError(function(e) {
			var piped = f(e);
			piped.then($bind(ret,ret._resolve));
			piped._end_promise.then(($_=ret._end_promise,$bind($_,$_._resolve)));
		});
		this.then($bind(ret,ret._resolve));
		this._end_promise.then(function(x) {
			ret.end();
		});
		return ret;
	}
	,handleEnd: function() {
		if(this._pending) {
			promhx_base_EventLoop.queue.add($bind(this,this.handleEnd));
			promhx_base_EventLoop.continueOnNextLoop();
		} else if(this._end_promise._resolved) {
			return;
		} else {
			this._end = true;
			this._end_promise.handleResolve(this._resolved ? haxe_ds_Option.Some(this._val) : haxe_ds_Option.None);
			this._update = [];
			this._error = [];
		}
	}
	,end: function() {
		promhx_base_EventLoop.queue.add($bind(this,this.handleEnd));
		promhx_base_EventLoop.continueOnNextLoop();
		return this;
	}
	,endThen: function(f) {
		return this._end_promise.then(f);
	}
	,filter: function(f) {
		var ret = new promhx_Stream();
		this._update.push({ async : ret, linkf : function(x) {
			if(f(x)) {
				ret.handleResolve(x);
			}
		}});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x1) {
			return x1;
		});
		return ret;
	}
	,concat: function(s) {
		var ret = new promhx_Stream();
		this._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {
			return x;
		});
		this._end_promise.then(function(_) {
			s.pipe(function(x1) {
				ret.handleResolve(x1);
				return ret;
			});
			s._end_promise.then(function(_1) {
				ret.end();
			});
		});
		return ret;
	}
	,merge: function(s) {
		var ret = new promhx_Stream();
		this._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		s._update.push({ async : ret, linkf : $bind(ret,ret.handleResolve)});
		promhx_base_AsyncBase.immediateLinkUpdate(this,ret,function(x) {
			return x;
		});
		promhx_base_AsyncBase.immediateLinkUpdate(s,ret,function(x1) {
			return x1;
		});
		return ret;
	}
	,__class__: promhx_Stream
});
var promhx_PublicStream = $hx_exports["promhx"]["PublicStream"] = function(def) {
	promhx_Stream.call(this,def);
};
$hxClasses["promhx.PublicStream"] = promhx_PublicStream;
promhx_PublicStream.__name__ = "promhx.PublicStream";
promhx_PublicStream.publicstream = function(val) {
	var ps = new promhx_PublicStream();
	ps.handleResolve(val);
	return ps;
};
promhx_PublicStream.__super__ = promhx_Stream;
promhx_PublicStream.prototype = $extend(promhx_Stream.prototype,{
	resolve: function(val) {
		this.handleResolve(val);
	}
	,throwError: function(e) {
		this.handleError(e);
	}
	,update: function(val) {
		this.handleResolve(val);
	}
	,__class__: promhx_PublicStream
});
var promhx_base_EventLoop = function() { };
$hxClasses["promhx.base.EventLoop"] = promhx_base_EventLoop;
promhx_base_EventLoop.__name__ = "promhx.base.EventLoop";
promhx_base_EventLoop.enqueue = function(eqf) {
	promhx_base_EventLoop.queue.add(eqf);
	promhx_base_EventLoop.continueOnNextLoop();
};
promhx_base_EventLoop.set_nextLoop = function(f) {
	if(promhx_base_EventLoop.nextLoop != null) {
		throw new js__$Boot_HaxeError("nextLoop has already been set");
	} else {
		promhx_base_EventLoop.nextLoop = f;
	}
	return promhx_base_EventLoop.nextLoop;
};
promhx_base_EventLoop.queueEmpty = function() {
	return promhx_base_EventLoop.queue.isEmpty();
};
promhx_base_EventLoop.finish = function(max_iterations) {
	if(max_iterations == null) {
		max_iterations = 1000;
	}
	var fn = null;
	while(true) {
		var tmp;
		if(max_iterations-- > 0) {
			fn = promhx_base_EventLoop.queue.pop();
			tmp = fn != null;
		} else {
			tmp = false;
		}
		if(!tmp) {
			break;
		}
		fn();
	}
	return promhx_base_EventLoop.queue.isEmpty();
};
promhx_base_EventLoop.clear = function() {
	promhx_base_EventLoop.queue = new haxe_ds_List();
};
promhx_base_EventLoop.f = function() {
	var fn = promhx_base_EventLoop.queue.pop();
	if(fn != null) {
		fn();
	}
	if(!promhx_base_EventLoop.queue.isEmpty()) {
		promhx_base_EventLoop.continueOnNextLoop();
	}
};
promhx_base_EventLoop.continueOnNextLoop = function() {
	if(promhx_base_EventLoop.nextLoop != null) {
		promhx_base_EventLoop.nextLoop(promhx_base_EventLoop.f);
	} else {
		setImmediate(promhx_base_EventLoop.f);
	}
};
var promhx_error_PromiseError = $hxEnums["promhx.error.PromiseError"] = { __ename__ : true, __constructs__ : ["AlreadyResolved","DownstreamNotFullfilled"]
	,AlreadyResolved: ($_=function(message) { return {_hx_index:0,message:message,__enum__:"promhx.error.PromiseError",toString:$estr}; },$_.__params__ = ["message"],$_)
	,DownstreamNotFullfilled: ($_=function(message) { return {_hx_index:1,message:message,__enum__:"promhx.error.PromiseError",toString:$estr}; },$_.__params__ = ["message"],$_)
};
promhx_error_PromiseError.__empty_constructs__ = [];
var spine_Updatable = function() { };
$hxClasses["spine.Updatable"] = spine_Updatable;
spine_Updatable.__name__ = "spine.Updatable";
spine_Updatable.__isInterface__ = true;
spine_Updatable.prototype = {
	update: null
	,isActive: null
	,__class__: spine_Updatable
};
var spine_Bone = function(data,skeleton,parent) {
	this._children = [];
	if(data == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("data cannot be null."));
	}
	if(skeleton == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("skeleton cannot be null."));
	}
	this._data = data;
	this._skeleton = skeleton;
	this._parent = parent;
	this.setToSetupPose();
};
$hxClasses["spine.Bone"] = spine_Bone;
spine_Bone.__name__ = "spine.Bone";
spine_Bone.__interfaces__ = [spine_Updatable];
spine_Bone.prototype = {
	x: null
	,y: null
	,rotation: null
	,scaleX: null
	,scaleY: null
	,shearX: null
	,shearY: null
	,ax: null
	,ay: null
	,arotation: null
	,ascaleX: null
	,ascaleY: null
	,ashearX: null
	,ashearY: null
	,appliedValid: null
	,a: null
	,b: null
	,c: null
	,d: null
	,worldX: null
	,worldY: null
	,active: null
	,_data: null
	,_skeleton: null
	,_parent: null
	,_children: null
	,_sorted: null
	,isActive: function() {
		return this.active;
	}
	,update: function() {
		this.updateWorldTransformWith(this.x,this.y,this.rotation,this.scaleX,this.scaleY,this.shearX,this.shearY);
	}
	,updateWorldTransform: function() {
		this.updateWorldTransformWith(this.x,this.y,this.rotation,this.scaleX,this.scaleY,this.shearX,this.shearY);
	}
	,updateWorldTransformWith: function(x,y,rotation,scaleX,scaleY,shearX,shearY) {
		this.ax = x;
		this.ay = y;
		this.arotation = rotation;
		this.ascaleX = scaleX;
		this.ascaleY = scaleY;
		this.ashearX = shearX;
		this.ashearY = shearY;
		this.appliedValid = true;
		var rotationY = 0;
		var la = 0;
		var lb = 0;
		var lc = 0;
		var ld = 0;
		var sin = 0;
		var cos = 0;
		var s = 0;
		var sx = this._skeleton.scaleX;
		var sy = this._skeleton.scaleY * (spine_Bone.yDown ? -1 : 1);
		var parent = this._parent;
		if(parent == null) {
			rotationY = rotation + 90 + shearY;
			var skeleton = this._skeleton;
			this.a = spine_MathUtils.cosDeg(rotation + shearX) * scaleX * sx;
			this.b = spine_MathUtils.cosDeg(rotationY) * scaleY * sx;
			this.c = spine_MathUtils.sinDeg(rotation + shearX) * scaleX * sy;
			this.d = spine_MathUtils.sinDeg(rotationY) * scaleY * sy;
			this.worldX = x * sx + skeleton.x;
			this.worldY = y * sy + skeleton.y;
			return;
		}
		var pa = parent.a;
		var pb = parent.b;
		var pc = parent.c;
		var pd = parent.d;
		this.worldX = pa * x + pb * y + parent.worldX;
		this.worldY = pc * x + pd * y + parent.worldY;
		switch(this.get_data().transformMode) {
		case "noRotationOrReflection":
			s = pa * pa + pc * pc;
			var prx = 0;
			if(s > 0.0001) {
				s = Math.abs(pa * pd - pb * pc) / s;
				pa /= this.get_skeleton().scaleX;
				pc /= this.get_skeleton().scaleY;
				pb = pc * s;
				pd = pa * s;
				prx = Math.atan2(pc,pa) * spine_MathUtils.radDeg;
			} else {
				pa = 0;
				pc = 0;
				prx = 90 - Math.atan2(pd,pb) * spine_MathUtils.radDeg;
			}
			var rx = rotation + shearX - prx;
			var ry = rotation + shearY - prx + 90;
			la = spine_MathUtils.cosDeg(rx) * scaleX;
			lb = spine_MathUtils.cosDeg(ry) * scaleY;
			lc = spine_MathUtils.sinDeg(rx) * scaleX;
			ld = spine_MathUtils.sinDeg(ry) * scaleY;
			this.a = pa * la - pb * lc;
			this.b = pa * lb - pb * ld;
			this.c = pc * la + pd * lc;
			this.d = pc * lb + pd * ld;
			break;
		case "noScale":case "noScaleOrReflection":
			cos = spine_MathUtils.cosDeg(rotation);
			sin = spine_MathUtils.sinDeg(rotation);
			var za = (pa * cos + pb * sin) / sx;
			var zc = (pc * cos + pd * sin) / sy;
			s = Math.sqrt(za * za + zc * zc);
			if(s > 0.00001) {
				s = 1 / s;
			}
			za *= s;
			zc *= s;
			s = Math.sqrt(za * za + zc * zc);
			if(this.get_data().transformMode == "noScale" && pa * pd - pb * pc < 0 != (sx < 0.0 != sy < 0.0)) {
				s = -s;
			}
			var r = Math.PI / 2 + Math.atan2(zc,za);
			var zb = Math.cos(r) * s;
			var zd = Math.sin(r) * s;
			la = spine_MathUtils.cosDeg(shearX) * scaleX;
			lb = spine_MathUtils.cosDeg(90 + shearY) * scaleY;
			lc = spine_MathUtils.sinDeg(shearX) * scaleX;
			ld = spine_MathUtils.sinDeg(90 + shearY) * scaleY;
			this.a = za * la + zb * lc;
			this.b = za * lb + zb * ld;
			this.c = zc * la + zd * lc;
			this.d = zc * lb + zd * ld;
			break;
		case "normal":
			rotationY = rotation + 90 + shearY;
			la = spine_MathUtils.cosDeg(rotation + shearX) * scaleX;
			lb = spine_MathUtils.cosDeg(rotationY) * scaleY;
			lc = spine_MathUtils.sinDeg(rotation + shearX) * scaleX;
			ld = spine_MathUtils.sinDeg(rotationY) * scaleY;
			this.a = pa * la + pb * lc;
			this.b = pa * lb + pb * ld;
			this.c = pc * la + pd * lc;
			this.d = pc * lb + pd * ld;
			return;
		case "onlyTranslation":
			rotationY = rotation + 90 + shearY;
			this.a = spine_MathUtils.cosDeg(rotation + shearX) * scaleX;
			this.b = spine_MathUtils.cosDeg(rotationY) * scaleY;
			this.c = spine_MathUtils.sinDeg(rotation + shearX) * scaleX;
			this.d = spine_MathUtils.sinDeg(rotationY) * scaleY;
			break;
		}
		this.a *= sx;
		this.b *= sx;
		this.c *= sy;
		this.d *= sy;
	}
	,setToSetupPose: function() {
		this.x = this.get_data().x;
		this.y = this.get_data().y;
		this.rotation = this.get_data().rotation;
		this.scaleX = this.get_data().scaleX;
		this.scaleY = this.get_data().scaleY;
		this.shearX = this.get_data().shearX;
		this.shearY = this.get_data().shearY;
	}
	,get_data: function() {
		return this._data;
	}
	,get_skeleton: function() {
		return this._skeleton;
	}
	,get_parent: function() {
		return this._parent;
	}
	,get_children: function() {
		return this._children;
	}
	,get_worldRotationX: function() {
		return Math.atan2(this.c,this.a) * spine_MathUtils.radDeg;
	}
	,get_worldRotationY: function() {
		return Math.atan2(this.d,this.b) * spine_MathUtils.radDeg;
	}
	,get_worldScaleX: function() {
		return Math.sqrt(this.a * this.a + this.c * this.c);
	}
	,get_worldScaleY: function() {
		return Math.sqrt(this.b * this.b + this.d * this.d);
	}
	,updateAppliedTransform: function() {
		this.appliedValid = true;
		var parent = this.get_parent();
		if(parent == null) {
			this.ax = this.worldX;
			this.ay = this.worldY;
			this.arotation = Math.atan2(this.c,this.a) * spine_MathUtils.radDeg;
			this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c);
			this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d);
			this.ashearX = 0;
			this.ashearY = Math.atan2(this.a * this.b + this.c * this.d,this.a * this.d - this.b * this.c) * spine_MathUtils.radDeg;
			return;
		}
		var pa = parent.a;
		var pb = parent.b;
		var pc = parent.c;
		var pd = parent.d;
		var pid = 1 / (pa * pd - pb * pc);
		var dx = this.worldX - parent.worldX;
		var dy = this.worldY - parent.worldY;
		this.ax = dx * pd * pid - dy * pb * pid;
		this.ay = dy * pa * pid - dx * pc * pid;
		var ia = pid * pd;
		var id = pid * pa;
		var ib = pid * pb;
		var ic = pid * pc;
		var ra = ia * this.a - ib * this.c;
		var rb = ia * this.b - ib * this.d;
		var rc = id * this.c - ic * this.a;
		var rd = id * this.d - ic * this.b;
		this.ashearX = 0;
		this.ascaleX = Math.sqrt(ra * ra + rc * rc);
		if(this.scaleX > 0.0001) {
			var det = ra * rd - rb * rc;
			this.ascaleY = det / this.ascaleX;
			this.ashearY = Math.atan2(ra * rb + rc * rd,det) * spine_MathUtils.radDeg;
			this.arotation = Math.atan2(rc,ra) * spine_MathUtils.radDeg;
		} else {
			this.ascaleX = 0;
			this.ascaleY = Math.sqrt(rb * rb + rd * rd);
			this.ashearY = 0;
			this.arotation = 90 - Math.atan2(rd,rb) * spine_MathUtils.radDeg;
		}
	}
	,worldToLocal: function(world) {
		var a = this.a;
		var b = this.b;
		var c = this.c;
		var d = this.d;
		var invDet = 1 / (a * d - b * c);
		var x = world[0] - this.worldX;
		var y = world[1] - this.worldY;
		world[0] = x * d * invDet - y * b * invDet;
		world[1] = y * a * invDet - x * c * invDet;
	}
	,localToWorld: function(local) {
		var localX = local[0];
		var localY = local[1];
		local[0] = localX * this.a + localY * this.b + this.worldX;
		local[1] = localX * this.c + localY * this.d + this.worldY;
	}
	,worldToLocalRotation: function(worldRotation) {
		var sin = spine_MathUtils.sinDeg(worldRotation);
		var cos = spine_MathUtils.cosDeg(worldRotation);
		return Math.atan2(this.a * sin - this.c * cos,this.d * cos - this.b * sin) * spine_MathUtils.radDeg + this.rotation - this.shearX;
	}
	,localToWorldRotation: function(localRotation) {
		localRotation -= this.rotation - this.shearX;
		var sin = spine_MathUtils.sinDeg(localRotation);
		var cos = spine_MathUtils.cosDeg(localRotation);
		return Math.atan2(cos * this.c + sin * this.d,cos * this.a + sin * this.b) * spine_MathUtils.radDeg;
	}
	,rotateWorld: function(degrees) {
		var a = this.a;
		var b = this.b;
		var c = this.c;
		var d = this.d;
		var cos = spine_MathUtils.cosDeg(degrees);
		var sin = spine_MathUtils.sinDeg(degrees);
		this.a = cos * a - sin * c;
		this.b = cos * b - sin * d;
		this.c = sin * a + cos * c;
		this.d = sin * b + cos * d;
		this.appliedValid = false;
	}
	,toString: function() {
		return this.get_data()._name;
	}
	,__class__: spine_Bone
	,__properties__: {get_worldScaleY:"get_worldScaleY",get_worldScaleX:"get_worldScaleX",get_worldRotationY:"get_worldRotationY",get_worldRotationX:"get_worldRotationX",get_children:"get_children",get_parent:"get_parent",get_skeleton:"get_skeleton",get_data:"get_data"}
};
var spine_BoneData = function(index,name,parent) {
	this.color = new spine_Color(0,0,0,0);
	this.transformMode = "normal";
	this.scaleY = 1;
	this.scaleX = 1;
	if(index < 0) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("index must be >= 0"));
	}
	if(name == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("name cannot be null."));
	}
	this._index = index;
	this._name = name;
	this._parent = parent;
};
$hxClasses["spine.BoneData"] = spine_BoneData;
spine_BoneData.__name__ = "spine.BoneData";
spine_BoneData.prototype = {
	_index: null
	,_name: null
	,_parent: null
	,length: null
	,x: null
	,y: null
	,rotation: null
	,scaleX: null
	,scaleY: null
	,shearX: null
	,shearY: null
	,transformMode: null
	,skinRequired: null
	,color: null
	,get_index: function() {
		return this._index;
	}
	,get_name: function() {
		return this._name;
	}
	,get_parent: function() {
		return this._parent;
	}
	,toString: function() {
		return this._name;
	}
	,__class__: spine_BoneData
	,__properties__: {get_parent:"get_parent",get_name:"get_name",get_index:"get_index"}
};
var spine_Color = function(r,g,b,a) {
	if(a == null) {
		a = 0;
	}
	this.a = 0;
	this.b = 0;
	this.g = 0;
	this.r = 0;
	this.r = r;
	this.g = g;
	this.b = b;
	this.a = a;
};
$hxClasses["spine.Color"] = spine_Color;
spine_Color.__name__ = "spine.Color";
spine_Color.prototype = {
	r: null
	,g: null
	,b: null
	,a: null
	,setFrom: function(r,g,b,a) {
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
		this.clamp();
		return this;
	}
	,setFromColor: function(c) {
		this.r = c.r;
		this.g = c.g;
		this.b = c.b;
		this.a = c.a;
		return this;
	}
	,setFromString: function(hex) {
		hex = hex.charAt(0) == "#" ? HxOverrides.substr(hex,1,null) : hex;
		this.r = Std.parseInt("0x" + HxOverrides.substr(hex,0,2)) / 255.0;
		this.g = Std.parseInt("0x" + HxOverrides.substr(hex,2,2)) / 255.0;
		this.b = Std.parseInt("0x" + HxOverrides.substr(hex,4,2)) / 255.0;
		this.a = (hex.length != 8 ? 255 : Std.parseInt("0x" + HxOverrides.substr(hex,6,2))) / 255.0;
		return this;
	}
	,add: function(r,g,b,a) {
		this.r += r;
		this.g += g;
		this.b += b;
		this.a += a;
		this.clamp();
		return this;
	}
	,clamp: function() {
		if(this.r < 0) {
			this.r = 0;
		} else if(this.r > 1) {
			this.r = 1;
		}
		if(this.g < 0) {
			this.g = 0;
		} else if(this.g > 1) {
			this.g = 1;
		}
		if(this.b < 0) {
			this.b = 0;
		} else if(this.b > 1) {
			this.b = 1;
		}
		if(this.a < 0) {
			this.a = 0;
		} else if(this.a > 1) {
			this.a = 1;
		}
		return this;
	}
	,setFromRgba8888: function(value) {
		this.r = ((value & -16777216) >>> 24) / 255;
		this.g = ((value & 16711680) >>> 16) / 255;
		this.b = ((value & 65280) >>> 8) / 255;
		this.a = (value & 255) / 255;
	}
	,setFromRgb888: function(value) {
		this.r = ((value & 16711680) >>> 16) / 255;
		this.g = ((value & 65280) >>> 8) / 255;
		this.b = (value & 255) / 255;
	}
	,__class__: spine_Color
};
var spine_ConstraintData = function(name,order,skinRequired) {
	this.name = name;
	this.order = order;
	this.skinRequired = skinRequired;
};
$hxClasses["spine.ConstraintData"] = spine_ConstraintData;
spine_ConstraintData.__name__ = "spine.ConstraintData";
spine_ConstraintData.prototype = {
	name: null
	,order: null
	,skinRequired: null
	,toString: function() {
		return this.name;
	}
	,__class__: spine_ConstraintData
};
var spine_Event = function(time,data) {
	this.balance = 0.0;
	this.volume = 1.0;
	if(data == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("data cannot be null."));
	}
	this.time = time;
	this.data = data;
};
$hxClasses["spine.Event"] = spine_Event;
spine_Event.__name__ = "spine.Event";
spine_Event.prototype = {
	data: null
	,time: null
	,intValue: null
	,floatValue: null
	,stringValue: null
	,volume: null
	,balance: null
	,toString: function() {
		return this.data.name;
	}
	,__class__: spine_Event
};
var spine_EventData = function(name) {
	this.balance = 0;
	this.volume = 1;
	if(name == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("name cannot be null."));
	}
	this.name = name;
};
$hxClasses["spine.EventData"] = spine_EventData;
spine_EventData.__name__ = "spine.EventData";
spine_EventData.prototype = {
	name: null
	,intValue: null
	,floatValue: null
	,stringValue: null
	,audioPath: null
	,volume: null
	,balance: null
	,toString: function() {
		return this.name;
	}
	,__class__: spine_EventData
};
var spine_IkConstraint = function(data,skeleton) {
	this.softness = 0;
	if(data == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("data cannot be null."));
	}
	if(skeleton == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("skeleton cannot be null."));
	}
	this._data = data;
	this.mix = data.mix;
	this.softness = data.softness;
	this.bendDirection = data.bendDirection;
	this.compress = data.compress;
	this.stretch = data.stretch;
	this.bones = [];
	var _g = 0;
	var _g1 = data.bones;
	while(_g < _g1.length) this.bones[this.bones.length] = skeleton.findBone(_g1[_g++].get_name());
	this.target = skeleton.findBone(data.target._name);
};
$hxClasses["spine.IkConstraint"] = spine_IkConstraint;
spine_IkConstraint.__name__ = "spine.IkConstraint";
spine_IkConstraint.__interfaces__ = [spine_Updatable];
spine_IkConstraint.apply1 = function(bone,targetX,targetY,compress,stretch,uniform,alpha) {
	if(!bone.appliedValid) {
		bone.updateAppliedTransform();
	}
	var p = bone.get_parent();
	var pa = p.a;
	var pb = p.b;
	var pc = p.c;
	var pd = p.d;
	var rotationIK = -bone.ashearX - bone.arotation;
	var tx = 0;
	var ty = 0;
	if(bone.get_data().transformMode == "onlyTranslation") {
		tx = targetX - bone.worldX;
		ty = targetY - bone.worldY;
	} else {
		if(bone.get_data().transformMode == "noRotationOrReflection") {
			var s = Math.abs(pa * pd - pb * pc) / (pa * pa + pc * pc);
			var sa = pa / bone.get_skeleton().scaleX;
			var sc = pc / bone.get_skeleton().scaleY;
			pb = -sc * s * bone.get_skeleton().scaleX;
			pd = sa * s * bone.get_skeleton().scaleY;
			rotationIK += Math.atan2(sc,sa) * spine_MathUtils.radDeg;
		}
		var x = targetX - p.worldX;
		var y = targetY - p.worldY;
		var d = pa * pd - pb * pc;
		tx = (x * pd - y * pb) / d - bone.ax;
		ty = (y * pa - x * pc) / d - bone.ay;
	}
	rotationIK += Math.atan2(ty,tx) * spine_MathUtils.radDeg;
	if(bone.ascaleX < 0) {
		rotationIK += 180;
	}
	if(rotationIK > 180) {
		rotationIK -= 360;
	} else if(rotationIK < -180) {
		rotationIK += 360;
	}
	var sx = bone.ascaleX;
	var sy = bone.ascaleY;
	if(compress || stretch) {
		switch(bone.get_data().transformMode) {
		case "noScale":case "noScaleOrReflection":
			tx = targetX - bone.worldX;
			ty = targetY - bone.worldY;
			break;
		default:
		}
		var b = bone.get_data().length * sx;
		var dd = Math.sqrt(tx * tx + ty * ty);
		if(compress && dd < b || stretch && dd > b && b > 0.0001) {
			var s1 = (dd / b - 1) * alpha + 1;
			sx *= s1;
			if(uniform) {
				sy *= s1;
			}
		}
	}
	bone.updateWorldTransformWith(bone.ax,bone.ay,bone.arotation + rotationIK * alpha,sx,sy,bone.ashearX,bone.ashearY);
};
spine_IkConstraint.apply2 = function(parent,child,targetX,targetY,bendDir,stretch,softness,alpha) {
	if(alpha == 0) {
		child.updateWorldTransform();
		return;
	}
	if(!parent.appliedValid) {
		parent.updateAppliedTransform();
	}
	if(!child.appliedValid) {
		child.updateAppliedTransform();
	}
	var px = parent.ax;
	var py = parent.ay;
	var psx = parent.ascaleX;
	var sx = psx;
	var psy = parent.ascaleY;
	var csx = child.ascaleX;
	var os1;
	var os2;
	var s2;
	if(psx < 0) {
		psx = -psx;
		os1 = 180;
		s2 = -1;
	} else {
		os1 = 0;
		s2 = 1;
	}
	if(psy < 0) {
		psy = -psy;
		s2 = -s2;
	}
	if(csx < 0) {
		csx = -csx;
		os2 = 180;
	} else {
		os2 = 0;
	}
	var cx = child.ax;
	var cy;
	var cwx;
	var cwy;
	var a = parent.a;
	var b = parent.b;
	var c = parent.c;
	var d = parent.d;
	var u = Math.abs(psx - psy) <= 0.0001;
	if(!u) {
		cy = 0;
		cwx = a * cx + parent.worldX;
		cwy = c * cx + parent.worldY;
	} else {
		cy = child.ay;
		cwx = a * cx + b * cy + parent.worldX;
		cwy = c * cx + d * cy + parent.worldY;
	}
	var pp = parent.get_parent();
	a = pp.a;
	b = pp.b;
	c = pp.c;
	d = pp.d;
	var id = 1 / (a * d - b * c);
	var x = cwx - pp.worldX;
	var y = cwy - pp.worldY;
	var dx = (x * d - y * b) * id - px;
	var dy = (y * a - x * c) * id - py;
	var l1 = Math.sqrt(dx * dx + dy * dy);
	var l2 = child.get_data().length * csx;
	var a1 = 0.0;
	var a2 = 0.0;
	if(l1 < 0.0001) {
		spine_IkConstraint.apply1(parent,targetX,targetY,false,stretch,false,alpha);
		child.updateWorldTransformWith(cx,cy,0,child.ascaleX,child.ascaleY,child.ashearX,child.ashearY);
		return;
	}
	x = targetX - pp.worldX;
	y = targetY - pp.worldY;
	var tx = (x * d - y * b) * id - px;
	var ty = (y * a - x * c) * id - py;
	var dd = tx * tx + ty * ty;
	if(softness != 0) {
		softness *= psx * (csx + 1) / 2;
		var td = Math.sqrt(dd);
		var sd = td - l1 - l2 * psx + softness;
		if(sd > 0) {
			var p = Math.min(1,sd / (softness * 2)) - 1;
			p = (sd - softness * (1 - p * p)) / td;
			tx -= p * tx;
			ty -= p * ty;
			dd = tx * tx + ty * ty;
		}
	}
	while(true) {
		var toOuter = false;
		if(u) {
			l2 *= psx;
			var cos = (dd - l1 * l1 - l2 * l2) / (2 * l1 * l2);
			if(cos < -1) {
				cos = -1;
			} else if(cos > 1) {
				cos = 1;
				if(stretch) {
					sx *= (Math.sqrt(dd) / (l1 + l2) - 1) * alpha + 1;
				}
			}
			a2 = Math.acos(cos) * bendDir;
			a = l1 + l2 * cos;
			b = l2 * Math.sin(a2);
			a1 = Math.atan2(ty * a - tx * b,tx * a + ty * b);
		} else {
			a = psx * l2;
			b = psy * l2;
			var aa = a * a;
			var bb = b * b;
			var ta = Math.atan2(ty,tx);
			c = bb * l1 * l1 + aa * dd - aa * bb;
			var c1 = -2 * bb * l1;
			var c2 = bb - aa;
			d = c1 * c1 - 4 * c2 * c;
			if(d >= 0) {
				var q = Math.sqrt(d);
				if(c1 < 0) {
					q = -q;
				}
				q = -(c1 + q) / 2;
				var r0 = q / c2;
				var r1 = c / q;
				var r = Math.abs(r0) < Math.abs(r1) ? r0 : r1;
				if(r * r <= dd) {
					y = Math.sqrt(dd - r * r) * bendDir;
					a1 = ta - Math.atan2(y,r);
					a2 = Math.atan2(y / psy,(r - l1) / psx);
					toOuter = true;
				}
			}
			if(!toOuter) {
				var minAngle = Math.PI;
				var minX = l1 - a;
				var minDist = minX * minX;
				var minY = 0;
				var maxAngle = 0;
				var maxX = l1 + a;
				var maxDist = maxX * maxX;
				var maxY = 0;
				c = -a * l1 / (aa - bb);
				if(c >= -1 && c <= 1) {
					c = Math.acos(c);
					x = a * Math.cos(c) + l1;
					y = b * Math.sin(c);
					d = x * x + y * y;
					if(d < minDist) {
						minAngle = c;
						minDist = d;
						minX = x;
						minY = y;
					}
					if(d > maxDist) {
						maxAngle = c;
						maxDist = d;
						maxX = x;
						maxY = y;
					}
				}
				if(dd <= (minDist + maxDist) / 2) {
					a1 = ta - Math.atan2(minY * bendDir,minX);
					a2 = minAngle * bendDir;
				} else {
					a1 = ta - Math.atan2(maxY * bendDir,maxX);
					a2 = maxAngle * bendDir;
				}
			}
		}
		if(!toOuter) {
			break;
		}
	}
	var os = Math.atan2(cy,cx) * s2;
	var rotation = parent.arotation;
	a1 = (a1 - os) * spine_MathUtils.radDeg + os1 - rotation;
	if(a1 > 180) {
		a1 -= 360;
	} else if(a1 < -180) {
		a1 += 360;
	}
	parent.updateWorldTransformWith(px,py,rotation + a1 * alpha,sx,parent.ascaleY,0,0);
	rotation = child.arotation;
	a2 = ((a2 + os) * spine_MathUtils.radDeg - child.ashearX) * s2 + os2 - rotation;
	if(a2 > 180) {
		a2 -= 360;
	} else if(a2 < -180) {
		a2 += 360;
	}
	child.updateWorldTransformWith(cx,cy,rotation + a2 * alpha,child.ascaleX,child.ascaleY,child.ashearX,child.ashearY);
};
spine_IkConstraint.prototype = {
	_data: null
	,bones: null
	,target: null
	,bendDirection: null
	,compress: null
	,stretch: null
	,mix: null
	,softness: null
	,active: null
	,isActive: function() {
		return this.active;
	}
	,apply: function() {
		this.update();
	}
	,update: function() {
		switch(this.bones.length) {
		case 1:
			spine_IkConstraint.apply1(this.bones[0],this.target.worldX,this.target.worldY,this.compress,this.stretch,this._data.uniform,this.mix);
			break;
		case 2:
			spine_IkConstraint.apply2(this.bones[0],this.bones[1],this.target.worldX,this.target.worldY,this.bendDirection,this.stretch,this.softness,this.mix);
			break;
		}
	}
	,get_data: function() {
		return this._data;
	}
	,toString: function() {
		return this._data.name;
	}
	,__class__: spine_IkConstraint
	,__properties__: {get_data:"get_data"}
};
var spine_IkConstraintData = function(name) {
	this.softness = 0;
	this.uniform = false;
	this.stretch = false;
	this.compress = false;
	this.bendDirection = 1;
	this.mix = 1;
	this.bones = [];
	spine_ConstraintData.call(this,name,0,false);
};
$hxClasses["spine.IkConstraintData"] = spine_IkConstraintData;
spine_IkConstraintData.__name__ = "spine.IkConstraintData";
spine_IkConstraintData.__super__ = spine_ConstraintData;
spine_IkConstraintData.prototype = $extend(spine_ConstraintData.prototype,{
	bones: null
	,target: null
	,mix: null
	,bendDirection: null
	,compress: null
	,stretch: null
	,uniform: null
	,softness: null
	,__class__: spine_IkConstraintData
});
var spine_MathUtils = function() {
};
$hxClasses["spine.MathUtils"] = spine_MathUtils;
spine_MathUtils.__name__ = "spine.MathUtils";
spine_MathUtils.cosDeg = function(degrees) {
	return Math.cos(degrees * spine_MathUtils.degRad);
};
spine_MathUtils.sinDeg = function(degrees) {
	return Math.sin(degrees * spine_MathUtils.degRad);
};
spine_MathUtils.clamp = function(value,min,max) {
	if(value < min) {
		return min;
	}
	if(value > max) {
		return max;
	}
	return value;
};
spine_MathUtils.signum = function(value) {
	if(value > 0) {
		return 1;
	} else if(value < 0) {
		return -1;
	} else {
		return 0;
	}
};
spine_MathUtils.randomTriangular = function(min,max) {
	return spine_MathUtils.randomTriangularWith(min,max,(min + max) * 0.5);
};
spine_MathUtils.randomTriangularWith = function(min,max,mode) {
	var u = Math.random();
	var d = max - min;
	if(u <= (mode - min) / d) {
		return min + Math.sqrt(u * d * (mode - min));
	}
	return max - Math.sqrt((1 - u) * d * (max - mode));
};
spine_MathUtils.prototype = {
	__class__: spine_MathUtils
};
var spine_PathConstraint = function(data,skeleton) {
	this._segments = [];
	this._lengths = [];
	this._curves = [];
	this._world = [];
	this._positions = [];
	this._spaces = [];
	if(data == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("data cannot be null."));
	}
	if(skeleton == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("skeleton cannot be null."));
	}
	this._data = data;
	this._bones = [];
	var _g = 0;
	var _g1 = data.get_bones();
	while(_g < _g1.length) this._bones.push(skeleton.findBone(_g1[_g++].get_name()));
	this.target = skeleton.findSlot(data.target.get_name());
	this.position = data.position;
	this.spacing = data.spacing;
	this.rotateMix = data.rotateMix;
	this.translateMix = data.translateMix;
};
$hxClasses["spine.PathConstraint"] = spine_PathConstraint;
spine_PathConstraint.__name__ = "spine.PathConstraint";
spine_PathConstraint.__interfaces__ = [spine_Updatable];
spine_PathConstraint.prototype = {
	target: null
	,position: null
	,spacing: null
	,rotateMix: null
	,translateMix: null
	,active: null
	,_data: null
	,_bones: null
	,_spaces: null
	,_positions: null
	,_world: null
	,_curves: null
	,_lengths: null
	,_segments: null
	,isActive: function() {
		return this.active;
	}
	,apply: function() {
		this.update();
	}
	,update: function() {
		var attachment;
		try {
			attachment = js_Boot.__cast(this.target.get_attachment() , spine_attachments_PathAttachment);
		} catch( e ) {
			haxe_CallStack.lastException = e;
			attachment = null;
		}
		if(attachment == null) {
			return;
		}
		var rotateMix = this.rotateMix;
		var translateMix = this.translateMix;
		var rotate = rotateMix > 0;
		if(!(translateMix > 0) && !rotate) {
			return;
		}
		var data = this._data;
		var percentSpacing = data.spacingMode == "percent";
		var rotateMode = data.rotateMode;
		var tangents = rotateMode == "tangent";
		var scale = rotateMode == "chainScale";
		var boneCount = this._bones.length;
		var spacesCount = tangents ? boneCount : boneCount + 1;
		var bones = this._bones;
		spine_PortUtils.fillResize(this._spaces,spacesCount,0.0);
		var spaces = this._spaces;
		var lengths = null;
		var spacing = this.spacing;
		if(scale || !percentSpacing) {
			if(scale) {
				spine_PortUtils.fillResize(this._lengths,boneCount,0.0);
				lengths = this._lengths;
			}
			var lengthSpacing = data.spacingMode == "length";
			var i = 0;
			var n = spacesCount - 1;
			while(i < n) {
				var bone = bones[i];
				var setupLength = bone.get_data().length;
				if(setupLength < 0.00001) {
					if(scale) {
						lengths[i] = 0;
					}
					spaces[++i] = 0;
				} else if(percentSpacing) {
					if(scale) {
						var x_l = setupLength * bone.a;
						var y_l = setupLength * bone.c;
						lengths[i] = Math.sqrt(x_l * x_l + y_l * y_l);
					}
					spaces[++i] = spacing;
				} else {
					var x = setupLength * bone.a;
					var y = setupLength * bone.c;
					var length = Math.sqrt(x * x + y * y);
					if(scale) {
						lengths[i] = length;
					}
					spaces[++i] = (lengthSpacing ? setupLength + spacing : spacing) * length / setupLength;
				}
			}
		} else {
			var _g = 1;
			var _g1 = spacesCount;
			while(_g < _g1) spaces[_g++] = spacing;
		}
		var positions = this.computeWorldPositions(attachment,spacesCount,tangents,data.positionMode == "percent",percentSpacing);
		var boneX = positions[0];
		var boneY = positions[1];
		var offsetRotation = data.offsetRotation;
		var tip = false;
		if(offsetRotation == 0) {
			tip = rotateMode == "chain";
		} else {
			tip = false;
			var pa = this.target.get_bone();
			offsetRotation *= pa.a * pa.d - pa.b * pa.c > 0 ? spine_MathUtils.degRad : -spine_MathUtils.degRad;
		}
		var p = 3;
		var i1 = 0;
		while(i1 < boneCount) {
			var bone1 = bones[i1];
			bone1.worldX += (boneX - bone1.worldX) * translateMix;
			bone1.worldY += (boneY - bone1.worldY) * translateMix;
			var x1 = positions[p];
			var y1 = positions[p + 1];
			var dx = x1 - boneX;
			var dy = y1 - boneY;
			if(scale) {
				var length1 = lengths[i1];
				if(length1 != 0) {
					var s = (Math.sqrt(dx * dx + dy * dy) / length1 - 1) * rotateMix + 1;
					bone1.a *= s;
					bone1.c *= s;
				}
			}
			boneX = x1;
			boneY = y1;
			if(rotate) {
				var a = bone1.a;
				var b = bone1.b;
				var c = bone1.c;
				var d = bone1.d;
				var r;
				var cos;
				var sin;
				if(tangents) {
					r = positions[p - 1];
				} else if(spaces[i1 + 1] == 0) {
					r = positions[p + 2];
				} else {
					r = Math.atan2(dy,dx);
				}
				r -= Math.atan2(c,a);
				if(tip) {
					cos = Math.cos(r);
					sin = Math.sin(r);
					var length2 = bone1.get_data().length;
					boneX = x1 + (length2 * (cos * a - sin * c) - dx) * rotateMix;
					boneY = y1 + (length2 * (sin * a + cos * c) - dy) * rotateMix;
				} else {
					r += offsetRotation;
				}
				if(r > Math.PI) {
					r -= Math.PI * 2;
				} else if(r < -Math.PI) {
					r += Math.PI * 2;
				}
				r *= rotateMix;
				cos = Math.cos(r);
				sin = Math.sin(r);
				bone1.a = cos * a - sin * c;
				bone1.b = cos * b - sin * d;
				bone1.c = sin * a + cos * c;
				bone1.d = sin * b + cos * d;
			}
			bone1.appliedValid = false;
			++i1;
			p += 3;
		}
	}
	,computeWorldPositions: function(path,spacesCount,tangents,percentPosition,percentSpacing) {
		var target = this.target;
		var position = this.position;
		var spaces = this._spaces;
		spine_PortUtils.fillResize(this._positions,spacesCount * 3 + 2,0.0);
		var out = this._positions;
		var world;
		var closed = path.closed;
		var verticesLength = path.worldVerticesLength;
		var curveCount = verticesLength / 6 | 0;
		var prevCurve = spine_PathConstraint.NONE;
		if(!path.constantSpeed) {
			var lengths = path.lengths;
			curveCount -= closed ? 1 : 2;
			var pathLength = lengths[curveCount];
			if(percentPosition) {
				position *= pathLength;
			}
			if(percentSpacing) {
				var _g = 1;
				while(_g < spacesCount) spaces[_g++] *= pathLength;
			}
			spine_PortUtils.fillResize(this._world,8,0.0);
			world = this._world;
			var o = 0;
			var curve = 0;
			var i = 0;
			while(i < spacesCount) {
				var space = spaces[i];
				var p = position += space;
				if(closed) {
					p %= pathLength;
					if(p < 0) {
						p += pathLength;
					}
					curve = 0;
				} else if(p < 0) {
					if(prevCurve != spine_PathConstraint.BEFORE) {
						prevCurve = spine_PathConstraint.BEFORE;
						path.computeWorldVertices(target,2,4,world,0,2);
					}
					this.addBeforePosition(p,world,0,out,o);
					++i;
					o += 3;
					continue;
				} else if(p > pathLength) {
					if(prevCurve != spine_PathConstraint.AFTER) {
						prevCurve = spine_PathConstraint.AFTER;
						path.computeWorldVertices(target,verticesLength - 6,4,world,0,2);
					}
					this.addAfterPosition(p - pathLength,world,0,out,o);
					++i;
					o += 3;
					continue;
				}
				while(true) {
					var length = lengths[curve];
					if(p > length) {
						++curve;
						continue;
					}
					if(curve == 0) {
						p /= length;
					} else {
						var prev = lengths[curve - 1];
						p = (p - prev) / (length - prev);
					}
					break;
				}
				if(curve != prevCurve) {
					prevCurve = curve;
					if(closed && curve == curveCount) {
						path.computeWorldVertices(target,verticesLength - 4,4,world,0,2);
						path.computeWorldVertices(target,0,4,world,4,2);
					} else {
						path.computeWorldVertices(target,curve * 6 + 2,8,world,0,2);
					}
				}
				this.addCurvePosition(p,world[0],world[1],world[2],world[3],world[4],world[5],world[6],world[7],out,o,tangents || i > 0 && space == 0);
				++i;
				o += 3;
			}
			return out;
		}
		if(closed) {
			verticesLength += 2;
			spine_PortUtils.fillResize(this._world,verticesLength,0.0);
			world = this._world;
			path.computeWorldVertices(target,2,verticesLength - 4,world,0,2);
			path.computeWorldVertices(target,0,2,world,verticesLength - 4,2);
			world[verticesLength - 2] = world[0];
			world[verticesLength - 1] = world[1];
		} else {
			--curveCount;
			verticesLength -= 4;
			spine_PortUtils.fillResize(this._world,verticesLength,0.0);
			world = this._world;
			path.computeWorldVertices(target,2,verticesLength,world,0,2);
		}
		spine_PortUtils.fillResize(this._curves,curveCount,0.0);
		var curves = this._curves;
		var pathLength1 = 0.0;
		var x1 = world[0];
		var y1 = world[1];
		var cx1 = 0;
		var cy1 = 0;
		var cx2 = 0;
		var cy2 = 0;
		var x2 = 0;
		var y2 = 0;
		var tmpx;
		var tmpy;
		var dddfx;
		var dddfy;
		var ddfx;
		var ddfy;
		var dfx;
		var dfy;
		var w = 2;
		var i1 = 0;
		while(i1 < curveCount) {
			cx1 = world[w];
			cy1 = world[w + 1];
			cx2 = world[w + 2];
			cy2 = world[w + 3];
			x2 = world[w + 4];
			y2 = world[w + 5];
			tmpx = (x1 - cx1 * 2 + cx2) * 0.1875;
			tmpy = (y1 - cy1 * 2 + cy2) * 0.1875;
			dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.09375;
			dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.09375;
			ddfx = tmpx * 2 + dddfx;
			ddfy = tmpy * 2 + dddfy;
			dfx = (cx1 - x1) * 0.75 + tmpx + dddfx * 0.16666667;
			dfy = (cy1 - y1) * 0.75 + tmpy + dddfy * 0.16666667;
			pathLength1 += Math.sqrt(dfx * dfx + dfy * dfy);
			dfx += ddfx;
			dfy += ddfy;
			ddfx += dddfx;
			ddfy += dddfy;
			pathLength1 += Math.sqrt(dfx * dfx + dfy * dfy);
			dfx += ddfx;
			dfy += ddfy;
			pathLength1 += Math.sqrt(dfx * dfx + dfy * dfy);
			dfx += ddfx + dddfx;
			dfy += ddfy + dddfy;
			pathLength1 += Math.sqrt(dfx * dfx + dfy * dfy);
			curves[i1] = pathLength1;
			x1 = x2;
			y1 = y2;
			++i1;
			w += 6;
		}
		if(percentPosition) {
			position *= pathLength1;
		} else {
			position *= pathLength1 / path.lengths[curveCount - 1];
		}
		if(percentSpacing) {
			var _g1 = 1;
			while(_g1 < spacesCount) spaces[_g1++] *= pathLength1;
		}
		var segments = this._segments;
		var curveLength = 0;
		var segment = 0;
		var i2 = 0;
		var o1 = 0;
		var curve1 = 0;
		while(i2 < spacesCount) {
			var space1 = spaces[i2];
			var p1 = position += space1;
			if(closed) {
				p1 %= pathLength1;
				if(p1 < 0) {
					p1 += pathLength1;
				}
				curve1 = 0;
			} else if(p1 < 0) {
				this.addBeforePosition(p1,world,0,out,o1);
				++i2;
				o1 += 3;
				continue;
			} else if(p1 > pathLength1) {
				this.addAfterPosition(p1 - pathLength1,world,verticesLength - 4,out,o1);
				++i2;
				o1 += 3;
				continue;
			}
			while(true) {
				var length1 = curves[curve1];
				if(p1 > length1) {
					++curve1;
					continue;
				}
				if(curve1 == 0) {
					p1 /= length1;
				} else {
					var prev1 = curves[curve1 - 1];
					p1 = (p1 - prev1) / (length1 - prev1);
				}
				break;
			}
			if(curve1 != prevCurve) {
				prevCurve = curve1;
				var ii = curve1 * 6;
				x1 = world[ii];
				y1 = world[ii + 1];
				cx1 = world[ii + 2];
				cy1 = world[ii + 3];
				cx2 = world[ii + 4];
				cy2 = world[ii + 5];
				x2 = world[ii + 6];
				y2 = world[ii + 7];
				tmpx = (x1 - cx1 * 2 + cx2) * 0.03;
				tmpy = (y1 - cy1 * 2 + cy2) * 0.03;
				dddfx = ((cx1 - cx2) * 3 - x1 + x2) * 0.006;
				dddfy = ((cy1 - cy2) * 3 - y1 + y2) * 0.006;
				ddfx = tmpx * 2 + dddfx;
				ddfy = tmpy * 2 + dddfy;
				dfx = (cx1 - x1) * 0.3 + tmpx + dddfx * 0.16666667;
				dfy = (cy1 - y1) * 0.3 + tmpy + dddfy * 0.16666667;
				curveLength = Math.sqrt(dfx * dfx + dfy * dfy);
				segments[0] = curveLength;
				dfx += ddfx;
				dfy += ddfy;
				ddfx += dddfx;
				ddfy += dddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[1] = curveLength;
				dfx += ddfx;
				dfy += ddfy;
				ddfx += dddfx;
				ddfy += dddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[2] = curveLength;
				dfx += ddfx;
				dfy += ddfy;
				ddfx += dddfx;
				ddfy += dddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[3] = curveLength;
				dfx += ddfx;
				dfy += ddfy;
				ddfx += dddfx;
				ddfy += dddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[4] = curveLength;
				dfx += ddfx;
				dfy += ddfy;
				ddfx += dddfx;
				ddfy += dddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[5] = curveLength;
				dfx += ddfx;
				dfy += ddfy;
				ddfx += dddfx;
				ddfy += dddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[6] = curveLength;
				dfx += ddfx;
				dfy += ddfy;
				ddfx += dddfx;
				ddfy += dddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[7] = curveLength;
				dfx += ddfx;
				dfy += ddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[8] = curveLength;
				dfx += ddfx + dddfx;
				dfy += ddfy + dddfy;
				curveLength += Math.sqrt(dfx * dfx + dfy * dfy);
				segments[9] = curveLength;
				segment = 0;
			}
			p1 *= curveLength;
			while(true) {
				var length2 = segments[segment];
				if(p1 > length2) {
					++segment;
					continue;
				}
				if(segment == 0) {
					p1 /= length2;
				} else {
					var prev2 = segments[segment - 1];
					p1 = segment + (p1 - prev2) / (length2 - prev2);
				}
				break;
			}
			this.addCurvePosition(p1 * 0.1,x1,y1,cx1,cy1,cx2,cy2,x2,y2,out,o1,tangents || i2 > 0 && space1 == 0);
			++i2;
			o1 += 3;
		}
		return out;
	}
	,addBeforePosition: function(p,temp,i,out,o) {
		var x1 = temp[i];
		var y1 = temp[i + 1];
		var r = Math.atan2(temp[i + 3] - y1,temp[i + 2] - x1);
		out[o] = x1 + p * Math.cos(r);
		out[o + 1] = y1 + p * Math.sin(r);
		out[o + 2] = r;
	}
	,addAfterPosition: function(p,temp,i,out,o) {
		var x1 = temp[i + 2];
		var y1 = temp[i + 3];
		var r = Math.atan2(y1 - temp[i + 1],x1 - temp[i]);
		out[o] = x1 + p * Math.cos(r);
		out[o + 1] = y1 + p * Math.sin(r);
		out[o + 2] = r;
	}
	,addCurvePosition: function(p,x1,y1,cx1,cy1,cx2,cy2,x2,y2,out,o,tangents) {
		if(p == 0 || isNaN(p)) {
			out[o] = x1;
			out[o + 1] = y1;
			out[o + 2] = Math.atan2(cy1 - y1,cx1 - x1);
			return;
		}
		var tt = p * p;
		var ttt = tt * p;
		var u = 1 - p;
		var uu = u * u;
		var uuu = uu * u;
		var ut = u * p;
		var ut3 = ut * 3;
		var uut3 = u * ut3;
		var utt3 = ut3 * p;
		var x = x1 * uuu + cx1 * uut3 + cx2 * utt3 + x2 * ttt;
		var y = y1 * uuu + cy1 * uut3 + cy2 * utt3 + y2 * ttt;
		out[o] = x;
		out[o + 1] = y;
		if(tangents) {
			if(p < 0.001) {
				out[o + 2] = Math.atan2(cy1 - y1,cx1 - x1);
			} else {
				out[o + 2] = Math.atan2(y - (y1 * uu + cy1 * ut * 2 + cy2 * tt),x - (x1 * uu + cx1 * ut * 2 + cx2 * tt));
			}
		}
	}
	,get_bones: function() {
		return this._bones;
	}
	,get_data: function() {
		return this._data;
	}
	,toString: function() {
		return this._data.name;
	}
	,__class__: spine_PathConstraint
	,__properties__: {get_data:"get_data",get_bones:"get_bones"}
};
var spine_PathConstraintData = function(name) {
	this._bones = [];
	spine_ConstraintData.call(this,name,0,false);
};
$hxClasses["spine.PathConstraintData"] = spine_PathConstraintData;
spine_PathConstraintData.__name__ = "spine.PathConstraintData";
spine_PathConstraintData.__super__ = spine_ConstraintData;
spine_PathConstraintData.prototype = $extend(spine_ConstraintData.prototype,{
	_bones: null
	,target: null
	,positionMode: null
	,spacingMode: null
	,rotateMode: null
	,offsetRotation: null
	,position: null
	,spacing: null
	,rotateMix: null
	,translateMix: null
	,get_bones: function() {
		return this._bones;
	}
	,__class__: spine_PathConstraintData
	,__properties__: {get_bones:"get_bones"}
});
var spine_Pool = function(instantiator) {
	this.items = [];
	this.instantiator = instantiator;
};
$hxClasses["spine.Pool"] = spine_Pool;
spine_Pool.__name__ = "spine.Pool";
spine_Pool.prototype = {
	items: null
	,instantiator: null
	,obtain: function() {
		if(this.items.length > 0) {
			return this.items.pop();
		} else {
			return this.instantiator();
		}
	}
	,free: function(item) {
		item.reset();
		this.items.push(item);
	}
	,freeAll: function(items) {
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) this.free(items[_g++]);
	}
	,clear: function() {
		this.items.length = 0;
	}
	,__class__: spine_Pool
};
var spine_Poolable = function() { };
$hxClasses["spine.Poolable"] = spine_Poolable;
spine_Poolable.__name__ = "spine.Poolable";
spine_Poolable.__isInterface__ = true;
spine_Poolable.prototype = {
	reset: null
	,__class__: spine_Poolable
};
var spine_PortUtils = function() { };
$hxClasses["spine.PortUtils"] = spine_PortUtils;
spine_PortUtils.__name__ = "spine.PortUtils";
spine_PortUtils.getOr = function(object,key,defaultValue) {
	var value = object[key];
	if(value == null) {
		return defaultValue;
	} else {
		return value;
	}
};
spine_PortUtils.fillResize = function(array,size,fill) {
	if(size < array.length) {
		array.length = size;
	} else {
		while(array.length < size) array[array.length] = fill;
	}
};
spine_PortUtils.create = function(length,fill) {
	var _g = [];
	var _g1 = 0;
	while(_g1 < length) {
		++_g1;
		_g.push(fill);
	}
	return _g;
};
var spine_Skeleton = function(data) {
	this.y = 0;
	this.x = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.time = 0;
	this.color = new spine_Color(1,1,1,1);
	this._updateCacheReset = [];
	this._updateCache = [];
	if(data == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("data cannot be null."));
	}
	this._data = data;
	this.bones = [];
	var _g = 0;
	var _g1 = data.bones;
	while(_g < _g1.length) {
		var boneData = _g1[_g];
		++_g;
		var bone;
		if(boneData.get_parent() == null) {
			bone = new spine_Bone(boneData,this,null);
		} else {
			var parent = this.bones[boneData.get_parent().get_index()];
			bone = new spine_Bone(boneData,this,parent);
			parent.get_children().push(bone);
		}
		this.bones.push(bone);
	}
	this.slots = [];
	this.drawOrder = [];
	var _g2 = 0;
	var _g3 = data.slots;
	while(_g2 < _g3.length) {
		var slotData = _g3[_g2];
		++_g2;
		var slot = new spine_Slot(slotData,this.bones[slotData.get_boneData().get_index()]);
		this.slots.push(slot);
		this.drawOrder[this.drawOrder.length] = slot;
	}
	this.ikConstraints = [];
	var _g4 = 0;
	var _g5 = data.ikConstraints;
	while(_g4 < _g5.length) this.ikConstraints.push(new spine_IkConstraint(_g5[_g4++],this));
	this.transformConstraints = [];
	var _g6 = 0;
	var _g7 = data.transformConstraints;
	while(_g6 < _g7.length) this.transformConstraints.push(new spine_TransformConstraint(_g7[_g6++],this));
	this.pathConstraints = [];
	var _g8 = 0;
	var _g9 = data.pathConstraints;
	while(_g8 < _g9.length) this.pathConstraints.push(new spine_PathConstraint(_g9[_g8++],this));
	this.updateCache();
};
$hxClasses["spine.Skeleton"] = spine_Skeleton;
spine_Skeleton.__name__ = "spine.Skeleton";
spine_Skeleton.contains = function(list,element) {
	var i = 0;
	while(i < list.length) {
		if(list[i] == element) {
			return true;
		}
		++i;
	}
	return false;
};
spine_Skeleton.prototype = {
	_data: null
	,bones: null
	,slots: null
	,drawOrder: null
	,ikConstraints: null
	,transformConstraints: null
	,pathConstraints: null
	,_updateCache: null
	,_updateCacheReset: null
	,_skin: null
	,color: null
	,time: null
	,scaleX: null
	,scaleY: null
	,x: null
	,y: null
	,updateCache: function() {
		this._updateCache.length = 0;
		this._updateCacheReset.length = 0;
		var bones = this.bones;
		var bone;
		var _g = 0;
		var _g1 = bones.length;
		while(_g < _g1) {
			bone = bones[_g++];
			bone._sorted = bone.get_data().skinRequired;
			bone.active = !bone._sorted;
		}
		if(this.get_skin() != null) {
			var skinBones = this.get_skin().get_bones();
			var _g2 = 0;
			var _g3 = this.get_skin().get_bones().length;
			while(_g2 < _g3) {
				bone = this.bones[skinBones[_g2++].get_index()];
				while(true) {
					bone._sorted = false;
					bone.active = true;
					bone = bone.get_parent();
					if(!(bone != null)) {
						break;
					}
				}
			}
		}
		var ikConstraints = this.ikConstraints;
		var transformConstraints = this.transformConstraints;
		var pathConstraints = this.pathConstraints;
		var ikCount = ikConstraints.length;
		var transformCount = transformConstraints.length;
		var pathCount = pathConstraints.length;
		var constraintCount = ikCount + transformCount + pathCount;
		var _g21 = 0;
		while(_g21 < constraintCount) {
			var i = _g21++;
			var continueOuter = false;
			var _g22 = 0;
			while(_g22 < ikCount) {
				var ikConstraint = ikConstraints[_g22++];
				if(ikConstraint.get_data().order == i) {
					this.sortIkConstraint(ikConstraint);
					continueOuter = true;
					break;
				}
			}
			if(!continueOuter) {
				var _g4 = 0;
				while(_g4 < transformCount) {
					var transformConstraint = transformConstraints[_g4++];
					if(transformConstraint.get_data().order == i) {
						this.sortTransformConstraint(transformConstraint);
						continueOuter = true;
						break;
					}
				}
				if(!continueOuter) {
					var _g6 = 0;
					while(_g6 < pathCount) {
						var pathConstraint = pathConstraints[_g6++];
						if(pathConstraint.get_data().order == i) {
							this.sortPathConstraint(pathConstraint);
							break;
						}
					}
				}
			}
		}
		var _g41 = 0;
		var _g5 = bones.length;
		while(_g41 < _g5) this.sortBone(bones[_g41++]);
	}
	,sortIkConstraint: function(constraint) {
		constraint.active = constraint.target.isActive() && (!constraint.get_data().skinRequired || this.get_skin() != null && spine_Skeleton.contains(this.get_skin().get_constraints(),constraint.get_data()));
		if(!constraint.active) {
			return;
		}
		this.sortBone(constraint.target);
		var constrained = constraint.bones;
		var parent = constrained[0];
		this.sortBone(parent);
		if(constrained.length > 1) {
			var child = constrained[constrained.length - 1];
			if(Lambda.indexOf(this._updateCache,child) <= -1) {
				this._updateCacheReset.push(child);
			}
		}
		this._updateCache.push(constraint);
		this.sortReset(parent.get_children());
		constrained[constrained.length - 1]._sorted = true;
	}
	,sortPathConstraint: function(constraint) {
		constraint.active = constraint.target.get_bone().isActive() && (!constraint.get_data().skinRequired || this.get_skin() != null && spine_Skeleton.contains(this.get_skin().get_constraints(),constraint.get_data()));
		if(!constraint.active) {
			return;
		}
		var slot = constraint.target;
		var slotIndex = slot.get_data().get_index();
		var slotBone = slot.get_bone();
		if(this.get_skin() != null) {
			this.sortPathConstraintAttachment(this.get_skin(),slotIndex,slotBone);
		}
		if(this.get_data().defaultSkin != null && this.get_data().defaultSkin != this.get_skin()) {
			this.sortPathConstraintAttachment(this.get_data().defaultSkin,slotIndex,slotBone);
		}
		var _g = 0;
		var _g1 = this.get_data().skins.length;
		while(_g < _g1) this.sortPathConstraintAttachment(this.get_data().skins[_g++],slotIndex,slotBone);
		var attachment = slot.get_attachment();
		if(((attachment) instanceof spine_attachments_PathAttachment)) {
			this.sortPathConstraintAttachment2(attachment,slotBone);
		}
		var constrained = constraint.get_bones();
		var boneCount = constrained.length;
		var _g2 = 0;
		while(_g2 < boneCount) this.sortBone(constrained[_g2++]);
		this._updateCache.push(constraint);
		var _g4 = 0;
		while(_g4 < boneCount) this.sortReset(constrained[_g4++].get_children());
		var _g6 = 0;
		while(_g6 < boneCount) constrained[_g6++]._sorted = true;
	}
	,sortTransformConstraint: function(constraint) {
		constraint.active = constraint.target.isActive() && (!constraint.get_data().skinRequired || this.get_skin() != null && spine_Skeleton.contains(this.get_skin().get_constraints(),constraint.get_data()));
		if(!constraint.active) {
			return;
		}
		this.sortBone(constraint.target);
		var constrained = constraint.get_bones();
		var boneCount = constrained.length;
		if(constraint.get_data().local) {
			var _g = 0;
			while(_g < boneCount) {
				var child = constrained[_g++];
				this.sortBone(child.get_parent());
				if(Lambda.indexOf(this._updateCache,child) <= -1) {
					this._updateCacheReset.push(child);
				}
			}
		} else {
			var _g1 = 0;
			while(_g1 < boneCount) this.sortBone(constrained[_g1++]);
		}
		this._updateCache.push(constraint);
		var _g2 = 0;
		while(_g2 < boneCount) this.sortReset(constrained[_g2++].get_children());
		var _g21 = 0;
		while(_g21 < boneCount) {
			var i = _g21++;
			Reflect.field(constrained,i == null ? "null" : "" + i)._sorted = true;
		}
	}
	,sortPathConstraintAttachment: function(skin,slotIndex,slotBone) {
		if(skin.get_attachments()[slotIndex] == null) {
			return;
		}
		var dict = skin.get_attachments()[slotIndex];
		if(dict == null) {
			return;
		}
		var value = new haxe_ds__$StringMap_StringMapIterator(dict,dict.arrayKeys());
		while(value.hasNext()) this.sortPathConstraintAttachment2(value.next(),slotBone);
	}
	,sortPathConstraintAttachment2: function(attachment,slotBone) {
		var pathAttachment = ((attachment) instanceof spine_attachments_PathAttachment) ? js_Boot.__cast(attachment , spine_attachments_PathAttachment) : null;
		if(pathAttachment == null) {
			return;
		}
		var pathBones = pathAttachment.bones;
		if(pathBones == null) {
			this.sortBone(slotBone);
		} else {
			var bones = this.bones;
			var i = 0;
			var n = pathBones.length;
			while(i < n) {
				var nn = pathBones[i++];
				nn += i;
				while(i < nn) this.sortBone(bones[pathBones[i++]]);
			}
		}
	}
	,sortBone: function(bone) {
		if(bone._sorted) {
			return;
		}
		var parent = bone.get_parent();
		if(parent != null) {
			this.sortBone(parent);
		}
		bone._sorted = true;
		this._updateCache.push(bone);
	}
	,sortReset: function(bones) {
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			if(!bone.active) {
				++i;
				continue;
			}
			if(bone._sorted) {
				this.sortReset(bone.get_children());
			}
			bone._sorted = false;
			++i;
		}
	}
	,updateWorldTransform: function() {
		var updateCacheReset = this._updateCacheReset;
		var _g = 0;
		while(_g < updateCacheReset.length) {
			var bone = updateCacheReset[_g];
			++_g;
			bone.ax = bone.x;
			bone.ay = bone.y;
			bone.arotation = bone.rotation;
			bone.ascaleX = bone.scaleX;
			bone.ascaleY = bone.scaleY;
			bone.ashearX = bone.shearX;
			bone.ashearY = bone.shearY;
			bone.appliedValid = true;
		}
		var _g1 = 0;
		var _g2 = this._updateCache;
		while(_g1 < _g2.length) _g2[_g1++].update();
	}
	,setToSetupPose: function() {
		this.setBonesToSetupPose();
		this.setSlotsToSetupPose();
	}
	,setBonesToSetupPose: function() {
		var _g = 0;
		var _g1 = this.bones;
		while(_g < _g1.length) _g1[_g++].setToSetupPose();
		var _g2 = 0;
		var _g3 = this.ikConstraints;
		while(_g2 < _g3.length) {
			var ikConstraint = _g3[_g2];
			++_g2;
			ikConstraint.mix = ikConstraint._data.mix;
			ikConstraint.softness = ikConstraint._data.softness;
			ikConstraint.bendDirection = ikConstraint._data.bendDirection;
			ikConstraint.compress = ikConstraint._data.compress;
			ikConstraint.stretch = ikConstraint._data.stretch;
		}
		var _g4 = 0;
		var _g5 = this.transformConstraints;
		while(_g4 < _g5.length) {
			var transformConstraint = _g5[_g4];
			++_g4;
			transformConstraint.rotateMix = transformConstraint._data.rotateMix;
			transformConstraint.translateMix = transformConstraint._data.translateMix;
			transformConstraint.scaleMix = transformConstraint._data.scaleMix;
			transformConstraint.shearMix = transformConstraint._data.shearMix;
		}
		var _g6 = 0;
		var _g7 = this.pathConstraints;
		while(_g6 < _g7.length) {
			var pathConstraint = _g7[_g6];
			++_g6;
			pathConstraint.position = pathConstraint._data.position;
			pathConstraint.spacing = pathConstraint._data.spacing;
			pathConstraint.rotateMix = pathConstraint._data.rotateMix;
			pathConstraint.translateMix = pathConstraint._data.translateMix;
		}
	}
	,setSlotsToSetupPose: function() {
		var i = 0;
		var _g = 0;
		var _g1 = this.slots;
		while(_g < _g1.length) {
			var slot = _g1[_g];
			++_g;
			this.drawOrder[i++] = slot;
			slot.setToSetupPose();
		}
	}
	,get_data: function() {
		return this._data;
	}
	,get_getUpdateCache: function() {
		return this._updateCache;
	}
	,get_rootBone: function() {
		if(this.bones.length == 0) {
			return null;
		}
		return this.bones[0];
	}
	,findBone: function(boneName) {
		if(boneName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("boneName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.bones;
		while(_g < _g1.length) {
			var bone = _g1[_g];
			++_g;
			if(bone._data._name == boneName) {
				return bone;
			}
		}
		return null;
	}
	,findBoneIndex: function(boneName) {
		if(boneName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("boneName cannot be null."));
		}
		var i = 0;
		var _g = 0;
		var _g1 = this.bones;
		while(_g < _g1.length) {
			if(_g1[_g++]._data._name == boneName) {
				return i;
			}
			++i;
		}
		return -1;
	}
	,findSlot: function(slotName) {
		if(slotName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("slotName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.slots;
		while(_g < _g1.length) {
			var slot = _g1[_g];
			++_g;
			if(slot._data._name == slotName) {
				return slot;
			}
		}
		return null;
	}
	,findSlotIndex: function(slotName) {
		if(slotName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("slotName cannot be null."));
		}
		var i = 0;
		var _g = 0;
		var _g1 = this.slots;
		while(_g < _g1.length) {
			if(_g1[_g++]._data._name == slotName) {
				return i;
			}
			++i;
		}
		return -1;
	}
	,get_skin: function() {
		return this._skin;
	}
	,set_skinName: function(skinName) {
		var skin = this.get_data().findSkin(skinName);
		if(skin == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("Skin not found: " + skinName));
		}
		this.set_skin(skin);
		return skinName;
	}
	,get_skinName: function() {
		if(this._skin == null) {
			return null;
		} else {
			return this._skin._name;
		}
	}
	,set_skin: function(newSkin) {
		if(newSkin == this._skin) {
			return newSkin;
		}
		if(newSkin != null) {
			if(this.get_skin() != null) {
				newSkin.attachAll(this,this.get_skin());
			} else {
				var i = 0;
				var _g = 0;
				var _g1 = this.slots;
				while(_g < _g1.length) {
					var slot = _g1[_g];
					++_g;
					var name = slot._data.attachmentName;
					if(name != null) {
						var attachment = newSkin.getAttachment(i,name);
						if(attachment != null) {
							slot.set_attachment(attachment);
						}
					}
					++i;
				}
			}
		}
		this._skin = newSkin;
		this.updateCache();
		return newSkin;
	}
	,getAttachmentForSlotName: function(slotName,attachmentName) {
		return this.getAttachmentForSlotIndex(this.get_data().findSlotIndex(slotName),attachmentName);
	}
	,getAttachmentForSlotIndex: function(slotIndex,attachmentName) {
		if(attachmentName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("attachmentName cannot be null."));
		}
		if(this.get_skin() != null) {
			var attachment = this.get_skin().getAttachment(slotIndex,attachmentName);
			if(attachment != null) {
				return attachment;
			}
		}
		if(this.get_data().defaultSkin != null) {
			return this.get_data().defaultSkin.getAttachment(slotIndex,attachmentName);
		}
		return null;
	}
	,setAttachment: function(slotName,attachmentName) {
		if(slotName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("slotName cannot be null."));
		}
		var i = 0;
		var _g = 0;
		var _g1 = this.slots;
		while(_g < _g1.length) {
			var slot = _g1[_g];
			++_g;
			if(slot._data._name == slotName) {
				var attachment = null;
				if(attachmentName != null) {
					attachment = this.getAttachmentForSlotIndex(i,attachmentName);
					if(attachment == null) {
						throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("Attachment not found: " + attachmentName + ", for slot: " + slotName));
					}
				}
				slot.set_attachment(attachment);
				return;
			}
			++i;
		}
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("Slot not found: " + slotName));
	}
	,findIkConstraint: function(constraintName) {
		if(constraintName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("constraintName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.ikConstraints;
		while(_g < _g1.length) {
			var ikConstraint = _g1[_g];
			++_g;
			if(ikConstraint._data.name == constraintName) {
				return ikConstraint;
			}
		}
		return null;
	}
	,findTransformConstraint: function(constraintName) {
		if(constraintName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("constraintName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.transformConstraints;
		while(_g < _g1.length) {
			var transformConstraint = _g1[_g];
			++_g;
			if(transformConstraint._data.name == constraintName) {
				return transformConstraint;
			}
		}
		return null;
	}
	,findPathConstraint: function(constraintName) {
		if(constraintName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("constraintName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.pathConstraints;
		while(_g < _g1.length) {
			var pathConstraint = _g1[_g];
			++_g;
			if(pathConstraint._data.name == constraintName) {
				return pathConstraint;
			}
		}
		return null;
	}
	,update: function(delta) {
		this.time += delta;
	}
	,toString: function() {
		if(this._data.name != null) {
			return this._data.name;
		} else {
			return "";
		}
	}
	,getBounds: function(offset,size,temp) {
		if(offset == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("offset cannot be null."));
		}
		if(size == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("size cannot be null."));
		}
		var drawOrder = this.drawOrder;
		var minX = Infinity;
		var minY = Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var i = 0;
		var n = drawOrder.length;
		while(i < n) {
			var slot = drawOrder[i];
			var verticesLength = 0;
			var vertices = null;
			var attachment = slot.get_attachment();
			if(((attachment) instanceof spine_attachments_RegionAttachment)) {
				verticesLength = 8;
				temp.length = 8;
				vertices = temp;
				(js_Boot.__cast(attachment , spine_attachments_RegionAttachment)).computeWorldVertices(slot.get_bone(),temp,0,2);
			} else if(((attachment) instanceof spine_attachments_MeshAttachment)) {
				var mesh = js_Boot.__cast(attachment , spine_attachments_MeshAttachment);
				verticesLength = mesh.worldVerticesLength;
				temp.length = verticesLength;
				vertices = temp;
				mesh.computeWorldVertices(slot,0,verticesLength,temp,0,2);
			}
			if(vertices != null) {
				var ii = 0;
				var nn = vertices.length;
				while(ii < nn) {
					var x = vertices[ii];
					var y = vertices[ii + 1];
					minX = Math.min(minX,x);
					minY = Math.min(minY,y);
					maxX = Math.max(maxX,x);
					maxY = Math.max(maxY,y);
					ii += 8;
				}
			}
			++i;
		}
		offset[0] = minX;
		offset[1] = minY;
		size[0] = maxX - minX;
		size[1] = maxY - minY;
	}
	,__class__: spine_Skeleton
	,__properties__: {set_skinName:"set_skinName",get_skinName:"get_skinName",set_skin:"set_skin",get_skin:"get_skin",get_rootBone:"get_rootBone",get_getUpdateCache:"get_getUpdateCache",get_data:"get_data"}
};
var spine_SkeletonData = function() {
	this.pathConstraints = [];
	this.transformConstraints = [];
	this.ikConstraints = [];
	this.animations = [];
	this.events = [];
	this.skins = [];
	this.slots = [];
	this.bones = [];
};
$hxClasses["spine.SkeletonData"] = spine_SkeletonData;
spine_SkeletonData.__name__ = "spine.SkeletonData";
spine_SkeletonData.prototype = {
	name: null
	,bones: null
	,slots: null
	,skins: null
	,defaultSkin: null
	,events: null
	,animations: null
	,ikConstraints: null
	,transformConstraints: null
	,pathConstraints: null
	,x: null
	,y: null
	,width: null
	,height: null
	,version: null
	,hash: null
	,fps: null
	,imagesPath: null
	,audioPath: null
	,findBone: function(boneName) {
		if(boneName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("boneName cannot be null."));
		}
		var i = 0;
		var n = this.bones.length;
		while(i < n) {
			var bone = this.bones[i];
			if(bone._name == boneName) {
				return bone;
			}
			++i;
		}
		return null;
	}
	,findBoneIndex: function(boneName) {
		if(boneName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("boneName cannot be null."));
		}
		var i = 0;
		var n = this.bones.length;
		while(i < n) {
			if(this.bones[i]._name == boneName) {
				return i;
			}
			++i;
		}
		return -1;
	}
	,findSlot: function(slotName) {
		if(slotName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("slotName cannot be null."));
		}
		var i = 0;
		var n = this.slots.length;
		while(i < n) {
			var slot = this.slots[i];
			if(slot._name == slotName) {
				return slot;
			}
			++i;
		}
		return null;
	}
	,findSlotIndex: function(slotName) {
		if(slotName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("slotName cannot be null."));
		}
		var i = 0;
		var n = this.slots.length;
		while(i < n) {
			if(this.slots[i]._name == slotName) {
				return i;
			}
			++i;
		}
		return -1;
	}
	,findSkin: function(skinName) {
		if(skinName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("skinName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.skins;
		while(_g < _g1.length) {
			var skin = _g1[_g];
			++_g;
			if(skin._name == skinName) {
				return skin;
			}
		}
		return null;
	}
	,findEvent: function(eventName) {
		if(eventName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("eventName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.events;
		while(_g < _g1.length) {
			var eventData = _g1[_g];
			++_g;
			if(eventData.name == eventName) {
				return eventData;
			}
		}
		return null;
	}
	,findAnimation: function(animationName) {
		if(animationName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("animationName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.animations;
		while(_g < _g1.length) {
			var animation = _g1[_g];
			++_g;
			if(animation.get_name() == animationName) {
				return animation;
			}
		}
		return null;
	}
	,findIkConstraint: function(constraintName) {
		if(constraintName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("constraintName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.ikConstraints;
		while(_g < _g1.length) {
			var ikConstraintData = _g1[_g];
			++_g;
			if(ikConstraintData.name == constraintName) {
				return ikConstraintData;
			}
		}
		return null;
	}
	,findTransformConstraint: function(constraintName) {
		if(constraintName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("constraintName cannot be null."));
		}
		var _g = 0;
		var _g1 = this.transformConstraints;
		while(_g < _g1.length) {
			var transformConstraintData = _g1[_g];
			++_g;
			if(transformConstraintData.name == constraintName) {
				return transformConstraintData;
			}
		}
		return null;
	}
	,findTransformConstraintIndex: function(transformConstraintName) {
		if(transformConstraintName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("transformConstraintName cannot be null."));
		}
		var transformConstraints = this.transformConstraints;
		var i = 0;
		var n = transformConstraints.length;
		while(i < n) {
			if(transformConstraints[i].name == transformConstraintName) {
				return i;
			}
			++i;
		}
		return -1;
	}
	,findPathConstraint: function(constraintName) {
		if(constraintName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("constraintName cannot be null."));
		}
		var pathConstraints = this.pathConstraints;
		var i = 0;
		var n = pathConstraints.length;
		while(i < n) {
			var constraint = pathConstraints[i];
			if(constraint.name == constraintName) {
				return constraint;
			}
			++i;
		}
		return null;
	}
	,findPathConstraintIndex: function(pathConstraintName) {
		if(pathConstraintName == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("pathConstraintName cannot be null."));
		}
		var pathConstraints = this.pathConstraints;
		var i = 0;
		var n = pathConstraints.length;
		while(i < n) {
			if(pathConstraints[i].name == pathConstraintName) {
				return i;
			}
			++i;
		}
		return -1;
	}
	,toString: function() {
		if(this.name != null) {
			return this.name;
		} else {
			return "";
		}
	}
	,__class__: spine_SkeletonData
};
var spine_SkeletonJson = function(attachmentLoader) {
	this.linkedMeshes = [];
	this.scale = 1;
	this.attachmentLoader = attachmentLoader;
};
$hxClasses["spine.SkeletonJson"] = spine_SkeletonJson;
spine_SkeletonJson.__name__ = "spine.SkeletonJson";
spine_SkeletonJson.readCurve = function(map,timeline,frameIndex) {
	var curve = map["curve"];
	if(curve == null) {
		return;
	}
	if(curve == "stepped") {
		timeline.setStepped(frameIndex);
	} else {
		timeline.setCurve(frameIndex,parseFloat(Std.string(curve)),spine_PortUtils.getOr(map,"c2",0.0),spine_PortUtils.getOr(map,"c3",1.0),spine_PortUtils.getOr(map,"c4",1.0));
	}
};
spine_SkeletonJson.toColor = function(hexString,colorIndex) {
	if(hexString.length != 8 && hexString.length != 6) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("Color hexidecimal length must be 6 or 8, received: " + hexString));
	}
	return Std.parseInt("0x" + hexString.substring(colorIndex * 2,colorIndex * 2 + 2)) / 255;
};
spine_SkeletonJson.getFloatArray = function(map,name,scale) {
	var list = map[name];
	var values = [];
	var i = 0;
	var n = list.length;
	if(scale == 1.0) {
		while(i < n) {
			values[i] = list[i];
			++i;
		}
	} else {
		while(i < n) {
			values[i] = list[i] * scale;
			++i;
		}
	}
	return values;
};
spine_SkeletonJson.getIntArray = function(map,name) {
	var list = map[name];
	var values = [];
	var i = 0;
	var n = list.length;
	while(i < n) {
		values[i] = list[i] | 0;
		++i;
	}
	return values;
};
spine_SkeletonJson.getUintArray = function(map,name) {
	var list = map[name];
	var values = [];
	var i = 0;
	var n = list.length;
	while(i < n) {
		values[i] = list[i] | 0;
		++i;
	}
	return values;
};
spine_SkeletonJson.prototype = {
	attachmentLoader: null
	,scale: null
	,linkedMeshes: null
	,getFloatValue: function(object,key,defaultValue) {
		if(Object.prototype.hasOwnProperty.call(object,key)) {
			return object[key];
		} else {
			return defaultValue;
		}
	}
	,readSkeletonData: function(object,name) {
		if(object == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("object cannot be null."));
		}
		var root;
		if(typeof(object) == "string") {
			root = JSON.parse(Std.string(object));
		} else if(((object) instanceof haxe_io_Bytes)) {
			root = JSON.parse((js_Boot.__cast(object , haxe_io_Bytes)).toString());
		} else if(js_Boot.__instanceof(object,Dynamic)) {
			root = object;
		} else {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("object must be a String, ByteArray or Object."));
		}
		var skeletonData = new spine_SkeletonData();
		skeletonData.name = name;
		var skeletonMap = root["skeleton"];
		if(skeletonMap != null) {
			skeletonData.hash = skeletonMap["hash"];
			skeletonData.version = skeletonMap["spine"];
			skeletonData.x = spine_PortUtils.getOr(skeletonMap,"x",0.0);
			skeletonData.y = spine_PortUtils.getOr(skeletonMap,"y",0.0);
			skeletonData.width = spine_PortUtils.getOr(skeletonMap,"width",0.0);
			skeletonData.height = spine_PortUtils.getOr(skeletonMap,"height",0.0);
			skeletonData.fps = spine_PortUtils.getOr(skeletonMap,"fps",0.0);
			skeletonData.imagesPath = skeletonMap["images"];
		}
		var boneData;
		var boneMapList = root["bones"];
		var _g = 0;
		while(_g < boneMapList.length) {
			var boneMap = boneMapList[_g];
			++_g;
			var parent = null;
			var parentName = boneMap["parent"];
			if(parentName != null) {
				parent = skeletonData.findBone(parentName);
				if(parent == null) {
					throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Parent bone not found: " + parentName));
				}
			}
			boneData = new spine_BoneData(skeletonData.bones.length,boneMap["name"],parent);
			boneData.length = spine_PortUtils.getOr(boneMap,"length",0.0) * this.scale;
			boneData.x = spine_PortUtils.getOr(boneMap,"x",0.0) * this.scale;
			boneData.y = spine_PortUtils.getOr(boneMap,"y",0.0) * this.scale;
			boneData.rotation = spine_PortUtils.getOr(boneMap,"rotation",0.0);
			boneData.scaleX = spine_PortUtils.getOr(boneMap,"scaleX",1.0);
			boneData.scaleY = spine_PortUtils.getOr(boneMap,"scaleY",1.0);
			boneData.shearX = spine_PortUtils.getOr(boneMap,"shearX",0);
			boneData.shearY = spine_PortUtils.getOr(boneMap,"shearY",0);
			boneData.transformMode = spine_PortUtils.getOr(boneMap,"transform","normal");
			boneData.skinRequired = spine_PortUtils.getOr(boneMap,"skin",false);
			skeletonData.bones.push(boneData);
		}
		var slotMapList = root["slots"];
		var _g1 = 0;
		while(_g1 < slotMapList.length) {
			var slotMap = slotMapList[_g1];
			++_g1;
			var slotName = slotMap["name"];
			var boneName = slotMap["bone"];
			boneData = skeletonData.findBone(boneName);
			if(boneData == null) {
				throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Slot bone not found: " + boneName));
			}
			var slotData = new spine_SlotData(skeletonData.slots.length,slotName,boneData);
			var color = slotMap["color"];
			if(color != null) {
				slotData.color.setFrom(spine_SkeletonJson.toColor(color,0),spine_SkeletonJson.toColor(color,1),spine_SkeletonJson.toColor(color,2),spine_SkeletonJson.toColor(color,3));
			}
			var dark = slotMap["dark"];
			if(dark != null) {
				slotData.darkColor = new spine_Color(spine_SkeletonJson.toColor(dark,0),spine_SkeletonJson.toColor(dark,1),spine_SkeletonJson.toColor(dark,2),0);
			}
			slotData.attachmentName = slotMap["attachment"];
			slotData.blendMode = spine_PortUtils.getOr(slotMap,"blend","normal");
			skeletonData.slots.push(slotData);
		}
		var constraintMapList = root["ik"];
		if(constraintMapList != null) {
			var _g2 = 0;
			while(_g2 < constraintMapList.length) {
				var constraintMap = constraintMapList[_g2];
				++_g2;
				var ikConstraintData = new spine_IkConstraintData(constraintMap["name"]);
				ikConstraintData.order = spine_PortUtils.getOr(constraintMap,"order",0);
				ikConstraintData.skinRequired = spine_PortUtils.getOr(constraintMap,"skin",false);
				var boneNameList = constraintMap["bones"];
				var _g21 = 0;
				while(_g21 < boneNameList.length) {
					var boneName1 = boneNameList[_g21];
					++_g21;
					var bone = skeletonData.findBone(boneName1);
					if(bone == null) {
						throw new js__$Boot_HaxeError(new spine_flash_errors_Error("IK constraint bone not found: " + boneName1));
					}
					ikConstraintData.bones.push(bone);
				}
				ikConstraintData.target = skeletonData.findBone(constraintMap["target"]);
				if(ikConstraintData.target == null) {
					throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Target bone not found: " + Std.string(constraintMap["target"])));
				}
				ikConstraintData.bendDirection = spine_PortUtils.getOr(constraintMap,"bendPositive",true) ? 1 : -1;
				ikConstraintData.compress = spine_PortUtils.getOr(constraintMap,"compress",false);
				ikConstraintData.stretch = spine_PortUtils.getOr(constraintMap,"stretch",false);
				ikConstraintData.uniform = spine_PortUtils.getOr(constraintMap,"uniform",false);
				ikConstraintData.softness = spine_PortUtils.getOr(constraintMap,"softness",0.0) * this.scale;
				ikConstraintData.mix = spine_PortUtils.getOr(constraintMap,"mix",1.0);
				skeletonData.ikConstraints.push(ikConstraintData);
			}
		}
		constraintMapList = root["transform"];
		if(constraintMapList != null) {
			var _g22 = 0;
			while(_g22 < constraintMapList.length) {
				var constraintMap1 = constraintMapList[_g22];
				++_g22;
				var transformConstraintData = new spine_TransformConstraintData(constraintMap1["name"]);
				transformConstraintData.order = spine_PortUtils.getOr(constraintMap1,"order",0);
				transformConstraintData.skinRequired = spine_PortUtils.getOr(constraintMap1,"skin",false);
				var boneNameList1 = constraintMap1["bones"];
				var _g23 = 0;
				while(_g23 < boneNameList1.length) {
					var boneName2 = boneNameList1[_g23];
					++_g23;
					var bone1 = skeletonData.findBone(boneName2);
					if(bone1 == null) {
						throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Transform constraint bone not found: " + boneName2));
					}
					transformConstraintData.get_bones().push(bone1);
				}
				transformConstraintData.target = skeletonData.findBone(constraintMap1["target"]);
				if(transformConstraintData.target == null) {
					throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Target bone not found: " + Std.string(constraintMap1["target"])));
				}
				transformConstraintData.local = spine_PortUtils.getOr(constraintMap1,"local",false);
				transformConstraintData.relative = spine_PortUtils.getOr(constraintMap1,"relative",false);
				transformConstraintData.offsetRotation = spine_PortUtils.getOr(constraintMap1,"rotation",0.0);
				transformConstraintData.offsetX = spine_PortUtils.getOr(constraintMap1,"x",0.0) * this.scale;
				transformConstraintData.offsetY = spine_PortUtils.getOr(constraintMap1,"y",0.0) * this.scale;
				transformConstraintData.offsetScaleX = spine_PortUtils.getOr(constraintMap1,"scaleX",0.0);
				transformConstraintData.offsetScaleY = spine_PortUtils.getOr(constraintMap1,"scaleY",0.0);
				transformConstraintData.offsetShearY = spine_PortUtils.getOr(constraintMap1,"shearY",0.0);
				transformConstraintData.rotateMix = spine_PortUtils.getOr(constraintMap1,"rotateMix",1.0);
				transformConstraintData.translateMix = spine_PortUtils.getOr(constraintMap1,"translateMix",1.0);
				transformConstraintData.scaleMix = spine_PortUtils.getOr(constraintMap1,"scaleMix",1.0);
				transformConstraintData.shearMix = spine_PortUtils.getOr(constraintMap1,"shearMix",1.0);
				skeletonData.transformConstraints.push(transformConstraintData);
			}
		}
		var constraintMapList1 = root["path"];
		if(constraintMapList1 != null) {
			var _g24 = 0;
			while(_g24 < constraintMapList1.length) {
				var constraintMap2 = constraintMapList1[_g24];
				++_g24;
				var pathConstraintData = new spine_PathConstraintData(constraintMap2["name"]);
				pathConstraintData.order = spine_PortUtils.getOr(constraintMap2,"order",0);
				pathConstraintData.skinRequired = spine_PortUtils.getOr(constraintMap2,"skin",false);
				var boneNameList2 = constraintMap2["bones"];
				var _g25 = 0;
				while(_g25 < boneNameList2.length) {
					var boneName3 = boneNameList2[_g25];
					++_g25;
					var bone2 = skeletonData.findBone(boneName3);
					if(bone2 == null) {
						throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Path constraint bone not found: " + boneName3));
					}
					pathConstraintData.get_bones().push(bone2);
				}
				pathConstraintData.target = skeletonData.findSlot(constraintMap2["target"]);
				if(pathConstraintData.target == null) {
					throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Path target slot not found: " + Std.string(constraintMap2["target"])));
				}
				pathConstraintData.positionMode = spine_PortUtils.getOr(constraintMap2,"positionMode","percent");
				pathConstraintData.spacingMode = spine_PortUtils.getOr(constraintMap2,"spacingMode","length");
				pathConstraintData.rotateMode = spine_PortUtils.getOr(constraintMap2,"rotateMode","tangent");
				pathConstraintData.offsetRotation = spine_PortUtils.getOr(constraintMap2,"rotation",0.0);
				pathConstraintData.position = spine_PortUtils.getOr(constraintMap2,"position",0.0);
				if(pathConstraintData.positionMode == "fixed") {
					pathConstraintData.position *= this.scale;
				}
				pathConstraintData.spacing = spine_PortUtils.getOr(constraintMap2,"spacing",0.0);
				if(pathConstraintData.spacingMode == "length" || pathConstraintData.spacingMode == "fixed") {
					pathConstraintData.spacing *= this.scale;
				}
				pathConstraintData.rotateMix = spine_PortUtils.getOr(constraintMap2,"rotateMix",1.0);
				pathConstraintData.translateMix = spine_PortUtils.getOr(constraintMap2,"translateMix",1.0);
				skeletonData.pathConstraints.push(pathConstraintData);
			}
		}
		var skins = root["skins"];
		var i = 0;
		while(i < skins.length) {
			var ii;
			var skinMap = skins[i];
			var skin = new spine_Skin(skinMap["name"]);
			var boneNameList3 = skinMap["bones"];
			if(boneNameList3 != null) {
				ii = 0;
				while(ii < boneNameList3.length) {
					var boneData1 = skeletonData.findBone(boneNameList3[ii]);
					if(boneData1 == null) {
						throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Skin bone not found: " + boneNameList3[ii]));
					}
					skin.get_bones().push(boneData1);
					++ii;
				}
			}
			var constraintNameList = skinMap["ik"];
			if(constraintNameList != null) {
				ii = 0;
				while(ii < constraintNameList.length) {
					var constraint = skeletonData.findIkConstraint(constraintNameList[ii]);
					if(constraint == null) {
						throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Skin IK constraint not found: " + constraintNameList[ii]));
					}
					skin.get_constraints().push(constraint);
					++ii;
				}
			}
			var constraintNameList1 = skinMap["transform"];
			if(constraintNameList1 != null) {
				ii = 0;
				while(ii < constraintNameList1.length) {
					var constraint1 = skeletonData.findTransformConstraint(constraintNameList1[ii]);
					if(constraint1 == null) {
						throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Skin transform constraint not found: " + constraintNameList1[ii]));
					}
					skin.get_constraints().push(constraint1);
					++ii;
				}
			}
			var constraintNameList2 = skinMap["path"];
			if(constraintNameList2 != null) {
				ii = 0;
				while(ii < constraintNameList2.length) {
					var constraint2 = skeletonData.findPathConstraint(constraintNameList2[ii]);
					if(constraint2 == null) {
						throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Skin path constraint not found: " + constraintNameList2[ii]));
					}
					skin.get_constraints().push(constraint2);
					++ii;
				}
			}
			var attachmentMap = skinMap["attachments"];
			var _g26 = 0;
			var _g3 = Reflect.fields(attachmentMap);
			while(_g26 < _g3.length) {
				var slotName1 = _g3[_g26];
				++_g26;
				var slot = skeletonData.findSlot(slotName1);
				var slotEntry = attachmentMap[slotName1];
				var _g27 = 0;
				var _g31 = Reflect.fields(slotEntry);
				while(_g27 < _g31.length) {
					var attachmentName = _g31[_g27];
					++_g27;
					var attachment = this.readAttachment(slotEntry[attachmentName],skin,slot.get_index(),attachmentName,skeletonData);
					if(attachment != null) {
						skin.setAttachment(slot.get_index(),attachmentName,attachment);
					}
				}
			}
			skeletonData.skins[skeletonData.skins.length] = skin;
			if(skin.get_name() == "default") {
				skeletonData.defaultSkin = skin;
			}
			++i;
		}
		var linkedMeshes = this.linkedMeshes;
		var _g28 = 0;
		while(_g28 < linkedMeshes.length) {
			var linkedMesh = linkedMeshes[_g28];
			++_g28;
			var parentSkin = linkedMesh.skin == null ? skeletonData.defaultSkin : skeletonData.findSkin(linkedMesh.skin);
			if(parentSkin == null) {
				throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Skin not found: " + linkedMesh.skin));
			}
			var parentMesh = parentSkin.getAttachment(linkedMesh.slotIndex,linkedMesh.parent);
			if(parentMesh == null) {
				throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Parent mesh not found: " + linkedMesh.parent));
			}
			linkedMesh.mesh.deformAttachment = linkedMesh.inheritDeform ? js_Boot.__cast(parentMesh , spine_attachments_VertexAttachment) : linkedMesh.mesh;
			linkedMesh.mesh.set_parentMesh(js_Boot.__cast(parentMesh , spine_attachments_MeshAttachment));
			linkedMesh.mesh.updateUVs();
		}
		linkedMeshes.length = 0;
		var events = root["events"];
		if(events != null) {
			var _g32 = 0;
			var _g4 = Reflect.fields(events);
			while(_g32 < _g4.length) {
				var eventName = _g4[_g32];
				++_g32;
				var eventMap = events[eventName];
				var eventData = new spine_EventData(eventName);
				eventData.intValue = spine_PortUtils.getOr(eventMap,"int",0);
				eventData.floatValue = spine_PortUtils.getOr(eventMap,"float",0.0);
				eventData.stringValue = spine_PortUtils.getOr(eventMap,"string","");
				eventData.audioPath = spine_PortUtils.getOr(eventMap,"audio",null);
				if(eventData.audioPath != null) {
					eventData.volume = spine_PortUtils.getOr(eventMap,"volume",1.0);
					eventData.balance = spine_PortUtils.getOr(eventMap,"balance",0.0);
				}
				skeletonData.events.push(eventData);
			}
		}
		var animations = root["animations"];
		var _g33 = 0;
		var _g41 = Reflect.fields(animations);
		while(_g33 < _g41.length) {
			var animationName = _g41[_g33];
			++_g33;
			this.readAnimation(animations[animationName],animationName,skeletonData);
		}
		return skeletonData;
	}
	,readAttachment: function(map,skin,slotIndex,name,skeletonData) {
		name = spine_PortUtils.getOr(map,"name",name);
		var scale = this.scale;
		var color;
		var path = spine_PortUtils.getOr(map,"path",name);
		switch(spine_PortUtils.getOr(map,"type","region")) {
		case "boundingbox":
			var box = this.attachmentLoader.newBoundingBoxAttachment(skin,name);
			if(box == null) {
				return null;
			}
			this.readVertices(map,box,spine_PortUtils.getOr(map,"vertexCount",0) << 1);
			return box;
		case "clipping":
			var clip = this.attachmentLoader.newClippingAttachment(skin,name);
			if(clip == null) {
				return null;
			}
			var end = map["end"];
			if(end != null) {
				var slot = skeletonData.findSlot(end);
				if(slot == null) {
					throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Clipping end slot not found: " + end));
				}
				clip.endSlot = slot;
			}
			this.readVertices(map,clip,spine_PortUtils.getOr(map,"vertexCount",0) << 1);
			color = map["color"];
			if(color != null) {
				clip.color.setFrom(spine_SkeletonJson.toColor(color,0),spine_SkeletonJson.toColor(color,1),spine_SkeletonJson.toColor(color,2),spine_SkeletonJson.toColor(color,3));
			}
			return clip;
		case "linkedmesh":case "mesh":
			var mesh = this.attachmentLoader.newMeshAttachment(skin,name,path);
			if(mesh == null) {
				return null;
			}
			mesh.path = path;
			color = map["color"];
			if(color != null) {
				mesh.color.setFrom(spine_SkeletonJson.toColor(color,0),spine_SkeletonJson.toColor(color,1),spine_SkeletonJson.toColor(color,2),spine_SkeletonJson.toColor(color,3));
			}
			mesh.width = spine_PortUtils.getOr(map,"width",0.0) * scale;
			mesh.height = spine_PortUtils.getOr(map,"height",0.0) * scale;
			if(map["parent"] != null) {
				this.linkedMeshes.push(new spine_LinkedMesh(mesh,spine_PortUtils.getOr(map,"skin",null),slotIndex,map["parent"],spine_PortUtils.getOr(map,"deform",true)));
				return mesh;
			}
			var uvs = spine_SkeletonJson.getFloatArray(map,"uvs",1.0);
			this.readVertices(map,mesh,uvs.length);
			mesh.triangles = spine_SkeletonJson.getUintArray(map,"triangles");
			mesh.regionUVs = uvs;
			mesh.updateUVs();
			mesh.hullLength = spine_PortUtils.getOr(map,"hull",0) * 2;
			if(map["edges"] != null) {
				mesh.edges = spine_SkeletonJson.getIntArray(map,"edges");
			}
			return mesh;
		case "path":
			var path1 = this.attachmentLoader.newPathAttachment(skin,name);
			if(path1 == null) {
				return null;
			}
			path1.closed = spine_PortUtils.getOr(map,"closed",false);
			path1.constantSpeed = spine_PortUtils.getOr(map,"constantSpeed",true);
			this.readVertices(map,path1,spine_PortUtils.getOr(map,"vertexCount",0) << 1);
			path1.lengths = spine_SkeletonJson.getFloatArray(map,"lengths",scale);
			return path1;
		case "point":
			var point = this.attachmentLoader.newPointAttachment(skin,name);
			if(point == null) {
				return null;
			}
			point.x = spine_PortUtils.getOr(map,"x",0.0) * scale;
			point.y = spine_PortUtils.getOr(map,"y",0.0) * scale;
			point.rotation = spine_PortUtils.getOr(map,"rotation",0.0);
			color = map["color"];
			if(color != null) {
				point.color.setFrom(spine_SkeletonJson.toColor(color,0),spine_SkeletonJson.toColor(color,1),spine_SkeletonJson.toColor(color,2),spine_SkeletonJson.toColor(color,3));
			}
			return point;
		case "region":
			var region = this.attachmentLoader.newRegionAttachment(skin,name,path);
			if(region == null) {
				return null;
			}
			region.path = path;
			region.x = spine_PortUtils.getOr(map,"x",0.0) * scale;
			region.y = spine_PortUtils.getOr(map,"y",0.0) * scale;
			region.scaleX = spine_PortUtils.getOr(map,"scaleX",1.0);
			region.scaleY = spine_PortUtils.getOr(map,"scaleY",1.0);
			region.rotation = spine_PortUtils.getOr(map,"rotation",0.0);
			region.width = spine_PortUtils.getOr(map,"width",0.0) * scale;
			region.height = spine_PortUtils.getOr(map,"height",0.0) * scale;
			color = map["color"];
			if(color != null) {
				region.color.setFrom(spine_SkeletonJson.toColor(color,0),spine_SkeletonJson.toColor(color,1),spine_SkeletonJson.toColor(color,2),spine_SkeletonJson.toColor(color,3));
			}
			region.updateOffset();
			return region;
		case "regionsequence":
			return null;
		}
	}
	,readVertices: function(map,attachment,verticesLength) {
		attachment.worldVerticesLength = verticesLength;
		var vertices = spine_SkeletonJson.getFloatArray(map,"vertices",1.0);
		if(verticesLength == vertices.length) {
			if(this.scale != 1.0) {
				var i = 0;
				var n = vertices.length;
				while(i < n) {
					vertices[i] *= this.scale;
					++i;
				}
			}
			attachment.vertices = vertices;
			return;
		}
		var weights = [];
		var bones = [];
		var i1 = 0;
		var n1 = vertices.length;
		while(i1 < n1) {
			var boneCount = vertices[i1++] | 0;
			bones.push(boneCount);
			var nn = i1 + boneCount * 4;
			while(i1 < nn) {
				bones.push(vertices[i1] | 0);
				weights.push(vertices[i1 + 1] * this.scale);
				weights.push(vertices[i1 + 2] * this.scale);
				weights.push(vertices[i1 + 3]);
				i1 += 4;
			}
		}
		attachment.bones = bones;
		attachment.vertices = weights;
	}
	,readAnimation: function(map,name,skeletonData) {
		var scale = this.scale;
		var timelines = [];
		var duration = 0.0;
		var slotMap;
		var slotIndex;
		var values;
		var frameIndex;
		var i;
		var slots = map["slots"];
		var _g = 0;
		var _g1 = Reflect.fields(slots);
		while(_g < _g1.length) {
			var slotName = _g1[_g];
			++_g;
			slotMap = slots[slotName];
			slotIndex = skeletonData.findSlotIndex(slotName);
			var _g2 = 0;
			var _g11 = Reflect.fields(slotMap);
			while(_g2 < _g11.length) {
				var timelineName = _g11[_g2];
				++_g2;
				values = slotMap[timelineName];
				if(timelineName == "attachment") {
					var attachmentTimeline = new spine_animation_AttachmentTimeline(values.length);
					attachmentTimeline.slotIndex = slotIndex;
					frameIndex = 0;
					var _g3 = 0;
					while(_g3 < values.length) {
						var valueMap = values[_g3];
						++_g3;
						attachmentTimeline.setFrame(frameIndex++,spine_PortUtils.getOr(valueMap,"time",0.0),valueMap["name"]);
					}
					timelines[timelines.length] = attachmentTimeline;
					duration = Math.max(duration,attachmentTimeline.frames[attachmentTimeline.get_frameCount() - 1]);
				} else if(timelineName == "color") {
					var colorTimeline = new spine_animation_ColorTimeline(values.length);
					colorTimeline.slotIndex = slotIndex;
					frameIndex = 0;
					var _g4 = 0;
					while(_g4 < values.length) {
						var valueMap1 = values[_g4];
						++_g4;
						var color = valueMap1["color"];
						var r = spine_SkeletonJson.toColor(color,0);
						var g = spine_SkeletonJson.toColor(color,1);
						var b = spine_SkeletonJson.toColor(color,2);
						var a = spine_SkeletonJson.toColor(color,3);
						colorTimeline.setFrame(frameIndex,spine_PortUtils.getOr(valueMap1,"time",0.0),r,g,b,a);
						spine_SkeletonJson.readCurve(valueMap1,colorTimeline,frameIndex);
						++frameIndex;
					}
					timelines[timelines.length] = colorTimeline;
					duration = Math.max(duration,colorTimeline.frames[(colorTimeline.get_frameCount() - 1) * 5]);
				} else if(timelineName == "twoColor") {
					var twoColorTimeline = new spine_animation_TwoColorTimeline(values.length);
					twoColorTimeline.slotIndex = slotIndex;
					frameIndex = 0;
					var _g5 = 0;
					while(_g5 < values.length) {
						var valueMap2 = values[_g5];
						++_g5;
						var color1 = valueMap2["light"];
						var darkColor = valueMap2["dark"];
						var light = new spine_Color(0,0,0,0);
						var dark = new spine_Color(0,0,0,0);
						light.setFrom(spine_SkeletonJson.toColor(color1,0),spine_SkeletonJson.toColor(color1,1),spine_SkeletonJson.toColor(color1,2),spine_SkeletonJson.toColor(color1,3));
						dark.setFrom(spine_SkeletonJson.toColor(darkColor,0),spine_SkeletonJson.toColor(darkColor,1),spine_SkeletonJson.toColor(darkColor,2),spine_SkeletonJson.toColor(darkColor,3));
						twoColorTimeline.setFrame(frameIndex,spine_PortUtils.getOr(valueMap2,"time",0.0),light.r,light.g,light.b,light.a,dark.r,dark.g,dark.b);
						spine_SkeletonJson.readCurve(valueMap2,twoColorTimeline,frameIndex);
						++frameIndex;
					}
					timelines[timelines.length] = twoColorTimeline;
					duration = Math.max(duration,twoColorTimeline.frames[(twoColorTimeline.get_frameCount() - 1) * 8]);
				} else {
					throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Invalid timeline type for a slot: " + timelineName + " (" + slotName + ")"));
				}
			}
		}
		var bones = map["bones"];
		var _g21 = 0;
		var _g31 = Reflect.fields(bones);
		while(_g21 < _g31.length) {
			var boneName = _g31[_g21];
			++_g21;
			var boneIndex = skeletonData.findBoneIndex(boneName);
			if(boneIndex == -1) {
				throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Bone not found: " + boneName));
			}
			var boneMap = bones[boneName];
			var _g22 = 0;
			var _g32 = Reflect.fields(boneMap);
			while(_g22 < _g32.length) {
				var timelineName1 = _g32[_g22];
				++_g22;
				values = boneMap[timelineName1];
				if(timelineName1 == "rotate") {
					var rotateTimeline = new spine_animation_RotateTimeline(values.length);
					rotateTimeline.boneIndex = boneIndex;
					frameIndex = 0;
					var _g23 = 0;
					while(_g23 < values.length) {
						var valueMap3 = values[_g23];
						++_g23;
						rotateTimeline.setFrame(frameIndex,spine_PortUtils.getOr(valueMap3,"time",0.0),spine_PortUtils.getOr(valueMap3,"angle",0.0));
						spine_SkeletonJson.readCurve(valueMap3,rotateTimeline,frameIndex);
						++frameIndex;
					}
					timelines[timelines.length] = rotateTimeline;
					duration = Math.max(duration,rotateTimeline.frames[(rotateTimeline.get_frameCount() - 1) * 2]);
				} else if(timelineName1 == "translate" || timelineName1 == "scale" || timelineName1 == "shear") {
					var translateTimeline;
					var timelineScale = 1;
					var defaultValue = 0;
					if(timelineName1 == "scale") {
						translateTimeline = new spine_animation_ScaleTimeline(values.length);
						defaultValue = 1;
					} else if(timelineName1 == "shear") {
						translateTimeline = new spine_animation_ShearTimeline(values.length);
					} else {
						translateTimeline = new spine_animation_TranslateTimeline(values.length);
						timelineScale = scale;
					}
					translateTimeline.boneIndex = boneIndex;
					frameIndex = 0;
					var _g24 = 0;
					while(_g24 < values.length) {
						var valueMap4 = values[_g24];
						++_g24;
						translateTimeline.setFrame(frameIndex,spine_PortUtils.getOr(valueMap4,"time",0.0),this.getFloatValue(valueMap4,"x",defaultValue) * timelineScale,this.getFloatValue(valueMap4,"y",defaultValue) * timelineScale);
						spine_SkeletonJson.readCurve(valueMap4,translateTimeline,frameIndex);
						++frameIndex;
					}
					timelines[timelines.length] = translateTimeline;
					duration = Math.max(duration,translateTimeline.frames[(translateTimeline.get_frameCount() - 1) * 3]);
				} else {
					throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Invalid timeline type for a bone: " + timelineName1 + " (" + boneName + ")"));
				}
			}
		}
		var ikMap = map["ik"];
		var _g41 = 0;
		var _g51 = Reflect.fields(ikMap);
		while(_g41 < _g51.length) {
			var ikConstraintName = _g51[_g41];
			++_g41;
			var ikConstraint = skeletonData.findIkConstraint(ikConstraintName);
			values = ikMap[ikConstraintName];
			var ikTimeline = new spine_animation_IkConstraintTimeline(values.length);
			ikTimeline.ikConstraintIndex = skeletonData.ikConstraints.indexOf(ikConstraint);
			frameIndex = 0;
			var _g42 = 0;
			while(_g42 < values.length) {
				var valueMap5 = values[_g42];
				++_g42;
				ikTimeline.setFrame(frameIndex,spine_PortUtils.getOr(valueMap5,"time",0.0),spine_PortUtils.getOr(valueMap5,"mix",1.0),spine_PortUtils.getOr(valueMap5,"softness",0.0) * scale,spine_PortUtils.getOr(valueMap5,"bendPositive",true) ? 1 : -1,spine_PortUtils.getOr(valueMap5,"compress",false),spine_PortUtils.getOr(valueMap5,"stretch",false));
				spine_SkeletonJson.readCurve(valueMap5,ikTimeline,frameIndex);
				++frameIndex;
			}
			timelines[timelines.length] = ikTimeline;
			duration = Math.max(duration,ikTimeline.frames[(ikTimeline.get_frameCount() - 1) * 6]);
		}
		var transformMap = map["transform"];
		var _g6 = 0;
		var _g7 = Reflect.fields(transformMap);
		while(_g6 < _g7.length) {
			var transformName = _g7[_g6];
			++_g6;
			var transformConstraint = skeletonData.findTransformConstraint(transformName);
			values = transformMap[transformName];
			var transformTimeline = new spine_animation_TransformConstraintTimeline(values.length);
			transformTimeline.transformConstraintIndex = skeletonData.transformConstraints.indexOf(transformConstraint);
			frameIndex = 0;
			var _g61 = 0;
			while(_g61 < values.length) {
				var valueMap6 = values[_g61];
				++_g61;
				transformTimeline.setFrame(frameIndex,spine_PortUtils.getOr(valueMap6,"time",0.0),spine_PortUtils.getOr(valueMap6,"rotateMix",1.0),spine_PortUtils.getOr(valueMap6,"translateMix",1.0),spine_PortUtils.getOr(valueMap6,"scaleMix",1.0),spine_PortUtils.getOr(valueMap6,"shearMix",1.0));
				spine_SkeletonJson.readCurve(valueMap6,transformTimeline,frameIndex);
				++frameIndex;
			}
			timelines.push(transformTimeline);
			duration = Math.max(duration,transformTimeline.frames[(transformTimeline.get_frameCount() - 1) * 5]);
		}
		var paths = map["path"];
		var _g8 = 0;
		var _g9 = Reflect.fields(paths);
		while(_g8 < _g9.length) {
			var pathName = _g9[_g8];
			++_g8;
			var index = skeletonData.findPathConstraintIndex(pathName);
			if(index == -1) {
				throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Path constraint not found: " + pathName));
			}
			var data = skeletonData.pathConstraints[index];
			var pathMap = paths[pathName];
			var _g81 = 0;
			var _g91 = Reflect.fields(pathMap);
			while(_g81 < _g91.length) {
				var timelineName2 = _g91[_g81];
				++_g81;
				values = pathMap[timelineName2];
				if(timelineName2 == "position" || timelineName2 == "spacing") {
					var pathTimeline;
					var timelineScale1 = 1.0;
					if(timelineName2 == "spacing") {
						pathTimeline = new spine_animation_PathConstraintSpacingTimeline(values.length);
						if(data.spacingMode == "length" || data.spacingMode == "fixed") {
							timelineScale1 = scale;
						}
					} else {
						pathTimeline = new spine_animation_PathConstraintPositionTimeline(values.length);
						if(data.positionMode == "fixed") {
							timelineScale1 = scale;
						}
					}
					pathTimeline.pathConstraintIndex = index;
					frameIndex = 0;
					var _g82 = 0;
					while(_g82 < values.length) {
						var valueMap7 = values[_g82];
						++_g82;
						pathTimeline.setFrame(frameIndex,spine_PortUtils.getOr(valueMap7,"time",0.0),spine_PortUtils.getOr(valueMap7,timelineName2,0.0) * timelineScale1);
						spine_SkeletonJson.readCurve(valueMap7,pathTimeline,frameIndex);
						++frameIndex;
					}
					timelines.push(pathTimeline);
					duration = Math.max(duration,pathTimeline.frames[(pathTimeline.get_frameCount() - 1) * 2]);
				} else if(timelineName2 == "mix") {
					var pathMixTimeline = new spine_animation_PathConstraintMixTimeline(values.length);
					pathMixTimeline.pathConstraintIndex = index;
					frameIndex = 0;
					var _g83 = 0;
					while(_g83 < values.length) {
						var valueMap8 = values[_g83];
						++_g83;
						pathMixTimeline.setFrame(frameIndex,spine_PortUtils.getOr(valueMap8,"time",0.0),spine_PortUtils.getOr(valueMap8,"rotateMix",1.0),spine_PortUtils.getOr(valueMap8,"translateMix",1.0));
						spine_SkeletonJson.readCurve(valueMap8,pathMixTimeline,frameIndex);
						++frameIndex;
					}
					timelines.push(pathMixTimeline);
					duration = Math.max(duration,pathMixTimeline.frames[(pathMixTimeline.get_frameCount() - 1) * 3]);
				}
			}
		}
		var deformMap = map["deform"];
		var _g10 = 0;
		var _g111 = Reflect.fields(deformMap);
		while(_g10 < _g111.length) {
			var skinName = _g111[_g10];
			++_g10;
			var skin = skeletonData.findSkin(skinName);
			slotMap = deformMap[skinName];
			var _g101 = 0;
			var _g112 = Reflect.fields(slotMap);
			while(_g101 < _g112.length) {
				var slotName1 = _g112[_g101];
				++_g101;
				slotIndex = skeletonData.findSlotIndex(slotName1);
				var timelineMap = slotMap[slotName1];
				var _g102 = 0;
				var _g113 = Reflect.fields(timelineMap);
				while(_g102 < _g113.length) {
					var timelineName3 = _g113[_g102];
					++_g102;
					values = timelineMap[timelineName3];
					var attachment;
					try {
						attachment = js_Boot.__cast(skin.getAttachment(slotIndex,timelineName3) , spine_attachments_VertexAttachment);
					} catch( e ) {
						haxe_CallStack.lastException = e;
						attachment = null;
					}
					if(attachment == null) {
						throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Deform attachment not found: " + timelineName3));
					}
					var weighted = attachment.bones != null;
					var vertices = attachment.vertices;
					var deformLength = weighted ? vertices.length / 3 * 2 | 0 : vertices.length;
					var deformTimeline = new spine_animation_DeformTimeline(values.length);
					deformTimeline.slotIndex = slotIndex;
					deformTimeline.attachment = attachment;
					frameIndex = 0;
					var _g103 = 0;
					while(_g103 < values.length) {
						var valueMap9 = values[_g103];
						++_g103;
						var deform;
						if(valueMap9["vertices"] == null) {
							deform = weighted ? [] : vertices;
						} else {
							deform = spine_PortUtils.create(deformLength,0.0);
							var start = spine_PortUtils.getOr(valueMap9,"offset",0);
							var temp = spine_SkeletonJson.getFloatArray(valueMap9,"vertices",1);
							var _g104 = 0;
							var _g114 = temp.length;
							while(_g104 < _g114) {
								var i1 = _g104++;
								deform[start + i1] = temp[i1];
							}
							if(scale != 1) {
								var _g12 = start;
								var _g13 = start + temp.length;
								while(_g12 < _g13) deform[_g12++] *= scale;
							}
							if(!weighted) {
								var _g121 = 0;
								var _g131 = deformLength;
								while(_g121 < _g131) {
									var i2 = _g121++;
									deform[i2] += vertices[i2];
								}
							}
						}
						deformTimeline.setFrame(frameIndex,spine_PortUtils.getOr(valueMap9,"time",0.0),deform);
						spine_SkeletonJson.readCurve(valueMap9,deformTimeline,frameIndex);
						++frameIndex;
					}
					timelines[timelines.length] = deformTimeline;
					duration = Math.max(duration,deformTimeline.frames[deformTimeline.get_frameCount() - 1]);
				}
			}
		}
		var drawOrderValues = map["drawOrder"];
		if(drawOrderValues == null) {
			drawOrderValues = map["draworder"];
		}
		if(drawOrderValues != null) {
			var drawOrderTimeline = new spine_animation_DrawOrderTimeline(drawOrderValues.length);
			var slotCount = skeletonData.slots.length;
			frameIndex = 0;
			var _g122 = 0;
			while(_g122 < drawOrderValues.length) {
				var drawOrderMap = drawOrderValues[_g122];
				++_g122;
				var drawOrder = null;
				if(drawOrderMap["offsets"] != null) {
					drawOrder = [];
					i = slotCount - 1;
					while(i >= 0) {
						drawOrder[i] = -1;
						--i;
					}
					var offsets = drawOrderMap["offsets"];
					var unchanged = [];
					var originalIndex = 0;
					var unchangedIndex = 0;
					var _g123 = 0;
					while(_g123 < offsets.length) {
						var offsetMap = offsets[_g123];
						++_g123;
						slotIndex = skeletonData.findSlotIndex(offsetMap["slot"]);
						if(slotIndex == -1) {
							throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Slot not found: " + Std.string(offsetMap["slot"])));
						}
						while(originalIndex != slotIndex) unchanged[unchangedIndex++] = originalIndex++;
						drawOrder[originalIndex++ + offsetMap["offset"]] = originalIndex - 1;
					}
					while(originalIndex < slotCount) unchanged[unchangedIndex++] = originalIndex++;
					i = slotCount - 1;
					while(i >= 0) {
						if(drawOrder[i] == -1) {
							drawOrder[i] = unchanged[--unchangedIndex];
						}
						--i;
					}
				}
				drawOrderTimeline.setFrame(frameIndex++,spine_PortUtils.getOr(drawOrderMap,"time",0.0),drawOrder);
			}
			timelines[timelines.length] = drawOrderTimeline;
			duration = Math.max(duration,drawOrderTimeline.frames[drawOrderTimeline.get_frameCount() - 1]);
		}
		var eventsMap = map["events"];
		if(eventsMap != null) {
			var eventTimeline = new spine_animation_EventTimeline(eventsMap.length);
			frameIndex = 0;
			var _g124 = 0;
			while(_g124 < eventsMap.length) {
				var eventMap = eventsMap[_g124];
				++_g124;
				var eventData = skeletonData.findEvent(eventMap["name"]);
				if(eventData == null) {
					throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Event not found: " + Std.string(eventMap["name"])));
				}
				var event = new spine_Event(spine_PortUtils.getOr(eventMap,"time",0.0),eventData);
				event.intValue = spine_PortUtils.getOr(eventMap,"int",eventData.intValue);
				event.floatValue = spine_PortUtils.getOr(eventMap,"float",eventData.floatValue);
				event.stringValue = spine_PortUtils.getOr(eventMap,"string",eventData.stringValue);
				if(eventData.audioPath != null) {
					event.volume = spine_PortUtils.getOr(eventMap,"volume",1.0);
					event.balance = spine_PortUtils.getOr(eventMap,"balance",0.0);
				}
				eventTimeline.setFrame(frameIndex++,event);
			}
			timelines[timelines.length] = eventTimeline;
			duration = Math.max(duration,eventTimeline.frames[eventTimeline.get_frameCount() - 1]);
		}
		skeletonData.animations[skeletonData.animations.length] = new spine_animation_Animation(name,timelines,duration);
	}
	,__class__: spine_SkeletonJson
};
var spine_LinkedMesh = function(mesh,skin,slotIndex,parent,inheritDeform) {
	this.mesh = mesh;
	this.skin = skin;
	this.slotIndex = slotIndex;
	this.parent = parent;
	this.inheritDeform = inheritDeform;
};
$hxClasses["spine.LinkedMesh"] = spine_LinkedMesh;
spine_LinkedMesh.__name__ = "spine.LinkedMesh";
spine_LinkedMesh.prototype = {
	parent: null
	,slotIndex: null
	,mesh: null
	,inheritDeform: null
	,skin: null
	,__class__: spine_LinkedMesh
};
var spine_Skin = function(name) {
	this._constraints = [];
	this._bones = [];
	this._attachments = [];
	if(name == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("name cannot be null."));
	}
	this._name = name;
};
$hxClasses["spine.Skin"] = spine_Skin;
spine_Skin.__name__ = "spine.Skin";
spine_Skin.prototype = {
	_name: null
	,_attachments: null
	,_bones: null
	,_constraints: null
	,setAttachment: function(slotIndex,name,attachment) {
		if(attachment == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("attachment cannot be null."));
		}
		if(slotIndex >= this._attachments.length) {
			this._attachments.length = slotIndex + 1;
		}
		if(this._attachments[slotIndex] == null) {
			this._attachments[slotIndex] = new haxe_ds_StringMap();
		}
		var _this = this._attachments[slotIndex];
		if(__map_reserved[name] != null) {
			_this.setReserved(name,attachment);
		} else {
			_this.h[name] = attachment;
		}
	}
	,addSkin: function(skin) {
		var i = 0;
		var j = 0;
		var contained = false;
		i = 0;
		while(i < skin._bones.length) {
			var bone = skin._bones[i];
			contained = false;
			j = 0;
			while(j < this._bones.length) {
				if(this._bones[j] == bone) {
					contained = true;
					break;
				}
				++j;
			}
			if(!contained) {
				this._bones.push(bone);
			}
			++i;
		}
		i = 0;
		while(i < skin._constraints.length) {
			var constraint = skin._constraints[i];
			contained = false;
			j = 0;
			while(j < this._constraints.length) {
				if(this._constraints[j] == constraint) {
					contained = true;
					break;
				}
				++j;
			}
			if(!contained) {
				this._constraints.push(constraint);
			}
			++i;
		}
		var _g = 0;
		var _g1 = skin.getAttachments();
		while(_g < _g1.length) {
			var attachment = _g1[_g];
			++_g;
			this.setAttachment(attachment.slotIndex,attachment.name,attachment.attachment);
		}
	}
	,copySkin: function(skin) {
		var i = 0;
		var j = 0;
		var contained = false;
		i = 0;
		while(i < skin._bones.length) {
			var bone = skin._bones[i];
			contained = false;
			j = 0;
			while(j < this._bones.length) {
				if(this._bones[j] == bone) {
					contained = true;
					break;
				}
				++j;
			}
			if(!contained) {
				this._bones.push(bone);
			}
			++i;
		}
		i = 0;
		while(i < skin._constraints.length) {
			var constraint = skin._constraints[i];
			contained = false;
			j = 0;
			while(j < this._constraints.length) {
				if(this._constraints[j] == constraint) {
					contained = true;
					break;
				}
				++j;
			}
			if(!contained) {
				this._constraints.push(constraint);
			}
			++i;
		}
		var _g = 0;
		var _g1 = skin.getAttachments();
		while(_g < _g1.length) {
			var attachment = _g1[_g];
			++_g;
			if(attachment.attachment == null) {
				continue;
			}
			if(((attachment.attachment) instanceof spine_attachments_MeshAttachment)) {
				attachment.attachment = (js_Boot.__cast(attachment.attachment , spine_attachments_MeshAttachment)).newLinkedMesh();
				this.setAttachment(attachment.slotIndex,attachment.name,attachment.attachment);
			} else {
				attachment.attachment = attachment.attachment.copy();
				this.setAttachment(attachment.slotIndex,attachment.name,attachment.attachment);
			}
		}
	}
	,getAttachment: function(slotIndex,name) {
		if(slotIndex >= this._attachments.length) {
			return null;
		}
		var dictionary = this._attachments[slotIndex];
		if(dictionary != null) {
			return __map_reserved[name] != null ? dictionary.getReserved(name) : dictionary.h[name];
		} else {
			return null;
		}
	}
	,removeAttachment: function(slotIndex,name) {
		var dictionary = this._attachments[slotIndex];
		if(dictionary != null) {
			var v = null;
			if(__map_reserved[name] != null) {
				dictionary.setReserved(name,v);
			} else {
				dictionary.h[name] = v;
			}
		}
	}
	,getAttachments: function() {
		var entries = [];
		var slotIndex = 0;
		while(slotIndex < this._attachments.length) {
			var attachments = this._attachments[slotIndex];
			if(attachments != null) {
				var name = attachments.keys();
				while(name.hasNext()) {
					var name1 = name.next();
					var attachment = __map_reserved[name1] != null ? attachments.getReserved(name1) : attachments.h[name1];
					if(attachment != null) {
						entries.push(new spine_SkinEntry(slotIndex,name1,attachment));
					}
				}
			}
			++slotIndex;
		}
		return entries;
	}
	,getAttachmentsForSlot: function(slotIndex) {
		var entries = [];
		var attachments = this._attachments[slotIndex];
		if(attachments != null) {
			var name = attachments.keys();
			while(name.hasNext()) {
				var name1 = name.next();
				var attachment = __map_reserved[name1] != null ? attachments.getReserved(name1) : attachments.h[name1];
				if(attachment != null) {
					entries.push(new spine_SkinEntry(slotIndex,name1,attachment));
				}
			}
		}
		return entries;
	}
	,clear: function() {
		this._attachments.length = 0;
		this._bones.length = 0;
		this._constraints.length = 0;
	}
	,get_attachments: function() {
		return this._attachments;
	}
	,get_bones: function() {
		return this._bones;
	}
	,get_constraints: function() {
		return this._constraints;
	}
	,get_name: function() {
		return this._name;
	}
	,toString: function() {
		return this._name;
	}
	,attachAll: function(skeleton,oldSkin) {
		var slotIndex = 0;
		var _g = 0;
		var _g1 = skeleton.slots;
		while(_g < _g1.length) {
			var slot = _g1[_g];
			++_g;
			var slotAttachment = slot.get_attachment();
			if(slotAttachment != null && slotIndex < oldSkin._attachments.length) {
				var dictionary = oldSkin._attachments[slotIndex];
				var name = dictionary.keys();
				while(name.hasNext()) {
					var name1 = name.next();
					if(slotAttachment == (__map_reserved[name1] != null ? dictionary.getReserved(name1) : dictionary.h[name1])) {
						var attachment = this.getAttachment(slotIndex,name1);
						if(attachment != null) {
							slot.set_attachment(attachment);
						}
						break;
					}
				}
			}
			++slotIndex;
		}
	}
	,__class__: spine_Skin
	,__properties__: {get_name:"get_name",get_constraints:"get_constraints",get_bones:"get_bones",get_attachments:"get_attachments"}
};
var spine_SkinEntry = function(slotIndex,name,attachment) {
	this.slotIndex = slotIndex;
	this.name = name;
	this.attachment = attachment;
};
$hxClasses["spine.SkinEntry"] = spine_SkinEntry;
spine_SkinEntry.__name__ = "spine.SkinEntry";
spine_SkinEntry.prototype = {
	slotIndex: null
	,name: null
	,attachment: null
	,__class__: spine_SkinEntry
};
var spine_Slot = function(data,bone) {
	this.deform = [];
	if(data == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("data cannot be null."));
	}
	if(bone == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("bone cannot be null."));
	}
	this._data = data;
	this._bone = bone;
	this.color = new spine_Color(1,1,1,1);
	this.darkColor = data.darkColor == null ? null : new spine_Color(1,1,1,1);
	this.setToSetupPose();
};
$hxClasses["spine.Slot"] = spine_Slot;
spine_Slot.__name__ = "spine.Slot";
spine_Slot.prototype = {
	color: null
	,darkColor: null
	,deform: null
	,_attachment: null
	,_data: null
	,_bone: null
	,_attachmentTime: null
	,_attachmentState: null
	,get_data: function() {
		return this._data;
	}
	,get_bone: function() {
		return this._bone;
	}
	,get_skeleton: function() {
		return this._bone._skeleton;
	}
	,get_attachment: function() {
		return this._attachment;
	}
	,set_attachment: function(attachment) {
		if(this._attachment == attachment) {
			return attachment;
		}
		this._attachment = attachment;
		this._attachmentTime = this._bone._skeleton.time;
		this.deform.length = 0;
		return attachment;
	}
	,set_attachmentTime: function(time) {
		this._attachmentTime = this._bone._skeleton.time - time;
		return time;
	}
	,get_attachmentTime: function() {
		return this._bone._skeleton.time - this._attachmentTime;
	}
	,get_attachmentState: function() {
		return this._attachmentState;
	}
	,set_attachmentState: function(state) {
		return this._attachmentState = state;
	}
	,setToSetupPose: function() {
		this.color.setFromColor(this.get_data().color);
		if(this.darkColor != null) {
			this.darkColor.setFromColor(this.get_data().darkColor);
		}
		if(this._data.attachmentName == null) {
			this.set_attachment(null);
		} else {
			this._attachment = null;
			this.set_attachment(this._bone._skeleton.getAttachmentForSlotIndex(this.get_data().get_index(),this.get_data().attachmentName));
		}
	}
	,toString: function() {
		return this._data.get_name();
	}
	,__class__: spine_Slot
	,__properties__: {set_attachmentState:"set_attachmentState",get_attachmentState:"get_attachmentState",set_attachmentTime:"set_attachmentTime",get_attachmentTime:"get_attachmentTime",set_attachment:"set_attachment",get_attachment:"get_attachment",get_skeleton:"get_skeleton",get_bone:"get_bone",get_data:"get_data"}
};
var spine_SlotData = function(index,name,boneData) {
	this.color = new spine_Color(1,1,1,1);
	if(index < 0) {
		throw new js__$Boot_HaxeError("index must be >= 0.");
	}
	if(name == null) {
		throw new js__$Boot_HaxeError("name cannot be null.");
	}
	if(boneData == null) {
		throw new js__$Boot_HaxeError("boneData cannot be null.");
	}
	this._index = index;
	this._name = name;
	this._boneData = boneData;
};
$hxClasses["spine.SlotData"] = spine_SlotData;
spine_SlotData.__name__ = "spine.SlotData";
spine_SlotData.prototype = {
	color: null
	,darkColor: null
	,attachmentName: null
	,blendMode: null
	,_index: null
	,_name: null
	,_boneData: null
	,get_index: function() {
		return this._index;
	}
	,get_name: function() {
		return this._name;
	}
	,get_boneData: function() {
		return this._boneData;
	}
	,toString: function() {
		return this._name;
	}
	,__class__: spine_SlotData
	,__properties__: {get_boneData:"get_boneData",get_name:"get_name",get_index:"get_index"}
};
var spine_TransformConstraint = function(data,skeleton) {
	this._temp = [];
	if(data == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("data cannot be null."));
	}
	if(skeleton == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("skeleton cannot be null."));
	}
	this._data = data;
	this.rotateMix = data.rotateMix;
	this.translateMix = data.translateMix;
	this.scaleMix = data.scaleMix;
	this.shearMix = data.shearMix;
	this._bones = [];
	var _g = 0;
	var _g1 = data.get_bones();
	while(_g < _g1.length) this._bones.push(skeleton.findBone(_g1[_g++].get_name()));
	this.target = skeleton.findBone(data.target._name);
};
$hxClasses["spine.TransformConstraint"] = spine_TransformConstraint;
spine_TransformConstraint.__name__ = "spine.TransformConstraint";
spine_TransformConstraint.__interfaces__ = [spine_Updatable];
spine_TransformConstraint.prototype = {
	_data: null
	,_bones: null
	,target: null
	,rotateMix: null
	,translateMix: null
	,scaleMix: null
	,shearMix: null
	,_temp: null
	,active: null
	,isActive: function() {
		return this.active;
	}
	,apply: function() {
		this.update();
	}
	,update: function() {
		if(this.get_data().local) {
			if(this.get_data().relative) {
				this.applyRelativeLocal();
			} else {
				this.applyAbsoluteLocal();
			}
		} else if(this.get_data().relative) {
			this.applyRelativeWorld();
		} else {
			this.applyAbsoluteWorld();
		}
	}
	,applyAbsoluteWorld: function() {
		var rotateMix = this.rotateMix;
		var translateMix = this.translateMix;
		var scaleMix = this.scaleMix;
		var shearMix = this.shearMix;
		var target = this.target;
		var ta = target.a;
		var tb = target.b;
		var tc = target.c;
		var td = target.d;
		var degRadReflect = ta * td - tb * tc > 0 ? spine_MathUtils.degRad : -spine_MathUtils.degRad;
		var offsetRotation = this.get_data().offsetRotation * degRadReflect;
		var offsetShearY = this.get_data().offsetShearY * degRadReflect;
		var bones = this._bones;
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			var modified = false;
			if(rotateMix != 0) {
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var r = Math.atan2(tc,ta) - Math.atan2(c,a) + offsetRotation;
				if(r > Math.PI) {
					r -= Math.PI * 2;
				} else if(r < -Math.PI) {
					r += Math.PI * 2;
				}
				r *= rotateMix;
				var cos = Math.cos(r);
				var sin = Math.sin(r);
				bone.a = cos * a - sin * c;
				bone.b = cos * b - sin * d;
				bone.c = sin * a + cos * c;
				bone.d = sin * b + cos * d;
				modified = true;
			}
			if(translateMix != 0) {
				this._temp[0] = this.get_data().offsetX;
				this._temp[1] = this.get_data().offsetY;
				target.localToWorld(this._temp);
				bone.worldX += (this._temp[0] - bone.worldX) * translateMix;
				bone.worldY += (this._temp[1] - bone.worldY) * translateMix;
				modified = true;
			}
			if(scaleMix > 0) {
				var s = Math.sqrt(bone.a * bone.a + bone.c * bone.c);
				var ts = Math.sqrt(ta * ta + tc * tc);
				if(s > 0.00001) {
					s = (s + (ts - s + this.get_data().offsetScaleX) * scaleMix) / s;
				}
				bone.a *= s;
				bone.c *= s;
				s = Math.sqrt(bone.b * bone.b + bone.d * bone.d);
				ts = Math.sqrt(tb * tb + td * td);
				if(s > 0.00001) {
					s = (s + (ts - s + this.get_data().offsetScaleY) * scaleMix) / s;
				}
				bone.b *= s;
				bone.d *= s;
				modified = true;
			}
			if(shearMix > 0) {
				var b1 = bone.b;
				var d1 = bone.d;
				var by = Math.atan2(d1,b1);
				var r1 = Math.atan2(td,tb) - Math.atan2(tc,ta) - (by - Math.atan2(bone.c,bone.a));
				if(r1 > Math.PI) {
					r1 -= Math.PI * 2;
				} else if(r1 < -Math.PI) {
					r1 += Math.PI * 2;
				}
				r1 = by + (r1 + offsetShearY) * shearMix;
				var s1 = Math.sqrt(b1 * b1 + d1 * d1);
				bone.b = Math.cos(r1) * s1;
				bone.d = Math.sin(r1) * s1;
				modified = true;
			}
			if(modified) {
				bone.appliedValid = false;
			}
			++i;
		}
	}
	,applyRelativeWorld: function() {
		var rotateMix = this.rotateMix;
		var translateMix = this.translateMix;
		var scaleMix = this.scaleMix;
		var shearMix = this.shearMix;
		var target = this.target;
		var ta = target.a;
		var tb = target.b;
		var tc = target.c;
		var td = target.d;
		var degRadReflect = ta * td - tb * tc > 0 ? spine_MathUtils.degRad : -spine_MathUtils.degRad;
		var offsetRotation = this.get_data().offsetRotation * degRadReflect;
		var offsetShearY = this.get_data().offsetShearY * degRadReflect;
		var bones = this.get_bones();
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			var modified = false;
			if(rotateMix != 0) {
				var a = bone.a;
				var b = bone.b;
				var c = bone.c;
				var d = bone.d;
				var r = Math.atan2(tc,ta) + offsetRotation;
				if(r > spine_MathUtils.PI) {
					r -= spine_MathUtils.PI2;
				} else if(r < -spine_MathUtils.PI) {
					r += spine_MathUtils.PI2;
				}
				r *= rotateMix;
				var cos = Math.cos(r);
				var sin = Math.sin(r);
				bone.a = cos * a - sin * c;
				bone.b = cos * b - sin * d;
				bone.c = sin * a + cos * c;
				bone.d = sin * b + cos * d;
				modified = true;
			}
			if(translateMix != 0) {
				var temp = this._temp;
				temp[0] = this._data.offsetX;
				temp[1] = this._data.offsetY;
				target.localToWorld(temp);
				bone.worldX += temp[0] * translateMix;
				bone.worldY += temp[1] * translateMix;
				modified = true;
			}
			if(scaleMix > 0) {
				var s = (Math.sqrt(ta * ta + tc * tc) - 1 + this.get_data().offsetScaleX) * scaleMix + 1;
				bone.a *= s;
				bone.c *= s;
				s = (Math.sqrt(tb * tb + td * td) - 1 + this.get_data().offsetScaleY) * scaleMix + 1;
				bone.b *= s;
				bone.d *= s;
				modified = true;
			}
			if(shearMix > 0) {
				var r1 = Math.atan2(td,tb) - Math.atan2(tc,ta);
				if(r1 > spine_MathUtils.PI) {
					r1 -= spine_MathUtils.PI2;
				} else if(r1 < -spine_MathUtils.PI) {
					r1 += spine_MathUtils.PI2;
				}
				var b1 = bone.b;
				var d1 = bone.d;
				var r2 = Math.atan2(d1,b1) + (r1 - spine_MathUtils.PI / 2 + offsetShearY) * shearMix;
				var s1 = Math.sqrt(b1 * b1 + d1 * d1);
				bone.b = Math.cos(r2) * s1;
				bone.d = Math.sin(r2) * s1;
				modified = true;
			}
			if(modified) {
				bone.appliedValid = false;
			}
			++i;
		}
	}
	,applyAbsoluteLocal: function() {
		var rotateMix = this.rotateMix;
		var translateMix = this.translateMix;
		var scaleMix = this.scaleMix;
		var shearMix = this.shearMix;
		var target = this.target;
		if(!target.appliedValid) {
			target.updateAppliedTransform();
		}
		var bones = this.get_bones();
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			if(!bone.appliedValid) {
				bone.updateAppliedTransform();
			}
			var rotation = bone.arotation;
			if(rotateMix != 0) {
				var r = target.arotation - rotation + this.get_data().offsetRotation;
				r -= (16384 - (16384.499999999996 - r / 360 | 0 | 0)) * 360;
				rotation += r * rotateMix;
			}
			var x = bone.ax;
			var y = bone.ay;
			if(translateMix != 0) {
				x += (target.ax - x + this.get_data().offsetX) * translateMix;
				y += (target.ay - y + this.get_data().offsetY) * translateMix;
			}
			var scaleX = bone.ascaleX;
			var scaleY = bone.ascaleY;
			if(scaleMix != 0) {
				if(scaleX > 0.00001) {
					scaleX = (scaleX + (target.ascaleX - scaleX + this.get_data().offsetScaleX) * scaleMix) / scaleX;
				}
				if(scaleY > 0.00001) {
					scaleY = (scaleY + (target.ascaleY - scaleY + this.get_data().offsetScaleY) * scaleMix) / scaleY;
				}
			}
			var shearY = bone.ashearY;
			if(shearMix != 0) {
				var r1 = target.ashearY - shearY + this.get_data().offsetShearY;
				r1 -= (16384 - (16384.499999999996 - r1 / 360 | 0 | 0)) * 360;
				bone.shearY += r1 * shearMix;
			}
			bone.updateWorldTransformWith(x,y,rotation,scaleX,scaleY,bone.ashearX,shearY);
			++i;
		}
	}
	,applyRelativeLocal: function() {
		var rotateMix = this.rotateMix;
		var translateMix = this.translateMix;
		var scaleMix = this.scaleMix;
		var shearMix = this.shearMix;
		var target = this.target;
		if(!target.appliedValid) {
			target.updateAppliedTransform();
		}
		var bones = this.get_bones();
		var i = 0;
		var n = bones.length;
		while(i < n) {
			var bone = bones[i];
			if(!bone.appliedValid) {
				bone.updateAppliedTransform();
			}
			var rotation = bone.arotation;
			if(rotateMix != 0) {
				rotation += (target.arotation + this.get_data().offsetRotation) * rotateMix;
			}
			var x = bone.ax;
			var y = bone.ay;
			if(translateMix != 0) {
				x += (target.ax + this.get_data().offsetX) * translateMix;
				y += (target.ay + this.get_data().offsetY) * translateMix;
			}
			var scaleX = bone.ascaleX;
			var scaleY = bone.ascaleY;
			if(scaleMix != 0) {
				if(scaleX > 0.00001) {
					scaleX *= (target.ascaleX - 1 + this.get_data().offsetScaleX) * scaleMix + 1;
				}
				if(scaleY > 0.00001) {
					scaleY *= (target.ascaleY - 1 + this.get_data().offsetScaleY) * scaleMix + 1;
				}
			}
			var shearY = bone.ashearY;
			if(shearMix != 0) {
				shearY += (target.ashearY + this.get_data().offsetShearY) * shearMix;
			}
			bone.updateWorldTransformWith(x,y,rotation,scaleX,scaleY,bone.ashearX,shearY);
			++i;
		}
	}
	,get_data: function() {
		return this._data;
	}
	,get_bones: function() {
		return this._bones;
	}
	,toString: function() {
		return this._data.name;
	}
	,__class__: spine_TransformConstraint
	,__properties__: {get_bones:"get_bones",get_data:"get_data"}
};
var spine_TransformConstraintData = function(name) {
	this.local = false;
	this.relative = false;
	this._bones = [];
	spine_ConstraintData.call(this,name,0,false);
};
$hxClasses["spine.TransformConstraintData"] = spine_TransformConstraintData;
spine_TransformConstraintData.__name__ = "spine.TransformConstraintData";
spine_TransformConstraintData.__super__ = spine_ConstraintData;
spine_TransformConstraintData.prototype = $extend(spine_ConstraintData.prototype,{
	_bones: null
	,target: null
	,rotateMix: null
	,translateMix: null
	,scaleMix: null
	,shearMix: null
	,offsetRotation: null
	,offsetX: null
	,offsetY: null
	,offsetScaleX: null
	,offsetScaleY: null
	,offsetShearY: null
	,relative: null
	,local: null
	,get_bones: function() {
		return this._bones;
	}
	,__class__: spine_TransformConstraintData
	,__properties__: {get_bones:"get_bones"}
});
var spine_animation_Animation = function(name,timelines,duration) {
	this._timelineIds = new haxe_ds_IntMap();
	if(name == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("name cannot be null."));
	}
	if(timelines == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("timelines cannot be null."));
	}
	this._name = name;
	this._timelines = timelines;
	var i = 0;
	while(i < timelines.length) {
		var this1 = this._timelineIds;
		var k = timelines[i].getPropertyId();
		this1.h[k] = true;
		++i;
	}
	this.duration = duration;
};
$hxClasses["spine.animation.Animation"] = spine_animation_Animation;
spine_animation_Animation.__name__ = "spine.animation.Animation";
spine_animation_Animation.binarySearch = function(values,target,step) {
	var low = 0;
	var high = values.length / step - 2 | 0;
	if(high == 0) {
		return step;
	}
	var current = high >>> 1;
	while(true) {
		if(values[(current + 1) * step] <= target) {
			low = current + 1;
		} else {
			high = current;
		}
		if(low == high) {
			return (low + 1) * step;
		}
		current = low + high >>> 1;
	}
};
spine_animation_Animation.binarySearch1 = function(values,target) {
	var low = 0;
	var high = values.length - 2;
	if(high == 0) {
		return 1;
	}
	var current = high >>> 1;
	while(true) {
		if(values[current + 1] <= target) {
			low = current + 1;
		} else {
			high = current;
		}
		if(low == high) {
			return low + 1;
		}
		current = low + high >>> 1;
	}
};
spine_animation_Animation.linearSearch = function(values,target,step) {
	var i = 0;
	var last = values.length - step;
	while(i <= last) {
		if(values[i] > target) {
			return i;
		}
		i += step;
	}
	return -1;
};
spine_animation_Animation.prototype = {
	duration: null
	,_timelines: null
	,_name: null
	,_timelineIds: null
	,hasTimeline: function(id) {
		return this._timelineIds.h[id] == true;
	}
	,get_timelines: function() {
		return this._timelines;
	}
	,apply: function(skeleton,lastTime,time,loop,events,alpha,blend,direction) {
		if(skeleton == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("skeleton cannot be null."));
		}
		if(loop && this.duration != 0) {
			time %= this.duration;
			if(lastTime > 0) {
				lastTime %= this.duration;
			}
		}
		var i = 0;
		var n = this.get_timelines().length;
		while(i < n) {
			this.get_timelines()[i].apply(skeleton,lastTime,time,events,alpha,blend,direction);
			++i;
		}
	}
	,get_name: function() {
		return this._name;
	}
	,toString: function() {
		return this._name;
	}
	,__class__: spine_animation_Animation
	,__properties__: {get_name:"get_name",get_timelines:"get_timelines"}
};
var spine_flash_errors_ArgumentError = function(message) {
	this.message = message;
};
$hxClasses["spine.flash.errors.ArgumentError"] = spine_flash_errors_ArgumentError;
spine_flash_errors_ArgumentError.__name__ = "spine.flash.errors.ArgumentError";
spine_flash_errors_ArgumentError.prototype = {
	message: null
	,__class__: spine_flash_errors_ArgumentError
};
var spine_animation_AnimationState = function(data) {
	this.unkeyedState = 0;
	this.mixingTo = [];
	this.propertyIDs = new haxe_ds_StringMap();
	this.events = [];
	this.timeScale = 1.0;
	this.onEvent = new spine_animation_Listeners();
	this.onComplete = new spine_animation_Listeners();
	this.onDispose = new spine_animation_Listeners();
	this.onEnd = new spine_animation_Listeners();
	this.onInterrupt = new spine_animation_Listeners();
	this.onStart = new spine_animation_Listeners();
	this.tracks = [];
	if(data == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("data can not be null"));
	}
	this.data = data;
	this.queue = new spine_animation_EventQueue(this);
	this.trackEntryPool = new spine_Pool(function() {
		return new spine_animation_TrackEntry();
	});
};
$hxClasses["spine.animation.AnimationState"] = spine_animation_AnimationState;
spine_animation_AnimationState.__name__ = "spine.animation.AnimationState";
spine_animation_AnimationState.prototype = {
	data: null
	,tracks: null
	,onStart: null
	,onInterrupt: null
	,onEnd: null
	,onDispose: null
	,onComplete: null
	,onEvent: null
	,timeScale: null
	,events: null
	,queue: null
	,propertyIDs: null
	,mixingTo: null
	,animationsChanged: null
	,trackEntryPool: null
	,unkeyedState: null
	,update: function(delta) {
		delta *= this.timeScale;
		var _g = 0;
		var _g1 = this.tracks.length;
		while(_g < _g1) {
			var i = _g++;
			var current = this.tracks[i];
			if(current == null) {
				continue;
			}
			current.animationLast = current.nextAnimationLast;
			current.trackLast = current.nextTrackLast;
			var currentDelta = delta * current.timeScale;
			if(current.delay > 0) {
				current.delay -= currentDelta;
				if(current.delay > 0) {
					continue;
				}
				currentDelta = -current.delay;
				current.delay = 0;
			}
			var next = current.next;
			if(next != null) {
				var nextTime = current.trackLast - next.delay;
				if(nextTime >= 0) {
					next.delay = 0;
					next.trackTime += current.timeScale == 0 ? 0 : (nextTime / current.timeScale + delta) * next.timeScale;
					current.trackTime += currentDelta;
					this.setCurrent(i,next,true);
					while(next.mixingFrom != null) {
						next.mixTime += delta;
						next = next.mixingFrom;
					}
					continue;
				}
			} else if(current.trackLast >= current.trackEnd && current.mixingFrom == null) {
				this.tracks[i] = null;
				this.queue.end(current);
				this.disposeNext(current);
				continue;
			}
			if(current.mixingFrom != null && this.updateMixingFrom(current,delta)) {
				var from = current.mixingFrom;
				current.mixingFrom = null;
				if(from != null) {
					from.mixingTo = null;
				}
				while(from != null) {
					this.queue.end(from);
					from = from.mixingFrom;
				}
			}
			current.trackTime += currentDelta;
		}
		this.queue.drain();
	}
	,updateMixingFrom: function(to,delta) {
		var from = to.mixingFrom;
		if(from == null) {
			return true;
		}
		var finished = this.updateMixingFrom(from,delta);
		from.animationLast = from.nextAnimationLast;
		from.trackLast = from.nextTrackLast;
		if(to.mixTime > 0 && to.mixTime >= to.mixDuration) {
			if(from.totalAlpha == 0 || to.mixDuration == 0) {
				to.mixingFrom = from.mixingFrom;
				if(from.mixingFrom != null) {
					from.mixingFrom.mixingTo = to;
				}
				to.interruptAlpha = from.interruptAlpha;
				this.queue.end(from);
			}
			return finished;
		}
		from.trackTime += delta * from.timeScale;
		to.mixTime += delta;
		return false;
	}
	,apply: function(skeleton) {
		if(skeleton == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("skeleton cannot be null."));
		}
		if(this.animationsChanged) {
			this._animationsChanged();
		}
		var events = this.events;
		var applied = false;
		var _g = 0;
		var _g1 = this.tracks.length;
		while(_g < _g1) {
			var i = _g++;
			var current = this.tracks[i];
			if(current == null || current.delay > 0) {
				continue;
			}
			applied = true;
			var blend = i == 0 ? 1 : current.mixBlend;
			var mix = current.alpha;
			if(current.mixingFrom != null) {
				mix *= this.applyMixingFrom(current,skeleton,blend);
			} else if(current.trackTime >= current.trackEnd && current.next == null) {
				mix = 0;
			}
			var animationLast = current.animationLast;
			var animationTime = current.getAnimationTime();
			var timelineCount = current.animation.get_timelines().length;
			var timelines = current.animation.get_timelines();
			if(i == 0 && mix == 1 || blend == 3) {
				var _g2 = 0;
				while(_g2 < timelineCount) {
					var timeline = timelines[_g2++];
					if(((timeline) instanceof spine_animation_AttachmentTimeline)) {
						this.applyAttachmentTimeline(timeline,skeleton,animationTime,blend,true);
					} else {
						timeline.apply(skeleton,animationLast,animationTime,events,mix,blend,spine_animation_MixDirection.In);
					}
				}
			} else {
				var timelineMode = current.timelineMode;
				var firstFrame = current.timelinesRotation.length == 0;
				if(firstFrame) {
					spine_PortUtils.fillResize(current.timelinesRotation,timelineCount << 1,0.0);
				}
				var timelinesRotation = current.timelinesRotation;
				var _g3 = 0;
				while(_g3 < timelineCount) {
					var ii = _g3++;
					var timeline1 = timelines[ii];
					var timelineBlend = timelineMode[ii] == 0 ? blend : 0;
					if(((timeline1) instanceof spine_animation_RotateTimeline)) {
						this.applyRotateTimeline(timeline1,skeleton,animationTime,mix,timelineBlend,timelinesRotation,ii << 1,firstFrame);
					} else if(((timeline1) instanceof spine_animation_AttachmentTimeline)) {
						this.applyAttachmentTimeline(timeline1,skeleton,animationTime,timelineBlend,true);
					} else {
						timeline1.apply(skeleton,animationLast,animationTime,events,mix,timelineBlend,spine_animation_MixDirection.In);
					}
				}
			}
			this.queueEvents(current,animationTime);
			events.length = 0;
			current.nextAnimationLast = animationTime;
			current.nextTrackLast = current.trackTime;
		}
		var setupState = this.unkeyedState + 1;
		var slots = skeleton.slots;
		var _g21 = 0;
		var _g31 = skeleton.slots.length;
		while(_g21 < _g31) {
			var slot = slots[_g21++];
			if(slot.get_attachmentState() == setupState) {
				var attachmentName = slot.get_data().attachmentName;
				slot.set_attachment(attachmentName == null ? null : skeleton.getAttachmentForSlotIndex(slot.get_data().get_index(),attachmentName));
			}
		}
		this.unkeyedState += 2;
		this.queue.drain();
		return applied;
	}
	,applyMixingFrom: function(to,skeleton,blend) {
		var from = to.mixingFrom;
		if(from.mixingFrom != null) {
			this.applyMixingFrom(from,skeleton,blend);
		}
		var mix = 0;
		if(to.mixDuration == 0) {
			mix = 1;
			if(blend == 1) {
				blend = 0;
			}
		} else {
			mix = to.mixTime / to.mixDuration;
			if(mix > 1) {
				mix = 1;
			}
			if(blend != 1) {
				blend = from.mixBlend;
			}
		}
		var events = mix < from.eventThreshold ? this.events : null;
		var attachments = mix < from.attachmentThreshold;
		var drawOrder = mix < from.drawOrderThreshold;
		var animationLast = from.animationLast;
		var animationTime = from.getAnimationTime();
		var timelineCount = from.animation.get_timelines().length;
		var timelines = from.animation.get_timelines();
		var alphaHold = from.alpha * to.interruptAlpha;
		var alphaMix = alphaHold * (1 - mix);
		if(blend == 3) {
			var _g = 0;
			while(_g < timelineCount) timelines[_g++].apply(skeleton,animationLast,animationTime,events,alphaMix,blend,spine_animation_MixDirection.Out);
		} else {
			var timelineMode = from.timelineMode;
			var timelineHoldMix = from.timelineHoldMix;
			var firstFrame = from.timelinesRotation.length == 0;
			if(firstFrame) {
				spine_PortUtils.fillResize(from.timelinesRotation,timelineCount << 1,0.0);
			}
			var timelinesRotation = from.timelinesRotation;
			from.totalAlpha = 0;
			var _g1 = 0;
			while(_g1 < timelineCount) {
				var i = _g1++;
				var timeline = timelines[i];
				var direction = spine_animation_MixDirection.Out;
				var timelineBlend;
				var alpha = 0;
				switch(timelineMode[i]) {
				case 0:
					if(!drawOrder && ((timeline) instanceof spine_animation_DrawOrderTimeline)) {
						continue;
					}
					timelineBlend = blend;
					alpha = alphaMix;
					break;
				case 1:
					timelineBlend = 0;
					alpha = alphaMix;
					break;
				case 2:
					timelineBlend = blend;
					alpha = alphaHold;
					break;
				case 3:
					timelineBlend = 0;
					alpha = alphaHold;
					break;
				default:
					timelineBlend = 0;
					var holdMix = timelineHoldMix[i];
					alpha = alphaHold * Math.max(0,1 - holdMix.mixTime / holdMix.mixDuration);
				}
				from.totalAlpha += alpha;
				if(((timeline) instanceof spine_animation_RotateTimeline)) {
					this.applyRotateTimeline(timeline,skeleton,animationTime,alpha,timelineBlend,timelinesRotation,i << 1,firstFrame);
				} else if(((timeline) instanceof spine_animation_AttachmentTimeline)) {
					this.applyAttachmentTimeline(timeline,skeleton,animationTime,timelineBlend,attachments);
				} else {
					if(drawOrder && ((timeline) instanceof spine_animation_DrawOrderTimeline) && timelineBlend == 0) {
						direction = spine_animation_MixDirection.In;
					}
					timeline.apply(skeleton,animationLast,animationTime,events,alpha,timelineBlend,direction);
				}
			}
		}
		if(to.mixDuration > 0) {
			this.queueEvents(from,animationTime);
		}
		this.events.length = 0;
		from.nextAnimationLast = animationTime;
		from.nextTrackLast = from.trackTime;
		return mix;
	}
	,applyAttachmentTimeline: function(timeline,skeleton,time,blend,attachments) {
		var slot = skeleton.slots[timeline.slotIndex];
		if(!slot.get_bone().active) {
			return;
		}
		var frames = timeline.frames;
		if(time < frames[0]) {
			if(blend == 0 || blend == 1) {
				this.setAttachment(skeleton,slot,slot.get_data().attachmentName,attachments);
			}
		} else {
			this.setAttachment(skeleton,slot,timeline.attachmentNames[time >= frames[frames.length - 1] ? frames.length - 1 : spine_animation_Animation.binarySearch1(frames,time) - 1],attachments);
		}
		if(slot.get_attachmentState() <= this.unkeyedState) {
			slot.set_attachmentState(this.unkeyedState + 1);
		}
	}
	,setAttachment: function(skeleton,slot,attachmentName,attachments) {
		slot.set_attachment(attachmentName == null ? null : skeleton.getAttachmentForSlotIndex(slot.get_data().get_index(),attachmentName));
		if(attachments) {
			slot.set_attachmentState(this.unkeyedState + 2);
		}
	}
	,applyRotateTimeline: function(timeline,skeleton,time,alpha,blend,timelinesRotation,i,firstFrame) {
		if(firstFrame) {
			timelinesRotation[i] = 0;
		}
		if(alpha == 1) {
			timeline.apply(skeleton,0,time,null,1,blend,spine_animation_MixDirection.In);
			return;
		}
		var rotateTimeline = js_Boot.__cast(timeline , spine_animation_RotateTimeline);
		var frames = rotateTimeline.frames;
		var bone = skeleton.bones[rotateTimeline.boneIndex];
		if(!bone.active) {
			return;
		}
		var r1;
		var r2;
		if(time < frames[0]) {
			switch(blend) {
			case 0:
				bone.rotation = bone.get_data().rotation;
				return;
			case 1:
				r1 = bone.rotation;
				r2 = bone.get_data().rotation;
				break;
			default:
				return;
			}
		} else {
			r1 = blend == 0 ? bone.get_data().rotation : bone.rotation;
			if(time >= frames[frames.length - 2]) {
				r2 = bone.get_data().rotation + frames[frames.length + spine_animation_RotateTimeline.PREV_ROTATION];
			} else {
				var frame = spine_animation_Animation.binarySearch(frames,time,2);
				var prevRotation = frames[frame + spine_animation_RotateTimeline.PREV_ROTATION];
				var frameTime = frames[frame];
				r2 = frames[frame + 1] - prevRotation;
				r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;
				r2 = prevRotation + r2 * rotateTimeline.getCurvePercent((frame >> 1) - 1,1 - (time - frameTime) / (frames[frame + spine_animation_RotateTimeline.PREV_TIME] - frameTime)) + bone.get_data().rotation;
				r2 -= (16384 - (16384.499999999996 - r2 / 360 | 0)) * 360;
			}
		}
		var total;
		var diff = r2 - r1;
		diff -= (16384 - (16384.499999999996 - diff / 360 | 0)) * 360;
		if(diff == 0) {
			total = timelinesRotation[i];
		} else {
			var lastTotal;
			var lastDiff;
			if(firstFrame) {
				lastTotal = 0;
				lastDiff = diff;
			} else {
				lastTotal = timelinesRotation[i];
				lastDiff = timelinesRotation[i + 1];
			}
			var current = diff > 0;
			var dir = lastTotal >= 0;
			if(spine_MathUtils.signum(lastDiff) != spine_MathUtils.signum(diff) && Math.abs(lastDiff) <= 90) {
				if(Math.abs(lastTotal) > 180) {
					lastTotal += 360 * spine_MathUtils.signum(lastTotal);
				}
				dir = current;
			}
			total = diff + lastTotal - lastTotal % 360;
			if(dir != current) {
				total += 360 * spine_MathUtils.signum(lastTotal);
			}
			timelinesRotation[i] = total;
		}
		timelinesRotation[i + 1] = diff;
		r1 += total * alpha;
		bone.rotation = r1 - (16384 - (16384.499999999996 - r1 / 360 | 0)) * 360;
	}
	,queueEvents: function(entry,animationTime) {
		var animationStart = entry.animationStart;
		var animationEnd = entry.animationEnd;
		var duration = animationEnd - animationStart;
		var trackLastWrapped = entry.trackLast % duration;
		var events = this.events;
		var i = 0;
		while(i < events.length) {
			var event = events[i];
			if(event.time < trackLastWrapped) {
				break;
			}
			++i;
			if(event.time > animationEnd) {
				continue;
			}
			this.queue.event(entry,event);
		}
		if(entry.loop ? duration == 0 || trackLastWrapped > entry.trackTime % duration : animationTime >= animationEnd && entry.animationLast < animationEnd) {
			this.queue.complete(entry);
		}
		while(i < events.length) {
			var event1 = events[i];
			++i;
			if(event1.time < animationStart) {
				continue;
			}
			this.queue.event(entry,event1);
		}
	}
	,clearTracks: function() {
		var oldTrainDisabled = this.queue.drainDisabled;
		this.queue.drainDisabled = true;
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			this.clearTrack(i);
			++i;
		}
		this.tracks.length = 0;
		this.queue.drainDisabled = oldTrainDisabled;
		this.queue.drain();
	}
	,clearTrack: function(trackIndex) {
		if(trackIndex >= this.tracks.length) {
			return;
		}
		var current = this.tracks[trackIndex];
		if(current == null) {
			return;
		}
		this.queue.end(current);
		this.disposeNext(current);
		var entry = current;
		while(true) {
			var from = entry.mixingFrom;
			if(from == null) {
				break;
			}
			this.queue.end(from);
			entry.mixingFrom = null;
			entry.mixingTo = null;
			entry = from;
		}
		this.tracks[current.trackIndex] = null;
		this.queue.drain();
	}
	,setCurrent: function(index,current,interrupt) {
		var from = this.expandToIndex(index);
		this.tracks[index] = current;
		if(from != null) {
			if(interrupt) {
				this.queue.interrupt(from);
			}
			current.mixingFrom = from;
			from.mixingTo = current;
			current.mixTime = 0;
			if(from.mixingFrom != null && from.mixDuration > 0) {
				current.interruptAlpha *= Math.min(1,from.mixTime / from.mixDuration);
			}
			from.timelinesRotation.length = 0;
		}
		this.queue.start(current);
	}
	,setAnimationByName: function(trackIndex,animationName,loop) {
		var animation = this.data.get_skeletonData().findAnimation(animationName);
		if(animation == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("Animation not found: " + animationName));
		}
		return this.setAnimation(trackIndex,animation,loop);
	}
	,setAnimation: function(trackIndex,animation,loop) {
		if(animation == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("animation cannot be null."));
		}
		var interrupt = true;
		var current = this.expandToIndex(trackIndex);
		if(current != null) {
			if(current.nextTrackLast == -1) {
				this.tracks[trackIndex] = current.mixingFrom;
				this.queue.interrupt(current);
				this.queue.end(current);
				this.disposeNext(current);
				current = current.mixingFrom;
				interrupt = false;
			} else {
				this.disposeNext(current);
			}
		}
		var entry = this.trackEntry(trackIndex,animation,loop,current);
		this.setCurrent(trackIndex,entry,interrupt);
		this.queue.drain();
		return entry;
	}
	,addAnimationByName: function(trackIndex,animationName,loop,delay) {
		var animation = this.data.get_skeletonData().findAnimation(animationName);
		if(animation == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("Animation not found: " + animationName));
		}
		return this.addAnimation(trackIndex,animation,loop,delay);
	}
	,addAnimation: function(trackIndex,animation,loop,delay) {
		if(animation == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("animation cannot be null."));
		}
		var last = this.expandToIndex(trackIndex);
		if(last != null) {
			while(last.next != null) last = last.next;
		}
		var entry = this.trackEntry(trackIndex,animation,loop,last);
		if(last == null) {
			this.setCurrent(trackIndex,entry,true);
			this.queue.drain();
		} else {
			last.next = entry;
			if(delay <= 0) {
				var duration = last.animationEnd - last.animationStart;
				if(duration != 0) {
					if(last.loop) {
						delay += duration * (1 + (last.trackTime / duration | 0));
					} else {
						delay += Math.max(duration,last.trackTime);
					}
				} else {
					delay = last.trackTime;
				}
			}
		}
		entry.delay = delay;
		return entry;
	}
	,setEmptyAnimation: function(trackIndex,mixDuration) {
		var entry = this.setAnimation(trackIndex,spine_animation_AnimationState.emptyAnimation,false);
		entry.mixDuration = mixDuration;
		entry.trackEnd = mixDuration;
		return entry;
	}
	,addEmptyAnimation: function(trackIndex,mixDuration,delay) {
		if(delay <= 0) {
			delay -= mixDuration;
		}
		var entry = this.addAnimation(trackIndex,spine_animation_AnimationState.emptyAnimation,false,delay);
		entry.mixDuration = mixDuration;
		entry.trackEnd = mixDuration;
		return entry;
	}
	,setEmptyAnimations: function(mixDuration) {
		var oldDrainDisabled = this.queue.drainDisabled;
		this.queue.drainDisabled = true;
		var i = 0;
		var n = this.tracks.length;
		while(i < n) {
			var current = this.tracks[i];
			if(current != null) {
				this.setEmptyAnimation(current.trackIndex,mixDuration);
			}
			++i;
		}
		this.queue.drainDisabled = oldDrainDisabled;
		this.queue.drain();
	}
	,expandToIndex: function(index) {
		if(index < this.tracks.length) {
			return this.tracks[index];
		}
		this.tracks.length = index + 1;
		return null;
	}
	,trackEntry: function(trackIndex,animation,loop,last) {
		var entry = js_Boot.__cast(this.trackEntryPool.obtain() , spine_animation_TrackEntry);
		entry.trackIndex = trackIndex;
		entry.animation = animation;
		entry.loop = loop;
		entry.holdPrevious = false;
		entry.eventThreshold = 0.0;
		entry.attachmentThreshold = 0.0;
		entry.drawOrderThreshold = 0.0;
		entry.animationStart = 0.0;
		entry.animationEnd = animation.duration;
		entry.animationLast = -1.0;
		entry.nextAnimationLast = -1.0;
		entry.delay = 0.0;
		entry.trackTime = 0.0;
		entry.trackLast = -1.0;
		entry.nextTrackLast = -1.0;
		entry.trackEnd = Infinity;
		entry.timeScale = 1.0;
		entry.alpha = 1.0;
		entry.interruptAlpha = 1.0;
		entry.mixTime = 0.0;
		entry.mixDuration = last == null ? 0 : this.data.getMix(last.animation,animation);
		return entry;
	}
	,disposeNext: function(entry) {
		var next = entry.next;
		while(next != null) {
			this.queue.dispose(next);
			next = next.next;
		}
		entry.next = null;
	}
	,_animationsChanged: function() {
		this.animationsChanged = false;
		this.propertyIDs = new haxe_ds_StringMap();
		var entry = null;
		var _g = 0;
		var _g1 = this.tracks.length;
		while(_g < _g1) {
			entry = this.tracks[_g++];
			if(entry == null) {
				continue;
			}
			while(entry.mixingFrom != null) entry = entry.mixingFrom;
			while(true) {
				if(entry.mixingTo == null || entry.mixBlend != 3) {
					this.computeHold(entry);
				}
				entry = entry.mixingTo;
				if(!(entry != null)) {
					break;
				}
			}
		}
	}
	,computeHold: function(entry) {
		var to = entry.mixingTo;
		var timelines = entry.animation.get_timelines();
		var timelinesCount = entry.animation.get_timelines().length;
		var timelineMode = entry.timelineMode;
		spine_PortUtils.fillResize(timelineMode,timelinesCount,0);
		var timelineHoldMix = entry.timelineHoldMix;
		timelineHoldMix.length = 0;
		var propertyIDs = this.propertyIDs;
		if(to != null && to.holdPrevious) {
			var _g = 0;
			while(_g < timelinesCount) {
				var i = _g++;
				var propertyId = Std.string(timelines[i].getPropertyId());
				if((__map_reserved[propertyId] != null ? propertyIDs.getReserved(propertyId) : propertyIDs.h[propertyId]) == null || !(__map_reserved[propertyId] != null ? propertyIDs.getReserved(propertyId) : propertyIDs.h[propertyId])) {
					timelineMode[i] = 3;
				} else {
					timelineMode[i] = 2;
				}
				if(__map_reserved[propertyId] != null) {
					propertyIDs.setReserved(propertyId,true);
				} else {
					propertyIDs.h[propertyId] = true;
				}
			}
			return;
		}
		var _g1 = 0;
		while(_g1 < timelinesCount) {
			var i1 = _g1++;
			var continueOuter = false;
			var timeline = js_Boot.__cast(timelines[i1] , spine_animation_Timeline);
			var intId = timeline.getPropertyId();
			var id = intId == null ? "null" : "" + intId;
			var contained = __map_reserved[id] != null ? propertyIDs.getReserved(id) : propertyIDs.h[id];
			if(__map_reserved[id] != null) {
				propertyIDs.setReserved(id,true);
			} else {
				propertyIDs.h[id] = true;
			}
			if(contained != null) {
				timelineMode[i1] = 0;
			} else if(to == null || ((timeline) instanceof spine_animation_AttachmentTimeline) || ((timeline) instanceof spine_animation_DrawOrderTimeline) || ((timeline) instanceof spine_animation_EventTimeline) || !to.animation.hasTimeline(intId)) {
				timelineMode[i1] = 1;
			} else {
				var next = to.mixingTo;
				while(next != null) {
					if(next.animation.hasTimeline(intId)) {
						next = next.mixingTo;
						continue;
					}
					if(entry.mixDuration > 0) {
						timelineMode[i1] = 4;
						timelineHoldMix[i1] = entry;
						continueOuter = true;
					}
					break;
				}
				if(!continueOuter) {
					timelineMode[i1] = 3;
				}
			}
		}
	}
	,getCurrent: function(trackIndex) {
		if(trackIndex >= this.tracks.length) {
			return null;
		}
		return this.tracks[trackIndex];
	}
	,clearListeners: function() {
		this.onStart.get_listeners().length = 0;
		this.onInterrupt.get_listeners().length = 0;
		this.onEnd.get_listeners().length = 0;
		this.onDispose.get_listeners().length = 0;
		this.onComplete.get_listeners().length = 0;
		this.onEvent.get_listeners().length = 0;
	}
	,clearListenerNotifications: function() {
		this.queue.clear();
	}
	,__class__: spine_animation_AnimationState
};
var spine_animation_AnimationStateData = function(skeletonData) {
	this.animationToMixTime = { };
	this.defaultMix = 0;
	this._skeletonData = skeletonData;
};
$hxClasses["spine.animation.AnimationStateData"] = spine_animation_AnimationStateData;
spine_animation_AnimationStateData.__name__ = "spine.animation.AnimationStateData";
spine_animation_AnimationStateData.prototype = {
	defaultMix: null
	,_skeletonData: null
	,animationToMixTime: null
	,get_skeletonData: function() {
		return this._skeletonData;
	}
	,setMixByName: function(fromName,toName,duration) {
		var from = this._skeletonData.findAnimation(fromName);
		if(from == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("Animation not found: " + fromName));
		}
		var to = this._skeletonData.findAnimation(toName);
		if(to == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("Animation not found: " + toName));
		}
		this.setMix(from,to,duration);
	}
	,setMix: function(from,to,duration) {
		if(from == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("from cannot be null."));
		}
		if(to == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("to cannot be null."));
		}
		this.animationToMixTime[from.get_name() + ":" + to.get_name()] = duration;
	}
	,getMix: function(from,to) {
		var time = this.animationToMixTime[from.get_name() + ":" + to.get_name()];
		if(time == null) {
			return this.defaultMix;
		}
		return time;
	}
	,__class__: spine_animation_AnimationStateData
	,__properties__: {get_skeletonData:"get_skeletonData"}
};
var spine_animation_Timeline = function() { };
$hxClasses["spine.animation.Timeline"] = spine_animation_Timeline;
spine_animation_Timeline.__name__ = "spine.animation.Timeline";
spine_animation_Timeline.__isInterface__ = true;
spine_animation_Timeline.prototype = {
	get_frameCount: null
	,apply: null
	,getPropertyId: null
	,__class__: spine_animation_Timeline
	,__properties__: {get_frameCount:"get_frameCount"}
};
var spine_animation_AttachmentTimeline = function(frameCount) {
	this.frames = [];
	this.attachmentNames = [];
};
$hxClasses["spine.animation.AttachmentTimeline"] = spine_animation_AttachmentTimeline;
spine_animation_AttachmentTimeline.__name__ = "spine.animation.AttachmentTimeline";
spine_animation_AttachmentTimeline.__interfaces__ = [spine_animation_Timeline];
spine_animation_AttachmentTimeline.prototype = {
	slotIndex: null
	,frames: null
	,attachmentNames: null
	,get_frameCount: function() {
		return this.frames.length;
	}
	,getPropertyId: function() {
		return (spine_animation_TimelineType.attachment.ordinal << 24) + this.slotIndex;
	}
	,setFrame: function(frameIndex,time,attachmentName) {
		this.frames[frameIndex] = time;
		this.attachmentNames[frameIndex] = attachmentName;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var slot = skeleton.slots[this.slotIndex];
		if(!slot.get_bone().active) {
			return;
		}
		if(direction == spine_animation_MixDirection.Out) {
			if(blend == 0) {
				this.setAttachment(skeleton,slot,slot.get_data().attachmentName);
			}
			return;
		}
		var frames = this.frames;
		if(time < frames[0]) {
			if(blend == 0 || blend == 1) {
				this.setAttachment(skeleton,slot,slot.get_data().attachmentName);
			}
			return;
		}
		var frameIndex;
		if(time >= frames[frames.length - 1]) {
			frameIndex = frames.length - 1;
		} else {
			frameIndex = spine_animation_Animation.binarySearch(frames,time,1) - 1;
		}
		var attachmentName = this.attachmentNames[frameIndex];
		skeleton.slots[this.slotIndex].set_attachment(attachmentName == null ? null : skeleton.getAttachmentForSlotIndex(this.slotIndex,attachmentName));
	}
	,setAttachment: function(skeleton,slot,attachmentName) {
		slot.set_attachment(attachmentName == null ? null : skeleton.getAttachmentForSlotIndex(this.slotIndex,attachmentName));
	}
	,__class__: spine_animation_AttachmentTimeline
	,__properties__: {get_frameCount:"get_frameCount"}
};
var spine_animation_CurveTimeline = function(frameCount) {
	this.curves = [];
};
$hxClasses["spine.animation.CurveTimeline"] = spine_animation_CurveTimeline;
spine_animation_CurveTimeline.__name__ = "spine.animation.CurveTimeline";
spine_animation_CurveTimeline.__interfaces__ = [spine_animation_Timeline];
spine_animation_CurveTimeline.prototype = {
	curves: null
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
	}
	,getPropertyId: function() {
		return 0;
	}
	,get_frameCount: function() {
		return this.curves.length / spine_animation_CurveTimeline.BEZIER_SIZE + 1 | 0;
	}
	,setLinear: function(frameIndex) {
		this.curves[frameIndex * spine_animation_CurveTimeline.BEZIER_SIZE] = 0.0;
	}
	,setStepped: function(frameIndex) {
		this.curves[frameIndex * spine_animation_CurveTimeline.BEZIER_SIZE] = 1.0;
	}
	,setCurve: function(frameIndex,cx1,cy1,cx2,cy2) {
		var tmpx = (-cx1 * 2 + cx2) * 0.03;
		var tmpy = (-cy1 * 2 + cy2) * 0.03;
		var dddfx = ((cx1 - cx2) * 3 + 1) * 0.006;
		var dddfy = ((cy1 - cy2) * 3 + 1) * 0.006;
		var ddfx = tmpx * 2 + dddfx;
		var ddfy = tmpy * 2 + dddfy;
		var dfx = cx1 * 0.3 + tmpx + dddfx * 0.16666667;
		var dfy = cy1 * 0.3 + tmpy + dddfy * 0.16666667;
		var i = frameIndex * spine_animation_CurveTimeline.BEZIER_SIZE;
		var curves = this.curves;
		curves[i++] = 2.0;
		var x = dfx;
		var y = dfy;
		var n = i + spine_animation_CurveTimeline.BEZIER_SIZE - 1;
		while(i < n) {
			curves[i] = x;
			curves[i + 1] = y;
			dfx += ddfx;
			dfy += ddfy;
			ddfx += dddfx;
			ddfy += dddfy;
			x += dfx;
			y += dfy;
			i += 2;
		}
	}
	,getCurvePercent: function(frameIndex,percent) {
		percent = spine_MathUtils.clamp(percent,0,1);
		var curves = this.curves;
		var i = frameIndex * spine_animation_CurveTimeline.BEZIER_SIZE;
		var type = curves[i];
		if(type == null) {
			type = 0.0;
		}
		if(type == 0.0) {
			return percent;
		}
		if(type == 1.0) {
			return 0;
		}
		++i;
		var x = 0;
		var start = i;
		var n = i + spine_animation_CurveTimeline.BEZIER_SIZE - 1;
		while(i < n) {
			x = curves[i];
			if(x >= percent) {
				var prevX;
				var prevY;
				if(i == start) {
					prevX = 0;
					prevY = 0;
				} else {
					prevX = curves[i - 2];
					prevY = curves[i - 1];
				}
				return prevY + (curves[i + 1] - prevY) * (percent - prevX) / (x - prevX);
			}
			i += 2;
		}
		var y = curves[i - 1];
		return y + (1 - y) * (percent - x) / (1 - x);
	}
	,__class__: spine_animation_CurveTimeline
	,__properties__: {get_frameCount:"get_frameCount"}
};
var spine_animation_ColorTimeline = function(frameCount) {
	spine_animation_CurveTimeline.call(this,frameCount);
	this.frames = [];
};
$hxClasses["spine.animation.ColorTimeline"] = spine_animation_ColorTimeline;
spine_animation_ColorTimeline.__name__ = "spine.animation.ColorTimeline";
spine_animation_ColorTimeline.__super__ = spine_animation_CurveTimeline;
spine_animation_ColorTimeline.prototype = $extend(spine_animation_CurveTimeline.prototype,{
	slotIndex: null
	,frames: null
	,getPropertyId: function() {
		return (spine_animation_TimelineType.color.ordinal << 24) + this.slotIndex;
	}
	,setFrame: function(frameIndex,time,r,g,b,a) {
		frameIndex *= 5;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = r;
		this.frames[frameIndex + 2] = g;
		this.frames[frameIndex + 3] = b;
		this.frames[frameIndex + 4] = a;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var frames = this.frames;
		var slot = skeleton.slots[this.slotIndex];
		if(!slot.get_bone().active) {
			return;
		}
		if(time < frames[0]) {
			switch(blend) {
			case 0:
				slot.color.setFromColor(slot.get_data().color);
				return;
			case 1:
				var color = slot.color;
				var setup = slot.get_data().color;
				color.add((setup.r - color.r) * alpha,(setup.g - color.g) * alpha,(setup.b - color.b) * alpha,(setup.a - color.a) * alpha);
				break;
			default:
			}
			return;
		}
		var r;
		var g;
		var b;
		var a;
		if(time >= frames[frames.length - 5]) {
			var i = frames.length;
			r = frames[i + spine_animation_ColorTimeline.PREV_R];
			g = frames[i + spine_animation_ColorTimeline.PREV_G];
			b = frames[i + spine_animation_ColorTimeline.PREV_B];
			a = frames[i + spine_animation_ColorTimeline.PREV_A];
		} else {
			var frame = spine_animation_Animation.binarySearch(frames,time,5);
			r = frames[frame + spine_animation_ColorTimeline.PREV_R];
			g = frames[frame + spine_animation_ColorTimeline.PREV_G];
			b = frames[frame + spine_animation_ColorTimeline.PREV_B];
			a = frames[frame + spine_animation_ColorTimeline.PREV_A];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 5 - 1 | 0,1 - (time - frameTime) / (frames[frame + spine_animation_ColorTimeline.PREV_TIME] - frameTime));
			r += (frames[frame + 1] - r) * percent;
			g += (frames[frame + 2] - g) * percent;
			b += (frames[frame + 3] - b) * percent;
			a += (frames[frame + 4] - a) * percent;
		}
		if(alpha == 1) {
			slot.color.setFrom(r,g,b,a);
		} else {
			if(blend == 0) {
				slot.color.setFromColor(slot.get_data().color);
			}
			slot.color.r += (r - slot.color.r) * alpha;
			slot.color.g += (g - slot.color.g) * alpha;
			slot.color.b += (b - slot.color.b) * alpha;
			slot.color.a += (a - slot.color.a) * alpha;
		}
	}
	,__class__: spine_animation_ColorTimeline
});
var spine_animation_DeformTimeline = function(frameCount) {
	spine_animation_CurveTimeline.call(this,frameCount);
	this.frames = [];
	this.frameVertices = [];
};
$hxClasses["spine.animation.DeformTimeline"] = spine_animation_DeformTimeline;
spine_animation_DeformTimeline.__name__ = "spine.animation.DeformTimeline";
spine_animation_DeformTimeline.__super__ = spine_animation_CurveTimeline;
spine_animation_DeformTimeline.prototype = $extend(spine_animation_CurveTimeline.prototype,{
	slotIndex: null
	,frames: null
	,frameVertices: null
	,attachment: null
	,getPropertyId: function() {
		return (spine_animation_TimelineType.deform.ordinal << 27) + this.attachment.id + this.slotIndex;
	}
	,setFrame: function(frameIndex,time,vertices) {
		this.frames[frameIndex] = time;
		this.frameVertices[frameIndex] = vertices;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var vertexAttachment;
		var setupVertices;
		var slot = skeleton.slots[this.slotIndex];
		if(!slot.get_bone().active) {
			return;
		}
		var slotAttachment = slot.get_attachment();
		if(!((slotAttachment) instanceof spine_attachments_VertexAttachment) || (js_Boot.__cast(slotAttachment , spine_attachments_VertexAttachment)).deformAttachment != this.attachment) {
			return;
		}
		var deformArray = slot.deform;
		if(deformArray.length == 0) {
			blend = 0;
		}
		var frameVertices = this.frameVertices;
		var vertexCount = frameVertices[0].length;
		var frames = this.frames;
		if(time < frames[0]) {
			vertexAttachment = js_Boot.__cast(slotAttachment , spine_attachments_VertexAttachment);
			switch(blend) {
			case 0:
				deformArray.length = 0;
				return;
			case 1:
				if(alpha == 1) {
					deformArray.length = 0;
					return;
				}
				deformArray.length = vertexCount;
				if(vertexAttachment.bones == null) {
					setupVertices = vertexAttachment.vertices;
					var _g = 0;
					while(_g < vertexCount) {
						var i = _g++;
						deformArray[i] += (setupVertices[i] - deformArray[i]) * alpha;
					}
				} else {
					alpha = 1 - alpha;
					var _g1 = 0;
					while(_g1 < vertexCount) deformArray[_g1++] *= alpha;
				}
				break;
			default:
			}
			return;
		}
		deformArray.length = vertexCount;
		var setup;
		var prev;
		if(time >= frames[frames.length - 1]) {
			var lastVertices = frameVertices[frames.length - 1];
			if(alpha == 1) {
				if(blend == 3) {
					vertexAttachment = js_Boot.__cast(slotAttachment , spine_attachments_VertexAttachment);
					if(vertexAttachment.bones == null) {
						setupVertices = vertexAttachment.vertices;
						var _g2 = 0;
						while(_g2 < vertexCount) {
							var i1 = _g2++;
							deformArray[i1] += lastVertices[i1] - setupVertices[i1];
						}
					} else {
						var _g3 = 0;
						while(_g3 < vertexCount) {
							var i2 = _g3++;
							deformArray[i2] += lastVertices[i2];
						}
					}
				} else {
					var _g4 = 0;
					while(_g4 < vertexCount) {
						var i3 = _g4++;
						deformArray[i3] = lastVertices[i3];
					}
				}
			} else {
				switch(blend) {
				case 0:
					vertexAttachment = js_Boot.__cast(slotAttachment , spine_attachments_VertexAttachment);
					if(vertexAttachment.bones == null) {
						setupVertices = vertexAttachment.vertices;
						var _g5 = 0;
						while(_g5 < vertexCount) {
							var i4 = _g5++;
							setup = setupVertices[i4];
							deformArray[i4] = setup + (lastVertices[i4] - setup) * alpha;
						}
					} else {
						var _g6 = 0;
						while(_g6 < vertexCount) {
							var i5 = _g6++;
							deformArray[i5] = lastVertices[i5] * alpha;
						}
					}
					break;
				case 1:case 2:
					var _g7 = 0;
					while(_g7 < vertexCount) {
						var i6 = _g7++;
						deformArray[i6] += (lastVertices[i6] - deformArray[i6]) * alpha;
					}
					break;
				default:
				}
				switch(blend) {
				case 1:case 2:case 3:
					vertexAttachment = js_Boot.__cast(slotAttachment , spine_attachments_VertexAttachment);
					if(vertexAttachment.bones == null) {
						setupVertices = vertexAttachment.vertices;
						var _g8 = 0;
						while(_g8 < vertexCount) {
							var i7 = _g8++;
							deformArray[i7] += (lastVertices[i7] - setupVertices[i7]) * alpha;
						}
					} else {
						var _g9 = 0;
						while(_g9 < vertexCount) {
							var i8 = _g9++;
							deformArray[i8] += lastVertices[i8] * alpha;
						}
					}
					break;
				default:
				}
			}
			return;
		}
		var frame = spine_animation_Animation.binarySearch1(frames,time);
		var prevVertices = frameVertices[frame - 1];
		var nextVertices = frameVertices[frame];
		var frameTime = frames[frame];
		var percent = this.getCurvePercent(frame - 1,1 - (time - frameTime) / (frames[frame - 1] - frameTime));
		if(alpha == 1) {
			if(blend == 3) {
				vertexAttachment = js_Boot.__cast(slotAttachment , spine_attachments_VertexAttachment);
				if(vertexAttachment.bones == null) {
					setupVertices = vertexAttachment.vertices;
					var _g10 = 0;
					while(_g10 < vertexCount) {
						var i9 = _g10++;
						prev = prevVertices[i9];
						deformArray[i9] += prev + (nextVertices[i9] - prev) * percent - setupVertices[i9];
					}
				} else {
					var _g11 = 0;
					while(_g11 < vertexCount) {
						var i10 = _g11++;
						prev = prevVertices[i10];
						deformArray[i10] += prev + (nextVertices[i10] - prev) * percent;
					}
				}
			} else {
				var _g12 = 0;
				while(_g12 < vertexCount) {
					var i11 = _g12++;
					prev = prevVertices[i11];
					deformArray[i11] = prev + (nextVertices[i11] - prev) * percent;
				}
			}
		} else {
			switch(blend) {
			case 0:
				vertexAttachment = js_Boot.__cast(slotAttachment , spine_attachments_VertexAttachment);
				if(vertexAttachment.bones == null) {
					setupVertices = vertexAttachment.vertices;
					var _g13 = 0;
					while(_g13 < vertexCount) {
						var i12 = _g13++;
						prev = prevVertices[i12];
						setup = setupVertices[i12];
						deformArray[i12] = setup + (prev + (nextVertices[i12] - prev) * percent - setup) * alpha;
					}
				} else {
					var _g14 = 0;
					while(_g14 < vertexCount) {
						var i13 = _g14++;
						prev = prevVertices[i13];
						deformArray[i13] = (prev + (nextVertices[i13] - prev) * percent) * alpha;
					}
				}
				break;
			case 1:case 2:
				var _g15 = 0;
				while(_g15 < vertexCount) {
					var i14 = _g15++;
					prev = prevVertices[i14];
					deformArray[i14] += (prev + (nextVertices[i14] - prev) * percent - deformArray[i14]) * alpha;
				}
				break;
			case 3:
				vertexAttachment = js_Boot.__cast(slotAttachment , spine_attachments_VertexAttachment);
				if(vertexAttachment.bones == null) {
					setupVertices = vertexAttachment.vertices;
					var _g16 = 0;
					while(_g16 < vertexCount) {
						var i15 = _g16++;
						prev = prevVertices[i15];
						setup = setupVertices[i15];
						deformArray[i15] += (prev + (nextVertices[i15] - prev) * percent - setupVertices[i15]) * alpha;
					}
				} else {
					var _g17 = 0;
					while(_g17 < vertexCount) {
						var i16 = _g17++;
						prev = prevVertices[i16];
						deformArray[i16] += (prev + (nextVertices[i16] - prev) * percent) * alpha;
					}
				}
				break;
			}
		}
	}
	,__class__: spine_animation_DeformTimeline
});
var spine_animation_DrawOrderTimeline = function(frameCount) {
	this.frames = [];
	this.drawOrders = [];
};
$hxClasses["spine.animation.DrawOrderTimeline"] = spine_animation_DrawOrderTimeline;
spine_animation_DrawOrderTimeline.__name__ = "spine.animation.DrawOrderTimeline";
spine_animation_DrawOrderTimeline.__interfaces__ = [spine_animation_Timeline];
spine_animation_DrawOrderTimeline.prototype = {
	frames: null
	,drawOrders: null
	,get_frameCount: function() {
		return this.frames.length;
	}
	,getPropertyId: function() {
		return spine_animation_TimelineType.drawOrder.ordinal << 24;
	}
	,setFrame: function(frameIndex,time,drawOrder) {
		this.frames[frameIndex] = time;
		this.drawOrders[frameIndex] = drawOrder;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		if(direction == spine_animation_MixDirection.Out) {
			if(blend == 0) {
				var _g = 0;
				var _g1 = skeleton.slots.length;
				while(_g < _g1) {
					var ii = _g++;
					skeleton.drawOrder[ii] = skeleton.slots[ii];
				}
			}
			return;
		}
		var drawOrder = skeleton.drawOrder;
		var slots = skeleton.slots;
		var i = 0;
		if(time < this.frames[0]) {
			if(blend == 0 || blend == 1) {
				var _g2 = 0;
				while(_g2 < slots.length) drawOrder[i++] = slots[_g2++];
			}
			return;
		}
		var frameIndex;
		if(time >= this.frames[this.frames.length - 1]) {
			frameIndex = this.frames.length - 1;
		} else {
			frameIndex = spine_animation_Animation.binarySearch1(this.frames,time) - 1;
		}
		var drawOrderToSetupIndex = this.drawOrders[frameIndex];
		i = 0;
		if(drawOrderToSetupIndex == null) {
			var _g3 = 0;
			while(_g3 < slots.length) drawOrder[i++] = slots[_g3++];
		} else {
			var _g4 = 0;
			while(_g4 < drawOrderToSetupIndex.length) drawOrder[i++] = slots[drawOrderToSetupIndex[_g4++]];
		}
	}
	,__class__: spine_animation_DrawOrderTimeline
	,__properties__: {get_frameCount:"get_frameCount"}
};
var spine_animation_EventQueue = function(animationState) {
	this.objects = [];
	this.animationState = animationState;
};
$hxClasses["spine.animation.EventQueue"] = spine_animation_EventQueue;
spine_animation_EventQueue.__name__ = "spine.animation.EventQueue";
spine_animation_EventQueue.prototype = {
	drainDisabled: null
	,objects: null
	,animationState: null
	,start: function(entry) {
		this.objects.push("start");
		this.objects.push(entry);
		this.animationState.animationsChanged = true;
	}
	,interrupt: function(entry) {
		this.objects.push("interrupt");
		this.objects.push(entry);
	}
	,end: function(entry) {
		this.objects.push("end");
		this.objects.push(entry);
		this.animationState.animationsChanged = true;
	}
	,dispose: function(entry) {
		this.objects.push("dispose");
		this.objects.push(entry);
	}
	,complete: function(entry) {
		this.objects.push("complete");
		this.objects.push(entry);
	}
	,event: function(entry,event) {
		this.objects.push("event");
		this.objects.push(entry);
		this.objects.push(event);
	}
	,drain: function() {
		if(this.drainDisabled) {
			return;
		}
		this.drainDisabled = true;
		var objects = this.objects;
		var i = 0;
		while(i < objects.length) {
			var type = js_Boot.__cast(objects[i] , String);
			var entry = js_Boot.__cast(objects[i + 1] , spine_animation_TrackEntry);
			switch(type) {
			case "complete":
				entry.onComplete.invoke([entry]);
				this.animationState.onComplete.invoke([entry]);
				break;
			case "end":
				entry.onEnd.invoke([entry]);
				this.animationState.onEnd.invoke([entry]);
				break;
			case "event":
				var event = js_Boot.__cast(objects[i++ + 2] , spine_Event);
				entry.onEvent.invoke([entry,event]);
				this.animationState.onEvent.invoke([entry,event]);
				break;
			case "interrupt":
				entry.onInterrupt.invoke([entry]);
				this.animationState.onInterrupt.invoke([entry]);
				break;
			case "start":
				entry.onStart.invoke([entry]);
				this.animationState.onStart.invoke([entry]);
				break;
			default:
			}
			switch(type) {
			case "dispose":case "end":
				entry.onDispose.invoke([entry]);
				this.animationState.onDispose.invoke([entry]);
				this.animationState.trackEntryPool.free(entry);
				break;
			default:
			}
			i += 2;
		}
		this.clear();
		this.drainDisabled = false;
	}
	,clear: function() {
		this.objects.length = 0;
	}
	,__class__: spine_animation_EventQueue
};
var spine_animation_EventTimeline = function(frameCount) {
	this.frames = [];
	this.events = [];
};
$hxClasses["spine.animation.EventTimeline"] = spine_animation_EventTimeline;
spine_animation_EventTimeline.__name__ = "spine.animation.EventTimeline";
spine_animation_EventTimeline.__interfaces__ = [spine_animation_Timeline];
spine_animation_EventTimeline.prototype = {
	frames: null
	,events: null
	,get_frameCount: function() {
		return this.frames.length;
	}
	,getPropertyId: function() {
		return spine_animation_TimelineType.event.ordinal << 24;
	}
	,setFrame: function(frameIndex,event) {
		this.frames[frameIndex] = event.time;
		this.events[frameIndex] = event;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		if(firedEvents == null) {
			return;
		}
		if(lastTime > time) {
			this.apply(skeleton,lastTime,Infinity,firedEvents,alpha,blend,direction);
			lastTime = -1;
		} else if(lastTime >= this.frames[this.get_frameCount() - 1]) {
			return;
		}
		if(time < this.frames[0]) {
			return;
		}
		var frame;
		if(lastTime < this.frames[0]) {
			frame = 0;
		} else {
			frame = spine_animation_Animation.binarySearch1(this.frames,lastTime);
			var frameTime = this.frames[frame];
			while(frame > 0) {
				if(this.frames[frame - 1] != frameTime) {
					break;
				}
				--frame;
			}
		}
		while(frame < this.get_frameCount() && time >= this.frames[frame]) {
			firedEvents[firedEvents.length] = this.events[frame];
			++frame;
		}
	}
	,__class__: spine_animation_EventTimeline
	,__properties__: {get_frameCount:"get_frameCount"}
};
var spine_animation_IkConstraintTimeline = function(frameCount) {
	spine_animation_CurveTimeline.call(this,frameCount);
	this.frames = [];
};
$hxClasses["spine.animation.IkConstraintTimeline"] = spine_animation_IkConstraintTimeline;
spine_animation_IkConstraintTimeline.__name__ = "spine.animation.IkConstraintTimeline";
spine_animation_IkConstraintTimeline.__super__ = spine_animation_CurveTimeline;
spine_animation_IkConstraintTimeline.prototype = $extend(spine_animation_CurveTimeline.prototype,{
	ikConstraintIndex: null
	,frames: null
	,getPropertyId: function() {
		return (spine_animation_TimelineType.ikConstraint.ordinal << 24) + this.ikConstraintIndex;
	}
	,setFrame: function(frameIndex,time,mix,softness,bendDirection,compress,stretch) {
		frameIndex *= 6;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = mix;
		this.frames[frameIndex + 2] = softness;
		this.frames[frameIndex + 3] = bendDirection;
		this.frames[frameIndex + 4] = compress ? 1 : 0;
		this.frames[frameIndex + 5] = stretch ? 1 : 0;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var constraint = skeleton.ikConstraints[this.ikConstraintIndex];
		if(!constraint.active) {
			return;
		}
		if(time < this.frames[0]) {
			switch(blend) {
			case 0:
				constraint.mix = constraint.get_data().mix;
				constraint.softness = constraint.get_data().softness;
				constraint.bendDirection = constraint.get_data().bendDirection;
				constraint.compress = constraint.get_data().compress;
				constraint.stretch = constraint.get_data().stretch;
				return;
			case 1:
				constraint.mix += (constraint.get_data().mix - constraint.mix) * alpha;
				constraint.softness += (constraint.get_data().softness - constraint.softness) * alpha;
				constraint.bendDirection = constraint.get_data().bendDirection;
				constraint.compress = constraint.get_data().compress;
				constraint.stretch = constraint.get_data().stretch;
				break;
			default:
			}
			return;
		}
		if(time >= this.frames[this.frames.length - 6]) {
			if(blend == 0) {
				constraint.mix = constraint.get_data().mix + (this.frames[this.frames.length + spine_animation_IkConstraintTimeline.PREV_MIX] - constraint.get_data().mix) * alpha;
				constraint.softness = constraint.get_data().softness + (this.frames[this.frames.length + spine_animation_IkConstraintTimeline.PREV_SOFTNESS] - constraint.get_data().softness) * alpha;
				if(direction == spine_animation_MixDirection.Out) {
					constraint.bendDirection = constraint.get_data().bendDirection;
					constraint.compress = constraint.get_data().compress;
					constraint.stretch = constraint.get_data().stretch;
				} else {
					constraint.bendDirection = this.frames[this.frames.length + spine_animation_IkConstraintTimeline.PREV_BEND_DIRECTION] | 0;
					constraint.compress = (this.frames[this.frames.length + spine_animation_IkConstraintTimeline.PREV_COMPRESS] | 0) != 0;
					constraint.stretch = (this.frames[this.frames.length + spine_animation_IkConstraintTimeline.PREV_STRETCH] | 0) != 0;
				}
			} else {
				constraint.mix += (this.frames[this.frames.length + spine_animation_IkConstraintTimeline.PREV_MIX] - constraint.mix) * alpha;
				constraint.softness += (this.frames[this.frames.length + spine_animation_IkConstraintTimeline.PREV_SOFTNESS] - constraint.softness) * alpha;
				if(direction == spine_animation_MixDirection.In) {
					constraint.bendDirection = this.frames[this.frames.length + spine_animation_IkConstraintTimeline.PREV_BEND_DIRECTION] | 0;
					constraint.compress = (this.frames[this.frames.length + spine_animation_IkConstraintTimeline.PREV_COMPRESS] | 0) != 0;
					constraint.stretch = (this.frames[this.frames.length + spine_animation_IkConstraintTimeline.PREV_STRETCH] | 0) != 0;
				}
			}
			return;
		}
		var frame = spine_animation_Animation.binarySearch(this.frames,time,6);
		var mix = this.frames[frame + spine_animation_IkConstraintTimeline.PREV_MIX];
		var softness = this.frames[frame + spine_animation_IkConstraintTimeline.PREV_SOFTNESS];
		var frameTime = this.frames[frame];
		var percent = this.getCurvePercent(frame / 6 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + spine_animation_IkConstraintTimeline.PREV_TIME] - frameTime));
		if(blend == 0) {
			constraint.mix = constraint.get_data().mix + (mix + (this.frames[frame + 1] - mix) * percent - constraint.get_data().mix) * alpha;
			constraint.softness = constraint.get_data().softness + (softness + (this.frames[frame + 2] - softness) * percent - constraint.get_data().softness) * alpha;
			if(direction == spine_animation_MixDirection.Out) {
				constraint.bendDirection = constraint.get_data().bendDirection;
				constraint.compress = constraint.get_data().compress;
				constraint.stretch = constraint.get_data().stretch;
			} else {
				constraint.bendDirection = this.frames[frame + spine_animation_IkConstraintTimeline.PREV_BEND_DIRECTION] | 0;
				constraint.compress = (this.frames[frame + spine_animation_IkConstraintTimeline.PREV_COMPRESS] | 0) != 0;
				constraint.stretch = (this.frames[frame + spine_animation_IkConstraintTimeline.PREV_STRETCH] | 0) != 0;
			}
		} else {
			constraint.mix += (mix + (this.frames[frame + 1] - mix) * percent - constraint.mix) * alpha;
			constraint.softness += (softness + (this.frames[frame + 2] - softness) * percent - constraint.softness) * alpha;
			if(direction == spine_animation_MixDirection.In) {
				constraint.bendDirection = this.frames[frame + spine_animation_IkConstraintTimeline.PREV_BEND_DIRECTION] | 0;
				constraint.compress = (this.frames[frame + spine_animation_IkConstraintTimeline.PREV_COMPRESS] | 0) != 0;
				constraint.stretch = (this.frames[frame + spine_animation_IkConstraintTimeline.PREV_STRETCH] | 0) != 0;
			}
		}
	}
	,__class__: spine_animation_IkConstraintTimeline
});
var spine_animation_Listeners = function() {
	this._listeners = [];
};
$hxClasses["spine.animation.Listeners"] = spine_animation_Listeners;
spine_animation_Listeners.__name__ = "spine.animation.Listeners";
spine_animation_Listeners.prototype = {
	_listeners: null
	,get_listeners: function() {
		return this._listeners;
	}
	,add: function(listener) {
		if(listener == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("listener cannot be null."));
		}
		if(Lambda.indexOf(this._listeners,listener) == -1) {
			this._listeners[this._listeners.length] = listener;
		}
	}
	,remove: function(listener) {
		if(listener == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("listener cannot be null."));
		}
		if(Lambda.indexOf(this._listeners,listener) != -1) {
			this._listeners.splice(Lambda.indexOf(this._listeners,listener),1);
		}
	}
	,invoke: function(args) {
		var _g = 0;
		var _g1 = this._listeners;
		while(_g < _g1.length) _g1[_g++].apply(null,args);
	}
	,__class__: spine_animation_Listeners
	,__properties__: {get_listeners:"get_listeners"}
};
var spine_animation_MixDirection = function(order) {
	this.ordinal = order;
};
$hxClasses["spine.animation.MixDirection"] = spine_animation_MixDirection;
spine_animation_MixDirection.__name__ = "spine.animation.MixDirection";
spine_animation_MixDirection.prototype = {
	ordinal: null
	,__class__: spine_animation_MixDirection
};
var spine_animation_PathConstraintMixTimeline = function(frameCount) {
	spine_animation_CurveTimeline.call(this,frameCount);
	this.frames = [];
};
$hxClasses["spine.animation.PathConstraintMixTimeline"] = spine_animation_PathConstraintMixTimeline;
spine_animation_PathConstraintMixTimeline.__name__ = "spine.animation.PathConstraintMixTimeline";
spine_animation_PathConstraintMixTimeline.__super__ = spine_animation_CurveTimeline;
spine_animation_PathConstraintMixTimeline.prototype = $extend(spine_animation_CurveTimeline.prototype,{
	pathConstraintIndex: null
	,frames: null
	,getPropertyId: function() {
		return (spine_animation_TimelineType.pathConstraintMix.ordinal << 24) + this.pathConstraintIndex;
	}
	,setFrame: function(frameIndex,time,rotateMix,translateMix) {
		frameIndex *= 3;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = rotateMix;
		this.frames[frameIndex + 2] = translateMix;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
		if(!constraint.active) {
			return;
		}
		if(time < this.frames[0]) {
			switch(blend) {
			case 0:
				constraint.rotateMix = constraint.get_data().rotateMix;
				constraint.translateMix = constraint.get_data().translateMix;
				return;
			case 1:
				constraint.rotateMix += (constraint.get_data().rotateMix - constraint.rotateMix) * alpha;
				constraint.translateMix += (constraint.get_data().translateMix - constraint.translateMix) * alpha;
				break;
			default:
			}
			return;
		}
		var rotate;
		var translate;
		if(time >= this.frames[this.frames.length - 3]) {
			rotate = this.frames[this.frames.length + spine_animation_PathConstraintMixTimeline.PREV_ROTATE];
			translate = this.frames[this.frames.length + spine_animation_PathConstraintMixTimeline.PREV_TRANSLATE];
		} else {
			var frame = spine_animation_Animation.binarySearch(this.frames,time,3);
			rotate = this.frames[frame + spine_animation_PathConstraintMixTimeline.PREV_ROTATE];
			translate = this.frames[frame + spine_animation_PathConstraintMixTimeline.PREV_TRANSLATE];
			var frameTime = this.frames[frame];
			var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + spine_animation_PathConstraintMixTimeline.PREV_TIME] - frameTime));
			rotate += (this.frames[frame + 1] - rotate) * percent;
			translate += (this.frames[frame + 2] - translate) * percent;
		}
		if(blend == 0) {
			constraint.rotateMix = constraint.get_data().rotateMix + (rotate - constraint.get_data().rotateMix) * alpha;
			constraint.translateMix = constraint.get_data().translateMix + (translate - constraint.get_data().translateMix) * alpha;
		} else {
			constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;
			constraint.translateMix += (translate - constraint.translateMix) * alpha;
		}
	}
	,__class__: spine_animation_PathConstraintMixTimeline
});
var spine_animation_PathConstraintPositionTimeline = function(frameCount) {
	spine_animation_CurveTimeline.call(this,frameCount);
	this.frames = [];
};
$hxClasses["spine.animation.PathConstraintPositionTimeline"] = spine_animation_PathConstraintPositionTimeline;
spine_animation_PathConstraintPositionTimeline.__name__ = "spine.animation.PathConstraintPositionTimeline";
spine_animation_PathConstraintPositionTimeline.__super__ = spine_animation_CurveTimeline;
spine_animation_PathConstraintPositionTimeline.prototype = $extend(spine_animation_CurveTimeline.prototype,{
	pathConstraintIndex: null
	,frames: null
	,getPropertyId: function() {
		return (spine_animation_TimelineType.pathConstraintPosition.ordinal << 24) + this.pathConstraintIndex;
	}
	,setFrame: function(frameIndex,time,value) {
		frameIndex *= 2;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = value;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
		if(!constraint.active) {
			return;
		}
		if(time < this.frames[0]) {
			switch(blend) {
			case 0:
				constraint.position = constraint.get_data().position;
				return;
			case 1:
				constraint.position += (constraint.get_data().position - constraint.position) * alpha;
				break;
			default:
			}
			return;
		}
		var position;
		if(time >= this.frames[this.frames.length - 2]) {
			position = this.frames[this.frames.length + spine_animation_PathConstraintPositionTimeline.PREV_VALUE];
		} else {
			var frame = spine_animation_Animation.binarySearch(this.frames,time,2);
			position = this.frames[frame + spine_animation_PathConstraintPositionTimeline.PREV_VALUE];
			var frameTime = this.frames[frame];
			position += (this.frames[frame + 1] - position) * this.getCurvePercent(frame / 2 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + spine_animation_PathConstraintPositionTimeline.PREV_TIME] - frameTime));
		}
		if(blend == 0) {
			constraint.position = constraint.get_data().position + (position - constraint.get_data().position) * alpha;
		} else {
			constraint.position += (position - constraint.position) * alpha;
		}
	}
	,__class__: spine_animation_PathConstraintPositionTimeline
});
var spine_animation_PathConstraintSpacingTimeline = function(frameCount) {
	spine_animation_PathConstraintPositionTimeline.call(this,frameCount);
};
$hxClasses["spine.animation.PathConstraintSpacingTimeline"] = spine_animation_PathConstraintSpacingTimeline;
spine_animation_PathConstraintSpacingTimeline.__name__ = "spine.animation.PathConstraintSpacingTimeline";
spine_animation_PathConstraintSpacingTimeline.__super__ = spine_animation_PathConstraintPositionTimeline;
spine_animation_PathConstraintSpacingTimeline.prototype = $extend(spine_animation_PathConstraintPositionTimeline.prototype,{
	getPropertyId: function() {
		return (spine_animation_TimelineType.pathConstraintSpacing.ordinal << 24) + this.pathConstraintIndex;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var constraint = skeleton.pathConstraints[this.pathConstraintIndex];
		if(!constraint.active) {
			return;
		}
		if(time < this.frames[0]) {
			switch(blend) {
			case 0:
				constraint.spacing = constraint.get_data().spacing;
				return;
			case 1:
				constraint.spacing += (constraint.get_data().spacing - constraint.spacing) * alpha;
				break;
			default:
			}
			return;
		}
		var spacing;
		if(time >= this.frames[this.frames.length - 2]) {
			spacing = this.frames[this.frames.length + spine_animation_PathConstraintPositionTimeline.PREV_VALUE];
		} else {
			var frame = spine_animation_Animation.binarySearch(this.frames,time,2);
			spacing = this.frames[frame + spine_animation_PathConstraintPositionTimeline.PREV_VALUE];
			var frameTime = this.frames[frame];
			spacing += (this.frames[frame + 1] - spacing) * this.getCurvePercent(frame / 2 - 1 | 0,1 - (time - frameTime) / (this.frames[frame + spine_animation_PathConstraintPositionTimeline.PREV_TIME] - frameTime));
		}
		if(blend == 0) {
			constraint.spacing = constraint.get_data().spacing + (spacing - constraint.get_data().spacing) * alpha;
		} else {
			constraint.spacing += (spacing - constraint.spacing) * alpha;
		}
	}
	,__class__: spine_animation_PathConstraintSpacingTimeline
});
var spine_animation_RotateTimeline = function(frameCount) {
	spine_animation_CurveTimeline.call(this,frameCount);
	this.frames = [];
};
$hxClasses["spine.animation.RotateTimeline"] = spine_animation_RotateTimeline;
spine_animation_RotateTimeline.__name__ = "spine.animation.RotateTimeline";
spine_animation_RotateTimeline.__super__ = spine_animation_CurveTimeline;
spine_animation_RotateTimeline.prototype = $extend(spine_animation_CurveTimeline.prototype,{
	boneIndex: null
	,frames: null
	,getPropertyId: function() {
		return (spine_animation_TimelineType.rotate.ordinal << 24) + this.boneIndex;
	}
	,setFrame: function(frameIndex,time,degrees) {
		frameIndex <<= 1;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = degrees;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var frames = this.frames;
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		var r;
		if(time < frames[0]) {
			switch(blend) {
			case 0:
				bone.rotation = bone.get_data().rotation;
				return;
			case 1:
				r = bone.get_data().rotation - bone.rotation;
				bone.rotation += (r - (16384 - (16384.499999999996 - r / 360 | 0)) * 360) * alpha;
				break;
			default:
			}
			return;
		}
		if(time >= frames[frames.length - 2]) {
			r = frames[frames.length + spine_animation_RotateTimeline.PREV_ROTATION];
			switch(blend) {
			case 0:
				bone.rotation = bone.get_data().rotation + r * alpha;
				break;
			case 1:case 2:
				r += bone.get_data().rotation - bone.rotation;
				r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
				break;
			default:
			}
			switch(blend) {
			case 1:case 2:case 3:
				bone.rotation += r * alpha;
				break;
			default:
			}
			return;
		}
		var frame = spine_animation_Animation.binarySearch(frames,time,2);
		var prevRotation = frames[frame + spine_animation_RotateTimeline.PREV_ROTATION];
		var frameTime = frames[frame];
		r = frames[frame + 1] - prevRotation;
		r = prevRotation + (r - (16384 - (16384.499999999996 - r / 360 | 0)) * 360) * this.getCurvePercent((frame >> 1) - 1,1 - (time - frameTime) / (frames[frame + spine_animation_RotateTimeline.PREV_TIME] - frameTime));
		switch(blend) {
		case 0:
			bone.rotation = bone.get_data().rotation + (r - (16384 - (16384.499999999996 - r / 360 | 0)) * 360) * alpha;
			break;
		case 1:case 2:
			r += bone.get_data().rotation - bone.rotation;
			break;
		default:
		}
		switch(blend) {
		case 1:case 2:case 3:
			bone.rotation += (r - (16384 - (16384.499999999996 - r / 360 | 0)) * 360) * alpha;
			break;
		default:
		}
	}
	,__class__: spine_animation_RotateTimeline
});
var spine_animation_TranslateTimeline = function(frameCount) {
	spine_animation_CurveTimeline.call(this,frameCount);
	this.frames = [];
};
$hxClasses["spine.animation.TranslateTimeline"] = spine_animation_TranslateTimeline;
spine_animation_TranslateTimeline.__name__ = "spine.animation.TranslateTimeline";
spine_animation_TranslateTimeline.__super__ = spine_animation_CurveTimeline;
spine_animation_TranslateTimeline.prototype = $extend(spine_animation_CurveTimeline.prototype,{
	boneIndex: null
	,frames: null
	,getPropertyId: function() {
		return (spine_animation_TimelineType.translate.ordinal << 24) + this.boneIndex;
	}
	,setFrame: function(frameIndex,time,x,y) {
		frameIndex *= 3;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = x;
		this.frames[frameIndex + 2] = y;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var frames = this.frames;
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		if(time < frames[0]) {
			switch(blend) {
			case 0:
				bone.x = bone.get_data().x;
				bone.y = bone.get_data().y;
				return;
			case 1:
				bone.x += (bone.get_data().x - bone.x) * alpha;
				bone.y += (bone.get_data().y - bone.y) * alpha;
				break;
			default:
			}
			return;
		}
		var x;
		var y;
		if(time >= frames[frames.length - 3]) {
			x = frames[frames.length + spine_animation_TranslateTimeline.PREV_X];
			y = frames[frames.length + spine_animation_TranslateTimeline.PREV_Y];
		} else {
			var frame = spine_animation_Animation.binarySearch(frames,time,3);
			x = frames[frame + spine_animation_TranslateTimeline.PREV_X];
			y = frames[frame + spine_animation_TranslateTimeline.PREV_Y];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (frames[frame + spine_animation_TranslateTimeline.PREV_TIME] - frameTime));
			x += (frames[frame + 1] - x) * percent;
			y += (frames[frame + 2] - y) * percent;
		}
		switch(blend) {
		case 0:
			bone.x = bone.get_data().x + x * alpha;
			bone.y = bone.get_data().y + y * alpha;
			break;
		case 1:case 2:
			bone.x += (bone.get_data().x + x - bone.x) * alpha;
			bone.y += (bone.get_data().y + y - bone.y) * alpha;
			break;
		case 3:
			bone.x += x * alpha;
			bone.y += y * alpha;
			break;
		}
	}
	,__class__: spine_animation_TranslateTimeline
});
var spine_animation_ScaleTimeline = function(frameCount) {
	spine_animation_TranslateTimeline.call(this,frameCount);
};
$hxClasses["spine.animation.ScaleTimeline"] = spine_animation_ScaleTimeline;
spine_animation_ScaleTimeline.__name__ = "spine.animation.ScaleTimeline";
spine_animation_ScaleTimeline.__super__ = spine_animation_TranslateTimeline;
spine_animation_ScaleTimeline.prototype = $extend(spine_animation_TranslateTimeline.prototype,{
	getPropertyId: function() {
		return (spine_animation_TimelineType.scale.ordinal << 24) + this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var frames = this.frames;
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		if(time < frames[0]) {
			switch(blend) {
			case 0:
				bone.scaleX = bone.get_data().scaleX;
				bone.scaleY = bone.get_data().scaleY;
				return;
			case 1:
				bone.scaleX += (bone.get_data().scaleX - bone.scaleX) * alpha;
				bone.scaleY += (bone.get_data().scaleY - bone.scaleY) * alpha;
				break;
			default:
			}
			return;
		}
		var x;
		var y;
		if(time >= frames[frames.length - 3]) {
			x = frames[frames.length + spine_animation_TranslateTimeline.PREV_X] * bone.get_data().scaleX;
			y = frames[frames.length + spine_animation_TranslateTimeline.PREV_Y] * bone.get_data().scaleY;
		} else {
			var frame = spine_animation_Animation.binarySearch(frames,time,3);
			x = frames[frame + spine_animation_TranslateTimeline.PREV_X];
			y = frames[frame + spine_animation_TranslateTimeline.PREV_Y];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (frames[frame + spine_animation_TranslateTimeline.PREV_TIME] - frameTime));
			x = (x + (frames[frame + 1] - x) * percent) * bone.get_data().scaleX;
			y = (y + (frames[frame + 2] - y) * percent) * bone.get_data().scaleY;
		}
		if(alpha == 1) {
			if(blend == 3) {
				bone.scaleX += x - bone.get_data().scaleX;
				bone.scaleY += y - bone.get_data().scaleY;
			} else {
				bone.scaleX = x;
				bone.scaleY = y;
			}
		} else {
			var bx;
			var by;
			if(direction == spine_animation_MixDirection.Out) {
				switch(blend) {
				case 0:
					bx = bone.get_data().scaleX;
					by = bone.get_data().scaleY;
					bone.scaleX = bx + (Math.abs(x) * spine_MathUtils.signum(bx) - bx) * alpha;
					bone.scaleY = by + (Math.abs(y) * spine_MathUtils.signum(by) - by) * alpha;
					break;
				case 1:case 2:
					bx = bone.scaleX;
					by = bone.scaleY;
					bone.scaleX = bx + (Math.abs(x) * spine_MathUtils.signum(bx) - bx) * alpha;
					bone.scaleY = by + (Math.abs(y) * spine_MathUtils.signum(by) - by) * alpha;
					break;
				case 3:
					bx = bone.scaleX;
					by = bone.scaleY;
					bone.scaleX = bx + (Math.abs(x) * spine_MathUtils.signum(bx) - bone.get_data().scaleX) * alpha;
					bone.scaleY = by + (Math.abs(y) * spine_MathUtils.signum(by) - bone.get_data().scaleY) * alpha;
					break;
				}
			} else {
				switch(blend) {
				case 0:
					bx = Math.abs(bone.get_data().scaleX) * spine_MathUtils.signum(x);
					by = Math.abs(bone.get_data().scaleY) * spine_MathUtils.signum(y);
					bone.scaleX = bx + (x - bx) * alpha;
					bone.scaleY = by + (y - by) * alpha;
					break;
				case 1:case 2:
					bx = Math.abs(bone.scaleX) * spine_MathUtils.signum(x);
					by = Math.abs(bone.scaleY) * spine_MathUtils.signum(y);
					bone.scaleX = bx + (x - bx) * alpha;
					bone.scaleY = by + (y - by) * alpha;
					break;
				case 3:
					bx = spine_MathUtils.signum(x);
					by = spine_MathUtils.signum(y);
					bone.scaleX = Math.abs(bone.scaleX) * bx + (x - Math.abs(bone.get_data().scaleX) * bx) * alpha;
					bone.scaleY = Math.abs(bone.scaleY) * by + (y - Math.abs(bone.get_data().scaleY) * by) * alpha;
					break;
				}
			}
		}
	}
	,__class__: spine_animation_ScaleTimeline
});
var spine_animation_ShearTimeline = function(frameCount) {
	spine_animation_TranslateTimeline.call(this,frameCount);
};
$hxClasses["spine.animation.ShearTimeline"] = spine_animation_ShearTimeline;
spine_animation_ShearTimeline.__name__ = "spine.animation.ShearTimeline";
spine_animation_ShearTimeline.__super__ = spine_animation_TranslateTimeline;
spine_animation_ShearTimeline.prototype = $extend(spine_animation_TranslateTimeline.prototype,{
	getPropertyId: function() {
		return (spine_animation_TimelineType.shear.ordinal << 24) + this.boneIndex;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var frames = this.frames;
		var bone = skeleton.bones[this.boneIndex];
		if(!bone.active) {
			return;
		}
		if(time < frames[0]) {
			switch(blend) {
			case 0:
				bone.shearX = bone.get_data().shearX;
				bone.shearY = bone.get_data().shearY;
				return;
			case 1:
				bone.shearX += (bone.get_data().shearX - bone.shearX) * alpha;
				bone.shearY += (bone.get_data().shearY - bone.shearY) * alpha;
				break;
			default:
			}
			return;
		}
		var x;
		var y;
		if(time >= frames[frames.length - 3]) {
			x = frames[frames.length + spine_animation_TranslateTimeline.PREV_X];
			y = frames[frames.length + spine_animation_TranslateTimeline.PREV_Y];
		} else {
			var frame = spine_animation_Animation.binarySearch(frames,time,3);
			x = frames[frame + spine_animation_TranslateTimeline.PREV_X];
			y = frames[frame + spine_animation_TranslateTimeline.PREV_Y];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 3 - 1 | 0,1 - (time - frameTime) / (frames[frame + spine_animation_TranslateTimeline.PREV_TIME] - frameTime));
			x += (frames[frame + 1] - x) * percent;
			y += (frames[frame + 2] - y) * percent;
		}
		switch(blend) {
		case 0:
			bone.shearX = bone.get_data().shearX + x * alpha;
			bone.shearY = bone.get_data().shearY + y * alpha;
			break;
		case 1:case 2:
			bone.shearX += (bone.get_data().shearX + x - bone.shearX) * alpha;
			bone.shearY += (bone.get_data().shearY + y - bone.shearY) * alpha;
			break;
		case 3:
			bone.shearX += x * alpha;
			bone.shearY += y * alpha;
			break;
		}
	}
	,__class__: spine_animation_ShearTimeline
});
var spine_animation_TimelineType = function(order) {
	this.ordinal = order;
};
$hxClasses["spine.animation.TimelineType"] = spine_animation_TimelineType;
spine_animation_TimelineType.__name__ = "spine.animation.TimelineType";
spine_animation_TimelineType.prototype = {
	ordinal: null
	,__class__: spine_animation_TimelineType
};
var spine_animation_TrackEntry = function() {
	this.timelinesRotation = [];
	this.timelineHoldMix = [];
	this.timelineMode = [];
	this.mixBlend = 2;
	this.totalAlpha = 0;
	this.onEvent = new spine_animation_Listeners();
	this.onComplete = new spine_animation_Listeners();
	this.onDispose = new spine_animation_Listeners();
	this.onEnd = new spine_animation_Listeners();
	this.onInterrupt = new spine_animation_Listeners();
	this.onStart = new spine_animation_Listeners();
};
$hxClasses["spine.animation.TrackEntry"] = spine_animation_TrackEntry;
spine_animation_TrackEntry.__name__ = "spine.animation.TrackEntry";
spine_animation_TrackEntry.__interfaces__ = [spine_Poolable];
spine_animation_TrackEntry.prototype = {
	animation: null
	,next: null
	,mixingFrom: null
	,mixingTo: null
	,onStart: null
	,onInterrupt: null
	,onEnd: null
	,onDispose: null
	,onComplete: null
	,onEvent: null
	,trackIndex: null
	,loop: null
	,holdPrevious: null
	,eventThreshold: null
	,attachmentThreshold: null
	,drawOrderThreshold: null
	,animationStart: null
	,animationEnd: null
	,animationLast: null
	,nextAnimationLast: null
	,delay: null
	,trackTime: null
	,trackLast: null
	,nextTrackLast: null
	,trackEnd: null
	,timeScale: null
	,alpha: null
	,mixTime: null
	,mixDuration: null
	,interruptAlpha: null
	,totalAlpha: null
	,mixBlend: null
	,timelineMode: null
	,timelineHoldMix: null
	,timelinesRotation: null
	,getAnimationTime: function() {
		if(this.loop) {
			var duration = this.animationEnd - this.animationStart;
			if(duration == 0) {
				return this.animationStart;
			}
			return this.trackTime % duration + this.animationStart;
		}
		return Math.min(this.trackTime + this.animationStart,this.animationEnd);
	}
	,reset: function() {
		this.next = null;
		this.mixingFrom = null;
		this.mixingTo = null;
		this.animation = null;
		this.onStart.get_listeners().length = 0;
		this.onInterrupt.get_listeners().length = 0;
		this.onEnd.get_listeners().length = 0;
		this.onDispose.get_listeners().length = 0;
		this.onComplete.get_listeners().length = 0;
		this.onEvent.get_listeners().length = 0;
		this.timelineMode.length = 0;
		this.timelineHoldMix.length = 0;
		this.timelinesRotation.length = 0;
	}
	,resetRotationDirection: function() {
		this.timelinesRotation.length = 0;
	}
	,__class__: spine_animation_TrackEntry
};
var spine_animation_TransformConstraintTimeline = function(frameCount) {
	spine_animation_CurveTimeline.call(this,frameCount);
	this.frames = [];
};
$hxClasses["spine.animation.TransformConstraintTimeline"] = spine_animation_TransformConstraintTimeline;
spine_animation_TransformConstraintTimeline.__name__ = "spine.animation.TransformConstraintTimeline";
spine_animation_TransformConstraintTimeline.__super__ = spine_animation_CurveTimeline;
spine_animation_TransformConstraintTimeline.prototype = $extend(spine_animation_CurveTimeline.prototype,{
	transformConstraintIndex: null
	,frames: null
	,getPropertyId: function() {
		return (spine_animation_TimelineType.transformConstraint.ordinal << 24) + this.transformConstraintIndex;
	}
	,setFrame: function(frameIndex,time,rotateMix,translateMix,scaleMix,shearMix) {
		frameIndex *= 5;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = rotateMix;
		this.frames[frameIndex + 2] = translateMix;
		this.frames[frameIndex + 3] = scaleMix;
		this.frames[frameIndex + 4] = shearMix;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var frames = this.frames;
		var constraint = skeleton.transformConstraints[this.transformConstraintIndex];
		if(!constraint.active) {
			return;
		}
		var data;
		if(time < frames[0]) {
			data = constraint.get_data();
			switch(blend) {
			case 0:
				constraint.rotateMix = data.rotateMix;
				constraint.translateMix = data.translateMix;
				constraint.scaleMix = data.scaleMix;
				constraint.shearMix = data.shearMix;
				return;
			case 1:
				constraint.rotateMix += (data.rotateMix - constraint.rotateMix) * alpha;
				constraint.translateMix += (data.translateMix - constraint.translateMix) * alpha;
				constraint.scaleMix += (data.scaleMix - constraint.scaleMix) * alpha;
				constraint.shearMix += (data.shearMix - constraint.shearMix) * alpha;
				break;
			default:
			}
			return;
		}
		var rotate;
		var translate;
		var scale;
		var shear;
		if(time >= frames[frames.length - 5]) {
			var i = frames.length;
			rotate = frames[i + spine_animation_TransformConstraintTimeline.PREV_ROTATE];
			translate = frames[i + spine_animation_TransformConstraintTimeline.PREV_TRANSLATE];
			scale = frames[i + spine_animation_TransformConstraintTimeline.PREV_SCALE];
			shear = frames[i + spine_animation_TransformConstraintTimeline.PREV_SHEAR];
		} else {
			var frame = spine_animation_Animation.binarySearch(frames,time,5);
			rotate = frames[frame + spine_animation_TransformConstraintTimeline.PREV_ROTATE];
			translate = frames[frame + spine_animation_TransformConstraintTimeline.PREV_TRANSLATE];
			scale = frames[frame + spine_animation_TransformConstraintTimeline.PREV_SCALE];
			shear = frames[frame + spine_animation_TransformConstraintTimeline.PREV_SHEAR];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 5 - 1 | 0,1 - (time - frameTime) / (frames[frame + spine_animation_TransformConstraintTimeline.PREV_TIME] - frameTime));
			rotate += (frames[frame + 1] - rotate) * percent;
			translate += (frames[frame + 2] - translate) * percent;
			scale += (frames[frame + 3] - scale) * percent;
			shear += (frames[frame + 4] - shear) * percent;
		}
		if(blend == 0) {
			data = constraint.get_data();
			constraint.rotateMix = data.rotateMix + (rotate - data.rotateMix) * alpha;
			constraint.translateMix = data.translateMix + (translate - data.translateMix) * alpha;
			constraint.scaleMix = data.scaleMix + (scale - data.scaleMix) * alpha;
			constraint.shearMix = data.shearMix + (shear - data.shearMix) * alpha;
		} else {
			constraint.rotateMix += (rotate - constraint.rotateMix) * alpha;
			constraint.translateMix += (translate - constraint.translateMix) * alpha;
			constraint.scaleMix += (scale - constraint.scaleMix) * alpha;
			constraint.shearMix += (shear - constraint.shearMix) * alpha;
		}
	}
	,__class__: spine_animation_TransformConstraintTimeline
});
var spine_animation_TwoColorTimeline = function(frameCount) {
	spine_animation_CurveTimeline.call(this,frameCount);
	this.frames = [];
};
$hxClasses["spine.animation.TwoColorTimeline"] = spine_animation_TwoColorTimeline;
spine_animation_TwoColorTimeline.__name__ = "spine.animation.TwoColorTimeline";
spine_animation_TwoColorTimeline.__super__ = spine_animation_CurveTimeline;
spine_animation_TwoColorTimeline.prototype = $extend(spine_animation_CurveTimeline.prototype,{
	slotIndex: null
	,frames: null
	,getPropertyId: function() {
		return (spine_animation_TimelineType.twoColor.ordinal << 24) + this.slotIndex;
	}
	,setFrame: function(frameIndex,time,r,g,b,a,r2,g2,b2) {
		frameIndex *= 8;
		this.frames[frameIndex] = time;
		this.frames[frameIndex + 1] = r;
		this.frames[frameIndex + 2] = g;
		this.frames[frameIndex + 3] = b;
		this.frames[frameIndex + 4] = a;
		this.frames[frameIndex + 5] = r2;
		this.frames[frameIndex + 6] = g2;
		this.frames[frameIndex + 7] = b2;
	}
	,apply: function(skeleton,lastTime,time,firedEvents,alpha,blend,direction) {
		var frames = this.frames;
		var slot = skeleton.slots[this.slotIndex];
		var light;
		var dark;
		if(!slot.get_bone().active) {
			return;
		}
		if(time < frames[0]) {
			switch(blend) {
			case 0:
				slot.color.setFromColor(slot.get_data().color);
				slot.darkColor.setFromColor(slot.get_data().darkColor);
				return;
			case 1:
				light = slot.color;
				dark = slot.darkColor;
				var setupLight = slot.get_data().color;
				var setupDark = slot.get_data().darkColor;
				light.add((setupLight.r - light.r) * alpha,(setupLight.g - light.g) * alpha,(setupLight.b - light.b) * alpha,(setupLight.a - light.a) * alpha);
				dark.add((setupDark.r - dark.r) * alpha,(setupDark.g - dark.g) * alpha,(setupDark.b - dark.b) * alpha,0);
				break;
			default:
			}
			return;
		}
		var r;
		var g;
		var b;
		var a;
		var r2;
		var g2;
		var b2;
		if(time >= frames[frames.length - 8]) {
			var i = frames.length;
			r = frames[i + spine_animation_TwoColorTimeline.PREV_R];
			g = frames[i + spine_animation_TwoColorTimeline.PREV_G];
			b = frames[i + spine_animation_TwoColorTimeline.PREV_B];
			a = frames[i + spine_animation_TwoColorTimeline.PREV_A];
			r2 = frames[i + spine_animation_TwoColorTimeline.PREV_R2];
			g2 = frames[i + spine_animation_TwoColorTimeline.PREV_G2];
			b2 = frames[i + spine_animation_TwoColorTimeline.PREV_B2];
		} else {
			var frame = spine_animation_Animation.binarySearch(frames,time,8);
			r = frames[frame + spine_animation_TwoColorTimeline.PREV_R];
			g = frames[frame + spine_animation_TwoColorTimeline.PREV_G];
			b = frames[frame + spine_animation_TwoColorTimeline.PREV_B];
			a = frames[frame + spine_animation_TwoColorTimeline.PREV_A];
			r2 = frames[frame + spine_animation_TwoColorTimeline.PREV_R2];
			g2 = frames[frame + spine_animation_TwoColorTimeline.PREV_G2];
			b2 = frames[frame + spine_animation_TwoColorTimeline.PREV_B2];
			var frameTime = frames[frame];
			var percent = this.getCurvePercent(frame / 8 - 1 | 0,1 - (time - frameTime) / (frames[frame + spine_animation_TwoColorTimeline.PREV_TIME] - frameTime));
			r += (frames[frame + 1] - r) * percent;
			g += (frames[frame + 2] - g) * percent;
			b += (frames[frame + 3] - b) * percent;
			a += (frames[frame + 4] - a) * percent;
			r2 += (frames[frame + 5] - r2) * percent;
			g2 += (frames[frame + 6] - g2) * percent;
			b2 += (frames[frame + 7] - b2) * percent;
		}
		if(alpha == 1) {
			slot.color.setFrom(r,g,b,a);
			slot.darkColor.setFrom(r2,g2,b2,1);
		} else {
			light = slot.color;
			dark = slot.darkColor;
			if(blend == 0) {
				light.setFromColor(slot.get_data().color);
				dark.setFromColor(slot.get_data().darkColor);
			}
			light.add((r - light.r) * alpha,(g - light.g) * alpha,(b - light.b) * alpha,(a - light.a) * alpha);
			dark.add((r2 - dark.r) * alpha,(g2 - dark.g) * alpha,(b2 - dark.b) * alpha,0);
		}
	}
	,__class__: spine_animation_TwoColorTimeline
});
var spine_atlas_Atlas = function(object,textureLoader) {
	this.regions = [];
	this.pages = [];
	if(object == null) {
		return;
	}
	if(typeof(object) == "string") {
		this.load(Std.string(object),textureLoader);
	} else if(((object) instanceof haxe_io_Bytes)) {
		this.load((js_Boot.__cast(object , haxe_io_Bytes)).toString(),textureLoader);
	} else {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("object must be a string or ByteArray containing .atlas data."));
	}
};
$hxClasses["spine.atlas.Atlas"] = spine_atlas_Atlas;
spine_atlas_Atlas.__name__ = "spine.atlas.Atlas";
spine_atlas_Atlas.prototype = {
	pages: null
	,regions: null
	,textureLoader: null
	,load: function(atlasText,textureLoader) {
		if(textureLoader == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("textureLoader cannot be null."));
		}
		this.textureLoader = textureLoader;
		var reader = new spine_atlas_Reader(atlasText);
		var tuple = [];
		tuple.length = 4;
		var page = null;
		while(true) {
			var line = reader.readLine();
			if(line == null) {
				break;
			}
			line = reader.trim(line);
			if(line.length == 0) {
				page = null;
			} else if(page == null) {
				page = new spine_atlas_AtlasPage();
				page.name = line;
				if(reader.readTuple(tuple) == 2) {
					page.width = tuple[0] | 0;
					page.height = tuple[1] | 0;
					reader.readTuple(tuple);
				}
				page.format = Std.string(tuple[0]);
				reader.readTuple(tuple);
				page.minFilter = Std.string(tuple[0]);
				page.magFilter = Std.string(tuple[1]);
				var direction = reader.readValue();
				page.uWrap = spine_atlas_TextureWrap.clampToEdge;
				page.vWrap = spine_atlas_TextureWrap.clampToEdge;
				if(direction == "x") {
					page.uWrap = spine_atlas_TextureWrap.repeat;
				} else if(direction == "y") {
					page.vWrap = spine_atlas_TextureWrap.repeat;
				} else if(direction == "xy") {
					page.uWrap = page.vWrap = spine_atlas_TextureWrap.repeat;
				}
				textureLoader.loadPage(page,line);
				this.pages[this.pages.length] = page;
			} else {
				var region = new spine_atlas_AtlasRegion();
				region.name = line;
				region.page = page;
				var rotateValue = reader.readValue();
				if(rotateValue == "true") {
					region.degrees = 90;
				} else if(rotateValue == "false") {
					region.degrees = 0;
				} else {
					region.degrees = Std.parseInt(rotateValue);
				}
				region.rotate = region.degrees == 90;
				reader.readTuple(tuple);
				var x = tuple[0] | 0;
				var y = tuple[1] | 0;
				reader.readTuple(tuple);
				var width = tuple[0] | 0;
				var height = tuple[1] | 0;
				region.u = x / page.width;
				region.v = y / page.height;
				if(region.rotate) {
					region.u2 = (x + height) / page.width;
					region.v2 = (y + width) / page.height;
				} else {
					region.u2 = (x + width) / page.width;
					region.v2 = (y + height) / page.height;
				}
				region.x = x;
				region.y = y;
				region.width = Math.floor(Math.abs(width));
				region.height = Math.floor(Math.abs(height));
				if(reader.readTuple(tuple) == 4) {
					region.splits = [];
					if(reader.readTuple(tuple) == 4) {
						region.pads = [];
						reader.readTuple(tuple);
					}
				}
				region.originalWidth = tuple[0] | 0;
				region.originalHeight = tuple[1] | 0;
				reader.readTuple(tuple);
				region.offsetX = tuple[0] | 0;
				region.offsetY = tuple[1] | 0;
				region.index = Std.parseInt(reader.readValue());
				textureLoader.loadRegion(region);
				this.regions[this.regions.length] = region;
			}
		}
	}
	,findRegion: function(name) {
		var _g = 0;
		var _g1 = this.regions.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.regions[i].name == name) {
				return this.regions[i];
			}
		}
		return null;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.pages.length;
		while(_g < _g1) this.textureLoader.unloadPage(this.pages[_g++]);
	}
	,__class__: spine_atlas_Atlas
};
var spine_atlas_Reader = function(text) {
	this.index = 0;
	this.lines = new EReg("\r\n|\r|\n","g").split(text);
};
$hxClasses["spine.atlas.Reader"] = spine_atlas_Reader;
spine_atlas_Reader.__name__ = "spine.atlas.Reader";
spine_atlas_Reader.prototype = {
	lines: null
	,index: null
	,trim: function(value) {
		var ereg_r = new RegExp("^\\s+|\\s+$","gs".split("u").join(""));
		return value.replace(ereg_r,"");
	}
	,readLine: function() {
		if(this.index >= this.lines.length) {
			return null;
		}
		return this.lines[this.index++];
	}
	,readValue: function() {
		var line = this.readLine();
		var colon = line.indexOf(":");
		if(colon == -1) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Invalid line: " + line));
		}
		return this.trim(line.substring(colon + 1));
	}
	,readTuple: function(tuple) {
		var line = this.readLine();
		var colon = line.indexOf(":");
		if(colon == -1) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Invalid line: " + line));
		}
		var i = 0;
		var lastMatch = colon + 1;
		while(i < 3) {
			var comma = line.indexOf(",",lastMatch);
			if(comma == -1) {
				break;
			}
			tuple[i] = this.trim(HxOverrides.substr(line,lastMatch,comma - lastMatch));
			lastMatch = comma + 1;
			++i;
		}
		tuple[i] = this.trim(line.substring(lastMatch));
		return i + 1;
	}
	,__class__: spine_atlas_Reader
};
var spine_atlas_AtlasPage = function() {
};
$hxClasses["spine.atlas.AtlasPage"] = spine_atlas_AtlasPage;
spine_atlas_AtlasPage.__name__ = "spine.atlas.AtlasPage";
spine_atlas_AtlasPage.prototype = {
	name: null
	,format: null
	,minFilter: null
	,magFilter: null
	,uWrap: null
	,vWrap: null
	,rendererObject: null
	,width: null
	,height: null
	,__class__: spine_atlas_AtlasPage
};
var spine_atlas_AtlasRegion = function() {
};
$hxClasses["spine.atlas.AtlasRegion"] = spine_atlas_AtlasRegion;
spine_atlas_AtlasRegion.__name__ = "spine.atlas.AtlasRegion";
spine_atlas_AtlasRegion.prototype = {
	page: null
	,name: null
	,x: null
	,y: null
	,width: null
	,height: null
	,u: null
	,v: null
	,u2: null
	,v2: null
	,offsetX: null
	,offsetY: null
	,originalWidth: null
	,originalHeight: null
	,index: null
	,rotate: null
	,degrees: null
	,splits: null
	,pads: null
	,rendererObject: null
	,__class__: spine_atlas_AtlasRegion
};
var spine_atlas_TextureWrap = function(ordinal,name) {
	this.ordinal = ordinal;
	this.name = name;
};
$hxClasses["spine.atlas.TextureWrap"] = spine_atlas_TextureWrap;
spine_atlas_TextureWrap.__name__ = "spine.atlas.TextureWrap";
spine_atlas_TextureWrap.prototype = {
	ordinal: null
	,name: null
	,__class__: spine_atlas_TextureWrap
};
var spine_attachments_AttachmentLoader = function() { };
$hxClasses["spine.attachments.AttachmentLoader"] = spine_attachments_AttachmentLoader;
spine_attachments_AttachmentLoader.__name__ = "spine.attachments.AttachmentLoader";
spine_attachments_AttachmentLoader.__isInterface__ = true;
spine_attachments_AttachmentLoader.prototype = {
	newRegionAttachment: null
	,newMeshAttachment: null
	,newBoundingBoxAttachment: null
	,newPathAttachment: null
	,newPointAttachment: null
	,newClippingAttachment: null
	,__class__: spine_attachments_AttachmentLoader
};
var spine_attachments_AtlasAttachmentLoader = function(atlas) {
	if(atlas == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("atlas cannot be null."));
	}
	this.atlas = atlas;
};
$hxClasses["spine.attachments.AtlasAttachmentLoader"] = spine_attachments_AtlasAttachmentLoader;
spine_attachments_AtlasAttachmentLoader.__name__ = "spine.attachments.AtlasAttachmentLoader";
spine_attachments_AtlasAttachmentLoader.__interfaces__ = [spine_attachments_AttachmentLoader];
spine_attachments_AtlasAttachmentLoader.nextPOT = function(value) {
	--value;
	value |= value >> 1;
	value |= value >> 2;
	value |= value >> 4;
	value |= value >> 8;
	value |= value >> 16;
	return value + 1;
};
spine_attachments_AtlasAttachmentLoader.prototype = {
	atlas: null
	,newRegionAttachment: function(skin,name,path) {
		var region = this.atlas.findRegion(path);
		if(region == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Region not found in atlas: " + path + " (region attachment: " + name + ")"));
		}
		var attachment = new spine_attachments_RegionAttachment(name);
		attachment.rendererObject = region;
		var scaleX = 1;
		var scaleY = 1;
		attachment.setUVs(region.u * scaleX,region.v * scaleY,region.u2 * scaleX,region.v2 * scaleY,region.rotate);
		attachment.regionOffsetX = region.offsetX;
		attachment.regionOffsetY = region.offsetY;
		attachment.regionWidth = region.width;
		attachment.regionHeight = region.height;
		attachment.regionOriginalWidth = region.originalWidth;
		attachment.regionOriginalHeight = region.originalHeight;
		return attachment;
	}
	,newMeshAttachment: function(skin,name,path) {
		var region = this.atlas.findRegion(path);
		if(region == null) {
			throw new js__$Boot_HaxeError(new spine_flash_errors_Error("Region not found in atlas: " + path + " (mesh attachment: " + name + ")"));
		}
		var attachment = new spine_attachments_MeshAttachment(name);
		attachment.rendererObject = region;
		var scaleX = 1;
		var scaleY = 1;
		attachment.regionU = region.u * scaleX;
		attachment.regionV = region.v * scaleY;
		attachment.regionU2 = region.u2 * scaleX;
		attachment.regionV2 = region.v2 * scaleY;
		attachment.regionRotate = region.rotate;
		attachment.regionDegrees = region.degrees;
		attachment.regionOffsetX = region.offsetX;
		attachment.regionOffsetY = region.offsetY;
		attachment.regionWidth = region.width;
		attachment.regionHeight = region.height;
		attachment.regionOriginalWidth = region.originalWidth;
		attachment.regionOriginalHeight = region.originalHeight;
		return attachment;
	}
	,newBoundingBoxAttachment: function(skin,name) {
		return new spine_attachments_BoundingBoxAttachment(name);
	}
	,newPathAttachment: function(skin,name) {
		return new spine_attachments_PathAttachment(name);
	}
	,newPointAttachment: function(skin,name) {
		return new spine_attachments_PointAttachment(name);
	}
	,newClippingAttachment: function(skin,name) {
		return new spine_attachments_ClippingAttachment(name);
	}
	,__class__: spine_attachments_AtlasAttachmentLoader
};
var spine_attachments_Attachment = function(name) {
	if(name == null) {
		throw new js__$Boot_HaxeError(new spine_flash_errors_ArgumentError("name cannot be null."));
	}
	this._name = name;
};
$hxClasses["spine.attachments.Attachment"] = spine_attachments_Attachment;
spine_attachments_Attachment.__name__ = "spine.attachments.Attachment";
spine_attachments_Attachment.prototype = {
	_name: null
	,get_name: function() {
		return this._name;
	}
	,toString: function() {
		return this.get_name();
	}
	,copy: function() {
		throw new js__$Boot_HaxeError(new spine_flash_errors_IllegalOperationError("Not implemented"));
	}
	,__class__: spine_attachments_Attachment
	,__properties__: {get_name:"get_name"}
};
var spine_attachments_VertexAttachment = function(name) {
	this.id = (spine_attachments_VertexAttachment.nextID++ & 65535) << 11;
	spine_attachments_Attachment.call(this,name);
	this.deformAttachment = this;
};
$hxClasses["spine.attachments.VertexAttachment"] = spine_attachments_VertexAttachment;
spine_attachments_VertexAttachment.__name__ = "spine.attachments.VertexAttachment";
spine_attachments_VertexAttachment.__super__ = spine_attachments_Attachment;
spine_attachments_VertexAttachment.prototype = $extend(spine_attachments_Attachment.prototype,{
	bones: null
	,vertices: null
	,worldVerticesLength: null
	,id: null
	,deformAttachment: null
	,computeWorldVertices: function(slot,start,count,worldVertices,offset,stride) {
		count = offset + (count >> 1) * stride;
		var skeleton = slot.get_skeleton();
		var deformArray = slot.deform;
		var vertices = this.vertices;
		var bones = this.bones;
		var v;
		var w;
		var n;
		var b;
		var f;
		var vx;
		var vy;
		var wx;
		var wy;
		var bone;
		if(bones == null) {
			if(deformArray.length > 0) {
				vertices = deformArray;
			}
			bone = slot.get_bone();
			var x = bone.worldX;
			var y = bone.worldY;
			var a = bone.a;
			var bb = bone.b;
			var c = bone.c;
			var d = bone.d;
			v = start;
			w = offset;
			while(w < count) {
				vx = vertices[v];
				vy = vertices[v + 1];
				worldVertices[w] = vx * a + vy * bb + x;
				worldVertices[w + 1] = vx * c + vy * d + y;
				v += 2;
				w += stride;
			}
			return;
		}
		v = 0;
		var skip = 0;
		var i = 0;
		while(i < start) {
			n = bones[v];
			v += n + 1;
			skip += n;
			i += 2;
		}
		var skeletonBones = skeleton.bones;
		if(deformArray.length == 0) {
			w = offset;
			b = skip * 3;
			while(w < count) {
				wx = 0;
				wy = 0;
				n = bones[v++];
				n += v;
				while(v < n) {
					bone = skeletonBones[bones[v]];
					vx = vertices[b];
					vy = vertices[b + 1];
					var weight = vertices[b + 2];
					wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight;
					wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight;
					++v;
					b += 3;
				}
				worldVertices[w] = wx;
				worldVertices[w + 1] = wy;
				w += stride;
			}
		} else {
			w = offset;
			b = skip * 3;
			f = skip << 1;
			while(w < count) {
				wx = 0;
				wy = 0;
				n = bones[v++];
				n += v;
				while(v < n) {
					bone = skeletonBones[bones[v]];
					vx = vertices[b] + deformArray[f];
					vy = vertices[b + 1] + deformArray[f + 1];
					var weight1 = vertices[b + 2];
					wx += (vx * bone.a + vy * bone.b + bone.worldX) * weight1;
					wy += (vx * bone.c + vy * bone.d + bone.worldY) * weight1;
					++v;
					b += 3;
					f += 2;
				}
				worldVertices[w] = wx;
				worldVertices[w + 1] = wy;
				w += stride;
			}
		}
	}
	,copyTo: function(attachment) {
		if(this.bones != null) {
			attachment.bones = this.bones.slice();
		} else {
			attachment.bones = null;
		}
		if(this.vertices != null) {
			attachment.vertices = this.vertices.slice();
		} else {
			attachment.vertices = null;
		}
		attachment.worldVerticesLength = this.worldVerticesLength;
		attachment.deformAttachment = this.deformAttachment;
	}
	,__class__: spine_attachments_VertexAttachment
});
var spine_attachments_BoundingBoxAttachment = function(name) {
	this.color = new spine_Color(0,0,0,0);
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.BoundingBoxAttachment"] = spine_attachments_BoundingBoxAttachment;
spine_attachments_BoundingBoxAttachment.__name__ = "spine.attachments.BoundingBoxAttachment";
spine_attachments_BoundingBoxAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_BoundingBoxAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	color: null
	,copy: function() {
		var copy = new spine_attachments_BoundingBoxAttachment(this.get_name());
		this.copyTo(copy);
		return copy;
	}
	,__class__: spine_attachments_BoundingBoxAttachment
});
var spine_attachments_ClippingAttachment = function(name) {
	this.color = new spine_Color(0.2275,0.2275,0.2275,1);
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.ClippingAttachment"] = spine_attachments_ClippingAttachment;
spine_attachments_ClippingAttachment.__name__ = "spine.attachments.ClippingAttachment";
spine_attachments_ClippingAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_ClippingAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	endSlot: null
	,color: null
	,copy: function() {
		var copy = new spine_attachments_ClippingAttachment(this.get_name());
		this.copyTo(copy);
		copy.endSlot = this.endSlot;
		copy.color.setFromColor(this.color);
		return copy;
	}
	,__class__: spine_attachments_ClippingAttachment
});
var spine_attachments_MeshAttachment = function(name) {
	this.color = new spine_Color(1,1,1,1);
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.MeshAttachment"] = spine_attachments_MeshAttachment;
spine_attachments_MeshAttachment.__name__ = "spine.attachments.MeshAttachment";
spine_attachments_MeshAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_MeshAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	uvs: null
	,regionUVs: null
	,triangles: null
	,color: null
	,hullLength: null
	,_parentMesh: null
	,path: null
	,rendererObject: null
	,regionU: null
	,regionV: null
	,regionU2: null
	,regionV2: null
	,regionRotate: null
	,regionDegrees: null
	,regionOffsetX: null
	,regionOffsetY: null
	,regionWidth: null
	,regionHeight: null
	,regionOriginalWidth: null
	,regionOriginalHeight: null
	,edges: null
	,width: null
	,height: null
	,updateUVs: function() {
		var i = 0;
		var n = this.regionUVs.length;
		var u = this.regionU;
		var v = this.regionV;
		var width = 0;
		var height = 0;
		var textureWidth;
		var textureHeight;
		if(this.uvs == null || this.uvs.length != n) {
			this.uvs = [];
		}
		switch(this.regionDegrees) {
		case 90:
			textureWidth = this.regionHeight / (this.regionU2 - this.regionU);
			textureHeight = this.regionWidth / (this.regionV2 - this.regionV);
			u -= (this.regionOriginalHeight - this.regionOffsetY - this.regionHeight) / textureWidth;
			v -= (this.regionOriginalWidth - this.regionOffsetX - this.regionWidth) / textureHeight;
			width = this.regionOriginalHeight / textureWidth;
			height = this.regionOriginalWidth / textureHeight;
			i = 0;
			while(i < n) {
				this.uvs[i] = u + this.regionUVs[i + 1] * width;
				this.uvs[i + 1] = v + (1 - this.regionUVs[i]) * height;
				i += 2;
			}
			return;
		case 180:
			textureWidth = this.regionWidth / (this.regionU2 - this.regionU);
			textureHeight = this.regionHeight / (this.regionV2 - this.regionV);
			u -= (this.regionOriginalWidth - this.regionOffsetX - this.regionWidth) / textureWidth;
			v -= this.regionOffsetY / textureHeight;
			width = this.regionOriginalWidth / textureWidth;
			height = this.regionOriginalHeight / textureHeight;
			i = 0;
			while(i < n) {
				this.uvs[i] = u + (1 - this.regionUVs[i]) * width;
				this.uvs[i + 1] = v + (1 - this.regionUVs[i + 1]) * height;
				i += 2;
			}
			return;
		case 270:
			textureWidth = this.regionWidth / (this.regionU2 - this.regionU);
			textureHeight = this.regionHeight / (this.regionV2 - this.regionV);
			u -= this.regionOffsetY / textureWidth;
			v -= this.regionOffsetX / textureHeight;
			width = this.regionOriginalHeight / textureWidth;
			height = this.regionOriginalWidth / textureHeight;
			i = 0;
			while(i < n) {
				this.uvs[i] = u + (1 - this.regionUVs[i + 1]) * width;
				this.uvs[i + 1] = v + this.regionUVs[i] * height;
				i += 2;
			}
			return;
		default:
			textureWidth = this.regionWidth / (this.regionU2 - this.regionU);
			textureHeight = this.regionHeight / (this.regionV2 - this.regionV);
			u -= this.regionOffsetX / textureWidth;
			v -= (this.regionOriginalHeight - this.regionOffsetY - this.regionHeight) / textureHeight;
			width = this.regionOriginalWidth / textureWidth;
			height = this.regionOriginalHeight / textureHeight;
			i = 0;
			while(i < n) {
				this.uvs[i] = u + this.regionUVs[i] * width;
				this.uvs[i + 1] = v + this.regionUVs[i + 1] * height;
				i += 2;
			}
		}
	}
	,get_parentMesh: function() {
		return this._parentMesh;
	}
	,set_parentMesh: function(parentMesh) {
		this._parentMesh = parentMesh;
		if(parentMesh != null) {
			this.bones = parentMesh.bones;
			this.vertices = parentMesh.vertices;
			this.worldVerticesLength = parentMesh.worldVerticesLength;
			this.regionUVs = parentMesh.regionUVs;
			this.triangles = parentMesh.triangles;
			this.hullLength = parentMesh.hullLength;
			this.edges = parentMesh.edges;
			this.width = parentMesh.width;
			this.height = parentMesh.height;
		}
		return parentMesh;
	}
	,copy: function() {
		var copy = new spine_attachments_MeshAttachment(this.get_name());
		copy.rendererObject = this.rendererObject;
		copy.regionU = this.regionU;
		copy.regionV = this.regionV;
		copy.regionU2 = this.regionU2;
		copy.regionV2 = this.regionV2;
		copy.regionRotate = this.regionRotate;
		copy.regionDegrees = this.regionDegrees;
		copy.regionOffsetX = this.regionOffsetX;
		copy.regionOffsetY = this.regionOffsetY;
		copy.regionWidth = this.regionWidth;
		copy.regionHeight = this.regionHeight;
		copy.regionOriginalWidth = this.regionOriginalWidth;
		copy.regionOriginalHeight = this.regionOriginalHeight;
		copy.path = this.path;
		copy.color.setFromColor(this.color);
		if(this.get_parentMesh() == null) {
			this.copyTo(copy);
			copy.regionUVs = this.regionUVs.slice();
			copy.uvs = this.uvs.slice();
			copy.triangles = this.triangles.slice();
			copy.hullLength = this.hullLength;
			if(this.edges != null) {
				copy.edges = this.edges.slice();
			}
			copy.width = this.width;
			copy.height = this.height;
		} else {
			copy.set_parentMesh(this.get_parentMesh());
			copy.updateUVs();
		}
		return copy;
	}
	,newLinkedMesh: function() {
		var copy = new spine_attachments_MeshAttachment(this.get_name());
		copy.rendererObject = this.rendererObject;
		copy.regionU = this.regionU;
		copy.regionV = this.regionV;
		copy.regionU2 = this.regionU2;
		copy.regionV2 = this.regionV2;
		copy.regionRotate = this.regionRotate;
		copy.regionDegrees = this.regionDegrees;
		copy.regionOffsetX = this.regionOffsetX;
		copy.regionOffsetY = this.regionOffsetY;
		copy.regionWidth = this.regionWidth;
		copy.regionHeight = this.regionHeight;
		copy.regionOriginalWidth = this.regionOriginalWidth;
		copy.regionOriginalHeight = this.regionOriginalHeight;
		copy.path = this.path;
		copy.color.setFromColor(this.color);
		copy.deformAttachment = this.deformAttachment;
		copy.set_parentMesh(this.get_parentMesh() != null ? this.get_parentMesh() : this);
		copy.updateUVs();
		return copy;
	}
	,__class__: spine_attachments_MeshAttachment
	,__properties__: $extend(spine_attachments_VertexAttachment.prototype.__properties__,{set_parentMesh:"set_parentMesh",get_parentMesh:"get_parentMesh"})
});
var spine_attachments_PathAttachment = function(name) {
	this.color = new spine_Color(0,0,0,0);
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.PathAttachment"] = spine_attachments_PathAttachment;
spine_attachments_PathAttachment.__name__ = "spine.attachments.PathAttachment";
spine_attachments_PathAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_PathAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	lengths: null
	,closed: null
	,constantSpeed: null
	,color: null
	,copy: function() {
		var copy = new spine_attachments_PathAttachment(this.get_name());
		this.copyTo(copy);
		copy.lengths = this.lengths.slice();
		copy.closed = this.closed;
		copy.constantSpeed = this.constantSpeed;
		return copy;
	}
	,__class__: spine_attachments_PathAttachment
});
var spine_attachments_PointAttachment = function(name) {
	this.color = new spine_Color(0.38,0.94,0,1);
	spine_attachments_VertexAttachment.call(this,name);
};
$hxClasses["spine.attachments.PointAttachment"] = spine_attachments_PointAttachment;
spine_attachments_PointAttachment.__name__ = "spine.attachments.PointAttachment";
spine_attachments_PointAttachment.__super__ = spine_attachments_VertexAttachment;
spine_attachments_PointAttachment.prototype = $extend(spine_attachments_VertexAttachment.prototype,{
	x: null
	,y: null
	,rotation: null
	,color: null
	,computeWorldPosition: function(bone,point) {
		point[0] = this.x * bone.a + this.y * bone.b + bone.worldX;
		point[1] = this.x * bone.c + this.y * bone.d + bone.worldY;
		return point;
	}
	,computeWorldRotation: function(bone) {
		var cos = spine_MathUtils.cosDeg(this.rotation);
		var sin = spine_MathUtils.sinDeg(this.rotation);
		return Math.atan2(cos * bone.c + sin * bone.d,cos * bone.a + sin * bone.b) * spine_MathUtils.radDeg;
	}
	,copy: function() {
		var copy = new spine_attachments_PointAttachment(this.get_name());
		copy.x = this.x;
		copy.y = this.y;
		copy.rotation = this.rotation;
		copy.color.setFromColor(this.color);
		return copy;
	}
	,__class__: spine_attachments_PointAttachment
});
var spine_attachments_RegionAttachment = function(name) {
	this.uvs = [];
	this.offset = [];
	this.color = new spine_Color(1,1,1,1);
	this.scaleY = 1;
	this.scaleX = 1;
	this.BRY = 7;
	this.BRX = 6;
	this.URY = 5;
	this.URX = 4;
	this.ULY = 3;
	this.ULX = 2;
	this.BLY = 1;
	this.BLX = 0;
	spine_attachments_Attachment.call(this,name);
	this.offset.length = 8;
	this.uvs.length = 8;
};
$hxClasses["spine.attachments.RegionAttachment"] = spine_attachments_RegionAttachment;
spine_attachments_RegionAttachment.__name__ = "spine.attachments.RegionAttachment";
spine_attachments_RegionAttachment.__super__ = spine_attachments_Attachment;
spine_attachments_RegionAttachment.prototype = $extend(spine_attachments_Attachment.prototype,{
	BLX: null
	,BLY: null
	,ULX: null
	,ULY: null
	,URX: null
	,URY: null
	,BRX: null
	,BRY: null
	,x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,rotation: null
	,width: null
	,height: null
	,color: null
	,path: null
	,rendererObject: null
	,regionOffsetX: null
	,regionOffsetY: null
	,regionWidth: null
	,regionHeight: null
	,regionOriginalWidth: null
	,regionOriginalHeight: null
	,offset: null
	,uvs: null
	,updateOffset: function() {
		var regionScaleX = this.width / this.regionOriginalWidth * this.scaleX;
		var regionScaleY = this.height / this.regionOriginalHeight * this.scaleY;
		var localX = -this.width * 0.5 * this.scaleX + this.regionOffsetX * regionScaleX;
		var localY2 = this.height * 0.5 * this.scaleY - this.regionOffsetY * regionScaleY;
		var localX2 = localX + this.regionWidth * regionScaleX;
		var localY = localY2 - this.regionHeight * regionScaleY;
		var radians = this.rotation * Math.PI / 180;
		var ulDist = Math.sqrt(localX * localX + localY * localY);
		var ulAngle = Math.atan2(localY,localX);
		var urDist = Math.sqrt(localX2 * localX2 + localY * localY);
		var urAngle = Math.atan2(localY,localX2);
		var blDist = Math.sqrt(localX * localX + localY2 * localY2);
		var blAngle = Math.atan2(localY2,localX);
		var brDist = Math.sqrt(localX2 * localX2 + localY2 * localY2);
		var brAngle = Math.atan2(localY2,localX2);
		this.offset[this.BLX] = Math.cos(radians - blAngle) * blDist + this.x;
		this.offset[this.BLY] = Math.sin(radians - blAngle) * blDist + this.y;
		this.offset[this.ULX] = Math.cos(radians - ulAngle) * ulDist + this.x;
		this.offset[this.ULY] = Math.sin(radians - ulAngle) * ulDist + this.y;
		this.offset[this.URX] = Math.cos(radians - urAngle) * urDist + this.x;
		this.offset[this.URY] = Math.sin(radians - urAngle) * urDist + this.y;
		this.offset[this.BRX] = Math.cos(radians - brAngle) * brDist + this.x;
		this.offset[this.BRY] = Math.sin(radians - brAngle) * brDist + this.y;
	}
	,setUVs: function(u,v,u2,v2,rotate) {
		var uvs = this.uvs;
		if(rotate) {
			uvs[4] = u;
			uvs[5] = v2;
			uvs[6] = u;
			uvs[7] = v;
			uvs[0] = u2;
			uvs[1] = v;
			uvs[2] = u2;
			uvs[3] = v2;
		} else {
			uvs[2] = u;
			uvs[3] = v2;
			uvs[4] = u;
			uvs[5] = v;
			uvs[6] = u2;
			uvs[7] = v;
			uvs[0] = u2;
			uvs[1] = v2;
		}
	}
	,computeWorldVertices: function(bone,worldVertices,offset,stride) {
		var vertexOffset = this.offset;
		var x = bone.worldX;
		var y = bone.worldY;
		var a = bone.a;
		var b = bone.b;
		var c = bone.c;
		var d = bone.d;
		var offsetX = 0;
		var offsetY = 0;
		offsetX = vertexOffset[this.BRX];
		offsetY = vertexOffset[this.BRY];
		worldVertices[offset] = offsetX * a + offsetY * b + x;
		worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
		offset += stride;
		offsetX = vertexOffset[this.BLX];
		offsetY = vertexOffset[this.BLY];
		worldVertices[offset] = offsetX * a + offsetY * b + x;
		worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
		offset += stride;
		offsetX = vertexOffset[this.ULX];
		offsetY = vertexOffset[this.ULY];
		worldVertices[offset] = offsetX * a + offsetY * b + x;
		worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
		offset += stride;
		offsetX = vertexOffset[this.URX];
		offsetY = vertexOffset[this.URY];
		worldVertices[offset] = offsetX * a + offsetY * b + x;
		worldVertices[offset + 1] = offsetX * c + offsetY * d + y;
	}
	,copy: function() {
		var copy = new spine_attachments_RegionAttachment(this.get_name());
		copy.regionWidth = this.regionWidth;
		copy.regionHeight = this.regionHeight;
		copy.regionOffsetX = this.regionOffsetX;
		copy.regionOffsetY = this.regionOffsetY;
		copy.regionOriginalWidth = this.regionOriginalWidth;
		copy.regionOriginalHeight = this.regionOriginalHeight;
		copy.rendererObject = this.rendererObject;
		copy.path = this.path;
		copy.x = this.x;
		copy.y = this.y;
		copy.scaleX = this.scaleX;
		copy.scaleY = this.scaleY;
		copy.rotation = this.rotation;
		copy.width = this.width;
		copy.height = this.height;
		copy.uvs = this.uvs.slice();
		copy.offset = this.offset.slice();
		copy.color.setFromColor(this.color);
		return copy;
	}
	,__class__: spine_attachments_RegionAttachment
});
var spine_flash_errors_Error = function(message) {
	this.message = message;
};
$hxClasses["spine.flash.errors.Error"] = spine_flash_errors_Error;
spine_flash_errors_Error.__name__ = "spine.flash.errors.Error";
spine_flash_errors_Error.prototype = {
	message: null
	,__class__: spine_flash_errors_Error
};
var spine_flash_errors_IllegalOperationError = function(message) {
	this.message = message;
};
$hxClasses["spine.flash.errors.IllegalOperationError"] = spine_flash_errors_IllegalOperationError;
spine_flash_errors_IllegalOperationError.__name__ = "spine.flash.errors.IllegalOperationError";
spine_flash_errors_IllegalOperationError.prototype = {
	message: null
	,__class__: spine_flash_errors_IllegalOperationError
};
var ui2viewer_ControllerContext = function() {
	jetgui_JetContext.call(this);
};
$hxClasses["ui2viewer.ControllerContext"] = ui2viewer_ControllerContext;
ui2viewer_ControllerContext.__name__ = "ui2viewer.ControllerContext";
ui2viewer_ControllerContext.__super__ = jetgui_JetContext;
ui2viewer_ControllerContext.prototype = $extend(jetgui_JetContext.prototype,{
	notify: function(notification,arg0,arg1) {
		haxe_Log.trace("notify " + notification + " " + Std.string(arg0) + " " + Std.string(arg1),{ fileName : "ui2viewer/ControllerContext.hx", lineNumber : 9, className : "ui2viewer.ControllerContext", methodName : "notify"});
	}
	,getElementRef: function(name) {
		return this.getElementRefImpl(name,jetgui_element_Element);
	}
	,__class__: ui2viewer_ControllerContext
});
var ui2viewer_JetPaginatorImpl = function(params,mock) {
	this.mock = mock;
	jetgui_data_JetPaginatorBase.call(this,params);
};
$hxClasses["ui2viewer.JetPaginatorImpl"] = ui2viewer_JetPaginatorImpl;
ui2viewer_JetPaginatorImpl.__name__ = "ui2viewer.JetPaginatorImpl";
ui2viewer_JetPaginatorImpl.__super__ = jetgui_data_JetPaginatorBase;
ui2viewer_JetPaginatorImpl.prototype = $extend(jetgui_data_JetPaginatorBase.prototype,{
	mock: null
	,syncImpl: function(idxFrom,idxTo) {
		this.data.write(idxTo,this.mock.read(idxFrom));
	}
	,getCount: function() {
		var _this = this.mock;
		jetgui_data_Observable.context.notifyValueAccessed(_this);
		return _this.array.length;
	}
	,__class__: ui2viewer_JetPaginatorImpl
});
var ui2viewer_JetSliderImpl = function(mock) {
	jetgui_data_JetSliderBase.call(this);
	this.mock = mock;
};
$hxClasses["ui2viewer.JetSliderImpl"] = ui2viewer_JetSliderImpl;
ui2viewer_JetSliderImpl.__name__ = "ui2viewer.JetSliderImpl";
ui2viewer_JetSliderImpl.__super__ = jetgui_data_JetSliderBase;
ui2viewer_JetSliderImpl.prototype = $extend(jetgui_data_JetSliderBase.prototype,{
	mock: null
	,syncImpl: function(idxFrom,idxTo) {
		this.data.write(idxTo,this.mock.read(idxFrom));
	}
	,getCount: function() {
		var _this = this.mock;
		jetgui_data_Observable.context.notifyValueAccessed(_this);
		return _this.array.length;
	}
	,__class__: ui2viewer_JetSliderImpl
});
var ui2viewer_module__$FileSystemImpl_File = function(url,descr) {
	this.localPath = null;
	this.downloadedSize = 0;
	this.data = null;
	this._url = url;
	this.descr = descr;
};
$hxClasses["ui2viewer.module._FileSystemImpl.File"] = ui2viewer_module__$FileSystemImpl_File;
ui2viewer_module__$FileSystemImpl_File.__name__ = "ui2viewer.module._FileSystemImpl.File";
ui2viewer_module__$FileSystemImpl_File.__interfaces__ = [banan_filesystem_IFile];
ui2viewer_module__$FileSystemImpl_File.prototype = {
	get_name: function() {
		return this.descr.name;
	}
	,get_url: function() {
		return this._url;
	}
	,get_md5: function() {
		return this.descr.md5;
	}
	,get_size: function() {
		return this.descr.size;
	}
	,get_width: function() {
		return this.descr.width;
	}
	,get_height: function() {
		return this.descr.height;
	}
	,downloadedSize: null
	,localPath: null
	,data: null
	,_url: null
	,descr: null
	,deferred: null
	,load: function(hold,isOrganic) {
		if(isOrganic == null) {
			isOrganic = true;
		}
		var _gthis = this;
		if(this.deferred == null) {
			this.deferred = new promhx_Deferred();
			var url = this._url;
			var wrappedCallbacks = banan_http_HttpBytes.statsHelper.watchRequest(function(bytes) {
				_gthis.data = bytes;
				_gthis.deferred.resolve(_gthis.data);
				return;
			},function(s) {
				haxe_Log.trace(s,{ fileName : "ui2viewer/module/FileSystemImpl.hx", lineNumber : 70, className : "ui2viewer.module._FileSystemImpl.File", methodName : "load"});
				return;
			});
			new banan_http_MultiTryDownload(url,null,$bind(wrappedCallbacks,wrappedCallbacks.onSuccess),function(length) {
				return _gthis.downloadedSize = length;
			},$bind(wrappedCallbacks,wrappedCallbacks.onFailure),5);
		}
		return this.deferred.promise();
	}
	,unload: function() {
	}
	,__class__: ui2viewer_module__$FileSystemImpl_File
	,__properties__: {get_height:"get_height",get_width:"get_width",get_size:"get_size",get_md5:"get_md5",get_url:"get_url",get_name:"get_name"}
};
var ui2viewer_module_FileSystemImpl = function(updatePriority) {
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["ui2viewer.module.FileSystemImpl"] = ui2viewer_module_FileSystemImpl;
ui2viewer_module_FileSystemImpl.__name__ = "ui2viewer.module.FileSystemImpl";
ui2viewer_module_FileSystemImpl.__interfaces__ = [banan_filesystem_IFsModule];
ui2viewer_module_FileSystemImpl.__super__ = banan_module_Module;
ui2viewer_module_FileSystemImpl.prototype = $extend(banan_module_Module.prototype,{
	files: null
	,fileDescrs: null
	,initialize: function() {
		var _gthis = this;
		this.files = new haxe_ds_StringMap();
		var url = ui2viewer_utils_UrlUtils.makeUrl("files.json");
		var wrappedCallbacks = banan_http_HttpBytes.statsHelper.watchRequest(function(bytes) {
			var wrappedCallbacks1 = bytes.toString();
			_gthis.fileDescrs = JSON.parse(wrappedCallbacks1);
			_gthis.moduleInfo.setInitialized();
			return;
		},function(str) {
			haxe_Log.trace(str,{ fileName : "ui2viewer/module/FileSystemImpl.hx", lineNumber : 103, className : "ui2viewer.module.FileSystemImpl", methodName : "initialize"});
			return;
		});
		new banan_http_MultiTryDownload(url,null,$bind(wrappedCallbacks,wrappedCallbacks.onSuccess),function(_) {
			return;
		},$bind(wrappedCallbacks,wrappedCallbacks.onFailure),5);
	}
	,hasFile: function(name) {
		return Object.prototype.hasOwnProperty.call(this.fileDescrs,name);
	}
	,getFile: function(name) {
		var _this = this.files;
		if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == null) {
			var stub = new ui2viewer_module__$FileSystemImpl_File(haxe_io_Path.extension(name) == "mpf" ? ui2viewer_utils_UrlUtils.makeUrl("tpl",name) : ui2viewer_utils_UrlUtils.getAssetUrl(name),this.fileDescrs[name]);
			var _this1 = this.files;
			if(__map_reserved[name] != null) {
				_this1.setReserved(name,stub);
			} else {
				_this1.h[name] = stub;
			}
		}
		var _this2 = this.files;
		if(__map_reserved[name] != null) {
			return _this2.getReserved(name);
		} else {
			return _this2.h[name];
		}
	}
	,getFileSystemHash: function() {
		return "";
	}
	,getPackFileNames: function() {
		return HxOverrides.iter([]);
	}
	,hasInPack: function(path) {
		return false;
	}
	,unloadPackFiles: function() {
	}
	,hasLocalFileCache: function(name) {
		return false;
	}
	,hasEmbed: function(name,indexName) {
		return false;
	}
	,getFileNames: function() {
		return Reflect.fields(this.fileDescrs);
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("ui2viewer.module.FileSystemImpl",["banan.filesystem.IFsModule"],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: ui2viewer_module_FileSystemImpl
});
var ui2viewer_module_JetSomeController = function(vComponent,moduleProvider) {
	jetgui_JetGuiController.call(this,vComponent,new jetgui_JetControllerContext(this,moduleProvider));
};
$hxClasses["ui2viewer.module.JetSomeController"] = ui2viewer_module_JetSomeController;
ui2viewer_module_JetSomeController.__name__ = "ui2viewer.module.JetSomeController";
ui2viewer_module_JetSomeController.__super__ = jetgui_JetGuiController;
ui2viewer_module_JetSomeController.prototype = $extend(jetgui_JetGuiController.prototype,{
	__class__: ui2viewer_module_JetSomeController
});
var ui2viewer_module_NotFound = function(vDomId) {
	jetgui_vdom_VDomComponent.call(this,vDomId);
};
$hxClasses["ui2viewer.module.NotFound"] = ui2viewer_module_NotFound;
ui2viewer_module_NotFound.__name__ = "ui2viewer.module.NotFound";
ui2viewer_module_NotFound.__super__ = jetgui_vdom_VDomComponent;
ui2viewer_module_NotFound.prototype = $extend(jetgui_vdom_VDomComponent.prototype,{
	componentName: null
	,createComponent: function() {
		return new ui2viewer_module_NotFoundComponent();
	}
	,__class__: ui2viewer_module_NotFound
});
var ui2viewer_module_NotFoundComponent = function() {
	this.componentNameValue = new jetgui_data_Value();
};
$hxClasses["ui2viewer.module.NotFoundComponent"] = ui2viewer_module_NotFoundComponent;
ui2viewer_module_NotFoundComponent.__name__ = "ui2viewer.module.NotFoundComponent";
ui2viewer_module_NotFoundComponent.__super__ = jetgui_Component;
ui2viewer_module_NotFoundComponent.prototype = $extend(jetgui_Component.prototype,{
	componentNameValue: null
	,get_componentName: function() {
		return this.componentNameValue.get();
	}
	,set_componentName: function(v) {
		this.componentNameValue.set(v);
		return v;
	}
	,applyVDomAttributes: function(vDomNode) {
		this.componentNameValue.set((js_Boot.__cast(vDomNode , ui2viewer_module_NotFound)).componentName);
	}
	,render: function(vDom) {
		var vbox = new jetgui_vdom_VDomElement("11b92020");
		vbox.tag = "vbox";
		var text1 = new jetgui_vdom_VDomElement("62249537");
		text1.tag = "text";
		text1.style.value = "Component not found";
		vbox.addChild(text1);
		var text2 = new jetgui_vdom_VDomElement("4fb5b261");
		text2.tag = "text";
		var v = "Component name: " + this.componentNameValue.get();
		text2.style.value = v;
		vbox.addChild(text2);
		return [vbox];
	}
	,__class__: ui2viewer_module_NotFoundComponent
	,__properties__: {set_componentName:"set_componentName",get_componentName:"get_componentName"}
});
var ui2viewer_module_MainModule = function(updatePriority) {
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["ui2viewer.module.MainModule"] = ui2viewer_module_MainModule;
ui2viewer_module_MainModule.__name__ = "ui2viewer.module.MainModule";
ui2viewer_module_MainModule.__super__ = banan_module_Module;
ui2viewer_module_MainModule.prototype = $extend(banan_module_Module.prototype,{
	nodeSystem: null
	,renderSystem: null
	,moduleProvider: null
	,jetGuiSystem: null
	,lastComponentName: null
	,controller: null
	,onInitialized: function() {
		onComponentsReloadCb=$bind(this,this.onComponentsReload);
		this.renderSystem.rootList.push(this.nodeSystem.root);
	}
	,update: function() {
		this.checkRequestedComponent();
		this.syncGuiFunctions();
	}
	,onComponentsReload: function() {
		this.lastComponentName = null;
	}
	,checkRequestedComponent: function() {
		var componentName = jetgui_jml_ComponentDef.nameFromPath(HxOverrides.substr(window.location.hash,1,null));
		if(componentName != this.lastComponentName) {
			this.lastComponentName = componentName;
			this.mountComponent(componentName);
		}
	}
	,mountComponent: function(name) {
		var otherObservable = JetguiPreview.observableClass;
		otherObservable.replaceContext(jetgui_data_Observable);
		this.syncGuiFunctions();
		var createVComponent = JetguiPreview.createVComponent;
		if(createVComponent == null) {
			throw new js__$Boot_HaxeError(banan_error_Error.e(121,"MainModule.hx:135","createVComponent != null",null));
		}
		var vComponent = createVComponent(name,"3171d7c0");
		if(vComponent == null) {
			var notFound = new ui2viewer_module_NotFound("91ed69fc");
			notFound.componentName = name;
			vComponent = notFound;
		}
		vComponent.asComponent().ctx = new ui2viewer_ControllerContext();
		window.rootComponent = vComponent;
		this.requestMockData(vComponent);
		if(this.controller != null) {
			this.jetGuiSystem.umountAndDispose(this.controller);
			this.controller = null;
		}
		this.controller = new ui2viewer_module_JetSomeController(vComponent,this.moduleProvider);
		this.jetGuiSystem.createAndMount(this.controller,new jetgui_PositionSource(),this.nodeSystem.root);
	}
	,syncGuiFunctions: function() {
		var dst = JetguiPreview.guiFunctionList;
		var src = jetgui_fn_GuiFunctionList;
		var _g = 0;
		var _g1 = Reflect.fields(src);
		while(_g < _g1.length) {
			var field = _g1[_g];
			++_g;
			var value = Reflect.field(src,field);
			dst[field] = value;
		}
	}
	,requestMockData: function(vComponent) {
		if(vComponent.mockProps != null) {
			var _g = 0;
			var _g1 = Reflect.fields(vComponent.mockProps);
			while(_g < _g1.length) {
				var propName = _g1[_g];
				++_g;
				var jsonUrl = [Reflect.field(vComponent.mockProps,propName)];
				if(jsonUrl[0] != "") {
					if(StringTools.startsWith(jsonUrl[0],"fs:")) {
						jsonUrl[0] = HxOverrides.substr(jsonUrl[0],3,null);
						var location = window.location;
						var tmp = haxe_io_Path.join([location.protocol + "//" + location.host,"json",jsonUrl[0]]);
						jsonUrl[0] = tmp;
						var wrappedCallbacks = banan_http_HttpBytes.statsHelper.watchRequest((function(propName1,target,f) {
							return function(bytes) {
								f[0](bytes,target[0],propName1[0]);
							};
						})([propName],[vComponent],[$bind(this,this.applyMockBytes)]),(function(jsonUrl1) {
							return function(s) {
								haxe_Log.trace("failed to download " + jsonUrl1[0] + ": " + s,{ fileName : "ui2viewer/module/MainModule.hx", lineNumber : 184, className : "ui2viewer.module.MainModule", methodName : "requestMockData"});
								return;
							};
						})(jsonUrl));
						new banan_http_MultiTryDownload(jsonUrl[0],null,$bind(wrappedCallbacks,wrappedCallbacks.onSuccess),(function() {
							return function(_) {
								return;
							};
						})(),$bind(wrappedCallbacks,wrappedCallbacks.onFailure),5);
					} else {
						this.applyMockString(jsonUrl[0],vComponent,propName);
					}
				}
			}
		}
	}
	,applyMockBytes: function(bytes,target,propName) {
		try {
			var data = JSON.parse(bytes.toString());
			if(target.fieldTypes == null) {
				throw new js__$Boot_HaxeError("root component have no field fieldTypes");
			}
			this.applyMockData(data,target,"",propName,Reflect.field(target.fieldTypes,propName));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace("failed to apply mock data: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),{ fileName : "ui2viewer/module/MainModule.hx", lineNumber : 209, className : "ui2viewer.module.MainModule", methodName : "applyMockBytes"});
		}
	}
	,applyMockString: function(str,target,propName) {
		try {
			var data = JSON.parse(StringTools.htmlUnescape(str));
			if(target.fieldTypes == null) {
				throw new js__$Boot_HaxeError("root component have no field fieldTypes");
			}
			this.applyMockData(data,target,"",propName,Reflect.field(target.fieldTypes,propName));
		} catch( e ) {
			haxe_CallStack.lastException = e;
			haxe_Log.trace("failed to apply mock data: " + Std.string(((e) instanceof js__$Boot_HaxeError) ? e.val : e),{ fileName : "ui2viewer/module/MainModule.hx", lineNumber : 226, className : "ui2viewer.module.MainModule", methodName : "applyMockString"});
			haxe_Log.trace("HINT: do not forget about the prefix \"fs:\" if you want to load mock from the file!",{ fileName : "ui2viewer/module/MainModule.hx", lineNumber : 227, className : "ui2viewer.module.MainModule", methodName : "applyMockString"});
		}
	}
	,applyMockData: function(data,target,targetName,propName,fieldType) {
		Reflect.setProperty(target,propName,this.getMockData(data,target,targetName,propName,fieldType));
	}
	,getMockData: function(data,target,targetName,propName,fieldType) {
		var isJtpEnum = JetguiPreview.isJtpEnum;
		var isPaginatorEreg = new EReg("^(?:IJetPaginable)|(?:JetPaginatorBase<([A-Z][\\w.<>]*)>)$","");
		var isSliderEreg = new EReg("^JetSliderBase<([A-Z][\\w.<>]*)>$","");
		var isArrayEreg = new EReg("^JetArray<([A-Z][\\w.<>]*)>$","");
		var isJtp = HxOverrides.substr(fieldType,0,3) == "Jtp";
		var isEnum = isJtp && isJtpEnum(fieldType);
		var isTplData = HxOverrides.substr(fieldType,-4,null) == "Data";
		var isColor = fieldType == "EColor";
		var result;
		if(data == null) {
			result = null;
		} else if(isPaginatorEreg.match(fieldType)) {
			var array = this.createArray(data.array,isPaginatorEreg.matched(1),targetName,propName);
			var pgr = new ui2viewer_JetPaginatorImpl({ visibleCount : data.visibleCount, isPageMode : data.isPageMode},array);
			if(data.next != null) {
				var _g = 0;
				var _g1 = data.next;
				while(_g < _g1) {
					var i = _g++;
					pgr.next();
				}
			}
			result = pgr;
		} else if(isSliderEreg.match(fieldType)) {
			var array1 = this.createArray(data,isSliderEreg.matched(1),targetName,propName);
			var sliderData = new ui2viewer_JetSliderImpl(array1);
			result = sliderData;
		} else if(isArrayEreg.match(fieldType)) {
			result = this.createArray(data,isArrayEreg.matched(1),targetName,propName);
		} else if(isColor) {
			if(typeof(data) == "string") {
				var s = data;
				var result1 = null;
				if(s != null) {
					var _g2 = 0;
					var _g11 = jetgui_style_EColorImpl.__empty_constructs__.slice();
					while(_g2 < _g11.length) {
						var color = _g11[_g2];
						++_g2;
						if($hxEnums[color.__enum__].__constructs__[color._hx_index] == s) {
							result1 = color;
							break;
						}
					}
					if(result1 == null && jetgui_style__$EColor_EColor_$Impl_$.hexColorEReg.match(s)) {
						var i1 = Std.parseInt("0x" + jetgui_style__$EColor_EColor_$Impl_$.hexColorEReg.matched(1));
						result1 = jetgui_style_EColorImpl.hex(i1);
					}
					if(result1 == null) {
						haxe_Log.trace("invalid color value: " + s,{ fileName : "jetgui/style/EColor.hx", lineNumber : 47, className : "jetgui.style._EColor.EColor_Impl_", methodName : "fromString"});
						result1 = jetgui_style_EColorImpl.red;
					}
				}
				result = result1;
			} else if(typeof(data) == "number" && ((data | 0) === data)) {
				result = jetgui_style_EColorImpl.hex(data);
			} else {
				throw new js__$Boot_HaxeError("bad color value, should be string or int (" + Std.string(data) + ")");
			}
		} else if(isEnum) {
			result = Std.string(data);
		} else if(isJtp && !isEnum) {
			var propNameAsInt = Std.parseInt(propName);
			var value = propNameAsInt != null ? target[propNameAsInt] : Reflect.getProperty(target,propName);
			if(value == null) {
				var createJtpInstance = JetguiPreview.createJtpInstance;
				value = createJtpInstance(fieldType);
				if(value == null) {
					throw new js__$Boot_HaxeError("cannot create type instance " + fieldType);
				}
			}
			var fieldTypes = value.fieldTypes;
			if(fieldTypes == null) {
				throw new js__$Boot_HaxeError("" + targetName + "." + propName + " has no field `fieldTypes`");
			}
			var _g3 = 0;
			var _g12 = Reflect.fields(fieldTypes);
			while(_g3 < _g12.length) {
				var fieldName = _g12[_g3];
				++_g3;
				var fieldValue = Reflect.field(data,fieldName);
				this.applyMockData(fieldValue,value,"" + targetName + "." + propName,fieldName,Reflect.field(fieldTypes,fieldName));
			}
			result = value;
		} else {
			var re = new EReg("^tpl:(\\w+):(\\w+)(?:\\.(\\w+))?$","");
			if(typeof(data) == "string" && re.match(data)) {
				var tplName = re.matched(1);
				var tplId = Std.parseInt(re.matched(2));
				if(tplId == null) {
					haxe_Log.trace("bad id " + re.matched(2),{ fileName : "ui2viewer/module/MainModule.hx", lineNumber : 330, className : "ui2viewer.module.MainModule", methodName : "getMockData"});
				}
				var tplField = re.matched(3);
				var tplTable = null;
				var tplData = tplTable != null ? tplTable.getById(tplId) : null;
				if(tplData == null) {
					haxe_Log.trace("tpl data " + tplName + ":" + tplId + " not found",{ fileName : "ui2viewer/module/MainModule.hx", lineNumber : 337, className : "ui2viewer.module.MainModule", methodName : "getMockData"});
				}
				if(tplField != null && tplData != null) {
					tplData = Reflect.getProperty(tplData,tplField);
				}
				data = tplData;
			}
			result = data;
		}
		return result;
	}
	,createArray: function(data,typeParam,targetName,propName) {
		if(!((data) instanceof Array)) {
			throw new js__$Boot_HaxeError("nothing except Array object can be applied to field with type prefixed by []");
		}
		var array = jetgui_data__$JetArray_JetArray_$Impl_$.fromArray([]);
		var _g = 0;
		var _g1 = data.length;
		while(_g < _g1) {
			var i = _g++;
			if(typeParam != null) {
				array.push(this.getMockData(data[i],array,"" + targetName + "." + propName,"" + i,typeParam));
			} else {
				array.push(data[i]);
			}
		}
		return array;
	}
	,makeModuleInfo: function() {
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["banan.display.NodeSystem"] != null) {
			_g.setReserved("banan.display.NodeSystem","nodeSystem");
		} else {
			_g.h["banan.display.NodeSystem"] = "nodeSystem";
		}
		if(__map_reserved["banan.render.RenderSystem"] != null) {
			_g.setReserved("banan.render.RenderSystem","renderSystem");
		} else {
			_g.h["banan.render.RenderSystem"] = "renderSystem";
		}
		if(__map_reserved["banan.module.ModuleProvider"] != null) {
			_g.setReserved("banan.module.ModuleProvider","moduleProvider");
		} else {
			_g.h["banan.module.ModuleProvider"] = "moduleProvider";
		}
		if(__map_reserved["jetgui.JetGuiSystem"] != null) {
			_g.setReserved("jetgui.JetGuiSystem","jetGuiSystem");
		} else {
			_g.h["jetgui.JetGuiSystem"] = "jetGuiSystem";
		}
		return new banan_module_ModuleInfo("ui2viewer.module.MainModule",[],[],_g,[]);
	}
	,__class__: ui2viewer_module_MainModule
});
var ui2viewer_module_ResourceSettingImpl = function(updatePriority) {
	this.preloadPacks = [];
	this.textureScale = 1.0;
	this.placeholderPath = "clientSetting/placeholder.jpg";
	this.atlases = new haxe_ds_StringMap();
	this.defaultFont = "Arial bold 12";
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["ui2viewer.module.ResourceSettingImpl"] = ui2viewer_module_ResourceSettingImpl;
ui2viewer_module_ResourceSettingImpl.__name__ = "ui2viewer.module.ResourceSettingImpl";
ui2viewer_module_ResourceSettingImpl.__interfaces__ = [banan_resource_IResourceSetting];
ui2viewer_module_ResourceSettingImpl.__super__ = banan_module_Module;
ui2viewer_module_ResourceSettingImpl.prototype = $extend(banan_module_Module.prototype,{
	defaultFont: null
	,atlases: null
	,placeholderPath: null
	,textureScale: null
	,preloadPacks: null
	,getAtlasNameByImagePath: function(imagePath) {
		return null;
	}
	,getScaledTexturePath: function(path) {
		return path;
	}
	,getUnscaledTexturePath: function(path) {
		return path;
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("ui2viewer.module.ResourceSettingImpl",["banan.resource.IResourceSetting"],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: ui2viewer_module_ResourceSettingImpl
});
var ui2viewer_module_ViewerDeviceProfileResolver = function(updatePriority) {
	banan_deviceprofile_DeviceProfileResolver.call(this,updatePriority);
};
$hxClasses["ui2viewer.module.ViewerDeviceProfileResolver"] = ui2viewer_module_ViewerDeviceProfileResolver;
ui2viewer_module_ViewerDeviceProfileResolver.__name__ = "ui2viewer.module.ViewerDeviceProfileResolver";
ui2viewer_module_ViewerDeviceProfileResolver.__super__ = banan_deviceprofile_DeviceProfileResolver;
ui2viewer_module_ViewerDeviceProfileResolver.prototype = $extend(banan_deviceprofile_DeviceProfileResolver.prototype,{
	loadDeviceProfiles: function(cb) {
		cb([{ name : "default", isUniversal : true, resolution : [{ scale : 1.0, minScreenHeight : 0}], textureScale : { factor : 1.0, folder : ""}}]);
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("ui2viewer.module.ViewerDeviceProfileResolver",["banan.backend.IScreenSizeProvider"],["banan.deviceprofile.DeviceProfileResolver"],new haxe_ds_StringMap(),[]);
	}
	,__class__: ui2viewer_module_ViewerDeviceProfileResolver
});
var ui2viewer_module_ViewerLangModule = function(updatePriority) {
	localization_LangModule.call(this,updatePriority);
};
$hxClasses["ui2viewer.module.ViewerLangModule"] = ui2viewer_module_ViewerLangModule;
ui2viewer_module_ViewerLangModule.__name__ = "ui2viewer.module.ViewerLangModule";
ui2viewer_module_ViewerLangModule.__super__ = localization_LangModule;
ui2viewer_module_ViewerLangModule.prototype = $extend(localization_LangModule.prototype,{
	getLang: function() {
		return "ru";
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("ui2viewer.module.ViewerLangModule",[],["localization.LangModule"],new haxe_ds_StringMap(),[]);
	}
	,__class__: ui2viewer_module_ViewerLangModule
});
var ui2viewer_module_ViewerTooltipModule = function(updatePriority) {
	this.idSource = new banan_basis_IdSource();
	banan_module_Module.call(this,updatePriority);
};
$hxClasses["ui2viewer.module.ViewerTooltipModule"] = ui2viewer_module_ViewerTooltipModule;
ui2viewer_module_ViewerTooltipModule.__name__ = "ui2viewer.module.ViewerTooltipModule";
ui2viewer_module_ViewerTooltipModule.__interfaces__ = [jetguimodule_IJetTooltipModule];
ui2viewer_module_ViewerTooltipModule.__super__ = banan_module_Module;
ui2viewer_module_ViewerTooltipModule.prototype = $extend(banan_module_Module.prototype,{
	idSource: null
	,showTooltip: function(target,showAnimation,hideAnimation) {
		return this.idSource.next++;
	}
	,hideTooltip: function(tooltipId) {
	}
	,makeModuleInfo: function() {
		return new banan_module_ModuleInfo("ui2viewer.module.ViewerTooltipModule",["jetguimodule.IJetTooltipModule"],[],new haxe_ds_StringMap(),[]);
	}
	,__class__: ui2viewer_module_ViewerTooltipModule
});
var ui2viewer_utils_UrlUtils = function() { };
$hxClasses["ui2viewer.utils.UrlUtils"] = ui2viewer_utils_UrlUtils;
ui2viewer_utils_UrlUtils.__name__ = "ui2viewer.utils.UrlUtils";
ui2viewer_utils_UrlUtils.makeUrl = function(command,path) {
	var location = window.location;
	var fullpath = path != null ? haxe_io_Path.join([command,path]) : command;
	return location.protocol + "//" + location.host + "/" + fullpath;
};
ui2viewer_utils_UrlUtils.getAssetUrl = function(path) {
	return ui2viewer_utils_UrlUtils.makeUrl("asset",path);
};
function $getIterator(o) { if( o instanceof Array ) return HxOverrides.iter(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
haxe_ds_ObjectMap.count = 0;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
msignal_SlotList.NIL = new msignal_SlotList(null,null);
var global = window;
DateTools.DAY_SHORT_NAMES = ["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];
DateTools.DAY_NAMES = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];
DateTools.MONTH_SHORT_NAMES = ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];
DateTools.MONTH_NAMES = ["January","February","March","April","May","June","July","August","September","October","November","December"];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
banan_animation_timeline_JetOpacityCurve.modificatorName = "animation.timeline.JetOpacityCurve";
banan_backend_IRenderSystem.__meta__ = { obj : { module : null}};
banan_backend_IScreenSizeProvider.__meta__ = { obj : { module : null}};
banan_backend_input_IBInput.__meta__ = { obj : { module : null}};
kha__$Color_Color_$Impl_$.Black = -16777216;
kha__$Color_Color_$Impl_$.White = -1;
kha__$Color_Color_$Impl_$.Red = -65536;
kha__$Color_Color_$Impl_$.Blue = -16776961;
kha__$Color_Color_$Impl_$.Green = -16711936;
kha__$Color_Color_$Impl_$.Magenta = -65281;
kha__$Color_Color_$Impl_$.Yellow = -256;
kha__$Color_Color_$Impl_$.Cyan = -16711681;
kha__$Color_Color_$Impl_$.Purple = -8388480;
kha__$Color_Color_$Impl_$.Pink = -16181;
kha__$Color_Color_$Impl_$.Orange = -23296;
kha__$Color_Color_$Impl_$.Transparent = 0;
kha__$Color_Color_$Impl_$.invMaxChannelValue = 0.00392156862745098;
banan_backend_kha_display__$Color_Color_$Impl_$.WHITE = kha__$Color_Color_$Impl_$.fromFloats(1,1,1,1);
banan_backend_kha_display__$Color_Color_$Impl_$.RED = kha__$Color_Color_$Impl_$.fromFloats(1,0,0,1);
banan_backend_kha_display__$Color_Color_$Impl_$.GREEN = kha__$Color_Color_$Impl_$.fromFloats(0,1,0,1);
banan_backend_kha_display__$Color_Color_$Impl_$.BLUE = kha__$Color_Color_$Impl_$.fromFloats(0,0,1,1);
banan_backend_kha_display__$Color_Color_$Impl_$.BLACK = kha__$Color_Color_$Impl_$.fromFloats(0,0,0,1);
banan_backend_kha_display_KhaImageCopier.initialized = false;
banan_backend_kha_input_KhaInput.__meta__ = { fields : { renderSystem : { inject : null}}};
banan_backend_kha_input_KhaInput.DEBUG_DRAW_MULTITOUCH = false;
banan_backend_kha_input_MouseHandler.TOUCH_ID0 = 1000;
banan_backend_kha_input_MouseHandlerWithMultitouchEmulation.TOUCH_ID1 = 1001;
banan_basis_ExtendEnum.typeMap = new haxe_ds_StringMap();
banan_basis_IteratorHelper.emptyIterator = { hasNext : function() {
	return false;
}, next : function() {
	return null;
}};
banan_display_DisplayEdge.NO_HASH = "NO_HASH";
banan_display_DisplaySystem.__meta__ = { fields : { system : { inject : null, initialize : null}, timeProvider : { inject : null}}};
banan_display_ENodeRoot.defaultType = new banan_display_ENodeRoot("Default",{ fileName : "banan/display/ENodeRoot.hx", lineNumber : 4, className : "banan.display.ENodeRoot", methodName : "defaultType"});
banan_display_ImageDisplayEdge.__meta__ = { obj : { inline : [true]}, fields : { scaleMode : { invalidate : null}, isFlipX : { invalidate : null}, isFlipY : { invalidate : null}, nodeAreaX : { invalidate : null}, nodeAreaY : { invalidate : null}, nodeAreaSizeX : { invalidate : null}, nodeAreaSizeY : { invalidate : null}}};
banan_display_NodeEdge.__meta__ = { obj : { inline : [true]}, fields : { getEntity : { inline : null}, isEntityDisposed : { inline : null}, addChild : { inline : null}, addFirstChild : { inline : null}, addChildAtPosition : { inline : null}, addChildBefore : { inline : null}, addChildAfter : { inline : null}, getChildIndex : { inline : null}, swapBackward : { inline : null}, swapForward : { inline : null}, removeChild : { inline : null}, removeChildren : { inline : null}, iterateChildren : { inline : null}, set_x : { inline : null}, set_y : { inline : null}, set_pivotX : { inline : null}, set_pivotY : { inline : null}, set_scaleX : { inline : null}, set_scaleY : { inline : null}, set_angle : { inline : null}, validateGlobalTransform : { inline : null}, get__isGlobalTransformValid : { inline : null}, set__isGlobalTransformValid : { inline : null}}};
banan_display_NodeEdge.invalidGlobalTransformId = -1;
banan_display_NodeEdge.nextGlobalTransformId = 0;
banan_display__$NodeEdge_NodeTreeIterator.__meta__ = { obj : { inline : [true]}, fields : { hasNext : { inline : null}, next : { inline : null}, findNext : { inline : null}, _ : { inline : null}}};
banan_display_NodeLookModule.__meta__ = { fields : { timeProvider : { inject : null}, render2Context : { inject : null}, resourceManager : { inject : null}, system : { inject : null}}};
banan_display_NodeSystem.__meta__ = { fields : { entitySystem : { inject : null, initialize : null}, renderSystem : { inject : null, initialize : null}, entityDisposer : { inject : null}}};
banan_display_NodeSystem.rootType = new banan_render_ERenderRoot("NodeSystem",{ fileName : "banan/display/NodeSystem.hx", lineNumber : 14, className : "banan.display.NodeSystem", methodName : "rootType"});
banan_error_Error.delimiter = " : ";
banan_error_ErrorType.ROOT_CATEGORY_GAME = "Game";
banan_error_ErrorType.treeDelimiter = "|";
banan_error_ErrorType.catRange = 100;
banan_error_ErrorType.messageByCode = ["Seq","SeqTime","ServerCrash","ServerReload","AnotherSession","ServerDisconnect","NoActivityTimeout","ResponseTimeout","TokenMismatch","WebsocketClose","WebsocketEarlyClose","WebSocket","ConnectionFailed","DownloadFailed","HttpRequestFailed","NoInternet","Manual","Unreachable","NotImplemented","SendLogButton","Unwrap","Assert","Generic","NoParentEdge","Untyped","PlayerInactivity","Native","UpdateUnavailable","SmhError","PurchaseError","ItemPreCompensate","Facebook","InvalidData","NotFound","NoTranslation","NoDeviceProfile","InvalidDeviceProfile","UniversalDeviceProfile","SessionUnreadable","AuthCancel","AuthFail","NoPlatformAuth","UnknownPlatform","MissingTerms"];
banan_error_ErrorType.catByCode = ["Server","Server","Server","Server","Server","Server","Server","Server","Server","Server","Server","Network","Network","Network","Network","Network","Custom","Custom","Custom","Custom","Common","Common","Common","Common","Common","Common","Common","Common","Common","Common","Common","Common","Templates","Templates","Templates","Assets","Assets","Assets","Auth","Auth","Auth","Auth","Auth","Auth"];
banan_error_ErrorType.seq = 100;
banan_error_ErrorType.seqTime = 101;
banan_error_ErrorType.serverCrash = 102;
banan_error_ErrorType.serverReload = 103;
banan_error_ErrorType.anotherSession = 104;
banan_error_ErrorType.serverDisconnect = 105;
banan_error_ErrorType.noActivityTimeout = 106;
banan_error_ErrorType.responseTimeout = 107;
banan_error_ErrorType.tokenMismatch = 108;
banan_error_ErrorType.websocketClose = 109;
banan_error_ErrorType.websocketEarlyClose = 110;
banan_error_ErrorType.webSocket = 111;
banan_error_ErrorType.connectionFailed = 112;
banan_error_ErrorType.downloadFailed = 113;
banan_error_ErrorType.httpRequestFailed = 114;
banan_error_ErrorType.noInternet = 115;
banan_error_ErrorType.manual = 116;
banan_error_ErrorType.unreachable = 117;
banan_error_ErrorType.notImplemented = 118;
banan_error_ErrorType.sendLogButton = 119;
banan_error_ErrorType.unwrapCommon = 120;
banan_error_ErrorType.assert = 121;
banan_error_ErrorType.generic = 122;
banan_error_ErrorType.noParentEdge = 123;
banan_error_ErrorType.fromUntyped = 124;
banan_error_ErrorType.playerInactivity = 125;
banan_error_ErrorType.native = 126;
banan_error_ErrorType.updateUnavailable = 127;
banan_error_ErrorType.smhError = 128;
banan_error_ErrorType.purchaseError = 129;
banan_error_ErrorType.itemPreCompensate = 130;
banan_error_ErrorType.fbError = 131;
banan_error_ErrorType.tplInvalidData = 132;
banan_error_ErrorType.tplNotFound = 133;
banan_error_ErrorType.tplNoTranslation = 134;
banan_error_ErrorType.assNoDeviceProfile = 135;
banan_error_ErrorType.assInvalidDeviceProfile = 136;
banan_error_ErrorType.assUniversalDeviceProfile = 137;
banan_error_ErrorType.authSessionUnreadable = 138;
banan_error_ErrorType.authCancel = 139;
banan_error_ErrorType.authFail = 140;
banan_error_ErrorType.authNoPlatformAuth = 141;
banan_error_ErrorType.authUnknownPlatform = 142;
banan_error_ErrorType.authMissingTerms = 143;
banan_es_Entity.nextId = 0;
banan_filesystem_IFsModule.__meta__ = { obj : { module : null}};
banan_filesystem_PreloadFileListModule.__meta__ = { fields : { fileSystem : { inject : null, initialize : null}}};
banan_font_FontModule.__meta__ = { fields : { fileSystem : { inject : null, initialize : null}, resourceManager : { inject : null, initialize : null}, resourceSetting : { inject : null, initialize : null}}};
banan_font_PlacedChar.pool = new banan_utils_Pool_$banan_$font_$PlacedChar();
banan_font_PlacedLine.pool = new banan_utils_Pool_$banan_$font_$PlacedLine();
banan_font_TextDesigner.TAB_SIZE = 4;
banan_font_TextDesigner.SPACE = 32;
banan_font_TextDesigner.TAB = 9;
banan_font_TextDesigner.CR = 13;
banan_font_TextDesigner.LF = 10;
banan_font_TextDesigner.pool = new banan_utils_Pool_$banan_$font_$TextDesigner();
banan_http_HttpBytes.MAX_DOWNLOAD_COUNT = 6;
banan_http_HttpBytes.queueTaonga = [];
banan_http_HttpBytes.queueOther = [];
banan_http_HttpBytes.inProgressListTaonga = [];
banan_http_HttpBytes.inProgressListOther = [];
banan_http_HttpBytes.statsHelper = new banan_http_DownloadStatsHelper();
banan_http_MultiTryDownload.MIN_DELAY = 5;
banan_http_MultiTryDownload.saltTryCount = 100;
banan_http_MultiTryDownload.downloadList = [];
banan_http_MultiTryDownload.isSuccessfulDownloadWithSaltLogged = false;
banan_input_InputHandler.__meta__ = { obj : { inline : [true]}, fields : { renderSystem : { inject : null}, nodeSystem : { inject : null}, notificatorModule : { inject : null}, inputSystem : { inject : null, initialize : null}, canBeHit : { inline : null}, calculateHitType : { inline : null}}};
banan_input_InputSystem.__meta__ = { fields : { timeProvider : { inject : null, initialize : null}, bInput : { inject : null}, deviceProfileResolver : { inject : null}}};
banan_input_InputSystem.SHORT_TAP_BEGIN_TIME = 0.05;
banan_input_InputSystem.LONG_TAP_BEGIN_TIME = 0.5;
banan_input_InputSystem.MAX_TAP_MOVE = 20.0;
banan_input_NodeHitPair.pool = [];
banan_load_ILoadingProgressModule.__meta__ = { obj : { module : null}};
banan_localization_ILocalization.__meta__ = { obj : { module : null}};
banan_math_M.PI = 3.141592653589793;
banan_math_M.PI2 = 6.2831853071795862;
banan_math_M.MAX_INT = 2147483647;
banan_math_M.MIN_INT = -2147483648;
banan_math_Matrix3.MIN_VALUE_64 = 5e-324;
banan_math_Matrix3.MIN_VALUE_32 = 1.5e-45;
banan_math_Polygon.__meta__ = { obj : { inline : [true]}};
banan_module__$ModuleState_ModuleState_$Impl_$.WAITING = 0;
banan_module__$ModuleState_ModuleState_$Impl_$.INITIALIZING = 1;
banan_module__$ModuleState_ModuleState_$Impl_$.DEPENDENCY_WAITING = 2;
banan_module__$ModuleState_ModuleState_$Impl_$.INITIALIZED = 3;
banan_module__$ModuleState_ModuleState_$Impl_$.TERMINATED = 4;
banan_notificator_Notificator.subscriptionCount = 0;
banan_notificator_Notificator.any = "*";
banan_notificator_Notificator.distinct = "_";
banan_notificator_Notificator.rest = "...";
banan_notificator_Notificator.count = 0;
banan_rectpack_PackedRect.pool = new haxe_ds_List();
banan_render_Batch.batchCount = 0;
banan_render_Quad.hquad = new banan_render_Quad();
banan_render_RenderSystem.__meta__ = { fields : { fontModule : { inject : null, initialize : null}, resourceManager : { inject : null, initialize : null}, screenSizeProvider : { inject : null, initialize : null}, render2Context : { inject : null, initialize : null}}};
banan_render_RenderSystem.DEBUG_DRAW_INPUT_POLYGONS = false;
banan_render_RenderSystem.DEBUG_DRAW_ONLY_SCENE = false;
banan_render_posteffect_OutlinePostEffect.OUTLINE_SIZE = 10;
banan_render_posteffect_OutlinePostEffect.MARGIN_SIZE = 1;
banan_render_render2_Render2Context.NO_DRAWABLE_ID = banan_render_render2__$Render2Context_DrawableId_$Impl_$._new(0);
banan_render_render2_batch_MaterialBatch.VERTICES_PER_QUAD = 4;
banan_render_render2_batch_MaterialBatch.INDICES_PER_QUAD = 6;
banan_render_render2_batch_MaterialBatch.VERTICES_PER_TRIANGLE = 3;
banan_render_render2_batch_MaterialBatch.INDICES_PER_TRIANGLE = 3;
banan_render_render2_material_Material.__meta__ = { fields : { texture : { copyOnWrite : null}, textureAddressing : { copyOnWrite : null}, colorTransform : { copyOnWrite : null}, outlineColor : { copyOnWrite : null}, alphaMultiplier : { copyOnWrite : null}, xRayConfig : { copyOnWrite : null}, clippingMaskConfig : { copyOnWrite : null}}};
banan_render_render2_node_NodeRenderer.__meta__ = { obj : { inline : [true]}};
banan_render_render2_node_NodeRenderer.DEBUG_DRAW_NODES = false;
banan_render_render2_node_NodeRenderer.DEBUG_DRAW_NODE_NAMES = false;
banan_render_render2_request_DrawRequest.drawCalls = 0;
banan_render_render2_request_DrawRequest.triangles = 0;
banan_resource_IResourceSetting.__meta__ = { obj : { module : null}};
banan_resource_ResourceBase.nextId = 0;
banan_resource_LoaderResource.DEFAULT_CACHE_TIME = 1.0;
banan_resource_ResourceManager.__meta__ = { fields : { resourceSetting : { inject : null, initialize : null}, fileSystem : { inject : null}, timeProvider : { inject : null}, render2Context : { inject : null}}};
banan_resource_ResourceToken.globalTokenMap = new haxe_ds_ObjectMap();
banan_resource_ResourceToken.globalTokenCount = 0;
banan_resource_ResourceToken.globalTokenClaimLock = false;
banan_resource_atlas_Atlas.PADDING = 2;
banan_resource_atlas_Atlas.MAX_ENTRY_SIZE = 512;
banan_resource_atlas_Atlas.REGISTERS_PRE_EXECUTE = 10;
banan_resource_atlas_Atlas.SYNCS_PER_EXECUTE = 10;
banan_resource_atlas_Page.CL_IMG_SIZE = 1;
banan_resource_atlas_Page.COPY_WITH_CLAMP_DEPTH = 1;
banan_resource_texture_decode_DecodeStatsHelper.GB_PER_SEC = 1073741824;
banan_spine_display_SpineRenderHelper.worldVertices = [];
banan_spine_display_SpineRenderHelper.regionIndices = [0,1,2,0,2,3];
banan_spine_display_animation2_SpinePlayer2.nullDrawOrder = [];
banan_time_ITimeSource.__meta__ = { obj : { module : null}};
banan_time_TimeProvider.maxDt = 0.1;
banan_time_TimeProvider.MAX_FRAME = 10000;
banan_utils_PromhxEventLoop.callbacks = [];
banan_utils_PromhxEventLoop.swapCallbacks = [];
banan_utils_TextUtils.formatCache = new haxe_ds_StringMap();
banan_utils_TimeUtils.timeParts = [{ multiplier : 86400, text : "textGuiTimeDay"},{ multiplier : 3600, text : "textGuiTimeHour"},{ multiplier : 60, text : "textGuiTimeMin"},{ multiplier : 1, text : "textGuiTimeSec"}];
banan_utils_UtcDate.tzOffset = (function($this) {
	var $r;
	var d = new Date(Math.floor(new Date().getTime() / 1000) * 1000);
	$r = Date.UTC(d.getFullYear(),d.getMonth(),d.getDate(),d.getHours(),d.getMinutes(),d.getSeconds()) - d.getTime();
	return $r;
}(this));
haxe_Template.splitter = new EReg("(::[A-Za-z0-9_ ()&|!+=/><*.\"-]+::|\\$\\$([A-Za-z0-9_-]+)\\()","");
haxe_Template.expr_splitter = new EReg("(\\(|\\)|[ \r\n\t]*\"[^\"]*\"[ \r\n\t]*|[!+=/><*.&|-]+)","");
haxe_Template.expr_trim = new EReg("^[ ]*([^ ]+)[ ]*$","");
haxe_Template.expr_int = new EReg("^[0-9]+$","");
haxe_Template.expr_float = new EReg("^([+-]?)(?=\\d|,\\d)\\d*(,\\d*)?([Ee]([+-]?\\d+))?$","");
haxe_Template.globals = { };
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
jetgui__$Axis_Axis_$Impl_$.X = 0;
jetgui__$Axis_Axis_$Impl_$.Y = 1;
jetgui__$ClassList_ClassList_$Impl_$.counter = 0;
jetgui_ClickAnimations.map = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var value = new banan_animation_timeline_TimelineDef([new banan_animation_timeline_TKeyframe(1.0,null,".scaleX",0.95,null,null,null),new banan_animation_timeline_TKeyframe(1.0,null,".scaleY",0.95,null,null,null),new banan_animation_timeline_TKeyframe(15.0,null,".scaleX",1.04,null,null,null),new banan_animation_timeline_TKeyframe(15.0,null,".scaleY",1.04,null,null,null),new banan_animation_timeline_TKeyframe(28.0,null,".scaleX",1.0,null,null,null),new banan_animation_timeline_TKeyframe(28.0,null,".scaleY",1.0,null,null,null)],0.016666666666666666);
		if(__map_reserved["default"] != null) {
			_g.setReserved("default",value);
		} else {
			_g.h["default"] = value;
		}
	}
	{
		var value1 = new banan_animation_timeline_TimelineDef([new banan_animation_timeline_TKeyframe(1.0,null,".scaleX",0.9,null,null,null),new banan_animation_timeline_TKeyframe(1.0,null,".scaleY",0.9,null,null,null),new banan_animation_timeline_TKeyframe(15.0,null,".scaleX",1.08,null,null,null),new banan_animation_timeline_TKeyframe(15.0,null,".scaleY",1.08,null,null,null),new banan_animation_timeline_TKeyframe(28.0,null,".scaleX",1.0,null,null,null),new banan_animation_timeline_TKeyframe(28.0,null,".scaleY",1.0,null,null,null)],0.016666666666666666);
		if(__map_reserved["btn"] != null) {
			_g.setReserved("btn",value1);
		} else {
			_g.h["btn"] = value1;
		}
	}
	$r = _g;
	return $r;
}(this));
jetgui_JetControllerContext.__meta__ = { fields : { moduleProvider : { inject : null}}};
jetgui_JetGuiSystem.__meta__ = { fields : { fontModule : { inject : null}, system : { inject : null}, deviceProfileResolver : { inject : null}, entityDelayedDisposer : { inject : null}, timeProvider : { inject : null}, resourceManager : { inject : null}, render2Context : { inject : null}}};
jetgui_data_Observable.context = new jetgui_data_ObservableContext();
jetgui_element_ElementBase.__meta__ = { obj : { inline : [true]}, fields : { toStringChanged : { inline : null}, getParent : { inline : null}, addChild : { inline : null}, syncTooltips : { inline : null}, addChildAfter : { inline : null}, addChildrenAfter : { inline : null}, iterateChildren : { inline : null}, setInteract : { inline : null}, setDisableInteractChild : { inline : null}, setScissor : { inline : null}, setOpacity : { inline : null}, setColor : { inline : null}, setColorMatrix : { inline : null}, setOutline : { inline : null}}};
jetgui_element_Element.__meta__ = { obj : { inline : [true]}, fields : { paddingLeft : { reflow : null}, paddingRight : { reflow : null}, paddingTop : { reflow : null}, paddingBottom : { reflow : null}, offsetLeft : { reflow : null}, offsetRight : { reflow : null}, offsetTop : { reflow : null}, offsetBottom : { reflow : null}, hAlign : { reflow : null}, vAlign : { reflow : null}, width : { reflow : null}, height : { reflow : null}, getPosition : { inline : null}, setPosition : { inline : null}, getSize : { inline : null}, setSize : { inline : null}, getAbsPosition : { inline : null}, onClick : { inline : null}, onLongTapBegin : { inline : null}, onLongTapEnd : { inline : null}, onLongTapMove : { inline : null}, removeLastChild : { inline : null}}};
jetgui_element_ArcElement.__meta__ = { fields : { imageSizeX : { reflow : null}, imageSizeY : { reflow : null}}};
jetgui_element_DragHelper.__meta__ = { obj : { inline : [true]}};
jetgui_element_LinearContainerElement.__meta__ = { obj : { inline : [true]}, fields : { spacing : { reflow : null}, childrenAlign : { reflow : null}, resizeChildren : { reflow : null}, reverseOrder : { reflow : null}}};
jetgui_element_ImageElement.__meta__ = { fields : { imageSizeX : { reflow : null}, imageSizeY : { reflow : null}}};
jetgui_element_ReflowHelper.__meta__ = { obj : { inline : [true]}};
jetgui_element_RootElement.__meta__ = { fields : { rootWidth : { reflow : null}, rootHeight : { reflow : null}}};
jetgui_element_TextElement.__meta__ = { fields : { font : { reflow : null}, fontSize : { reflow : null}, value : { reflow : null}, wrap : { reflow : null}, lineHeight : { reflow : null}, shadowOffsetX : { reflow : null}, shadowOffsetY : { reflow : null}, maxSizeX : { reflow : null}, maxSizeY : { reflow : null}}};
jetgui_element_slider_SliderElement.__meta__ = { fields : { elementSize : { reflow : null}, drawOffset : { reflow : null}}};
jetgui_jml_ComponentDef.notSafeCharEReg = new EReg("\\W+","g");
jetgui_jml_ComponentDef.smoothParamEReg = new EReg("^\\s*([A-Za-z]+)\\s+([\\d\\.]+)(?:\\s+([A-Za-z]+)\\s+([\\d\\.]+))?\\s*$","");
jetgui_jml_JxxParserBase.skipSpaceEReg = new EReg("^\\s*(<!--(?:.|\\s)*?-->\\s*)*","");
jetgui_jml_JxxParserBase.nameEReg = new EReg("^[A-Za-z]\\w*","");
jetgui_jml_JxxParserBase.parenthesesEReg = new EReg("^\\([^)]*\\)","");
jetgui_jml_JxxParserBase.percentEReg = new EReg("^[+-]?((?:\\.\\d+)|(?:\\d+(?:\\.\\d*)?))%","");
jetgui_jml_JxxParserBase.numberEReg = new EReg("^[+-]?(?:\\.\\d+|0x[0-9a-fA-F]+|\\d+(?:\\.\\d*)?)","");
jetgui_jml_JxxParserBase.assetEReg = new EReg("^(asset)(\\([\"])([^\"]*)([\"]\\))","");
jetgui_jml_JxxParserBase.callEReg = new EReg("^call:\\s*\\(([\\s\\w,]*)\\)\\s*->([\\s\\w.]+)\\(([\\s\\w,.=()]*)\\)","");
jetgui_jml_JxxParserBase.fullNameEReg = new EReg("^[A-Za-z]\\w*$","");
jetgui_jml_JxxParserBase.assetPrefix = "new JetAssetPath";
jetgui_jml_JxxParserBase.quotedStringMatcher = new jetgui_jml_QuotedStringMatcher();
jetgui_jml_JmlParser.tagStartEReg = new EReg("^<([A-Za-z][\\w-]*)","");
jetgui_jml_JmlParser.tagEndEReg = new EReg("^(/?)>","");
jetgui_jml_JmlParser.closeTagEReg = new EReg("^</([A-Za-z][\\w-]*)>","");
jetgui_jml_JmlParser.doctypeEReg = new EReg("^<!DOCTYPE\\s+JETXML\\s+([^>]+?)\\s*>","");
jetgui_jml_JmlParser.nameEReg = jetgui_jml_JxxParserBase.nameEReg;
jetgui_jml_JmlParser.skipSpaceEReg = jetgui_jml_JxxParserBase.skipSpaceEReg;
jetgui_style__$EColor_EColor_$Impl_$.hexColorEReg = new EReg("^(?:0x|#)?([0-9a-fA-F]{6,8})$","");
jetguimodule_IJetTooltipModule.__meta__ = { obj : { module : null}};
jetguimodule_JetGuiInput.inputListenerType = new banan_input_EInputListenerType("JetGuiInputSystem",{ fileName : "jetguimodule/JetGuiInput.hx", lineNumber : 33, className : "jetguimodule.JetGuiInput", methodName : "inputListenerType"});
kha_Assets.images = new kha__$Assets_ImageList();
kha_Assets.sounds = new kha__$Assets_SoundList();
kha_Assets.blobs = new kha__$Assets_BlobList();
kha_Assets.fonts = new kha__$Assets_FontList();
kha_Assets.videos = new kha__$Assets_VideoList();
kha_Display.instance = new kha_Display();
kha_Scheduler.timeWarpSaveTime = 10.0;
kha_Scheduler.DIF_COUNT = 3;
kha_Scheduler.maxframetime = 0.5;
kha_Scheduler.startTime = 0;
kha_Shaders.clippingMask_fragData0 = "s7270:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgbWFzazsKdW5pZm9ybSBoaWdocCB2ZWMyIG1hc2tTaXplOwp1bmlmb3JtIGhpZ2hwIHZlYzIgbWFza1NpemVCYXNlOwp1bmlmb3JtIGhpZ2hwIHZlYzQgbWFzazlzbGljZTsKdW5pZm9ybSBoaWdocCBmbG9hdCBtYXNrSXNUaWxlOwp1bmlmb3JtIGhpZ2hwIHZlYzQgbWFza1V2Q29udmVyc2lvbjsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIGhpZ2hwIHZlYzIgdGV4U2l6ZTsKdW5pZm9ybSBoaWdocCB2ZWMyIHRleFNpemVCYXNlOwp1bmlmb3JtIGhpZ2hwIHZlYzQgdGV4OXNsaWNlOwp1bmlmb3JtIGhpZ2hwIGZsb2F0IHRleElzVGlsZTsKdW5pZm9ybSBoaWdocCB2ZWMyIHRleE9mZnNldDsKdW5pZm9ybSBoaWdocCB2ZWM0IHRleFV2Q29udmVyc2lvbjsKCnZhcnlpbmcgaGlnaHAgdmVjMiB0ZXhDb29yZDsKCmhpZ2hwIHZlYzQgY29sb3JfbmluZV9zbGljZShoaWdocCBzYW1wbGVyMkQgdGV4XzEsIGhpZ2hwIHZlYzIgc2l6ZSwgaGlnaHAgdmVjMiBzaXplX2Jhc2UsIGhpZ2hwIHZlYzQgbmluZV9zbGljZSwgaGlnaHAgZmxvYXQgaXNUaWxlLCBoaWdocCB2ZWMyIG9mZnNldCwgaGlnaHAgdmVjNCB1dkNvbnZlcnNpb24pCnsKICAgIGhpZ2hwIHZlYzIgdXYgPSAoKHRleENvb3JkICogbWFza1NpemUpIC0gb2Zmc2V0KSAvIHNpemU7CiAgICBoaWdocCB2ZWMyIHV2QmFzZSA9ICgodGV4Q29vcmQgKiBtYXNrU2l6ZSkgLSBvZmZzZXQpIC8gc2l6ZV9iYXNlOwogICAgaGlnaHAgdmVjMiB1dkNvZWYgPSB1dkJhc2UgLyB1djsKICAgIGhpZ2hwIHZlYzQgbHRyYiA9IG5pbmVfc2xpY2UgLyBzaXplLnh5eHk7CiAgICBoaWdocCB2ZWM0IGx0cmJfYmFzZSA9IG5pbmVfc2xpY2UgLyBzaXplX2Jhc2UueHl4eTsKICAgIGhpZ2hwIHZlYzIgXzEyOCA9IHZlYzIoMS4wKSAtIGx0cmIuenc7CiAgICBsdHJiID0gdmVjNChsdHJiLngsIGx0cmIueSwgXzEyOC54LCBfMTI4LnkpOwogICAgaGlnaHAgdmVjMiBfMTM0ID0gdmVjMigxLjApIC0gbHRyYl9iYXNlLnp3OwogICAgbHRyYl9iYXNlID0gdmVjNChsdHJiX2Jhc2UueCwgbHRyYl9iYXNlLnksIF8xMzQueCwgXzEzNC55KTsKICAgIGhpZ2hwIGZsb2F0IGNvZWZfbGVmdCA9IHN0ZXAodXYueCwgbHRyYi54KTsKICAgIGhpZ2hwIGZsb2F0IGNvZWZfbWlkZGxlX3ggPSBzdGVwKGx0cmIueCwgdXYueCkgKiBzdGVwKHV2LngsIGx0cmIueik7CiAgICBoaWdocCBmbG9hdCBjb2VmX3JpZ2h0ID0gc3RlcChsdHJiLnosIHV2LngpICogc3RlcCh1di54LCAxLjApOwogICAgaGlnaHAgZmxvYXQgY29lZl90b3AgPSBzdGVwKHV2LnksIGx0cmIueSk7CiAgICBoaWdocCBmbG9hdCBjb2VmX21pZGRsZV95ID0gc3RlcChsdHJiLnksIHV2LnkpICogc3RlcCh1di55LCBsdHJiLncpOwogICAgaGlnaHAgZmxvYXQgY29lZl9ib3R0b20gPSBzdGVwKGx0cmIudywgdXYueSkgKiBzdGVwKHV2LnksIDEuMCk7CiAgICBoaWdocCBmbG9hdCBjb2VmXzEgPSBjb2VmX3RvcCAqIGNvZWZfbGVmdDsKICAgIGhpZ2hwIGZsb2F0IGNvZWZfMiA9IGNvZWZfdG9wICogY29lZl9taWRkbGVfeDsKICAgIGhpZ2hwIGZsb2F0IGNvZWZfMyA9IGNvZWZfdG9wICogY29lZl9yaWdodDsKICAgIGhpZ2hwIGZsb2F0IGNvZWZfNCA9IGNvZWZfbWlkZGxlX3kgKiBjb2VmX2xlZnQ7CiAgICBoaWdocCBmbG9hdCBjb2VmXzUgPSBjb2VmX21pZGRsZV95ICogY29lZl9taWRkbGVfeDsKICAgIGhpZ2hwIGZsb2F0IGNvZWZfNiA9IGNvZWZfbWlkZGxlX3kgKiBjb2VmX3JpZ2h0OwogICAgaGlnaHAgZmxvYXQgY29lZl83ID0gY29lZl9ib3R0b20gKiBjb2VmX2xlZnQ7CiAgICBoaWdocCBmbG9hdCBjb2VmXzggPSBjb2VmX2JvdHRvbSAqIGNvZWZfbWlkZGxlX3g7CiAgICBoaWdocCBmbG9hdCBjb2VmXzkgPSBjb2VmX2JvdHRvbSAqIGNvZWZfcmlnaHQ7CiAgICBoaWdocCB2ZWMyIGx0cmJfZGlmZiA9IGx0cmIuencgLSBsdHJiLnh5OwogICAgaGlnaHAgdmVjMiBsdHJiX2Jhc2VfZGlmZiA9IGx0cmJfYmFzZS56dyAtIGx0cmJfYmFzZS54eTsKICAgIGhpZ2hwIGZsb2F0IHVfMTQ3ID0gdXZDb252ZXJzaW9uLnggKyAodXZCYXNlLnggKiB1dkNvbnZlcnNpb24ueik7CiAgICBoaWdocCBmbG9hdCB1XzI1OF90aWxlID0gdXZDb252ZXJzaW9uLnggKyAoKG1vZCh1dkJhc2UueCAtIGx0cmJfYmFzZS54LCBsdHJiX2Jhc2UueiAtIGx0cmJfYmFzZS54KSArIGx0cmJfYmFzZS54KSAqIHV2Q29udmVyc2lvbi56KTsKICAgIGhpZ2hwIGZsb2F0IHVfMjU4ID0gdXZDb252ZXJzaW9uLnggKyAoKCgodXYueCAtIGx0cmIueCkgKiAobHRyYl9iYXNlX2RpZmYueCAvIGx0cmJfZGlmZi54KSkgKyBsdHJiX2Jhc2UueCkgKiB1dkNvbnZlcnNpb24ueik7CiAgICBoaWdocCBmbG9hdCB1XzM2OSA9IHV2Q29udmVyc2lvbi54ICsgKCgoKHV2LnggLSBsdHJiLnopICogdXZDb2VmLngpICsgbHRyYl9iYXNlLnopICogdXZDb252ZXJzaW9uLnopOwogICAgaGlnaHAgZmxvYXQgdl8xMjMgPSB1dkNvbnZlcnNpb24ueSArICh1dkJhc2UueSAqIHV2Q29udmVyc2lvbi53KTsKICAgIGhpZ2hwIGZsb2F0IHZfNDU2X3RpbGUgPSB1dkNvbnZlcnNpb24ueSArICgobW9kKHV2QmFzZS55IC0gbHRyYl9iYXNlLnksIGx0cmJfYmFzZS53IC0gbHRyYl9iYXNlLnkpICsgbHRyYl9iYXNlLnkpICogdXZDb252ZXJzaW9uLncpOwogICAgaGlnaHAgZmxvYXQgdl80NTYgPSB1dkNvbnZlcnNpb24ueSArICgoKCh1di55IC0gbHRyYi55KSAqIChsdHJiX2Jhc2VfZGlmZi55IC8gbHRyYl9kaWZmLnkpKSArIGx0cmJfYmFzZS55KSAqIHV2Q29udmVyc2lvbi53KTsKICAgIGhpZ2hwIGZsb2F0IHZfNzg5ID0gdXZDb252ZXJzaW9uLnkgKyAoKCgodXYueSAtIGx0cmIudykgKiB1dkNvZWYueSkgKyBsdHJiX2Jhc2UudykgKiB1dkNvbnZlcnNpb24udyk7CiAgICBoaWdocCB2ZWMyIHV2XzEgPSB2ZWMyKHVfMTQ3LCB2XzEyMyk7CiAgICBoaWdocCB2ZWMyIHV2XzJfdGlsZSA9IHZlYzIodV8yNThfdGlsZSwgdl8xMjMpOwogICAgaGlnaHAgdmVjMiB1dl8yID0gdmVjMih1XzI1OCwgdl8xMjMpOwogICAgaGlnaHAgdmVjMiB1dl8zID0gdmVjMih1XzM2OSwgdl8xMjMpOwogICAgaGlnaHAgdmVjMiB1dl80X3RpbGUgPSB2ZWMyKHVfMTQ3LCB2XzQ1Nl90aWxlKTsKICAgIGhpZ2hwIHZlYzIgdXZfNCA9IHZlYzIodV8xNDcsIHZfNDU2KTsKICAgIGhpZ2hwIHZlYzIgdXZfNV90aWxlID0gdmVjMih1XzI1OF90aWxlLCB2XzQ1Nl90aWxlKTsKICAgIGhpZ2hwIHZlYzIgdXZfNSA9IHZlYzIodV8yNTgsIHZfNDU2KTsKICAgIGhpZ2hwIHZlYzIgdXZfNl90aWxlID0gdmVjMih1XzM2OSwgdl80NTZfdGlsZSk7CiAgICBoaWdocCB2ZWMyIHV2XzYgPSB2ZWMyKHVfMzY5LCB2XzQ1Nik7CiAgICBoaWdocCB2ZWMyIHV2XzcgPSB2ZWMyKHVfMTQ3LCB2Xzc4OSk7CiAgICBoaWdocCB2ZWMyIHV2XzhfdGlsZSA9IHZlYzIodV8yNThfdGlsZSwgdl83ODkpOwogICAgaGlnaHAgdmVjMiB1dl84ID0gdmVjMih1XzI1OCwgdl83ODkpOwogICAgaGlnaHAgdmVjMiB1dl85ID0gdmVjMih1XzM2OSwgdl83ODkpOwogICAgaGlnaHAgdmVjNCBjb2xvcl8xID0gdGV4dHVyZTJEKHRleF8xLCB1dl8xKSAqIGNvZWZfMTsKICAgIGhpZ2hwIHZlYzQgY29sb3JfMiA9ICgodGV4dHVyZTJEKHRleF8xLCB1dl8yX3RpbGUpICogaXNUaWxlKSArICh0ZXh0dXJlMkQodGV4XzEsIHV2XzIpICogKDEuMCAtIGlzVGlsZSkpKSAqIGNvZWZfMjsKICAgIGhpZ2hwIHZlYzQgY29sb3JfMyA9IHRleHR1cmUyRCh0ZXhfMSwgdXZfMykgKiBjb2VmXzM7CiAgICBoaWdocCB2ZWM0IGNvbG9yXzQgPSAoKHRleHR1cmUyRCh0ZXhfMSwgdXZfNF90aWxlKSAqIGlzVGlsZSkgKyAodGV4dHVyZTJEKHRleF8xLCB1dl80KSAqICgxLjAgLSBpc1RpbGUpKSkgKiBjb2VmXzQ7CiAgICBoaWdocCB2ZWM0IGNvbG9yXzUgPSAoKHRleHR1cmUyRCh0ZXhfMSwgdXZfNV90aWxlKSAqIGlzVGlsZSkgKyAodGV4dHVyZTJEKHRleF8xLCB1dl81KSAqICgxLjAgLSBpc1RpbGUpKSkgKiBjb2VmXzU7CiAgICBoaWdocCB2ZWM0IGNvbG9yXzYgPSAoKHRleHR1cmUyRCh0ZXhfMSwgdXZfNl90aWxlKSAqIGlzVGlsZSkgKyAodGV4dHVyZTJEKHRleF8xLCB1dl82KSAqICgxLjAgLSBpc1RpbGUpKSkgKiBjb2VmXzY7CiAgICBoaWdocCB2ZWM0IGNvbG9yXzcgPSB0ZXh0dXJlMkQodGV4XzEsIHV2XzcpICogY29lZl83OwogICAgaGlnaHAgdmVjNCBjb2xvcl84ID0gKCh0ZXh0dXJlMkQodGV4XzEsIHV2XzhfdGlsZSkgKiBpc1RpbGUpICsgKHRleHR1cmUyRCh0ZXhfMSwgdXZfOCkgKiAoMS4wIC0gaXNUaWxlKSkpICogY29lZl84OwogICAgaGlnaHAgdmVjNCBjb2xvcl85ID0gdGV4dHVyZTJEKHRleF8xLCB1dl85KSAqIGNvZWZfOTsKICAgIHJldHVybiAoKCgoKCgoY29sb3JfMSArIGNvbG9yXzIpICsgY29sb3JfMykgKyBjb2xvcl80KSArIGNvbG9yXzUpICsgY29sb3JfNikgKyBjb2xvcl83KSArIGNvbG9yXzgpICsgY29sb3JfOTsKfQoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjMiBwYXJhbSA9IG1hc2tTaXplOwogICAgaGlnaHAgdmVjMiBwYXJhbV8xID0gbWFza1NpemVCYXNlOwogICAgaGlnaHAgdmVjNCBwYXJhbV8yID0gbWFzazlzbGljZTsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzMgPSBtYXNrSXNUaWxlOwogICAgaGlnaHAgdmVjMiBwYXJhbV80ID0gdmVjMigwLjApOwogICAgaGlnaHAgdmVjNCBwYXJhbV81ID0gbWFza1V2Q29udmVyc2lvbjsKICAgIGhpZ2hwIHZlYzQgbWFza0NvbG9yID0gY29sb3JfbmluZV9zbGljZShtYXNrLCBwYXJhbSwgcGFyYW1fMSwgcGFyYW1fMiwgcGFyYW1fMywgcGFyYW1fNCwgcGFyYW1fNSk7CiAgICBoaWdocCB2ZWMyIHBhcmFtXzYgPSB0ZXhTaXplOwogICAgaGlnaHAgdmVjMiBwYXJhbV83ID0gdGV4U2l6ZUJhc2U7CiAgICBoaWdocCB2ZWM0IHBhcmFtXzggPSB0ZXg5c2xpY2U7CiAgICBoaWdocCBmbG9hdCBwYXJhbV85ID0gdGV4SXNUaWxlOwogICAgaGlnaHAgdmVjMiBwYXJhbV8xMCA9IHRleE9mZnNldDsKICAgIGhpZ2hwIHZlYzQgcGFyYW1fMTEgPSB0ZXhVdkNvbnZlcnNpb247CiAgICBoaWdocCB2ZWM0IHRleENvbG9yID0gY29sb3JfbmluZV9zbGljZSh0ZXgsIHBhcmFtXzYsIHBhcmFtXzcsIHBhcmFtXzgsIHBhcmFtXzksIHBhcmFtXzEwLCBwYXJhbV8xMSk7CiAgICBoaWdocCB2ZWM0IGNvbG9yID0gdGV4Q29sb3I7CiAgICBoaWdocCB2ZWMzIF84MCA9IGNvbG9yLnh5eiArIChtYXNrQ29sb3IueXl5IC0gbWFza0NvbG9yLnp6eik7CiAgICBjb2xvciA9IHZlYzQoXzgwLngsIF84MC55LCBfODAueiwgY29sb3Iudyk7CiAgICBjb2xvciAqPSBtYXNrQ29sb3IudzsKICAgIGdsX0ZyYWdEYXRhWzBdID0gY29sb3I7Cn0KCg";
kha_Shaders.clippingMask_fragData1 = "s7258:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgbWFzazsKdW5pZm9ybSBoaWdocCB2ZWMyIG1hc2tTaXplOwp1bmlmb3JtIGhpZ2hwIHZlYzIgbWFza1NpemVCYXNlOwp1bmlmb3JtIGhpZ2hwIHZlYzQgbWFzazlzbGljZTsKdW5pZm9ybSBoaWdocCBmbG9hdCBtYXNrSXNUaWxlOwp1bmlmb3JtIGhpZ2hwIHZlYzQgbWFza1V2Q29udmVyc2lvbjsKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIGhpZ2hwIHZlYzIgdGV4U2l6ZTsKdW5pZm9ybSBoaWdocCB2ZWMyIHRleFNpemVCYXNlOwp1bmlmb3JtIGhpZ2hwIHZlYzQgdGV4OXNsaWNlOwp1bmlmb3JtIGhpZ2hwIGZsb2F0IHRleElzVGlsZTsKdW5pZm9ybSBoaWdocCB2ZWMyIHRleE9mZnNldDsKdW5pZm9ybSBoaWdocCB2ZWM0IHRleFV2Q29udmVyc2lvbjsKCm91dCBoaWdocCB2ZWM0IEZyYWdDb2xvcjsKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKCmhpZ2hwIHZlYzQgY29sb3JfbmluZV9zbGljZShoaWdocCBzYW1wbGVyMkQgdGV4XzEsIGhpZ2hwIHZlYzIgc2l6ZSwgaGlnaHAgdmVjMiBzaXplX2Jhc2UsIGhpZ2hwIHZlYzQgbmluZV9zbGljZSwgaGlnaHAgZmxvYXQgaXNUaWxlLCBoaWdocCB2ZWMyIG9mZnNldCwgaGlnaHAgdmVjNCB1dkNvbnZlcnNpb24pCnsKICAgIGhpZ2hwIHZlYzIgdXYgPSAoKHRleENvb3JkICogbWFza1NpemUpIC0gb2Zmc2V0KSAvIHNpemU7CiAgICBoaWdocCB2ZWMyIHV2QmFzZSA9ICgodGV4Q29vcmQgKiBtYXNrU2l6ZSkgLSBvZmZzZXQpIC8gc2l6ZV9iYXNlOwogICAgaGlnaHAgdmVjMiB1dkNvZWYgPSB1dkJhc2UgLyB1djsKICAgIGhpZ2hwIHZlYzQgbHRyYiA9IG5pbmVfc2xpY2UgLyBzaXplLnh5eHk7CiAgICBoaWdocCB2ZWM0IGx0cmJfYmFzZSA9IG5pbmVfc2xpY2UgLyBzaXplX2Jhc2UueHl4eTsKICAgIGhpZ2hwIHZlYzIgXzEyOCA9IHZlYzIoMS4wKSAtIGx0cmIuenc7CiAgICBsdHJiID0gdmVjNChsdHJiLngsIGx0cmIueSwgXzEyOC54LCBfMTI4LnkpOwogICAgaGlnaHAgdmVjMiBfMTM0ID0gdmVjMigxLjApIC0gbHRyYl9iYXNlLnp3OwogICAgbHRyYl9iYXNlID0gdmVjNChsdHJiX2Jhc2UueCwgbHRyYl9iYXNlLnksIF8xMzQueCwgXzEzNC55KTsKICAgIGhpZ2hwIGZsb2F0IGNvZWZfbGVmdCA9IHN0ZXAodXYueCwgbHRyYi54KTsKICAgIGhpZ2hwIGZsb2F0IGNvZWZfbWlkZGxlX3ggPSBzdGVwKGx0cmIueCwgdXYueCkgKiBzdGVwKHV2LngsIGx0cmIueik7CiAgICBoaWdocCBmbG9hdCBjb2VmX3JpZ2h0ID0gc3RlcChsdHJiLnosIHV2LngpICogc3RlcCh1di54LCAxLjApOwogICAgaGlnaHAgZmxvYXQgY29lZl90b3AgPSBzdGVwKHV2LnksIGx0cmIueSk7CiAgICBoaWdocCBmbG9hdCBjb2VmX21pZGRsZV95ID0gc3RlcChsdHJiLnksIHV2LnkpICogc3RlcCh1di55LCBsdHJiLncpOwogICAgaGlnaHAgZmxvYXQgY29lZl9ib3R0b20gPSBzdGVwKGx0cmIudywgdXYueSkgKiBzdGVwKHV2LnksIDEuMCk7CiAgICBoaWdocCBmbG9hdCBjb2VmXzEgPSBjb2VmX3RvcCAqIGNvZWZfbGVmdDsKICAgIGhpZ2hwIGZsb2F0IGNvZWZfMiA9IGNvZWZfdG9wICogY29lZl9taWRkbGVfeDsKICAgIGhpZ2hwIGZsb2F0IGNvZWZfMyA9IGNvZWZfdG9wICogY29lZl9yaWdodDsKICAgIGhpZ2hwIGZsb2F0IGNvZWZfNCA9IGNvZWZfbWlkZGxlX3kgKiBjb2VmX2xlZnQ7CiAgICBoaWdocCBmbG9hdCBjb2VmXzUgPSBjb2VmX21pZGRsZV95ICogY29lZl9taWRkbGVfeDsKICAgIGhpZ2hwIGZsb2F0IGNvZWZfNiA9IGNvZWZfbWlkZGxlX3kgKiBjb2VmX3JpZ2h0OwogICAgaGlnaHAgZmxvYXQgY29lZl83ID0gY29lZl9ib3R0b20gKiBjb2VmX2xlZnQ7CiAgICBoaWdocCBmbG9hdCBjb2VmXzggPSBjb2VmX2JvdHRvbSAqIGNvZWZfbWlkZGxlX3g7CiAgICBoaWdocCBmbG9hdCBjb2VmXzkgPSBjb2VmX2JvdHRvbSAqIGNvZWZfcmlnaHQ7CiAgICBoaWdocCB2ZWMyIGx0cmJfZGlmZiA9IGx0cmIuencgLSBsdHJiLnh5OwogICAgaGlnaHAgdmVjMiBsdHJiX2Jhc2VfZGlmZiA9IGx0cmJfYmFzZS56dyAtIGx0cmJfYmFzZS54eTsKICAgIGhpZ2hwIGZsb2F0IHVfMTQ3ID0gdXZDb252ZXJzaW9uLnggKyAodXZCYXNlLnggKiB1dkNvbnZlcnNpb24ueik7CiAgICBoaWdocCBmbG9hdCB1XzI1OF90aWxlID0gdXZDb252ZXJzaW9uLnggKyAoKG1vZCh1dkJhc2UueCAtIGx0cmJfYmFzZS54LCBsdHJiX2Jhc2UueiAtIGx0cmJfYmFzZS54KSArIGx0cmJfYmFzZS54KSAqIHV2Q29udmVyc2lvbi56KTsKICAgIGhpZ2hwIGZsb2F0IHVfMjU4ID0gdXZDb252ZXJzaW9uLnggKyAoKCgodXYueCAtIGx0cmIueCkgKiAobHRyYl9iYXNlX2RpZmYueCAvIGx0cmJfZGlmZi54KSkgKyBsdHJiX2Jhc2UueCkgKiB1dkNvbnZlcnNpb24ueik7CiAgICBoaWdocCBmbG9hdCB1XzM2OSA9IHV2Q29udmVyc2lvbi54ICsgKCgoKHV2LnggLSBsdHJiLnopICogdXZDb2VmLngpICsgbHRyYl9iYXNlLnopICogdXZDb252ZXJzaW9uLnopOwogICAgaGlnaHAgZmxvYXQgdl8xMjMgPSB1dkNvbnZlcnNpb24ueSArICh1dkJhc2UueSAqIHV2Q29udmVyc2lvbi53KTsKICAgIGhpZ2hwIGZsb2F0IHZfNDU2X3RpbGUgPSB1dkNvbnZlcnNpb24ueSArICgobW9kKHV2QmFzZS55IC0gbHRyYl9iYXNlLnksIGx0cmJfYmFzZS53IC0gbHRyYl9iYXNlLnkpICsgbHRyYl9iYXNlLnkpICogdXZDb252ZXJzaW9uLncpOwogICAgaGlnaHAgZmxvYXQgdl80NTYgPSB1dkNvbnZlcnNpb24ueSArICgoKCh1di55IC0gbHRyYi55KSAqIChsdHJiX2Jhc2VfZGlmZi55IC8gbHRyYl9kaWZmLnkpKSArIGx0cmJfYmFzZS55KSAqIHV2Q29udmVyc2lvbi53KTsKICAgIGhpZ2hwIGZsb2F0IHZfNzg5ID0gdXZDb252ZXJzaW9uLnkgKyAoKCgodXYueSAtIGx0cmIudykgKiB1dkNvZWYueSkgKyBsdHJiX2Jhc2UudykgKiB1dkNvbnZlcnNpb24udyk7CiAgICBoaWdocCB2ZWMyIHV2XzEgPSB2ZWMyKHVfMTQ3LCB2XzEyMyk7CiAgICBoaWdocCB2ZWMyIHV2XzJfdGlsZSA9IHZlYzIodV8yNThfdGlsZSwgdl8xMjMpOwogICAgaGlnaHAgdmVjMiB1dl8yID0gdmVjMih1XzI1OCwgdl8xMjMpOwogICAgaGlnaHAgdmVjMiB1dl8zID0gdmVjMih1XzM2OSwgdl8xMjMpOwogICAgaGlnaHAgdmVjMiB1dl80X3RpbGUgPSB2ZWMyKHVfMTQ3LCB2XzQ1Nl90aWxlKTsKICAgIGhpZ2hwIHZlYzIgdXZfNCA9IHZlYzIodV8xNDcsIHZfNDU2KTsKICAgIGhpZ2hwIHZlYzIgdXZfNV90aWxlID0gdmVjMih1XzI1OF90aWxlLCB2XzQ1Nl90aWxlKTsKICAgIGhpZ2hwIHZlYzIgdXZfNSA9IHZlYzIodV8yNTgsIHZfNDU2KTsKICAgIGhpZ2hwIHZlYzIgdXZfNl90aWxlID0gdmVjMih1XzM2OSwgdl80NTZfdGlsZSk7CiAgICBoaWdocCB2ZWMyIHV2XzYgPSB2ZWMyKHVfMzY5LCB2XzQ1Nik7CiAgICBoaWdocCB2ZWMyIHV2XzcgPSB2ZWMyKHVfMTQ3LCB2Xzc4OSk7CiAgICBoaWdocCB2ZWMyIHV2XzhfdGlsZSA9IHZlYzIodV8yNThfdGlsZSwgdl83ODkpOwogICAgaGlnaHAgdmVjMiB1dl84ID0gdmVjMih1XzI1OCwgdl83ODkpOwogICAgaGlnaHAgdmVjMiB1dl85ID0gdmVjMih1XzM2OSwgdl83ODkpOwogICAgaGlnaHAgdmVjNCBjb2xvcl8xID0gdGV4dHVyZSh0ZXhfMSwgdXZfMSkgKiBjb2VmXzE7CiAgICBoaWdocCB2ZWM0IGNvbG9yXzIgPSAoKHRleHR1cmUodGV4XzEsIHV2XzJfdGlsZSkgKiBpc1RpbGUpICsgKHRleHR1cmUodGV4XzEsIHV2XzIpICogKDEuMCAtIGlzVGlsZSkpKSAqIGNvZWZfMjsKICAgIGhpZ2hwIHZlYzQgY29sb3JfMyA9IHRleHR1cmUodGV4XzEsIHV2XzMpICogY29lZl8zOwogICAgaGlnaHAgdmVjNCBjb2xvcl80ID0gKCh0ZXh0dXJlKHRleF8xLCB1dl80X3RpbGUpICogaXNUaWxlKSArICh0ZXh0dXJlKHRleF8xLCB1dl80KSAqICgxLjAgLSBpc1RpbGUpKSkgKiBjb2VmXzQ7CiAgICBoaWdocCB2ZWM0IGNvbG9yXzUgPSAoKHRleHR1cmUodGV4XzEsIHV2XzVfdGlsZSkgKiBpc1RpbGUpICsgKHRleHR1cmUodGV4XzEsIHV2XzUpICogKDEuMCAtIGlzVGlsZSkpKSAqIGNvZWZfNTsKICAgIGhpZ2hwIHZlYzQgY29sb3JfNiA9ICgodGV4dHVyZSh0ZXhfMSwgdXZfNl90aWxlKSAqIGlzVGlsZSkgKyAodGV4dHVyZSh0ZXhfMSwgdXZfNikgKiAoMS4wIC0gaXNUaWxlKSkpICogY29lZl82OwogICAgaGlnaHAgdmVjNCBjb2xvcl83ID0gdGV4dHVyZSh0ZXhfMSwgdXZfNykgKiBjb2VmXzc7CiAgICBoaWdocCB2ZWM0IGNvbG9yXzggPSAoKHRleHR1cmUodGV4XzEsIHV2XzhfdGlsZSkgKiBpc1RpbGUpICsgKHRleHR1cmUodGV4XzEsIHV2XzgpICogKDEuMCAtIGlzVGlsZSkpKSAqIGNvZWZfODsKICAgIGhpZ2hwIHZlYzQgY29sb3JfOSA9IHRleHR1cmUodGV4XzEsIHV2XzkpICogY29lZl85OwogICAgcmV0dXJuICgoKCgoKChjb2xvcl8xICsgY29sb3JfMikgKyBjb2xvcl8zKSArIGNvbG9yXzQpICsgY29sb3JfNSkgKyBjb2xvcl82KSArIGNvbG9yXzcpICsgY29sb3JfOCkgKyBjb2xvcl85Owp9Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWMyIHBhcmFtID0gbWFza1NpemU7CiAgICBoaWdocCB2ZWMyIHBhcmFtXzEgPSBtYXNrU2l6ZUJhc2U7CiAgICBoaWdocCB2ZWM0IHBhcmFtXzIgPSBtYXNrOXNsaWNlOwogICAgaGlnaHAgZmxvYXQgcGFyYW1fMyA9IG1hc2tJc1RpbGU7CiAgICBoaWdocCB2ZWMyIHBhcmFtXzQgPSB2ZWMyKDAuMCk7CiAgICBoaWdocCB2ZWM0IHBhcmFtXzUgPSBtYXNrVXZDb252ZXJzaW9uOwogICAgaGlnaHAgdmVjNCBtYXNrQ29sb3IgPSBjb2xvcl9uaW5lX3NsaWNlKG1hc2ssIHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yLCBwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81KTsKICAgIGhpZ2hwIHZlYzIgcGFyYW1fNiA9IHRleFNpemU7CiAgICBoaWdocCB2ZWMyIHBhcmFtXzcgPSB0ZXhTaXplQmFzZTsKICAgIGhpZ2hwIHZlYzQgcGFyYW1fOCA9IHRleDlzbGljZTsKICAgIGhpZ2hwIGZsb2F0IHBhcmFtXzkgPSB0ZXhJc1RpbGU7CiAgICBoaWdocCB2ZWMyIHBhcmFtXzEwID0gdGV4T2Zmc2V0OwogICAgaGlnaHAgdmVjNCBwYXJhbV8xMSA9IHRleFV2Q29udmVyc2lvbjsKICAgIGhpZ2hwIHZlYzQgdGV4Q29sb3IgPSBjb2xvcl9uaW5lX3NsaWNlKHRleCwgcGFyYW1fNiwgcGFyYW1fNywgcGFyYW1fOCwgcGFyYW1fOSwgcGFyYW1fMTAsIHBhcmFtXzExKTsKICAgIGhpZ2hwIHZlYzQgY29sb3IgPSB0ZXhDb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzgwID0gY29sb3IueHl6ICsgKG1hc2tDb2xvci55eXkgLSBtYXNrQ29sb3Iuenp6KTsKICAgIGNvbG9yID0gdmVjNChfODAueCwgXzgwLnksIF84MC56LCBjb2xvci53KTsKICAgIGNvbG9yICo9IG1hc2tDb2xvci53OwogICAgRnJhZ0NvbG9yID0gY29sb3I7Cn0KCg";
kha_Shaders.clippingMask_fragData2 = "s6560:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIG1hc2s7CnVuaWZvcm0gdmVjMiBtYXNrU2l6ZTsKdW5pZm9ybSB2ZWMyIG1hc2tTaXplQmFzZTsKdW5pZm9ybSB2ZWM0IG1hc2s5c2xpY2U7CnVuaWZvcm0gZmxvYXQgbWFza0lzVGlsZTsKdW5pZm9ybSB2ZWM0IG1hc2tVdkNvbnZlcnNpb247CnVuaWZvcm0gbWVkaXVtcCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIHZlYzIgdGV4U2l6ZTsKdW5pZm9ybSB2ZWMyIHRleFNpemVCYXNlOwp1bmlmb3JtIHZlYzQgdGV4OXNsaWNlOwp1bmlmb3JtIGZsb2F0IHRleElzVGlsZTsKdW5pZm9ybSB2ZWMyIHRleE9mZnNldDsKdW5pZm9ybSB2ZWM0IHRleFV2Q29udmVyc2lvbjsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKCnZlYzQgY29sb3JfbmluZV9zbGljZShtZWRpdW1wIHNhbXBsZXIyRCB0ZXhfMSwgdmVjMiBzaXplLCB2ZWMyIHNpemVfYmFzZSwgdmVjNCBuaW5lX3NsaWNlLCBmbG9hdCBpc1RpbGUsIHZlYzIgb2Zmc2V0LCB2ZWM0IHV2Q29udmVyc2lvbikKewogICAgdmVjMiB1diA9ICgodGV4Q29vcmQgKiBtYXNrU2l6ZSkgLSBvZmZzZXQpIC8gc2l6ZTsKICAgIHZlYzIgdXZCYXNlID0gKCh0ZXhDb29yZCAqIG1hc2tTaXplKSAtIG9mZnNldCkgLyBzaXplX2Jhc2U7CiAgICB2ZWMyIHV2Q29lZiA9IHV2QmFzZSAvIHV2OwogICAgdmVjNCBsdHJiID0gbmluZV9zbGljZSAvIHNpemUueHl4eTsKICAgIHZlYzQgbHRyYl9iYXNlID0gbmluZV9zbGljZSAvIHNpemVfYmFzZS54eXh5OwogICAgdmVjMiBfMTI4ID0gdmVjMigxLjApIC0gbHRyYi56dzsKICAgIGx0cmIgPSB2ZWM0KGx0cmIueCwgbHRyYi55LCBfMTI4LngsIF8xMjgueSk7CiAgICB2ZWMyIF8xMzQgPSB2ZWMyKDEuMCkgLSBsdHJiX2Jhc2Uuenc7CiAgICBsdHJiX2Jhc2UgPSB2ZWM0KGx0cmJfYmFzZS54LCBsdHJiX2Jhc2UueSwgXzEzNC54LCBfMTM0LnkpOwogICAgZmxvYXQgY29lZl9sZWZ0ID0gc3RlcCh1di54LCBsdHJiLngpOwogICAgZmxvYXQgY29lZl9taWRkbGVfeCA9IHN0ZXAobHRyYi54LCB1di54KSAqIHN0ZXAodXYueCwgbHRyYi56KTsKICAgIGZsb2F0IGNvZWZfcmlnaHQgPSBzdGVwKGx0cmIueiwgdXYueCkgKiBzdGVwKHV2LngsIDEuMCk7CiAgICBmbG9hdCBjb2VmX3RvcCA9IHN0ZXAodXYueSwgbHRyYi55KTsKICAgIGZsb2F0IGNvZWZfbWlkZGxlX3kgPSBzdGVwKGx0cmIueSwgdXYueSkgKiBzdGVwKHV2LnksIGx0cmIudyk7CiAgICBmbG9hdCBjb2VmX2JvdHRvbSA9IHN0ZXAobHRyYi53LCB1di55KSAqIHN0ZXAodXYueSwgMS4wKTsKICAgIGZsb2F0IGNvZWZfMSA9IGNvZWZfdG9wICogY29lZl9sZWZ0OwogICAgZmxvYXQgY29lZl8yID0gY29lZl90b3AgKiBjb2VmX21pZGRsZV94OwogICAgZmxvYXQgY29lZl8zID0gY29lZl90b3AgKiBjb2VmX3JpZ2h0OwogICAgZmxvYXQgY29lZl80ID0gY29lZl9taWRkbGVfeSAqIGNvZWZfbGVmdDsKICAgIGZsb2F0IGNvZWZfNSA9IGNvZWZfbWlkZGxlX3kgKiBjb2VmX21pZGRsZV94OwogICAgZmxvYXQgY29lZl82ID0gY29lZl9taWRkbGVfeSAqIGNvZWZfcmlnaHQ7CiAgICBmbG9hdCBjb2VmXzcgPSBjb2VmX2JvdHRvbSAqIGNvZWZfbGVmdDsKICAgIGZsb2F0IGNvZWZfOCA9IGNvZWZfYm90dG9tICogY29lZl9taWRkbGVfeDsKICAgIGZsb2F0IGNvZWZfOSA9IGNvZWZfYm90dG9tICogY29lZl9yaWdodDsKICAgIHZlYzIgbHRyYl9kaWZmID0gbHRyYi56dyAtIGx0cmIueHk7CiAgICB2ZWMyIGx0cmJfYmFzZV9kaWZmID0gbHRyYl9iYXNlLnp3IC0gbHRyYl9iYXNlLnh5OwogICAgZmxvYXQgdV8xNDcgPSB1dkNvbnZlcnNpb24ueCArICh1dkJhc2UueCAqIHV2Q29udmVyc2lvbi56KTsKICAgIGZsb2F0IHVfMjU4X3RpbGUgPSB1dkNvbnZlcnNpb24ueCArICgobW9kKHV2QmFzZS54IC0gbHRyYl9iYXNlLngsIGx0cmJfYmFzZS56IC0gbHRyYl9iYXNlLngpICsgbHRyYl9iYXNlLngpICogdXZDb252ZXJzaW9uLnopOwogICAgZmxvYXQgdV8yNTggPSB1dkNvbnZlcnNpb24ueCArICgoKCh1di54IC0gbHRyYi54KSAqIChsdHJiX2Jhc2VfZGlmZi54IC8gbHRyYl9kaWZmLngpKSArIGx0cmJfYmFzZS54KSAqIHV2Q29udmVyc2lvbi56KTsKICAgIGZsb2F0IHVfMzY5ID0gdXZDb252ZXJzaW9uLnggKyAoKCgodXYueCAtIGx0cmIueikgKiB1dkNvZWYueCkgKyBsdHJiX2Jhc2UueikgKiB1dkNvbnZlcnNpb24ueik7CiAgICBmbG9hdCB2XzEyMyA9IHV2Q29udmVyc2lvbi55ICsgKHV2QmFzZS55ICogdXZDb252ZXJzaW9uLncpOwogICAgZmxvYXQgdl80NTZfdGlsZSA9IHV2Q29udmVyc2lvbi55ICsgKChtb2QodXZCYXNlLnkgLSBsdHJiX2Jhc2UueSwgbHRyYl9iYXNlLncgLSBsdHJiX2Jhc2UueSkgKyBsdHJiX2Jhc2UueSkgKiB1dkNvbnZlcnNpb24udyk7CiAgICBmbG9hdCB2XzQ1NiA9IHV2Q29udmVyc2lvbi55ICsgKCgoKHV2LnkgLSBsdHJiLnkpICogKGx0cmJfYmFzZV9kaWZmLnkgLyBsdHJiX2RpZmYueSkpICsgbHRyYl9iYXNlLnkpICogdXZDb252ZXJzaW9uLncpOwogICAgZmxvYXQgdl83ODkgPSB1dkNvbnZlcnNpb24ueSArICgoKCh1di55IC0gbHRyYi53KSAqIHV2Q29lZi55KSArIGx0cmJfYmFzZS53KSAqIHV2Q29udmVyc2lvbi53KTsKICAgIHZlYzIgdXZfMSA9IHZlYzIodV8xNDcsIHZfMTIzKTsKICAgIHZlYzIgdXZfMl90aWxlID0gdmVjMih1XzI1OF90aWxlLCB2XzEyMyk7CiAgICB2ZWMyIHV2XzIgPSB2ZWMyKHVfMjU4LCB2XzEyMyk7CiAgICB2ZWMyIHV2XzMgPSB2ZWMyKHVfMzY5LCB2XzEyMyk7CiAgICB2ZWMyIHV2XzRfdGlsZSA9IHZlYzIodV8xNDcsIHZfNDU2X3RpbGUpOwogICAgdmVjMiB1dl80ID0gdmVjMih1XzE0Nywgdl80NTYpOwogICAgdmVjMiB1dl81X3RpbGUgPSB2ZWMyKHVfMjU4X3RpbGUsIHZfNDU2X3RpbGUpOwogICAgdmVjMiB1dl81ID0gdmVjMih1XzI1OCwgdl80NTYpOwogICAgdmVjMiB1dl82X3RpbGUgPSB2ZWMyKHVfMzY5LCB2XzQ1Nl90aWxlKTsKICAgIHZlYzIgdXZfNiA9IHZlYzIodV8zNjksIHZfNDU2KTsKICAgIHZlYzIgdXZfNyA9IHZlYzIodV8xNDcsIHZfNzg5KTsKICAgIHZlYzIgdXZfOF90aWxlID0gdmVjMih1XzI1OF90aWxlLCB2Xzc4OSk7CiAgICB2ZWMyIHV2XzggPSB2ZWMyKHVfMjU4LCB2Xzc4OSk7CiAgICB2ZWMyIHV2XzkgPSB2ZWMyKHVfMzY5LCB2Xzc4OSk7CiAgICB2ZWM0IGNvbG9yXzEgPSB0ZXh0dXJlMkQodGV4XzEsIHV2XzEpICogY29lZl8xOwogICAgdmVjNCBjb2xvcl8yID0gKCh0ZXh0dXJlMkQodGV4XzEsIHV2XzJfdGlsZSkgKiBpc1RpbGUpICsgKHRleHR1cmUyRCh0ZXhfMSwgdXZfMikgKiAoMS4wIC0gaXNUaWxlKSkpICogY29lZl8yOwogICAgdmVjNCBjb2xvcl8zID0gdGV4dHVyZTJEKHRleF8xLCB1dl8zKSAqIGNvZWZfMzsKICAgIHZlYzQgY29sb3JfNCA9ICgodGV4dHVyZTJEKHRleF8xLCB1dl80X3RpbGUpICogaXNUaWxlKSArICh0ZXh0dXJlMkQodGV4XzEsIHV2XzQpICogKDEuMCAtIGlzVGlsZSkpKSAqIGNvZWZfNDsKICAgIHZlYzQgY29sb3JfNSA9ICgodGV4dHVyZTJEKHRleF8xLCB1dl81X3RpbGUpICogaXNUaWxlKSArICh0ZXh0dXJlMkQodGV4XzEsIHV2XzUpICogKDEuMCAtIGlzVGlsZSkpKSAqIGNvZWZfNTsKICAgIHZlYzQgY29sb3JfNiA9ICgodGV4dHVyZTJEKHRleF8xLCB1dl82X3RpbGUpICogaXNUaWxlKSArICh0ZXh0dXJlMkQodGV4XzEsIHV2XzYpICogKDEuMCAtIGlzVGlsZSkpKSAqIGNvZWZfNjsKICAgIHZlYzQgY29sb3JfNyA9IHRleHR1cmUyRCh0ZXhfMSwgdXZfNykgKiBjb2VmXzc7CiAgICB2ZWM0IGNvbG9yXzggPSAoKHRleHR1cmUyRCh0ZXhfMSwgdXZfOF90aWxlKSAqIGlzVGlsZSkgKyAodGV4dHVyZTJEKHRleF8xLCB1dl84KSAqICgxLjAgLSBpc1RpbGUpKSkgKiBjb2VmXzg7CiAgICB2ZWM0IGNvbG9yXzkgPSB0ZXh0dXJlMkQodGV4XzEsIHV2XzkpICogY29lZl85OwogICAgcmV0dXJuICgoKCgoKChjb2xvcl8xICsgY29sb3JfMikgKyBjb2xvcl8zKSArIGNvbG9yXzQpICsgY29sb3JfNSkgKyBjb2xvcl82KSArIGNvbG9yXzcpICsgY29sb3JfOCkgKyBjb2xvcl85Owp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWMyIHBhcmFtID0gbWFza1NpemU7CiAgICB2ZWMyIHBhcmFtXzEgPSBtYXNrU2l6ZUJhc2U7CiAgICB2ZWM0IHBhcmFtXzIgPSBtYXNrOXNsaWNlOwogICAgZmxvYXQgcGFyYW1fMyA9IG1hc2tJc1RpbGU7CiAgICB2ZWMyIHBhcmFtXzQgPSB2ZWMyKDAuMCk7CiAgICB2ZWM0IHBhcmFtXzUgPSBtYXNrVXZDb252ZXJzaW9uOwogICAgdmVjNCBtYXNrQ29sb3IgPSBjb2xvcl9uaW5lX3NsaWNlKG1hc2ssIHBhcmFtLCBwYXJhbV8xLCBwYXJhbV8yLCBwYXJhbV8zLCBwYXJhbV80LCBwYXJhbV81KTsKICAgIHZlYzIgcGFyYW1fNiA9IHRleFNpemU7CiAgICB2ZWMyIHBhcmFtXzcgPSB0ZXhTaXplQmFzZTsKICAgIHZlYzQgcGFyYW1fOCA9IHRleDlzbGljZTsKICAgIGZsb2F0IHBhcmFtXzkgPSB0ZXhJc1RpbGU7CiAgICB2ZWMyIHBhcmFtXzEwID0gdGV4T2Zmc2V0OwogICAgdmVjNCBwYXJhbV8xMSA9IHRleFV2Q29udmVyc2lvbjsKICAgIHZlYzQgdGV4Q29sb3IgPSBjb2xvcl9uaW5lX3NsaWNlKHRleCwgcGFyYW1fNiwgcGFyYW1fNywgcGFyYW1fOCwgcGFyYW1fOSwgcGFyYW1fMTAsIHBhcmFtXzExKTsKICAgIHZlYzQgY29sb3IgPSB0ZXhDb2xvcjsKICAgIHZlYzMgXzgwID0gY29sb3IueHl6ICsgKG1hc2tDb2xvci55eXkgLSBtYXNrQ29sb3Iuenp6KTsKICAgIGNvbG9yID0gdmVjNChfODAueCwgXzgwLnksIF84MC56LCBjb2xvci53KTsKICAgIGNvbG9yICo9IG1hc2tDb2xvci53OwogICAgZ2xfRnJhZ0RhdGFbMF0gPSBjb2xvcjsKfQoK";
kha_Shaders.colorTransform_fragData0 = "s396:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIGhpZ2hwIG1hdDQgY29sb3JUcmFuc2Zvcm07Cgp2YXJ5aW5nIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpOwogICAgdGV4Y29sb3IgPSBjb2xvclRyYW5zZm9ybSAqIHRleGNvbG9yOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.colorTransform_fragData1 = "s419:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIGhpZ2hwIG1hdDQgY29sb3JUcmFuc2Zvcm07CgppbiBoaWdocCB2ZWMyIHRleENvb3JkOwpvdXQgaGlnaHAgdmVjNCBGcmFnQ29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZSh0ZXgsIHRleENvb3JkKTsKICAgIHRleGNvbG9yID0gY29sb3JUcmFuc2Zvcm0gKiB0ZXhjb2xvcjsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.colorTransform_fragData2 = "s378:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKdW5pZm9ybSBtYXQ0IGNvbG9yVHJhbnNmb3JtOwoKdmFyeWluZyB2ZWMyIHRleENvb3JkOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKTsKICAgIHRleGNvbG9yID0gY29sb3JUcmFuc2Zvcm0gKiB0ZXhjb2xvcjsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdGV4Y29sb3I7Cn0KCg";
kha_Shaders.default_fragData0 = "s491:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpOwogICAgdGV4Y29sb3IgKj0gY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMyA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMzLngsIF8zMy55LCBfMzMueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.default_fragData1 = "s507:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCk7CiAgICB0ZXhjb2xvciAqPSBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMzID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzMueCwgXzMzLnksIF8zMy56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.default_fragData2 = "s464:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKTsKICAgIHRleGNvbG9yICo9IGNvbG9yOwogICAgdmVjMyBfMzMgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMy54LCBfMzMueSwgXzMzLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.default_vertData0 = "s415:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.default_vertData1 = "s380:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.default_vertData2 = "s479:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.outline_fragData0 = "s1564:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIGhpZ2hwIHZlYzIgdGV4U2l6ZTsKdW5pZm9ybSBoaWdocCBmbG9hdCBhbHBoYU11bHRpcGxpZXI7CnVuaWZvcm0gaGlnaHAgdmVjMyBvdXRsaW5lQ29sb3I7Cgp2YXJ5aW5nIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IGJhc2VfY29sb3IgPSB0ZXh0dXJlMkQodGV4LCB0ZXhDb29yZCk7CiAgICBoaWdocCBmbG9hdCBhID0gYmFzZV9jb2xvci53OwogICAgaGlnaHAgZmxvYXQgc3RlcF94ID0gMS4wIC8gdGV4U2l6ZS54OwogICAgaGlnaHAgZmxvYXQgc3RlcF95ID0gMS4wIC8gdGV4U2l6ZS55OwogICAgaGlnaHAgZmxvYXQgb3V0bGluZV9hbHBoYSA9IDAuMDsKICAgIGludCBwYXNzX2NvdW50ID0gMDsKICAgIGZvciAoaW50IHggPSAtNTsgeCA8IDU7IHgrKykKICAgIHsKICAgICAgICBmb3IgKGludCB5ID0gLTU7IHkgPCA1OyB5KyspCiAgICAgICAgewogICAgICAgICAgICBoaWdocCB2ZWMyIG9mZnNldCA9IHZlYzIoZmxvYXQoeCkgKiBzdGVwX3gsIGZsb2F0KHkpICogc3RlcF95KTsKICAgICAgICAgICAgaGlnaHAgdmVjMiBuZWlnaGJvcl91diA9IHRleENvb3JkICsgb2Zmc2V0OwogICAgICAgICAgICBoaWdocCBmbG9hdCBuZWlnaGJvcl9hbHBoYSA9IHRleHR1cmUyRCh0ZXgsIG5laWdoYm9yX3V2KS53OwogICAgICAgICAgICBvdXRsaW5lX2FscGhhICs9IG5laWdoYm9yX2FscGhhOwogICAgICAgICAgICBwYXNzX2NvdW50Kys7CiAgICAgICAgfQogICAgfQogICAgb3V0bGluZV9hbHBoYSAvPSBmbG9hdChwYXNzX2NvdW50KTsKICAgIG91dGxpbmVfYWxwaGEgKj0gKDQuMCAqIGFscGhhTXVsdGlwbGllcik7CiAgICBvdXRsaW5lX2FscGhhID0gbWF4KG1pbihvdXRsaW5lX2FscGhhLCAxLjApLCAwLjApOwogICAgaGlnaHAgdmVjNCBvdXRsaW5lX2NvbG9yX2ZpbmFsID0gdmVjNChvdXRsaW5lQ29sb3IgKiBvdXRsaW5lX2FscGhhLCBvdXRsaW5lX2FscGhhKTsKICAgIGhpZ2hwIHZlYzQgY29sb3IgPSAob3V0bGluZV9jb2xvcl9maW5hbCAqICgxLjAgLSBhKSkgKyBiYXNlX2NvbG9yOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSBjb2xvcjsKfQoK";
kha_Shaders.outline_fragData1 = "s1584:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIGhpZ2hwIHZlYzIgdGV4U2l6ZTsKdW5pZm9ybSBoaWdocCBmbG9hdCBhbHBoYU11bHRpcGxpZXI7CnVuaWZvcm0gaGlnaHAgdmVjMyBvdXRsaW5lQ29sb3I7CgppbiBoaWdocCB2ZWMyIHRleENvb3JkOwpvdXQgaGlnaHAgdmVjNCBGcmFnQ29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IGJhc2VfY29sb3IgPSB0ZXh0dXJlKHRleCwgdGV4Q29vcmQpOwogICAgaGlnaHAgZmxvYXQgYSA9IGJhc2VfY29sb3IudzsKICAgIGhpZ2hwIGZsb2F0IHN0ZXBfeCA9IDEuMCAvIHRleFNpemUueDsKICAgIGhpZ2hwIGZsb2F0IHN0ZXBfeSA9IDEuMCAvIHRleFNpemUueTsKICAgIGhpZ2hwIGZsb2F0IG91dGxpbmVfYWxwaGEgPSAwLjA7CiAgICBpbnQgcGFzc19jb3VudCA9IDA7CiAgICBmb3IgKGludCB4ID0gLTU7IHggPCA1OyB4KyspCiAgICB7CiAgICAgICAgZm9yIChpbnQgeSA9IC01OyB5IDwgNTsgeSsrKQogICAgICAgIHsKICAgICAgICAgICAgaGlnaHAgdmVjMiBvZmZzZXQgPSB2ZWMyKGZsb2F0KHgpICogc3RlcF94LCBmbG9hdCh5KSAqIHN0ZXBfeSk7CiAgICAgICAgICAgIGhpZ2hwIHZlYzIgbmVpZ2hib3JfdXYgPSB0ZXhDb29yZCArIG9mZnNldDsKICAgICAgICAgICAgaGlnaHAgZmxvYXQgbmVpZ2hib3JfYWxwaGEgPSB0ZXh0dXJlKHRleCwgbmVpZ2hib3JfdXYpLnc7CiAgICAgICAgICAgIG91dGxpbmVfYWxwaGEgKz0gbmVpZ2hib3JfYWxwaGE7CiAgICAgICAgICAgIHBhc3NfY291bnQrKzsKICAgICAgICB9CiAgICB9CiAgICBvdXRsaW5lX2FscGhhIC89IGZsb2F0KHBhc3NfY291bnQpOwogICAgb3V0bGluZV9hbHBoYSAqPSAoNC4wICogYWxwaGFNdWx0aXBsaWVyKTsKICAgIG91dGxpbmVfYWxwaGEgPSBtYXgobWluKG91dGxpbmVfYWxwaGEsIDEuMCksIDAuMCk7CiAgICBoaWdocCB2ZWM0IG91dGxpbmVfY29sb3JfZmluYWwgPSB2ZWM0KG91dGxpbmVDb2xvciAqIG91dGxpbmVfYWxwaGEsIG91dGxpbmVfYWxwaGEpOwogICAgaGlnaHAgdmVjNCBjb2xvciA9IChvdXRsaW5lX2NvbG9yX2ZpbmFsICogKDEuMCAtIGEpKSArIGJhc2VfY29sb3I7CiAgICBGcmFnQ29sb3IgPSBjb2xvcjsKfQoK";
kha_Shaders.outline_fragData2 = "s1458:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKdW5pZm9ybSB2ZWMyIHRleFNpemU7CnVuaWZvcm0gZmxvYXQgYWxwaGFNdWx0aXBsaWVyOwp1bmlmb3JtIHZlYzMgb3V0bGluZUNvbG9yOwoKdmFyeWluZyB2ZWMyIHRleENvb3JkOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCBiYXNlX2NvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpOwogICAgZmxvYXQgYSA9IGJhc2VfY29sb3IudzsKICAgIGZsb2F0IHN0ZXBfeCA9IDEuMCAvIHRleFNpemUueDsKICAgIGZsb2F0IHN0ZXBfeSA9IDEuMCAvIHRleFNpemUueTsKICAgIGZsb2F0IG91dGxpbmVfYWxwaGEgPSAwLjA7CiAgICBpbnQgcGFzc19jb3VudCA9IDA7CiAgICBmb3IgKGludCB4ID0gLTU7IHggPCA1OyB4KyspCiAgICB7CiAgICAgICAgZm9yIChpbnQgeSA9IC01OyB5IDwgNTsgeSsrKQogICAgICAgIHsKICAgICAgICAgICAgdmVjMiBvZmZzZXQgPSB2ZWMyKGZsb2F0KHgpICogc3RlcF94LCBmbG9hdCh5KSAqIHN0ZXBfeSk7CiAgICAgICAgICAgIHZlYzIgbmVpZ2hib3JfdXYgPSB0ZXhDb29yZCArIG9mZnNldDsKICAgICAgICAgICAgZmxvYXQgbmVpZ2hib3JfYWxwaGEgPSB0ZXh0dXJlMkQodGV4LCBuZWlnaGJvcl91dikudzsKICAgICAgICAgICAgb3V0bGluZV9hbHBoYSArPSBuZWlnaGJvcl9hbHBoYTsKICAgICAgICAgICAgcGFzc19jb3VudCsrOwogICAgICAgIH0KICAgIH0KICAgIG91dGxpbmVfYWxwaGEgLz0gZmxvYXQocGFzc19jb3VudCk7CiAgICBvdXRsaW5lX2FscGhhICo9ICg0LjAgKiBhbHBoYU11bHRpcGxpZXIpOwogICAgb3V0bGluZV9hbHBoYSA9IG1heChtaW4ob3V0bGluZV9hbHBoYSwgMS4wKSwgMC4wKTsKICAgIHZlYzQgb3V0bGluZV9jb2xvcl9maW5hbCA9IHZlYzQob3V0bGluZUNvbG9yICogb3V0bGluZV9hbHBoYSwgb3V0bGluZV9hbHBoYSk7CiAgICB2ZWM0IGNvbG9yID0gKG91dGxpbmVfY29sb3JfZmluYWwgKiAoMS4wIC0gYSkpICsgYmFzZV9jb2xvcjsKICAgIGdsX0ZyYWdEYXRhWzBdID0gY29sb3I7Cn0KCg";
kha_Shaders.painter_colored_fragData0 = "s198:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IGZyYWdtZW50Q29sb3I7Cn0KCg";
kha_Shaders.painter_colored_fragData1 = "s223:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSBmcmFnbWVudENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_fragData2 = "s192:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gZnJhZ21lbnRDb2xvcjsKfQoK";
kha_Shaders.painter_colored_vertData0 = "s331:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData1 = "s311:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgZnJhZ21lbnRDb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_colored_vertData2 = "s374:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIG1lZGl1bXAgdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_image_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData1 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_image_fragData2 = "s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_image_vertData0 = "s415:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_image_vertData1 = "s380:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_image_vertData2 = "s479:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_text_fragData0 = "s351:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CnZhcnlpbmcgaGlnaHAgdmVjMiB0ZXhDb29yZDsKCnZvaWQgbWFpbigpCnsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChmcmFnbWVudENvbG9yLnh5eiwgdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_fragData1 = "s367:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwppbiBoaWdocCB2ZWM0IGZyYWdtZW50Q29sb3I7CmluIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBGcmFnQ29sb3IgPSB2ZWM0KGZyYWdtZW50Q29sb3IueHl6LCB0ZXh0dXJlKHRleCwgdGV4Q29vcmQpLnggKiBmcmFnbWVudENvbG9yLncpOwp9Cgo";
kha_Shaders.painter_text_fragData2 = "s340:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjNCBmcmFnbWVudENvbG9yOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQoZnJhZ21lbnRDb2xvci54eXosIHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKS54ICogZnJhZ21lbnRDb2xvci53KTsKfQoK";
kha_Shaders.painter_text_vertData0 = "s436:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgZnJhZ21lbnRDb2xvcjsKYXR0cmlidXRlIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_text_vertData1 = "s402:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBmcmFnbWVudENvbG9yOwppbiB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBmcmFnbWVudENvbG9yID0gdmVydGV4Q29sb3I7Cn0KCg";
kha_Shaders.painter_text_vertData2 = "s500:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGZyYWdtZW50Q29sb3I7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzQgdmVydGV4Q29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIGZyYWdtZW50Q29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_video_fragData0 = "s471:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpICogY29sb3I7CiAgICBoaWdocCB2ZWMzIF8zMiA9IHRleGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB0ZXhjb2xvciA9IHZlYzQoXzMyLngsIF8zMi55LCBfMzIueiwgdGV4Y29sb3Iudyk7CiAgICBnbF9GcmFnRGF0YVswXSA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_fragData1 = "s487:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkgKiBjb2xvcjsKICAgIGhpZ2hwIHZlYzMgXzMyID0gdGV4Y29sb3IueHl6ICogY29sb3IudzsKICAgIHRleGNvbG9yID0gdmVjNChfMzIueCwgXzMyLnksIF8zMi56LCB0ZXhjb2xvci53KTsKICAgIEZyYWdDb2xvciA9IHRleGNvbG9yOwp9Cgo";
kha_Shaders.painter_video_fragData2 = "s444:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKSAqIGNvbG9yOwogICAgdmVjMyBfMzIgPSB0ZXhjb2xvci54eXogKiBjb2xvci53OwogICAgdGV4Y29sb3IgPSB2ZWM0KF8zMi54LCBfMzIueSwgXzMyLnosIHRleGNvbG9yLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.painter_video_vertData0 = "s415:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.painter_video_vertData1 = "s380:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKfQoK";
kha_Shaders.painter_video_vertData2 = "s479:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwp9Cgo";
kha_Shaders.sdfFont_fragData0 = "s626:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIGhpZ2hwIGZsb2F0IGFkZGl0aXZlRmFjdG9yOwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzIgZm9udDsKdmFyeWluZyBoaWdocCB2ZWM0IGNvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgZmxvYXQgdGV4VmFsdWUgPSB0ZXh0dXJlMkQodGV4LCB0ZXhDb29yZCkueDsKICAgIGhpZ2hwIGZsb2F0IHZhbHVlID0gKHRleFZhbHVlIC0gZm9udC54KSAvIChmb250LnkgLSBmb250LngpOwogICAgdmFsdWUgPSBtaW4oMS4wLCB2YWx1ZSk7CiAgICB2YWx1ZSAqPSBjb2xvci53OwogICAgdmFsdWUgKj0gYWRkaXRpdmVGYWN0b3I7CiAgICBnbF9GcmFnRGF0YVswXSA9IHZlYzQoY29sb3IueHl6LCB2YWx1ZSk7Cn0KCg";
kha_Shaders.sdfFont_fragData1 = "s635:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIGhpZ2hwIGZsb2F0IGFkZGl0aXZlRmFjdG9yOwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjMiBmb250OwppbiBoaWdocCB2ZWM0IGNvbG9yOwpvdXQgaGlnaHAgdmVjNCBGcmFnQ29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCBmbG9hdCB0ZXhWYWx1ZSA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCkueDsKICAgIGhpZ2hwIGZsb2F0IHZhbHVlID0gKHRleFZhbHVlIC0gZm9udC54KSAvIChmb250LnkgLSBmb250LngpOwogICAgdmFsdWUgPSBtaW4oMS4wLCB2YWx1ZSk7CiAgICB2YWx1ZSAqPSBjb2xvci53OwogICAgdmFsdWUgKj0gYWRkaXRpdmVGYWN0b3I7CiAgICBGcmFnQ29sb3IgPSB2ZWM0KGNvbG9yLnh5eiwgdmFsdWUpOwp9Cgo";
kha_Shaders.sdfFont_fragData2 = "s583:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKdW5pZm9ybSBmbG9hdCBhZGRpdGl2ZUZhY3RvcjsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWMyIGZvbnQ7CnZhcnlpbmcgdmVjNCBjb2xvcjsKCnZvaWQgbWFpbigpCnsKICAgIGZsb2F0IHRleFZhbHVlID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpLng7CiAgICBmbG9hdCB2YWx1ZSA9ICh0ZXhWYWx1ZSAtIGZvbnQueCkgLyAoZm9udC55IC0gZm9udC54KTsKICAgIHZhbHVlID0gbWluKDEuMCwgdmFsdWUpOwogICAgdmFsdWUgKj0gY29sb3IudzsKICAgIHZhbHVlICo9IGFkZGl0aXZlRmFjdG9yOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB2ZWM0KGNvbG9yLnh5eiwgdmFsdWUpOwp9Cgo";
kha_Shaders.sdfFont_vertData0 = "s504:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwp2YXJ5aW5nIHZlYzIgZm9udDsKYXR0cmlidXRlIHZlYzIgZm9udFBhcmFtOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwogICAgZm9udCA9IGZvbnRQYXJhbTsKfQoK";
kha_Shaders.sdfFont_vertData1 = "s455:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKb3V0IHZlYzIgZm9udDsKaW4gdmVjMiBmb250UGFyYW07Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIGNvbG9yID0gdmVydGV4Q29sb3I7CiAgICBmb250ID0gZm9udFBhcmFtOwp9Cgo";
kha_Shaders.sdfFont_vertData2 = "s590:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwp2YXJ5aW5nIG1lZGl1bXAgdmVjMiBmb250OwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWMyIGZvbnRQYXJhbTsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKICAgIGZvbnQgPSBmb250UGFyYW07Cn0KCg";
kha_Shaders.simple_fragData0 = "s286:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCBjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKTsKICAgIGdsX0ZyYWdEYXRhWzBdID0gY29sb3I7Cn0KCg";
kha_Shaders.simple_fragData1 = "s308:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCBjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCk7CiAgICBGcmFnQ29sb3IgPSBjb2xvcjsKfQoK";
kha_Shaders.simple_fragData2 = "s275:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKCnZvaWQgbWFpbigpCnsKICAgIHZlYzQgY29sb3IgPSB0ZXh0dXJlMkQodGV4LCB0ZXhDb29yZCk7CiAgICBnbF9GcmFnRGF0YVswXSA9IGNvbG9yOwp9Cgo";
kha_Shaders.simple_vertData0 = "s318:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247Cn0KCg";
kha_Shaders.simple_vertData1 = "s298:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247Cn0KCg";
kha_Shaders.simple_vertData2 = "s360:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKfQoK";
kha_Shaders.spine_fragData0 = "s806:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKdmFyeWluZyBoaWdocCB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIGhpZ2hwIHZlYzQgY29sb3I7CnZhcnlpbmcgaGlnaHAgdmVjMyBjb2xvcjI7CnZhcnlpbmcgaGlnaHAgZmxvYXQgYWRkaXRpdmU7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleF9jb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKTsKICAgIGhpZ2hwIHZlYzMgbGlnaHRfcG1hID0gY29sb3IueHl6ICogY29sb3IudzsKICAgIGhpZ2hwIHZlYzMgZGFya19wbWEgPSBjb2xvcjI7CiAgICBoaWdocCB2ZWMzIHJnYiA9ICgodmVjMyh0ZXhfY29sb3IudykgLSB0ZXhfY29sb3IueHl6KSAqIGRhcmtfcG1hKSArICh0ZXhfY29sb3IueHl6ICogbGlnaHRfcG1hKTsKICAgIGhpZ2hwIGZsb2F0IGEgPSAodGV4X2NvbG9yLncgKiBjb2xvci53KSAqIGFkZGl0aXZlOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB2ZWM0KHJnYi54LCByZ2IueSwgcmdiLnosIGdsX0ZyYWdEYXRhWzBdLncpOwogICAgZ2xfRnJhZ0RhdGFbMF0udyA9IGE7Cn0KCg";
kha_Shaders.spine_fragData1 = "s795:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4OwoKaW4gaGlnaHAgdmVjMiB0ZXhDb29yZDsKaW4gaGlnaHAgdmVjNCBjb2xvcjsKaW4gaGlnaHAgdmVjMyBjb2xvcjI7CmluIGhpZ2hwIGZsb2F0IGFkZGl0aXZlOwpvdXQgaGlnaHAgdmVjNCBGcmFnQ29sb3I7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleF9jb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCk7CiAgICBoaWdocCB2ZWMzIGxpZ2h0X3BtYSA9IGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICBoaWdocCB2ZWMzIGRhcmtfcG1hID0gY29sb3IyOwogICAgaGlnaHAgdmVjMyByZ2IgPSAoKHZlYzModGV4X2NvbG9yLncpIC0gdGV4X2NvbG9yLnh5eikgKiBkYXJrX3BtYSkgKyAodGV4X2NvbG9yLnh5eiAqIGxpZ2h0X3BtYSk7CiAgICBoaWdocCBmbG9hdCBhID0gKHRleF9jb2xvci53ICogY29sb3IudykgKiBhZGRpdGl2ZTsKICAgIEZyYWdDb2xvciA9IHZlYzQocmdiLngsIHJnYi55LCByZ2IueiwgRnJhZ0NvbG9yLncpOwogICAgRnJhZ0NvbG9yLncgPSBhOwp9Cgo";
kha_Shaders.spine_fragData2 = "s739:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKCnZhcnlpbmcgdmVjMiB0ZXhDb29yZDsKdmFyeWluZyB2ZWM0IGNvbG9yOwp2YXJ5aW5nIHZlYzMgY29sb3IyOwp2YXJ5aW5nIGZsb2F0IGFkZGl0aXZlOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhfY29sb3IgPSB0ZXh0dXJlMkQodGV4LCB0ZXhDb29yZCk7CiAgICB2ZWMzIGxpZ2h0X3BtYSA9IGNvbG9yLnh5eiAqIGNvbG9yLnc7CiAgICB2ZWMzIGRhcmtfcG1hID0gY29sb3IyOwogICAgdmVjMyByZ2IgPSAoKHZlYzModGV4X2NvbG9yLncpIC0gdGV4X2NvbG9yLnh5eikgKiBkYXJrX3BtYSkgKyAodGV4X2NvbG9yLnh5eiAqIGxpZ2h0X3BtYSk7CiAgICBmbG9hdCBhID0gKHRleF9jb2xvci53ICogY29sb3IudykgKiBhZGRpdGl2ZTsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdmVjNChyZ2IueCwgcmdiLnksIHJnYi56LCBnbF9GcmFnRGF0YVswXS53KTsKICAgIGdsX0ZyYWdEYXRhWzBdLncgPSBhOwp9Cgo";
kha_Shaders.spine_vertData0 = "s634:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzQgY29sb3I7CmF0dHJpYnV0ZSB2ZWM0IHZlcnRleENvbG9yOwp2YXJ5aW5nIHZlYzMgY29sb3IyOwphdHRyaWJ1dGUgdmVjMyB2ZXJ0ZXhDb2xvcjI7CnZhcnlpbmcgZmxvYXQgYWRkaXRpdmU7CmF0dHJpYnV0ZSBmbG9hdCBhZGRpdGl2ZUZhY3RvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKICAgIGNvbG9yMiA9IHZlcnRleENvbG9yMjsKICAgIGFkZGl0aXZlID0gYWRkaXRpdmVGYWN0b3I7Cn0KCg";
kha_Shaders.spine_vertData1 = "s570:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjNCBjb2xvcjsKaW4gdmVjNCB2ZXJ0ZXhDb2xvcjsKb3V0IHZlYzMgY29sb3IyOwppbiB2ZWMzIHZlcnRleENvbG9yMjsKb3V0IGZsb2F0IGFkZGl0aXZlOwppbiBmbG9hdCBhZGRpdGl2ZUZhY3RvcjsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgY29sb3IgPSB2ZXJ0ZXhDb2xvcjsKICAgIGNvbG9yMiA9IHZlcnRleENvbG9yMjsKICAgIGFkZGl0aXZlID0gYWRkaXRpdmVGYWN0b3I7Cn0KCg";
kha_Shaders.spine_vertData2 = "s740:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWM0IGNvbG9yOwphdHRyaWJ1dGUgbWVkaXVtcCB2ZWM0IHZlcnRleENvbG9yOwp2YXJ5aW5nIG1lZGl1bXAgdmVjMyBjb2xvcjI7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzMgdmVydGV4Q29sb3IyOwp2YXJ5aW5nIG1lZGl1bXAgZmxvYXQgYWRkaXRpdmU7CmF0dHJpYnV0ZSBtZWRpdW1wIGZsb2F0IGFkZGl0aXZlRmFjdG9yOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICBjb2xvciA9IHZlcnRleENvbG9yOwogICAgY29sb3IyID0gdmVydGV4Q29sb3IyOwogICAgYWRkaXRpdmUgPSBhZGRpdGl2ZUZhY3RvcjsKfQoK";
kha_Shaders.xray_fragData0 = "s912:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIGhpZ2hwIHZlYzIgeFJheVBvc2l0aW9uOwp1bmlmb3JtIGhpZ2hwIGZsb2F0IHhSYXlSYWRpdXM7Cgp2YXJ5aW5nIGhpZ2hwIHZlYzIgdGV4Q29vcmQ7CnZhcnlpbmcgaGlnaHAgdmVjMiB2Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBoaWdocCB2ZWM0IHRleGNvbG9yID0gdGV4dHVyZTJEKHRleCwgdGV4Q29vcmQpOwogICAgaGlnaHAgZmxvYXQgeFJheURpc3RhbmNlID0gZGlzdGFuY2UodkNvb3JkLCB4UmF5UG9zaXRpb24pOwogICAgaGlnaHAgZmxvYXQgeFJheUFscGhhID0gKHNtb290aHN0ZXAoMC44MDAwMDAwMTE5MjA5Mjg5NTUwNzgxMjUgKiB4UmF5UmFkaXVzLCAwLjg5OTk5OTk3NjE1ODE0MjA4OTg0Mzc1ICogeFJheVJhZGl1cywgeFJheURpc3RhbmNlKSAqIDAuNDAwMDAwMDA1OTYwNDY0NDc3NTM5MDYyNSkgKyAoc21vb3Roc3RlcCgwLjg5OTk5OTk3NjE1ODE0MjA4OTg0Mzc1ICogeFJheVJhZGl1cywgMS4wICogeFJheVJhZGl1cywgeFJheURpc3RhbmNlKSAqIDAuNjAwMDAwMDIzODQxODU3OTEwMTU2MjUpOwogICAgdGV4Y29sb3IgKj0geFJheUFscGhhOwogICAgZ2xfRnJhZ0RhdGFbMF0gPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.xray_fragData1 = "s928:I3ZlcnNpb24gMzAwIGVzCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gaGlnaHAgaW50OwoKdW5pZm9ybSBoaWdocCBzYW1wbGVyMkQgdGV4Owp1bmlmb3JtIGhpZ2hwIHZlYzIgeFJheVBvc2l0aW9uOwp1bmlmb3JtIGhpZ2hwIGZsb2F0IHhSYXlSYWRpdXM7CgppbiBoaWdocCB2ZWMyIHRleENvb3JkOwppbiBoaWdocCB2ZWMyIHZDb29yZDsKb3V0IGhpZ2hwIHZlYzQgRnJhZ0NvbG9yOwoKdm9pZCBtYWluKCkKewogICAgaGlnaHAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUodGV4LCB0ZXhDb29yZCk7CiAgICBoaWdocCBmbG9hdCB4UmF5RGlzdGFuY2UgPSBkaXN0YW5jZSh2Q29vcmQsIHhSYXlQb3NpdGlvbik7CiAgICBoaWdocCBmbG9hdCB4UmF5QWxwaGEgPSAoc21vb3Roc3RlcCgwLjgwMDAwMDAxMTkyMDkyODk1NTA3ODEyNSAqIHhSYXlSYWRpdXMsIDAuODk5OTk5OTc2MTU4MTQyMDg5ODQzNzUgKiB4UmF5UmFkaXVzLCB4UmF5RGlzdGFuY2UpICogMC40MDAwMDAwMDU5NjA0NjQ0Nzc1MzkwNjI1KSArIChzbW9vdGhzdGVwKDAuODk5OTk5OTc2MTU4MTQyMDg5ODQzNzUgKiB4UmF5UmFkaXVzLCAxLjAgKiB4UmF5UmFkaXVzLCB4UmF5RGlzdGFuY2UpICogMC42MDAwMDAwMjM4NDE4NTc5MTAxNTYyNSk7CiAgICB0ZXhjb2xvciAqPSB4UmF5QWxwaGE7CiAgICBGcmFnQ29sb3IgPSB0ZXhjb2xvcjsKfQoK";
kha_Shaders.xray_fragData2 = "s862:I3ZlcnNpb24gMTAwCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwpwcmVjaXNpb24gbWVkaXVtcCBpbnQ7Cgp1bmlmb3JtIG1lZGl1bXAgc2FtcGxlcjJEIHRleDsKdW5pZm9ybSB2ZWMyIHhSYXlQb3NpdGlvbjsKdW5pZm9ybSBmbG9hdCB4UmF5UmFkaXVzOwoKdmFyeWluZyB2ZWMyIHRleENvb3JkOwp2YXJ5aW5nIHZlYzIgdkNvb3JkOwoKdm9pZCBtYWluKCkKewogICAgdmVjNCB0ZXhjb2xvciA9IHRleHR1cmUyRCh0ZXgsIHRleENvb3JkKTsKICAgIGZsb2F0IHhSYXlEaXN0YW5jZSA9IGRpc3RhbmNlKHZDb29yZCwgeFJheVBvc2l0aW9uKTsKICAgIGZsb2F0IHhSYXlBbHBoYSA9IChzbW9vdGhzdGVwKDAuODAwMDAwMDExOTIwOTI4OTU1MDc4MTI1ICogeFJheVJhZGl1cywgMC44OTk5OTk5NzYxNTgxNDIwODk4NDM3NSAqIHhSYXlSYWRpdXMsIHhSYXlEaXN0YW5jZSkgKiAwLjQwMDAwMDAwNTk2MDQ2NDQ3NzUzOTA2MjUpICsgKHNtb290aHN0ZXAoMC44OTk5OTk5NzYxNTgxNDIwODk4NDM3NSAqIHhSYXlSYWRpdXMsIDEuMCAqIHhSYXlSYWRpdXMsIHhSYXlEaXN0YW5jZSkgKiAwLjYwMDAwMDAyMzg0MTg1NzkxMDE1NjI1KTsKICAgIHRleGNvbG9yICo9IHhSYXlBbHBoYTsKICAgIGdsX0ZyYWdEYXRhWzBdID0gdGV4Y29sb3I7Cn0KCg";
kha_Shaders.xray_vertData0 = "s388:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmF0dHJpYnV0ZSB2ZWMzIHZlcnRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIHRleFBvc2l0aW9uOwp2YXJ5aW5nIHZlYzIgdkNvb3JkOwoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogdmVjNCh2ZXJ0ZXhQb3NpdGlvbiwgMS4wKTsKICAgIHRleENvb3JkID0gdGV4UG9zaXRpb247CiAgICB2Q29vcmQgPSB2ZXJ0ZXhQb3NpdGlvbi54eTsKfQoK";
kha_Shaders.xray_vertData1 = "s363:I3ZlcnNpb24gMzAwIGVzCgp1bmlmb3JtIG1hdDQgcHJvamVjdGlvbk1hdHJpeDsKCmluIHZlYzMgdmVydGV4UG9zaXRpb247Cm91dCB2ZWMyIHRleENvb3JkOwppbiB2ZWMyIHRleFBvc2l0aW9uOwpvdXQgdmVjMiB2Q29vcmQ7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiB2ZWM0KHZlcnRleFBvc2l0aW9uLCAxLjApOwogICAgdGV4Q29vcmQgPSB0ZXhQb3NpdGlvbjsKICAgIHZDb29yZCA9IHZlcnRleFBvc2l0aW9uLnh5Owp9Cgo";
kha_Shaders.xray_vertData2 = "s442:I3ZlcnNpb24gMTAwCgp1bmlmb3JtIG1lZGl1bXAgbWF0NCBwcm9qZWN0aW9uTWF0cml4OwoKYXR0cmlidXRlIG1lZGl1bXAgdmVjMyB2ZXJ0ZXhQb3NpdGlvbjsKdmFyeWluZyBtZWRpdW1wIHZlYzIgdGV4Q29vcmQ7CmF0dHJpYnV0ZSBtZWRpdW1wIHZlYzIgdGV4UG9zaXRpb247CnZhcnlpbmcgbWVkaXVtcCB2ZWMyIHZDb29yZDsKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gcHJvamVjdGlvbk1hdHJpeCAqIHZlYzQodmVydGV4UG9zaXRpb24sIDEuMCk7CiAgICB0ZXhDb29yZCA9IHRleFBvc2l0aW9uOwogICAgdkNvb3JkID0gdmVydGV4UG9zaXRpb24ueHk7Cn0KCg";
kha_System.renderListeners = [];
kha_System.foregroundListeners = [];
kha_System.resumeListeners = [];
kha_System.pauseListeners = [];
kha_System.backgroundListeners = [];
kha_System.shutdownListeners = [];
kha_System.dropFilesListeners = [];
kha_SystemImpl.mobile = false;
kha_SystemImpl.ios = false;
kha_SystemImpl.mobileAudioPlaying = false;
kha_SystemImpl.chrome = false;
kha_SystemImpl.firefox = false;
kha_SystemImpl.ie = false;
kha_SystemImpl.insideInputEvent = false;
kha_SystemImpl.maxGamepads = 4;
kha_SystemImpl.minimumScroll = 999;
kha_SystemImpl.lastFirstTouchX = 0;
kha_SystemImpl.lastFirstTouchY = 0;
kha_SystemImpl.iosSoundEnabled = false;
kha_SystemImpl.soundEnabled = false;
kha_SystemImpl.iosTouchs = [];
kha_WebGLImage.GL_RGBA16F = 34842;
kha_WebGLImage.GL_RGBA32F = 34836;
kha_WebGLImage.GL_R16F = 33325;
kha_WebGLImage.GL_R32F = 33326;
kha_WebGLImage.GL_RED = 6403;
kha_WebGLImage.GL_DEPTH_COMPONENT24 = 33190;
kha_WebGLImage.GL_DEPTH24_STENCIL8 = 35056;
kha_WebGLImage.GL_DEPTH32F_STENCIL8 = 36013;
kha_Window.windows = [];
kha_Window.resizeCallbacks = [];
kha__$WindowOptions_WindowFeatures_$Impl_$.None = 0;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureResizable = 1;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureMinimizable = 2;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureMaximizable = 4;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureBorderless = 8;
kha__$WindowOptions_WindowFeatures_$Impl_$.FeatureOnTop = 16;
kha_audio2_Audio.disableGcInteractions = false;
kha_audio2_Audio.intBox = new kha_internal_IntBox(0);
kha_audio2_Audio.virtualChannels = [];
kha_audio2_Audio1.channelCount = 32;
kha_audio2_Audio1.lastAllocationCount = 0;
kha_audio2_ogg_tools_Crc32.POLY = 79764919;
kha_audio2_ogg_vorbis_VorbisDecodeState.INVALID_BITS = -1;
kha_audio2_ogg_vorbis_VorbisTools.EOP = -1;
kha_audio2_ogg_vorbis_VorbisTools.M__PI = 3.14159265358979323846264;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_NUMER = 32;
kha_audio2_ogg_vorbis_VorbisTools.DIVTAB_DENOM = 64;
kha_audio2_ogg_vorbis_VorbisTools.INVERSE_DB_TABLE = [1.0649863e-07,1.1341951e-07,1.2079015e-07,1.2863978e-07,1.3699951e-07,1.4590251e-07,1.5538408e-07,1.6548181e-07,1.7623575e-07,1.8768855e-07,1.9988561e-07,2.1287530e-07,2.2670913e-07,2.4144197e-07,2.5713223e-07,2.7384213e-07,2.9163793e-07,3.1059021e-07,3.3077411e-07,3.5226968e-07,3.7516214e-07,3.9954229e-07,4.2550680e-07,4.5315863e-07,4.8260743e-07,5.1396998e-07,5.4737065e-07,5.8294187e-07,6.2082472e-07,6.6116941e-07,7.0413592e-07,7.4989464e-07,7.9862701e-07,8.5052630e-07,9.0579828e-07,9.6466216e-07,1.0273513e-06,1.0941144e-06,1.1652161e-06,1.2409384e-06,1.3215816e-06,1.4074654e-06,1.4989305e-06,1.5963394e-06,1.7000785e-06,1.8105592e-06,1.9282195e-06,2.0535261e-06,2.1869758e-06,2.3290978e-06,2.4804557e-06,2.6416497e-06,2.8133190e-06,2.9961443e-06,3.1908506e-06,3.3982101e-06,3.6190449e-06,3.8542308e-06,4.1047004e-06,4.3714470e-06,4.6555282e-06,4.9580707e-06,5.2802740e-06,5.6234160e-06,5.9888572e-06,6.3780469e-06,6.7925283e-06,7.2339451e-06,7.7040476e-06,8.2047000e-06,8.7378876e-06,9.3057248e-06,9.9104632e-06,1.0554501e-05,1.1240392e-05,1.1970856e-05,1.2748789e-05,1.3577278e-05,1.4459606e-05,1.5399272e-05,1.6400004e-05,1.7465768e-05,1.8600792e-05,1.9809576e-05,2.1096914e-05,2.2467911e-05,2.3928002e-05,2.5482978e-05,2.7139006e-05,2.8902651e-05,3.0780908e-05,3.2781225e-05,3.4911534e-05,3.7180282e-05,3.9596466e-05,4.2169667e-05,4.4910090e-05,4.7828601e-05,5.0936773e-05,5.4246931e-05,5.7772202e-05,6.1526565e-05,6.5524908e-05,6.9783085e-05,7.4317983e-05,7.9147585e-05,8.4291040e-05,8.9768747e-05,9.5602426e-05,0.00010181521,0.00010843174,0.00011547824,0.00012298267,0.00013097477,0.00013948625,0.00014855085,0.00015820453,0.00016848555,0.00017943469,0.00019109536,0.00020351382,0.00021673929,0.00023082423,0.00024582449,0.00026179955,0.00027881276,0.00029693158,0.00031622787,0.00033677814,0.00035866388,0.00038197188,0.00040679456,0.00043323036,0.00046138411,0.00049136745,0.00052329927,0.00055730621,0.00059352311,0.00063209358,0.00067317058,0.00071691700,0.00076350630,0.00081312324,0.00086596457,0.00092223983,0.00098217216,0.0010459992,0.0011139742,0.0011863665,0.0012634633,0.0013455702,0.0014330129,0.0015261382,0.0016253153,0.0017309374,0.0018434235,0.0019632195,0.0020908006,0.0022266726,0.0023713743,0.0025254795,0.0026895994,0.0028643847,0.0030505286,0.0032487691,0.0034598925,0.0036847358,0.0039241906,0.0041792066,0.0044507950,0.0047400328,0.0050480668,0.0053761186,0.0057254891,0.0060975636,0.0064938176,0.0069158225,0.0073652516,0.0078438871,0.0083536271,0.0088964928,0.009474637,0.010090352,0.010746080,0.011444421,0.012188144,0.012980198,0.013823725,0.014722068,0.015678791,0.016697687,0.017782797,0.018938423,0.020169149,0.021479854,0.022875735,0.024362330,0.025945531,0.027631618,0.029427276,0.031339626,0.033376252,0.035545228,0.037855157,0.040315199,0.042935108,0.045725273,0.048696758,0.051861348,0.055231591,0.058820850,0.062643361,0.066714279,0.071049749,0.075666962,0.080584227,0.085821044,0.091398179,0.097337747,0.10366330,0.11039993,0.11757434,0.12521498,0.13335215,0.14201813,0.15124727,0.16107617,0.17154380,0.18269168,0.19456402,0.20720788,0.22067342,0.23501402,0.25028656,0.26655159,0.28387361,0.30232132,0.32196786,0.34289114,0.36517414,0.38890521,0.41417847,0.44109412,0.46975890,0.50028648,0.53279791,0.56742212,0.60429640,0.64356699,0.68538959,0.72993007,0.77736504,0.82788260,0.88168307,0.9389798,1.0];
kha_audio2_ogg_vorbis_data_Codebook.NO_CODE = 255;
kha_audio2_ogg_vorbis_data_Codebook.delay = 0;
kha_audio2_ogg_vorbis_data_Header.PACKET_ID = 1;
kha_audio2_ogg_vorbis_data_Header.PACKET_COMMENT = 3;
kha_audio2_ogg_vorbis_data_Header.PACKET_SETUP = 5;
kha_audio2_ogg_vorbis_data_PageFlag.CONTINUED_PACKET = 1;
kha_audio2_ogg_vorbis_data_PageFlag.FIRST_PAGE = 2;
kha_audio2_ogg_vorbis_data_PageFlag.LAST_PAGE = 4;
kha_audio2_ogg_vorbis_data_Setting.MAX_CHANNELS = 16;
kha_audio2_ogg_vorbis_data_Setting.PUSHDATA_CRC_COUNT = 4;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_LENGTH = 10;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_SIZE = 1024;
kha_audio2_ogg_vorbis_data_Setting.FAST_HUFFMAN_TABLE_MASK = 1023;
kha_graphics2_Graphics.fontGlyphs = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 32;
		while(_g1 < 256) _g.push(_g1++);
	}
	$r = _g;
	return $r;
}(this));
kha_graphics2_truetype_StbTruetype.STBTT_vmove = 1;
kha_graphics2_truetype_StbTruetype.STBTT_vline = 2;
kha_graphics2_truetype_StbTruetype.STBTT_vcurve = 3;
kha_graphics2_truetype_StbTruetype.STBTT_vcubic = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_DONTCARE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_BOLD = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_ITALIC = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_UNDERSCORE = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MACSTYLE_NONE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_UNICODE = 0;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MAC = 1;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_ISO = 2;
kha_graphics2_truetype_StbTruetype.STBTT_PLATFORM_ID_MICROSOFT = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_0 = 0;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_1_1 = 1;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_ISO_10646 = 2;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_BMP = 3;
kha_graphics2_truetype_StbTruetype.STBTT_UNICODE_EID_UNICODE_2_0_FULL = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SYMBOL = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_BMP = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_SHIFTJIS = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MS_EID_UNICODE_FULL = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ROMAN = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_ARABIC = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_JAPANESE = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_HEBREW = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_CHINESE_TRAD = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_GREEK = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_KOREAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_EID_RUSSIAN = 7;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ENGLISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_ITALIAN = 1040;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_CHINESE = 2052;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_JAPANESE = 1041;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_DUTCH = 1043;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_KOREAN = 1042;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_FRENCH = 1036;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_RUSSIAN = 1049;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_GERMAN = 1031;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SPANISH = 1033;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_HEBREW = 1037;
kha_graphics2_truetype_StbTruetype.STBTT_MS_LANG_SWEDISH = 1053;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ENGLISH = 0;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_JAPANESE = 11;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ARABIC = 12;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_KOREAN = 23;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_DUTCH = 4;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_RUSSIAN = 32;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_FRENCH = 1;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SPANISH = 6;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_GERMAN = 2;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_SWEDISH = 5;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_HEBREW = 10;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_SIMPLIFIED = 33;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_ITALIAN = 3;
kha_graphics2_truetype_StbTruetype.STBTT_MAC_LANG_CHINESE_TRAD = 19;
kha_graphics2_truetype_StbTruetype.STBTT_MAX_OVERSAMPLE = 8;
kha_graphics2_truetype_StbTruetype.STBTT_RASTERIZER_VERSION = 2;
kha_graphics4_CubeMap.GL_RGBA16F = 34842;
kha_graphics4_CubeMap.GL_RGBA32F = 34836;
kha_graphics4_CubeMap.GL_R16F = 33325;
kha_graphics4_CubeMap.GL_R32F = 33326;
kha_graphics4_CubeMap.GL_DEPTH_COMPONENT24 = 33190;
kha_graphics4_CubeMap.GL_DEPTH24_STENCIL8 = 35056;
kha_graphics4_CubeMap.GL_DEPTH32F_STENCIL8 = 36013;
kha_graphics4_ImageShaderPainter.bufferSize = 1500;
kha_graphics4_ImageShaderPainter.vertexSize = 9;
kha_graphics4_ColoredShaderPainter.bufferSize = 1000;
kha_graphics4_ColoredShaderPainter.triangleBufferSize = 1000;
kha_graphics4_TextShaderPainter.bufferSize = 1000;
kha_input_Gamepad.__meta__ = { statics : { sendConnectEvent : { input : null}, sendDisconnectEvent : { input : null}}, fields : { sendAxisEvent : { input : null}, sendButtonEvent : { input : null}}};
kha_input_Gamepad.instances = [];
kha_input_Gamepad.connectListeners = [];
kha_input_Gamepad.disconnectListeners = [];
kha_input_Keyboard.__meta__ = { fields : { sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendPressEvent : { input : null}}};
kha_input_Keyboard.keyBehavior = kha_input_BlockInterventions.Default;
kha_input_Mouse.__meta__ = { fields : { sendLeaveEvent : { input : null}, sendDownEvent : { input : null}, sendUpEvent : { input : null}, sendMoveEvent : { input : null}, sendWheelEvent : { input : null}}};
kha_input_Mouse.wheelEventBlockBehavior = kha_input_MouseEventBlockBehavior.Full;
kha_input_Sensor.isInited = false;
kha_input_Sensor.accelerometer = new kha_input_Sensor();
kha_input_Sensor.gyroscope = new kha_input_Sensor();
kha_input_Surface.touchDownEventBlockBehavior = kha_input_TouchDownEventBlockBehavior.Full;
kha_internal_BytesBlob.bufferSize = 2000;
kha_internal_HdrFormat.radiancePattern = new EReg("#\\?RADIANCE","i");
kha_internal_HdrFormat.commentPattern = new EReg("#.*","i");
kha_internal_HdrFormat.gammaPattern = new EReg("GAMMA=","i");
kha_internal_HdrFormat.exposurePattern = new EReg("EXPOSURE=\\s*([0-9]*[.][0-9]*)","i");
kha_internal_HdrFormat.formatPattern = new EReg("FORMAT=32-bit_rle_rgbe","i");
kha_internal_HdrFormat.widthHeightPattern = new EReg("-Y ([0-9]+) \\+X ([0-9]+)","i");
kha_js_Sound.loading = [];
kha_js_graphics4_Graphics.GL_TEXTURE_COMPARE_MODE = 34892;
kha_js_graphics4_Graphics.GL_TEXTURE_COMPARE_FUNC = 34893;
kha_js_graphics4_Graphics.GL_COMPARE_REF_TO_TEXTURE = 34894;
kha_math_FastMatrix3.width = 3;
kha_math_FastMatrix3.height = 3;
kha_math_FastMatrix4.width = 4;
kha_math_FastMatrix4.height = 4;
kha_math_Matrix3.width = 3;
kha_math_Matrix3.height = 3;
kha_math_Matrix4.width = 4;
kha_math_Matrix4.height = 4;
kha_math_Quaternion.AXIS_X = 0;
kha_math_Quaternion.AXIS_Y = 1;
kha_math_Quaternion.AXIS_Z = 2;
kha_netsync_ControllerBuilder.nextId = 0;
kha_netsync_Session.START = 0;
kha_netsync_Session.ENTITY_UPDATES = 1;
kha_netsync_Session.CONTROLLER_UPDATES = 2;
kha_netsync_Session.REMOTE_CALL = 3;
kha_netsync_Session.PING = 4;
kha_netsync_Session.SESSION_ERROR = 5;
kha_netsync_Session.PLAYER_UPDATES = 6;
kha_netsync_Session.RPC_SERVER = 0;
kha_netsync_Session.RPC_ALL = 1;
kha_netsync_SyncBuilder.nextId = 0;
kha_netsync_SyncBuilder.objects = [];
promhx_base_EventLoop.queue = new haxe_ds_List();
spine_Color.WHITE = new spine_Color(1,1,1,1);
spine_Color.RED = new spine_Color(1,0,0,1);
spine_Color.GREEN = new spine_Color(0,1,0,1);
spine_Color.BLUE = new spine_Color(0,0,1,1);
spine_Color.MAGENTA = new spine_Color(1,0,1,1);
spine_MathUtils.PI = Math.PI;
spine_MathUtils.PI2 = Math.PI * 2;
spine_MathUtils.radDeg = 180 / Math.PI;
spine_MathUtils.degRad = Math.PI / 180;
spine_PathConstraint.epsilon = 0.00001;
spine_PathConstraint.NONE = -1;
spine_PathConstraint.BEFORE = -2;
spine_PathConstraint.AFTER = -3;
spine_animation_AnimationState.SUBSEQUENT = 0;
spine_animation_AnimationState.FIRST = 1;
spine_animation_AnimationState.HOLD_SUBSEQUENT = 2;
spine_animation_AnimationState.HOLD_FIRST = 3;
spine_animation_AnimationState.HOLD_MIX = 4;
spine_animation_AnimationState.SETUP = 1;
spine_animation_AnimationState.CURRENT = 2;
spine_animation_AnimationState.emptyAnimation = new spine_animation_Animation("<empty>",[],0);
spine_animation_CurveTimeline.LINEAR = 0.0;
spine_animation_CurveTimeline.STEPPED = 1.0;
spine_animation_CurveTimeline.BEZIER = 2.0;
spine_animation_CurveTimeline.BEZIER_SIZE = 19;
spine_animation_ColorTimeline.ENTRIES = 5;
spine_animation_ColorTimeline.PREV_TIME = -5;
spine_animation_ColorTimeline.PREV_R = -4;
spine_animation_ColorTimeline.PREV_G = -3;
spine_animation_ColorTimeline.PREV_B = -2;
spine_animation_ColorTimeline.PREV_A = -1;
spine_animation_ColorTimeline.R = 1;
spine_animation_ColorTimeline.G = 2;
spine_animation_ColorTimeline.B = 3;
spine_animation_ColorTimeline.A = 4;
spine_animation_IkConstraintTimeline.ENTRIES = 6;
spine_animation_IkConstraintTimeline.PREV_TIME = -6;
spine_animation_IkConstraintTimeline.PREV_MIX = -5;
spine_animation_IkConstraintTimeline.PREV_SOFTNESS = -4;
spine_animation_IkConstraintTimeline.PREV_BEND_DIRECTION = -3;
spine_animation_IkConstraintTimeline.PREV_COMPRESS = -2;
spine_animation_IkConstraintTimeline.PREV_STRETCH = -1;
spine_animation_IkConstraintTimeline.MIX = 1;
spine_animation_IkConstraintTimeline.SOFTNESS = 2;
spine_animation_IkConstraintTimeline.BEND_DIRECTION = 3;
spine_animation_IkConstraintTimeline.COMPRESS = 4;
spine_animation_IkConstraintTimeline.STRETCH = 5;
spine_animation_MixDirection.In = new spine_animation_MixDirection(0);
spine_animation_MixDirection.Out = new spine_animation_MixDirection(1);
spine_animation_PathConstraintMixTimeline.ENTRIES = 3;
spine_animation_PathConstraintMixTimeline.PREV_TIME = -3;
spine_animation_PathConstraintMixTimeline.PREV_ROTATE = -2;
spine_animation_PathConstraintMixTimeline.PREV_TRANSLATE = -1;
spine_animation_PathConstraintMixTimeline.ROTATE = 1;
spine_animation_PathConstraintMixTimeline.TRANSLATE = 2;
spine_animation_PathConstraintPositionTimeline.ENTRIES = 2;
spine_animation_PathConstraintPositionTimeline.PREV_TIME = -2;
spine_animation_PathConstraintPositionTimeline.PREV_VALUE = -1;
spine_animation_PathConstraintPositionTimeline.VALUE = 1;
spine_animation_RotateTimeline.ENTRIES = 2;
spine_animation_RotateTimeline.PREV_TIME = -2;
spine_animation_RotateTimeline.PREV_ROTATION = -1;
spine_animation_RotateTimeline.ROTATION = 1;
spine_animation_TranslateTimeline.ENTRIES = 3;
spine_animation_TranslateTimeline.PREV_TIME = -3;
spine_animation_TranslateTimeline.PREV_X = -2;
spine_animation_TranslateTimeline.PREV_Y = -1;
spine_animation_TranslateTimeline.X = 1;
spine_animation_TranslateTimeline.Y = 2;
spine_animation_TimelineType.rotate = new spine_animation_TimelineType(0);
spine_animation_TimelineType.translate = new spine_animation_TimelineType(1);
spine_animation_TimelineType.scale = new spine_animation_TimelineType(2);
spine_animation_TimelineType.shear = new spine_animation_TimelineType(3);
spine_animation_TimelineType.attachment = new spine_animation_TimelineType(4);
spine_animation_TimelineType.color = new spine_animation_TimelineType(5);
spine_animation_TimelineType.deform = new spine_animation_TimelineType(6);
spine_animation_TimelineType.event = new spine_animation_TimelineType(7);
spine_animation_TimelineType.drawOrder = new spine_animation_TimelineType(8);
spine_animation_TimelineType.ikConstraint = new spine_animation_TimelineType(9);
spine_animation_TimelineType.transformConstraint = new spine_animation_TimelineType(10);
spine_animation_TimelineType.pathConstraintPosition = new spine_animation_TimelineType(11);
spine_animation_TimelineType.pathConstraintSpacing = new spine_animation_TimelineType(12);
spine_animation_TimelineType.pathConstraintMix = new spine_animation_TimelineType(13);
spine_animation_TimelineType.twoColor = new spine_animation_TimelineType(14);
spine_animation_TransformConstraintTimeline.ENTRIES = 5;
spine_animation_TransformConstraintTimeline.PREV_TIME = -5;
spine_animation_TransformConstraintTimeline.PREV_ROTATE = -4;
spine_animation_TransformConstraintTimeline.PREV_TRANSLATE = -3;
spine_animation_TransformConstraintTimeline.PREV_SCALE = -2;
spine_animation_TransformConstraintTimeline.PREV_SHEAR = -1;
spine_animation_TransformConstraintTimeline.ROTATE = 1;
spine_animation_TransformConstraintTimeline.TRANSLATE = 2;
spine_animation_TransformConstraintTimeline.SCALE = 3;
spine_animation_TransformConstraintTimeline.SHEAR = 4;
spine_animation_TwoColorTimeline.ENTRIES = 8;
spine_animation_TwoColorTimeline.PREV_TIME = -8;
spine_animation_TwoColorTimeline.PREV_R = -7;
spine_animation_TwoColorTimeline.PREV_G = -6;
spine_animation_TwoColorTimeline.PREV_B = -5;
spine_animation_TwoColorTimeline.PREV_A = -4;
spine_animation_TwoColorTimeline.PREV_R2 = -3;
spine_animation_TwoColorTimeline.PREV_G2 = -2;
spine_animation_TwoColorTimeline.PREV_B2 = -1;
spine_animation_TwoColorTimeline.R = 1;
spine_animation_TwoColorTimeline.G = 2;
spine_animation_TwoColorTimeline.B = 3;
spine_animation_TwoColorTimeline.A = 4;
spine_animation_TwoColorTimeline.R2 = 5;
spine_animation_TwoColorTimeline.G2 = 6;
spine_animation_TwoColorTimeline.B2 = 7;
spine_atlas_TextureWrap.mirroredRepeat = new spine_atlas_TextureWrap(0,"mirroredRepeat");
spine_atlas_TextureWrap.clampToEdge = new spine_atlas_TextureWrap(1,"clampToEdge");
spine_atlas_TextureWrap.repeat = new spine_atlas_TextureWrap(2,"repeat");
spine_attachments_VertexAttachment.nextID = 0;
ui2viewer_module_MainModule.__meta__ = { fields : { nodeSystem : { inject : null}, renderSystem : { inject : null}, moduleProvider : { inject : null}, jetGuiSystem : { inject : null}}};
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=kha.js.map